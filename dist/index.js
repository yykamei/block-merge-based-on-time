/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 7351:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.issue = exports.issueCommand = void 0;
const os = __importStar(__nccwpck_require__(2037));
const utils_1 = __nccwpck_require__(5278);
/**
 * Commands
 *
 * Command Format:
 *   ::name key=value,key=value::message
 *
 * Examples:
 *   ::warning::This is the message
 *   ::set-env name=MY_VAR::some value
 */
function issueCommand(command, properties, message) {
    const cmd = new Command(command, properties, message);
    process.stdout.write(cmd.toString() + os.EOL);
}
exports.issueCommand = issueCommand;
function issue(name, message = '') {
    issueCommand(name, {}, message);
}
exports.issue = issue;
const CMD_STRING = '::';
class Command {
    constructor(command, properties, message) {
        if (!command) {
            command = 'missing.command';
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
    }
    toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
            cmdStr += ' ';
            let first = true;
            for (const key in this.properties) {
                if (this.properties.hasOwnProperty(key)) {
                    const val = this.properties[key];
                    if (val) {
                        if (first) {
                            first = false;
                        }
                        else {
                            cmdStr += ',';
                        }
                        cmdStr += `${key}=${escapeProperty(val)}`;
                    }
                }
            }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
    }
}
function escapeData(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A');
}
function escapeProperty(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A')
        .replace(/:/g, '%3A')
        .replace(/,/g, '%2C');
}
//# sourceMappingURL=command.js.map

/***/ }),

/***/ 2186:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
const command_1 = __nccwpck_require__(7351);
const file_command_1 = __nccwpck_require__(717);
const utils_1 = __nccwpck_require__(5278);
const os = __importStar(__nccwpck_require__(2037));
const path = __importStar(__nccwpck_require__(1017));
const oidc_utils_1 = __nccwpck_require__(8041);
/**
 * The code to exit an action
 */
var ExitCode;
(function (ExitCode) {
    /**
     * A code indicating that the action was successful
     */
    ExitCode[ExitCode["Success"] = 0] = "Success";
    /**
     * A code indicating that the action was a failure
     */
    ExitCode[ExitCode["Failure"] = 1] = "Failure";
})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));
//-----------------------------------------------------------------------
// Variables
//-----------------------------------------------------------------------
/**
 * Sets env variable for this action and future actions in the job
 * @param name the name of the variable to set
 * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function exportVariable(name, val) {
    const convertedVal = utils_1.toCommandValue(val);
    process.env[name] = convertedVal;
    const filePath = process.env['GITHUB_ENV'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('ENV', file_command_1.prepareKeyValueMessage(name, val));
    }
    command_1.issueCommand('set-env', { name }, convertedVal);
}
exports.exportVariable = exportVariable;
/**
 * Registers a secret which will get masked from logs
 * @param secret value of the secret
 */
function setSecret(secret) {
    command_1.issueCommand('add-mask', {}, secret);
}
exports.setSecret = setSecret;
/**
 * Prepends inputPath to the PATH (for this action and future actions)
 * @param inputPath
 */
function addPath(inputPath) {
    const filePath = process.env['GITHUB_PATH'] || '';
    if (filePath) {
        file_command_1.issueFileCommand('PATH', inputPath);
    }
    else {
        command_1.issueCommand('add-path', {}, inputPath);
    }
    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;
}
exports.addPath = addPath;
/**
 * Gets the value of an input.
 * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
 * Returns an empty string if the value is not defined.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string
 */
function getInput(name, options) {
    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';
    if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
    }
    if (options && options.trimWhitespace === false) {
        return val;
    }
    return val.trim();
}
exports.getInput = getInput;
/**
 * Gets the values of an multiline input.  Each value is also trimmed.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string[]
 *
 */
function getMultilineInput(name, options) {
    const inputs = getInput(name, options)
        .split('\n')
        .filter(x => x !== '');
    if (options && options.trimWhitespace === false) {
        return inputs;
    }
    return inputs.map(input => input.trim());
}
exports.getMultilineInput = getMultilineInput;
/**
 * Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
 * Support boolean input list: `true | True | TRUE | false | False | FALSE` .
 * The return value is also in boolean type.
 * ref: https://yaml.org/spec/1.2/spec.html#id2804923
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   boolean
 */
function getBooleanInput(name, options) {
    const trueValue = ['true', 'True', 'TRUE'];
    const falseValue = ['false', 'False', 'FALSE'];
    const val = getInput(name, options);
    if (trueValue.includes(val))
        return true;
    if (falseValue.includes(val))
        return false;
    throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}\n` +
        `Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
}
exports.getBooleanInput = getBooleanInput;
/**
 * Sets the value of an output.
 *
 * @param     name     name of the output to set
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function setOutput(name, value) {
    const filePath = process.env['GITHUB_OUTPUT'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('OUTPUT', file_command_1.prepareKeyValueMessage(name, value));
    }
    process.stdout.write(os.EOL);
    command_1.issueCommand('set-output', { name }, utils_1.toCommandValue(value));
}
exports.setOutput = setOutput;
/**
 * Enables or disables the echoing of commands into stdout for the rest of the step.
 * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
 *
 */
function setCommandEcho(enabled) {
    command_1.issue('echo', enabled ? 'on' : 'off');
}
exports.setCommandEcho = setCommandEcho;
//-----------------------------------------------------------------------
// Results
//-----------------------------------------------------------------------
/**
 * Sets the action status to failed.
 * When the action exits it will be with an exit code of 1
 * @param message add error issue message
 */
function setFailed(message) {
    process.exitCode = ExitCode.Failure;
    error(message);
}
exports.setFailed = setFailed;
//-----------------------------------------------------------------------
// Logging Commands
//-----------------------------------------------------------------------
/**
 * Gets whether Actions Step Debug is on or not
 */
function isDebug() {
    return process.env['RUNNER_DEBUG'] === '1';
}
exports.isDebug = isDebug;
/**
 * Writes debug message to user log
 * @param message debug message
 */
function debug(message) {
    command_1.issueCommand('debug', {}, message);
}
exports.debug = debug;
/**
 * Adds an error issue
 * @param message error issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function error(message, properties = {}) {
    command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.error = error;
/**
 * Adds a warning issue
 * @param message warning issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function warning(message, properties = {}) {
    command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.warning = warning;
/**
 * Adds a notice issue
 * @param message notice issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function notice(message, properties = {}) {
    command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.notice = notice;
/**
 * Writes info to log with console.log.
 * @param message info message
 */
function info(message) {
    process.stdout.write(message + os.EOL);
}
exports.info = info;
/**
 * Begin an output group.
 *
 * Output until the next `groupEnd` will be foldable in this group
 *
 * @param name The name of the output group
 */
function startGroup(name) {
    command_1.issue('group', name);
}
exports.startGroup = startGroup;
/**
 * End an output group.
 */
function endGroup() {
    command_1.issue('endgroup');
}
exports.endGroup = endGroup;
/**
 * Wrap an asynchronous function call in a group.
 *
 * Returns the same type as the function itself.
 *
 * @param name The name of the group
 * @param fn The function to wrap in the group
 */
function group(name, fn) {
    return __awaiter(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
            result = yield fn();
        }
        finally {
            endGroup();
        }
        return result;
    });
}
exports.group = group;
//-----------------------------------------------------------------------
// Wrapper action state
//-----------------------------------------------------------------------
/**
 * Saves state for current action, the state can only be retrieved by this action's post job execution.
 *
 * @param     name     name of the state to store
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function saveState(name, value) {
    const filePath = process.env['GITHUB_STATE'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('STATE', file_command_1.prepareKeyValueMessage(name, value));
    }
    command_1.issueCommand('save-state', { name }, utils_1.toCommandValue(value));
}
exports.saveState = saveState;
/**
 * Gets the value of an state set by this action's main execution.
 *
 * @param     name     name of the state to get
 * @returns   string
 */
function getState(name) {
    return process.env[`STATE_${name}`] || '';
}
exports.getState = getState;
function getIDToken(aud) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
    });
}
exports.getIDToken = getIDToken;
/**
 * Summary exports
 */
var summary_1 = __nccwpck_require__(1327);
Object.defineProperty(exports, "summary", ({ enumerable: true, get: function () { return summary_1.summary; } }));
/**
 * @deprecated use core.summary
 */
var summary_2 = __nccwpck_require__(1327);
Object.defineProperty(exports, "markdownSummary", ({ enumerable: true, get: function () { return summary_2.markdownSummary; } }));
/**
 * Path exports
 */
var path_utils_1 = __nccwpck_require__(2981);
Object.defineProperty(exports, "toPosixPath", ({ enumerable: true, get: function () { return path_utils_1.toPosixPath; } }));
Object.defineProperty(exports, "toWin32Path", ({ enumerable: true, get: function () { return path_utils_1.toWin32Path; } }));
Object.defineProperty(exports, "toPlatformPath", ({ enumerable: true, get: function () { return path_utils_1.toPlatformPath; } }));
//# sourceMappingURL=core.js.map

/***/ }),

/***/ 717:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// For internal use, subject to change.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
const fs = __importStar(__nccwpck_require__(7147));
const os = __importStar(__nccwpck_require__(2037));
const uuid_1 = __nccwpck_require__(5840);
const utils_1 = __nccwpck_require__(5278);
function issueFileCommand(command, message) {
    const filePath = process.env[`GITHUB_${command}`];
    if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
    }
    if (!fs.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
    }
    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {
        encoding: 'utf8'
    });
}
exports.issueFileCommand = issueFileCommand;
function prepareKeyValueMessage(key, value) {
    const delimiter = `ghadelimiter_${uuid_1.v4()}`;
    const convertedValue = utils_1.toCommandValue(value);
    // These should realistically never happen, but just in case someone finds a
    // way to exploit uuid generation let's not allow keys or values that contain
    // the delimiter.
    if (key.includes(delimiter)) {
        throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
    }
    if (convertedValue.includes(delimiter)) {
        throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
    }
    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;
}
exports.prepareKeyValueMessage = prepareKeyValueMessage;
//# sourceMappingURL=file-command.js.map

/***/ }),

/***/ 8041:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OidcClient = void 0;
const http_client_1 = __nccwpck_require__(6255);
const auth_1 = __nccwpck_require__(5526);
const core_1 = __nccwpck_require__(2186);
class OidcClient {
    static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
            allowRetries: allowRetry,
            maxRetries: maxRetry
        };
        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
    }
    static getRequestToken() {
        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];
        if (!token) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');
        }
        return token;
    }
    static getIDTokenUrl() {
        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];
        if (!runtimeUrl) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');
        }
        return runtimeUrl;
    }
    static getCall(id_token_url) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const httpclient = OidcClient.createHttpClient();
            const res = yield httpclient
                .getJson(id_token_url)
                .catch(error => {
                throw new Error(`Failed to get ID Token. \n 
        Error Code : ${error.statusCode}\n 
        Error Message: ${error.message}`);
            });
            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
            if (!id_token) {
                throw new Error('Response json body do not have ID Token field');
            }
            return id_token;
        });
    }
    static getIDToken(audience) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // New ID Token is requested from action service
                let id_token_url = OidcClient.getIDTokenUrl();
                if (audience) {
                    const encodedAudience = encodeURIComponent(audience);
                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;
                }
                core_1.debug(`ID token url is ${id_token_url}`);
                const id_token = yield OidcClient.getCall(id_token_url);
                core_1.setSecret(id_token);
                return id_token;
            }
            catch (error) {
                throw new Error(`Error message: ${error.message}`);
            }
        });
    }
}
exports.OidcClient = OidcClient;
//# sourceMappingURL=oidc-utils.js.map

/***/ }),

/***/ 2981:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
const path = __importStar(__nccwpck_require__(1017));
/**
 * toPosixPath converts the given path to the posix form. On Windows, \\ will be
 * replaced with /.
 *
 * @param pth. Path to transform.
 * @return string Posix path.
 */
function toPosixPath(pth) {
    return pth.replace(/[\\]/g, '/');
}
exports.toPosixPath = toPosixPath;
/**
 * toWin32Path converts the given path to the win32 form. On Linux, / will be
 * replaced with \\.
 *
 * @param pth. Path to transform.
 * @return string Win32 path.
 */
function toWin32Path(pth) {
    return pth.replace(/[/]/g, '\\');
}
exports.toWin32Path = toWin32Path;
/**
 * toPlatformPath converts the given path to a platform-specific path. It does
 * this by replacing instances of / and \ with the platform-specific path
 * separator.
 *
 * @param pth The path to platformize.
 * @return string The platform-specific path.
 */
function toPlatformPath(pth) {
    return pth.replace(/[/\\]/g, path.sep);
}
exports.toPlatformPath = toPlatformPath;
//# sourceMappingURL=path-utils.js.map

/***/ }),

/***/ 1327:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
const os_1 = __nccwpck_require__(2037);
const fs_1 = __nccwpck_require__(7147);
const { access, appendFile, writeFile } = fs_1.promises;
exports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';
exports.SUMMARY_DOCS_URL = 'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';
class Summary {
    constructor() {
        this._buffer = '';
    }
    /**
     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
     * Also checks r/w permissions.
     *
     * @returns step summary file path
     */
    filePath() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._filePath) {
                return this._filePath;
            }
            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
            if (!pathFromEnv) {
                throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
            }
            try {
                yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
            }
            catch (_a) {
                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
            }
            this._filePath = pathFromEnv;
            return this._filePath;
        });
    }
    /**
     * Wraps content in an HTML tag, adding any HTML attributes
     *
     * @param {string} tag HTML tag to wrap
     * @param {string | null} content content within the tag
     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
     *
     * @returns {string} content wrapped in HTML element
     */
    wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs)
            .map(([key, value]) => ` ${key}="${value}"`)
            .join('');
        if (!content) {
            return `<${tag}${htmlAttrs}>`;
        }
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
    }
    /**
     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
     *
     * @param {SummaryWriteOptions} [options] (optional) options for write operation
     *
     * @returns {Promise<Summary>} summary instance
     */
    write(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
            const filePath = yield this.filePath();
            const writeFunc = overwrite ? writeFile : appendFile;
            yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });
            return this.emptyBuffer();
        });
    }
    /**
     * Clears the summary buffer and wipes the summary file
     *
     * @returns {Summary} summary instance
     */
    clear() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.emptyBuffer().write({ overwrite: true });
        });
    }
    /**
     * Returns the current summary buffer as a string
     *
     * @returns {string} string of summary buffer
     */
    stringify() {
        return this._buffer;
    }
    /**
     * If the summary buffer is empty
     *
     * @returns {boolen} true if the buffer is empty
     */
    isEmptyBuffer() {
        return this._buffer.length === 0;
    }
    /**
     * Resets the summary buffer without writing to summary file
     *
     * @returns {Summary} summary instance
     */
    emptyBuffer() {
        this._buffer = '';
        return this;
    }
    /**
     * Adds raw text to the summary buffer
     *
     * @param {string} text content to add
     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
     *
     * @returns {Summary} summary instance
     */
    addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
    }
    /**
     * Adds the operating system-specific end-of-line marker to the buffer
     *
     * @returns {Summary} summary instance
     */
    addEOL() {
        return this.addRaw(os_1.EOL);
    }
    /**
     * Adds an HTML codeblock to the summary buffer
     *
     * @param {string} code content to render within fenced code block
     * @param {string} lang (optional) language to syntax highlight code
     *
     * @returns {Summary} summary instance
     */
    addCodeBlock(code, lang) {
        const attrs = Object.assign({}, (lang && { lang }));
        const element = this.wrap('pre', this.wrap('code', code), attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML list to the summary buffer
     *
     * @param {string[]} items list of items to render
     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
     *
     * @returns {Summary} summary instance
     */
    addList(items, ordered = false) {
        const tag = ordered ? 'ol' : 'ul';
        const listItems = items.map(item => this.wrap('li', item)).join('');
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML table to the summary buffer
     *
     * @param {SummaryTableCell[]} rows table rows
     *
     * @returns {Summary} summary instance
     */
    addTable(rows) {
        const tableBody = rows
            .map(row => {
            const cells = row
                .map(cell => {
                if (typeof cell === 'string') {
                    return this.wrap('td', cell);
                }
                const { header, data, colspan, rowspan } = cell;
                const tag = header ? 'th' : 'td';
                const attrs = Object.assign(Object.assign({}, (colspan && { colspan })), (rowspan && { rowspan }));
                return this.wrap(tag, data, attrs);
            })
                .join('');
            return this.wrap('tr', cells);
        })
            .join('');
        const element = this.wrap('table', tableBody);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds a collapsable HTML details element to the summary buffer
     *
     * @param {string} label text for the closed state
     * @param {string} content collapsable content
     *
     * @returns {Summary} summary instance
     */
    addDetails(label, content) {
        const element = this.wrap('details', this.wrap('summary', label) + content);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML image tag to the summary buffer
     *
     * @param {string} src path to the image you to embed
     * @param {string} alt text description of the image
     * @param {SummaryImageOptions} options (optional) addition image attributes
     *
     * @returns {Summary} summary instance
     */
    addImage(src, alt, options) {
        const { width, height } = options || {};
        const attrs = Object.assign(Object.assign({}, (width && { width })), (height && { height }));
        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML section heading element
     *
     * @param {string} text heading text
     * @param {number | string} [level=1] (optional) the heading level, default: 1
     *
     * @returns {Summary} summary instance
     */
    addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)
            ? tag
            : 'h1';
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML thematic break (<hr>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addSeparator() {
        const element = this.wrap('hr', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML line break (<br>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addBreak() {
        const element = this.wrap('br', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML blockquote to the summary buffer
     *
     * @param {string} text quote text
     * @param {string} cite (optional) citation url
     *
     * @returns {Summary} summary instance
     */
    addQuote(text, cite) {
        const attrs = Object.assign({}, (cite && { cite }));
        const element = this.wrap('blockquote', text, attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML anchor tag to the summary buffer
     *
     * @param {string} text link text/content
     * @param {string} href hyperlink
     *
     * @returns {Summary} summary instance
     */
    addLink(text, href) {
        const element = this.wrap('a', text, { href });
        return this.addRaw(element).addEOL();
    }
}
const _summary = new Summary();
/**
 * @deprecated use `core.summary`
 */
exports.markdownSummary = _summary;
exports.summary = _summary;
//# sourceMappingURL=summary.js.map

/***/ }),

/***/ 5278:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toCommandProperties = exports.toCommandValue = void 0;
/**
 * Sanitizes an input into a string so it can be passed into issueCommand safely
 * @param input input to sanitize into a string
 */
function toCommandValue(input) {
    if (input === null || input === undefined) {
        return '';
    }
    else if (typeof input === 'string' || input instanceof String) {
        return input;
    }
    return JSON.stringify(input);
}
exports.toCommandValue = toCommandValue;
/**
 *
 * @param annotationProperties
 * @returns The command properties to send with the actual annotation command
 * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646
 */
function toCommandProperties(annotationProperties) {
    if (!Object.keys(annotationProperties).length) {
        return {};
    }
    return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
    };
}
exports.toCommandProperties = toCommandProperties;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 4087:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Context = void 0;
const fs_1 = __nccwpck_require__(7147);
const os_1 = __nccwpck_require__(2037);
class Context {
    /**
     * Hydrate the context from the environment
     */
    constructor() {
        var _a, _b, _c;
        this.payload = {};
        if (process.env.GITHUB_EVENT_PATH) {
            if ((0, fs_1.existsSync)(process.env.GITHUB_EVENT_PATH)) {
                this.payload = JSON.parse((0, fs_1.readFileSync)(process.env.GITHUB_EVENT_PATH, { encoding: 'utf8' }));
            }
            else {
                const path = process.env.GITHUB_EVENT_PATH;
                process.stdout.write(`GITHUB_EVENT_PATH ${path} does not exist${os_1.EOL}`);
            }
        }
        this.eventName = process.env.GITHUB_EVENT_NAME;
        this.sha = process.env.GITHUB_SHA;
        this.ref = process.env.GITHUB_REF;
        this.workflow = process.env.GITHUB_WORKFLOW;
        this.action = process.env.GITHUB_ACTION;
        this.actor = process.env.GITHUB_ACTOR;
        this.job = process.env.GITHUB_JOB;
        this.runNumber = parseInt(process.env.GITHUB_RUN_NUMBER, 10);
        this.runId = parseInt(process.env.GITHUB_RUN_ID, 10);
        this.apiUrl = (_a = process.env.GITHUB_API_URL) !== null && _a !== void 0 ? _a : `https://api.github.com`;
        this.serverUrl = (_b = process.env.GITHUB_SERVER_URL) !== null && _b !== void 0 ? _b : `https://github.com`;
        this.graphqlUrl =
            (_c = process.env.GITHUB_GRAPHQL_URL) !== null && _c !== void 0 ? _c : `https://api.github.com/graphql`;
    }
    get issue() {
        const payload = this.payload;
        return Object.assign(Object.assign({}, this.repo), { number: (payload.issue || payload.pull_request || payload).number });
    }
    get repo() {
        if (process.env.GITHUB_REPOSITORY) {
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            return { owner, repo };
        }
        if (this.payload.repository) {
            return {
                owner: this.payload.repository.owner.login,
                repo: this.payload.repository.name
            };
        }
        throw new Error("context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'");
    }
}
exports.Context = Context;
//# sourceMappingURL=context.js.map

/***/ }),

/***/ 5438:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getOctokit = exports.context = void 0;
const Context = __importStar(__nccwpck_require__(4087));
const utils_1 = __nccwpck_require__(3030);
exports.context = new Context.Context();
/**
 * Returns a hydrated octokit ready to use for GitHub Actions
 *
 * @param     token    the repo PAT or GITHUB_TOKEN
 * @param     options  other options to set
 */
function getOctokit(token, options, ...additionalPlugins) {
    const GitHubWithPlugins = utils_1.GitHub.plugin(...additionalPlugins);
    return new GitHubWithPlugins((0, utils_1.getOctokitOptions)(token, options));
}
exports.getOctokit = getOctokit;
//# sourceMappingURL=github.js.map

/***/ }),

/***/ 7914:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getApiBaseUrl = exports.getProxyFetch = exports.getProxyAgentDispatcher = exports.getProxyAgent = exports.getAuthString = void 0;
const httpClient = __importStar(__nccwpck_require__(6255));
const undici_1 = __nccwpck_require__(1773);
function getAuthString(token, options) {
    if (!token && !options.auth) {
        throw new Error('Parameter token or opts.auth is required');
    }
    else if (token && options.auth) {
        throw new Error('Parameters token and opts.auth may not both be specified');
    }
    return typeof options.auth === 'string' ? options.auth : `token ${token}`;
}
exports.getAuthString = getAuthString;
function getProxyAgent(destinationUrl) {
    const hc = new httpClient.HttpClient();
    return hc.getAgent(destinationUrl);
}
exports.getProxyAgent = getProxyAgent;
function getProxyAgentDispatcher(destinationUrl) {
    const hc = new httpClient.HttpClient();
    return hc.getAgentDispatcher(destinationUrl);
}
exports.getProxyAgentDispatcher = getProxyAgentDispatcher;
function getProxyFetch(destinationUrl) {
    const httpDispatcher = getProxyAgentDispatcher(destinationUrl);
    const proxyFetch = (url, opts) => __awaiter(this, void 0, void 0, function* () {
        return (0, undici_1.fetch)(url, Object.assign(Object.assign({}, opts), { dispatcher: httpDispatcher }));
    });
    return proxyFetch;
}
exports.getProxyFetch = getProxyFetch;
function getApiBaseUrl() {
    return process.env['GITHUB_API_URL'] || 'https://api.github.com';
}
exports.getApiBaseUrl = getApiBaseUrl;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 3030:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getOctokitOptions = exports.GitHub = exports.defaults = exports.context = void 0;
const Context = __importStar(__nccwpck_require__(4087));
const Utils = __importStar(__nccwpck_require__(7914));
// octokit + plugins
const core_1 = __nccwpck_require__(6762);
const plugin_rest_endpoint_methods_1 = __nccwpck_require__(3044);
const plugin_paginate_rest_1 = __nccwpck_require__(4193);
exports.context = new Context.Context();
const baseUrl = Utils.getApiBaseUrl();
exports.defaults = {
    baseUrl,
    request: {
        agent: Utils.getProxyAgent(baseUrl),
        fetch: Utils.getProxyFetch(baseUrl)
    }
};
exports.GitHub = core_1.Octokit.plugin(plugin_rest_endpoint_methods_1.restEndpointMethods, plugin_paginate_rest_1.paginateRest).defaults(exports.defaults);
/**
 * Convience function to correctly format Octokit Options to pass into the constructor.
 *
 * @param     token    the repo PAT or GITHUB_TOKEN
 * @param     options  other options to set
 */
function getOctokitOptions(token, options) {
    const opts = Object.assign({}, options || {}); // Shallow clone - don't mutate the object provided by the caller
    // Auth
    const auth = Utils.getAuthString(token, opts);
    if (auth) {
        opts.auth = auth;
    }
    return opts;
}
exports.getOctokitOptions = getOctokitOptions;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 5526:
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
class BasicCredentialHandler {
    constructor(username, password) {
        this.username = username;
        this.password = password;
    }
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BasicCredentialHandler = BasicCredentialHandler;
class BearerCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Bearer ${this.token}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BearerCredentialHandler = BearerCredentialHandler;
class PersonalAccessTokenCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
//# sourceMappingURL=auth.js.map

/***/ }),

/***/ 6255:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

/* eslint-disable @typescript-eslint/no-explicit-any */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
const http = __importStar(__nccwpck_require__(3685));
const https = __importStar(__nccwpck_require__(5687));
const pm = __importStar(__nccwpck_require__(9835));
const tunnel = __importStar(__nccwpck_require__(4294));
const undici_1 = __nccwpck_require__(1773);
var HttpCodes;
(function (HttpCodes) {
    HttpCodes[HttpCodes["OK"] = 200] = "OK";
    HttpCodes[HttpCodes["MultipleChoices"] = 300] = "MultipleChoices";
    HttpCodes[HttpCodes["MovedPermanently"] = 301] = "MovedPermanently";
    HttpCodes[HttpCodes["ResourceMoved"] = 302] = "ResourceMoved";
    HttpCodes[HttpCodes["SeeOther"] = 303] = "SeeOther";
    HttpCodes[HttpCodes["NotModified"] = 304] = "NotModified";
    HttpCodes[HttpCodes["UseProxy"] = 305] = "UseProxy";
    HttpCodes[HttpCodes["SwitchProxy"] = 306] = "SwitchProxy";
    HttpCodes[HttpCodes["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    HttpCodes[HttpCodes["PermanentRedirect"] = 308] = "PermanentRedirect";
    HttpCodes[HttpCodes["BadRequest"] = 400] = "BadRequest";
    HttpCodes[HttpCodes["Unauthorized"] = 401] = "Unauthorized";
    HttpCodes[HttpCodes["PaymentRequired"] = 402] = "PaymentRequired";
    HttpCodes[HttpCodes["Forbidden"] = 403] = "Forbidden";
    HttpCodes[HttpCodes["NotFound"] = 404] = "NotFound";
    HttpCodes[HttpCodes["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    HttpCodes[HttpCodes["NotAcceptable"] = 406] = "NotAcceptable";
    HttpCodes[HttpCodes["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
    HttpCodes[HttpCodes["RequestTimeout"] = 408] = "RequestTimeout";
    HttpCodes[HttpCodes["Conflict"] = 409] = "Conflict";
    HttpCodes[HttpCodes["Gone"] = 410] = "Gone";
    HttpCodes[HttpCodes["TooManyRequests"] = 429] = "TooManyRequests";
    HttpCodes[HttpCodes["InternalServerError"] = 500] = "InternalServerError";
    HttpCodes[HttpCodes["NotImplemented"] = 501] = "NotImplemented";
    HttpCodes[HttpCodes["BadGateway"] = 502] = "BadGateway";
    HttpCodes[HttpCodes["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    HttpCodes[HttpCodes["GatewayTimeout"] = 504] = "GatewayTimeout";
})(HttpCodes || (exports.HttpCodes = HttpCodes = {}));
var Headers;
(function (Headers) {
    Headers["Accept"] = "accept";
    Headers["ContentType"] = "content-type";
})(Headers || (exports.Headers = Headers = {}));
var MediaTypes;
(function (MediaTypes) {
    MediaTypes["ApplicationJson"] = "application/json";
})(MediaTypes || (exports.MediaTypes = MediaTypes = {}));
/**
 * Returns the proxy URL, depending upon the supplied url and proxy environment variables.
 * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
 */
function getProxyUrl(serverUrl) {
    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
    return proxyUrl ? proxyUrl.href : '';
}
exports.getProxyUrl = getProxyUrl;
const HttpRedirectCodes = [
    HttpCodes.MovedPermanently,
    HttpCodes.ResourceMoved,
    HttpCodes.SeeOther,
    HttpCodes.TemporaryRedirect,
    HttpCodes.PermanentRedirect
];
const HttpResponseRetryCodes = [
    HttpCodes.BadGateway,
    HttpCodes.ServiceUnavailable,
    HttpCodes.GatewayTimeout
];
const RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];
const ExponentialBackoffCeiling = 10;
const ExponentialBackoffTimeSlice = 5;
class HttpClientError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.name = 'HttpClientError';
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, HttpClientError.prototype);
    }
}
exports.HttpClientError = HttpClientError;
class HttpClientResponse {
    constructor(message) {
        this.message = message;
    }
    readBody() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                let output = Buffer.alloc(0);
                this.message.on('data', (chunk) => {
                    output = Buffer.concat([output, chunk]);
                });
                this.message.on('end', () => {
                    resolve(output.toString());
                });
            }));
        });
    }
    readBodyBuffer() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                const chunks = [];
                this.message.on('data', (chunk) => {
                    chunks.push(chunk);
                });
                this.message.on('end', () => {
                    resolve(Buffer.concat(chunks));
                });
            }));
        });
    }
}
exports.HttpClientResponse = HttpClientResponse;
function isHttps(requestUrl) {
    const parsedUrl = new URL(requestUrl);
    return parsedUrl.protocol === 'https:';
}
exports.isHttps = isHttps;
class HttpClient {
    constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
            if (requestOptions.ignoreSslError != null) {
                this._ignoreSslError = requestOptions.ignoreSslError;
            }
            this._socketTimeout = requestOptions.socketTimeout;
            if (requestOptions.allowRedirects != null) {
                this._allowRedirects = requestOptions.allowRedirects;
            }
            if (requestOptions.allowRedirectDowngrade != null) {
                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
            }
            if (requestOptions.maxRedirects != null) {
                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
            }
            if (requestOptions.keepAlive != null) {
                this._keepAlive = requestOptions.keepAlive;
            }
            if (requestOptions.allowRetries != null) {
                this._allowRetries = requestOptions.allowRetries;
            }
            if (requestOptions.maxRetries != null) {
                this._maxRetries = requestOptions.maxRetries;
            }
        }
    }
    options(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});
        });
    }
    get(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('GET', requestUrl, null, additionalHeaders || {});
        });
    }
    del(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('DELETE', requestUrl, null, additionalHeaders || {});
        });
    }
    post(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('POST', requestUrl, data, additionalHeaders || {});
        });
    }
    patch(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PATCH', requestUrl, data, additionalHeaders || {});
        });
    }
    put(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PUT', requestUrl, data, additionalHeaders || {});
        });
    }
    head(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('HEAD', requestUrl, null, additionalHeaders || {});
        });
    }
    sendStream(verb, requestUrl, stream, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(verb, requestUrl, stream, additionalHeaders);
        });
    }
    /**
     * Gets a typed object from an endpoint
     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
     */
    getJson(requestUrl, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            const res = yield this.get(requestUrl, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    postJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.post(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    putJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.put(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    patchJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.patch(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    /**
     * Makes a raw http request.
     * All other methods such as get, post, patch, and request ultimately call this.
     * Prefer get, del, post and patch
     */
    request(verb, requestUrl, data, headers) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._disposed) {
                throw new Error('Client has already been disposed.');
            }
            const parsedUrl = new URL(requestUrl);
            let info = this._prepareRequest(verb, parsedUrl, headers);
            // Only perform retries on reads since writes may not be idempotent.
            const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb)
                ? this._maxRetries + 1
                : 1;
            let numTries = 0;
            let response;
            do {
                response = yield this.requestRaw(info, data);
                // Check if it's an authentication challenge
                if (response &&
                    response.message &&
                    response.message.statusCode === HttpCodes.Unauthorized) {
                    let authenticationHandler;
                    for (const handler of this.handlers) {
                        if (handler.canHandleAuthentication(response)) {
                            authenticationHandler = handler;
                            break;
                        }
                    }
                    if (authenticationHandler) {
                        return authenticationHandler.handleAuthentication(this, info, data);
                    }
                    else {
                        // We have received an unauthorized response but have no handlers to handle it.
                        // Let the response return to the caller.
                        return response;
                    }
                }
                let redirectsRemaining = this._maxRedirects;
                while (response.message.statusCode &&
                    HttpRedirectCodes.includes(response.message.statusCode) &&
                    this._allowRedirects &&
                    redirectsRemaining > 0) {
                    const redirectUrl = response.message.headers['location'];
                    if (!redirectUrl) {
                        // if there's no location to redirect to, we won't
                        break;
                    }
                    const parsedRedirectUrl = new URL(redirectUrl);
                    if (parsedUrl.protocol === 'https:' &&
                        parsedUrl.protocol !== parsedRedirectUrl.protocol &&
                        !this._allowRedirectDowngrade) {
                        throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');
                    }
                    // we need to finish reading the response before reassigning response
                    // which will leak the open socket.
                    yield response.readBody();
                    // strip authorization header if redirected to a different hostname
                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                        for (const header in headers) {
                            // header names are case insensitive
                            if (header.toLowerCase() === 'authorization') {
                                delete headers[header];
                            }
                        }
                    }
                    // let's make the request with the new redirectUrl
                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);
                    response = yield this.requestRaw(info, data);
                    redirectsRemaining--;
                }
                if (!response.message.statusCode ||
                    !HttpResponseRetryCodes.includes(response.message.statusCode)) {
                    // If not a retry code, return immediately instead of retrying
                    return response;
                }
                numTries += 1;
                if (numTries < maxTries) {
                    yield response.readBody();
                    yield this._performExponentialBackoff(numTries);
                }
            } while (numTries < maxTries);
            return response;
        });
    }
    /**
     * Needs to be called if keepAlive is set to true in request options.
     */
    dispose() {
        if (this._agent) {
            this._agent.destroy();
        }
        this._disposed = true;
    }
    /**
     * Raw request.
     * @param info
     * @param data
     */
    requestRaw(info, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                function callbackForResult(err, res) {
                    if (err) {
                        reject(err);
                    }
                    else if (!res) {
                        // If `err` is not passed, then `res` must be passed.
                        reject(new Error('Unknown error'));
                    }
                    else {
                        resolve(res);
                    }
                }
                this.requestRawWithCallback(info, data, callbackForResult);
            });
        });
    }
    /**
     * Raw request with callback.
     * @param info
     * @param data
     * @param onResult
     */
    requestRawWithCallback(info, data, onResult) {
        if (typeof data === 'string') {
            if (!info.options.headers) {
                info.options.headers = {};
            }
            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');
        }
        let callbackCalled = false;
        function handleResult(err, res) {
            if (!callbackCalled) {
                callbackCalled = true;
                onResult(err, res);
            }
        }
        const req = info.httpModule.request(info.options, (msg) => {
            const res = new HttpClientResponse(msg);
            handleResult(undefined, res);
        });
        let socket;
        req.on('socket', sock => {
            socket = sock;
        });
        // If we ever get disconnected, we want the socket to timeout eventually
        req.setTimeout(this._socketTimeout || 3 * 60000, () => {
            if (socket) {
                socket.end();
            }
            handleResult(new Error(`Request timeout: ${info.options.path}`));
        });
        req.on('error', function (err) {
            // err has statusCode property
            // res should have headers
            handleResult(err);
        });
        if (data && typeof data === 'string') {
            req.write(data, 'utf8');
        }
        if (data && typeof data !== 'string') {
            data.on('close', function () {
                req.end();
            });
            data.pipe(req);
        }
        else {
            req.end();
        }
    }
    /**
     * Gets an http agent. This function is useful when you need an http agent that handles
     * routing through a proxy server - depending upon the url and proxy environment variables.
     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
     */
    getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
    }
    getAgentDispatcher(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (!useProxy) {
            return;
        }
        return this._getProxyAgentDispatcher(parsedUrl, proxyUrl);
    }
    _prepareRequest(method, requestUrl, headers) {
        const info = {};
        info.parsedUrl = requestUrl;
        const usingSsl = info.parsedUrl.protocol === 'https:';
        info.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info.options = {};
        info.options.host = info.parsedUrl.hostname;
        info.options.port = info.parsedUrl.port
            ? parseInt(info.parsedUrl.port)
            : defaultPort;
        info.options.path =
            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');
        info.options.method = method;
        info.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
            info.options.headers['user-agent'] = this.userAgent;
        }
        info.options.agent = this._getAgent(info.parsedUrl);
        // gives handlers an opportunity to participate
        if (this.handlers) {
            for (const handler of this.handlers) {
                handler.prepareRequest(info.options);
            }
        }
        return info;
    }
    _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) {
            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
        }
        return lowercaseKeys(headers || {});
    }
    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
    }
    _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
            agent = this._proxyAgent;
        }
        if (!useProxy) {
            agent = this._agent;
        }
        // if agent is already assigned use that agent.
        if (agent) {
            return agent;
        }
        const usingSsl = parsedUrl.protocol === 'https:';
        let maxSockets = 100;
        if (this.requestOptions) {
            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.
        if (proxyUrl && proxyUrl.hostname) {
            const agentOptions = {
                maxSockets,
                keepAlive: this._keepAlive,
                proxy: Object.assign(Object.assign({}, ((proxyUrl.username || proxyUrl.password) && {
                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
                })), { host: proxyUrl.hostname, port: proxyUrl.port })
            };
            let tunnelAgent;
            const overHttps = proxyUrl.protocol === 'https:';
            if (usingSsl) {
                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
            }
            else {
                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
            }
            agent = tunnelAgent(agentOptions);
            this._proxyAgent = agent;
        }
        // if tunneling agent isn't assigned create a new agent
        if (!agent) {
            const options = { keepAlive: this._keepAlive, maxSockets };
            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
            this._agent = agent;
        }
        if (usingSsl && this._ignoreSslError) {
            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
            // we have to cast it to any and change it directly
            agent.options = Object.assign(agent.options || {}, {
                rejectUnauthorized: false
            });
        }
        return agent;
    }
    _getProxyAgentDispatcher(parsedUrl, proxyUrl) {
        let proxyAgent;
        if (this._keepAlive) {
            proxyAgent = this._proxyAgentDispatcher;
        }
        // if agent is already assigned use that agent.
        if (proxyAgent) {
            return proxyAgent;
        }
        const usingSsl = parsedUrl.protocol === 'https:';
        proxyAgent = new undici_1.ProxyAgent(Object.assign({ uri: proxyUrl.href, pipelining: !this._keepAlive ? 0 : 1 }, ((proxyUrl.username || proxyUrl.password) && {
            token: `${proxyUrl.username}:${proxyUrl.password}`
        })));
        this._proxyAgentDispatcher = proxyAgent;
        if (usingSsl && this._ignoreSslError) {
            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
            // we have to cast it to any and change it directly
            proxyAgent.options = Object.assign(proxyAgent.options.requestTls || {}, {
                rejectUnauthorized: false
            });
        }
        return proxyAgent;
    }
    _performExponentialBackoff(retryNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
            return new Promise(resolve => setTimeout(() => resolve(), ms));
        });
    }
    _processResponse(res, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                const statusCode = res.message.statusCode || 0;
                const response = {
                    statusCode,
                    result: null,
                    headers: {}
                };
                // not found leads to null obj returned
                if (statusCode === HttpCodes.NotFound) {
                    resolve(response);
                }
                // get the result from the body
                function dateTimeDeserializer(key, value) {
                    if (typeof value === 'string') {
                        const a = new Date(value);
                        if (!isNaN(a.valueOf())) {
                            return a;
                        }
                    }
                    return value;
                }
                let obj;
                let contents;
                try {
                    contents = yield res.readBody();
                    if (contents && contents.length > 0) {
                        if (options && options.deserializeDates) {
                            obj = JSON.parse(contents, dateTimeDeserializer);
                        }
                        else {
                            obj = JSON.parse(contents);
                        }
                        response.result = obj;
                    }
                    response.headers = res.message.headers;
                }
                catch (err) {
                    // Invalid resource (contents not json);  leaving result obj null
                }
                // note that 3xx redirects are handled by the http layer.
                if (statusCode > 299) {
                    let msg;
                    // if exception/error in body, attempt to get better error
                    if (obj && obj.message) {
                        msg = obj.message;
                    }
                    else if (contents && contents.length > 0) {
                        // it may be the case that the exception is in the body message as string
                        msg = contents;
                    }
                    else {
                        msg = `Failed request: (${statusCode})`;
                    }
                    const err = new HttpClientError(msg, statusCode);
                    err.result = response.result;
                    reject(err);
                }
                else {
                    resolve(response);
                }
            }));
        });
    }
}
exports.HttpClient = HttpClient;
const lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 9835:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkBypass = exports.getProxyUrl = void 0;
function getProxyUrl(reqUrl) {
    const usingSsl = reqUrl.protocol === 'https:';
    if (checkBypass(reqUrl)) {
        return undefined;
    }
    const proxyVar = (() => {
        if (usingSsl) {
            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];
        }
        else {
            return process.env['http_proxy'] || process.env['HTTP_PROXY'];
        }
    })();
    if (proxyVar) {
        try {
            return new URL(proxyVar);
        }
        catch (_a) {
            if (!proxyVar.startsWith('http://') && !proxyVar.startsWith('https://'))
                return new URL(`http://${proxyVar}`);
        }
    }
    else {
        return undefined;
    }
}
exports.getProxyUrl = getProxyUrl;
function checkBypass(reqUrl) {
    if (!reqUrl.hostname) {
        return false;
    }
    const reqHost = reqUrl.hostname;
    if (isLoopbackAddress(reqHost)) {
        return true;
    }
    const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';
    if (!noProxy) {
        return false;
    }
    // Determine the request port
    let reqPort;
    if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
    }
    else if (reqUrl.protocol === 'http:') {
        reqPort = 80;
    }
    else if (reqUrl.protocol === 'https:') {
        reqPort = 443;
    }
    // Format the request hostname and hostname with port
    const upperReqHosts = [reqUrl.hostname.toUpperCase()];
    if (typeof reqPort === 'number') {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
    }
    // Compare request host against noproxy
    for (const upperNoProxyItem of noProxy
        .split(',')
        .map(x => x.trim().toUpperCase())
        .filter(x => x)) {
        if (upperNoProxyItem === '*' ||
            upperReqHosts.some(x => x === upperNoProxyItem ||
                x.endsWith(`.${upperNoProxyItem}`) ||
                (upperNoProxyItem.startsWith('.') &&
                    x.endsWith(`${upperNoProxyItem}`)))) {
            return true;
        }
    }
    return false;
}
exports.checkBypass = checkBypass;
function isLoopbackAddress(host) {
    const hostLower = host.toLowerCase();
    return (hostLower === 'localhost' ||
        hostLower.startsWith('127.') ||
        hostLower.startsWith('[::1]') ||
        hostLower.startsWith('[0:0:0:0:0:0:0:1]'));
}
//# sourceMappingURL=proxy.js.map

/***/ }),

/***/ 334:
/***/ ((module) => {

"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// pkg/dist-src/index.js
var dist_src_exports = {};
__export(dist_src_exports, {
  createTokenAuth: () => createTokenAuth
});
module.exports = __toCommonJS(dist_src_exports);

// pkg/dist-src/auth.js
var REGEX_IS_INSTALLATION_LEGACY = /^v1\./;
var REGEX_IS_INSTALLATION = /^ghs_/;
var REGEX_IS_USER_TO_SERVER = /^ghu_/;
async function auth(token) {
  const isApp = token.split(/\./).length === 3;
  const isInstallation = REGEX_IS_INSTALLATION_LEGACY.test(token) || REGEX_IS_INSTALLATION.test(token);
  const isUserToServer = REGEX_IS_USER_TO_SERVER.test(token);
  const tokenType = isApp ? "app" : isInstallation ? "installation" : isUserToServer ? "user-to-server" : "oauth";
  return {
    type: "token",
    token,
    tokenType
  };
}

// pkg/dist-src/with-authorization-prefix.js
function withAuthorizationPrefix(token) {
  if (token.split(/\./).length === 3) {
    return `bearer ${token}`;
  }
  return `token ${token}`;
}

// pkg/dist-src/hook.js
async function hook(token, request, route, parameters) {
  const endpoint = request.endpoint.merge(
    route,
    parameters
  );
  endpoint.headers.authorization = withAuthorizationPrefix(token);
  return request(endpoint);
}

// pkg/dist-src/index.js
var createTokenAuth = function createTokenAuth2(token) {
  if (!token) {
    throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
  }
  if (typeof token !== "string") {
    throw new Error(
      "[@octokit/auth-token] Token passed to createTokenAuth is not a string"
    );
  }
  token = token.replace(/^(token|bearer) +/i, "");
  return Object.assign(auth.bind(null, token), {
    hook: hook.bind(null, token)
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (0);


/***/ }),

/***/ 6762:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// pkg/dist-src/index.js
var dist_src_exports = {};
__export(dist_src_exports, {
  Octokit: () => Octokit
});
module.exports = __toCommonJS(dist_src_exports);
var import_universal_user_agent = __nccwpck_require__(5030);
var import_before_after_hook = __nccwpck_require__(3682);
var import_request = __nccwpck_require__(6234);
var import_graphql = __nccwpck_require__(8467);
var import_auth_token = __nccwpck_require__(334);

// pkg/dist-src/version.js
var VERSION = "5.2.0";

// pkg/dist-src/index.js
var noop = () => {
};
var consoleWarn = console.warn.bind(console);
var consoleError = console.error.bind(console);
var userAgentTrail = `octokit-core.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`;
var Octokit = class {
  static {
    this.VERSION = VERSION;
  }
  static defaults(defaults) {
    const OctokitWithDefaults = class extends this {
      constructor(...args) {
        const options = args[0] || {};
        if (typeof defaults === "function") {
          super(defaults(options));
          return;
        }
        super(
          Object.assign(
            {},
            defaults,
            options,
            options.userAgent && defaults.userAgent ? {
              userAgent: `${options.userAgent} ${defaults.userAgent}`
            } : null
          )
        );
      }
    };
    return OctokitWithDefaults;
  }
  static {
    this.plugins = [];
  }
  /**
   * Attach a plugin (or many) to your Octokit instance.
   *
   * @example
   * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)
   */
  static plugin(...newPlugins) {
    const currentPlugins = this.plugins;
    const NewOctokit = class extends this {
      static {
        this.plugins = currentPlugins.concat(
          newPlugins.filter((plugin) => !currentPlugins.includes(plugin))
        );
      }
    };
    return NewOctokit;
  }
  constructor(options = {}) {
    const hook = new import_before_after_hook.Collection();
    const requestDefaults = {
      baseUrl: import_request.request.endpoint.DEFAULTS.baseUrl,
      headers: {},
      request: Object.assign({}, options.request, {
        // @ts-ignore internal usage only, no need to type
        hook: hook.bind(null, "request")
      }),
      mediaType: {
        previews: [],
        format: ""
      }
    };
    requestDefaults.headers["user-agent"] = options.userAgent ? `${options.userAgent} ${userAgentTrail}` : userAgentTrail;
    if (options.baseUrl) {
      requestDefaults.baseUrl = options.baseUrl;
    }
    if (options.previews) {
      requestDefaults.mediaType.previews = options.previews;
    }
    if (options.timeZone) {
      requestDefaults.headers["time-zone"] = options.timeZone;
    }
    this.request = import_request.request.defaults(requestDefaults);
    this.graphql = (0, import_graphql.withCustomRequest)(this.request).defaults(requestDefaults);
    this.log = Object.assign(
      {
        debug: noop,
        info: noop,
        warn: consoleWarn,
        error: consoleError
      },
      options.log
    );
    this.hook = hook;
    if (!options.authStrategy) {
      if (!options.auth) {
        this.auth = async () => ({
          type: "unauthenticated"
        });
      } else {
        const auth = (0, import_auth_token.createTokenAuth)(options.auth);
        hook.wrap("request", auth.hook);
        this.auth = auth;
      }
    } else {
      const { authStrategy, ...otherOptions } = options;
      const auth = authStrategy(
        Object.assign(
          {
            request: this.request,
            log: this.log,
            // we pass the current octokit instance as well as its constructor options
            // to allow for authentication strategies that return a new octokit instance
            // that shares the same internal state as the current one. The original
            // requirement for this was the "event-octokit" authentication strategy
            // of https://github.com/probot/octokit-auth-probot.
            octokit: this,
            octokitOptions: otherOptions
          },
          options.auth
        )
      );
      hook.wrap("request", auth.hook);
      this.auth = auth;
    }
    const classConstructor = this.constructor;
    for (let i = 0; i < classConstructor.plugins.length; ++i) {
      Object.assign(this, classConstructor.plugins[i](this, options));
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (0);


/***/ }),

/***/ 9440:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// pkg/dist-src/index.js
var dist_src_exports = {};
__export(dist_src_exports, {
  endpoint: () => endpoint
});
module.exports = __toCommonJS(dist_src_exports);

// pkg/dist-src/defaults.js
var import_universal_user_agent = __nccwpck_require__(5030);

// pkg/dist-src/version.js
var VERSION = "9.0.5";

// pkg/dist-src/defaults.js
var userAgent = `octokit-endpoint.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`;
var DEFAULTS = {
  method: "GET",
  baseUrl: "https://api.github.com",
  headers: {
    accept: "application/vnd.github.v3+json",
    "user-agent": userAgent
  },
  mediaType: {
    format: ""
  }
};

// pkg/dist-src/util/lowercase-keys.js
function lowercaseKeys(object) {
  if (!object) {
    return {};
  }
  return Object.keys(object).reduce((newObj, key) => {
    newObj[key.toLowerCase()] = object[key];
    return newObj;
  }, {});
}

// pkg/dist-src/util/is-plain-object.js
function isPlainObject(value) {
  if (typeof value !== "object" || value === null)
    return false;
  if (Object.prototype.toString.call(value) !== "[object Object]")
    return false;
  const proto = Object.getPrototypeOf(value);
  if (proto === null)
    return true;
  const Ctor = Object.prototype.hasOwnProperty.call(proto, "constructor") && proto.constructor;
  return typeof Ctor === "function" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);
}

// pkg/dist-src/util/merge-deep.js
function mergeDeep(defaults, options) {
  const result = Object.assign({}, defaults);
  Object.keys(options).forEach((key) => {
    if (isPlainObject(options[key])) {
      if (!(key in defaults))
        Object.assign(result, { [key]: options[key] });
      else
        result[key] = mergeDeep(defaults[key], options[key]);
    } else {
      Object.assign(result, { [key]: options[key] });
    }
  });
  return result;
}

// pkg/dist-src/util/remove-undefined-properties.js
function removeUndefinedProperties(obj) {
  for (const key in obj) {
    if (obj[key] === void 0) {
      delete obj[key];
    }
  }
  return obj;
}

// pkg/dist-src/merge.js
function merge(defaults, route, options) {
  if (typeof route === "string") {
    let [method, url] = route.split(" ");
    options = Object.assign(url ? { method, url } : { url: method }, options);
  } else {
    options = Object.assign({}, route);
  }
  options.headers = lowercaseKeys(options.headers);
  removeUndefinedProperties(options);
  removeUndefinedProperties(options.headers);
  const mergedOptions = mergeDeep(defaults || {}, options);
  if (options.url === "/graphql") {
    if (defaults && defaults.mediaType.previews?.length) {
      mergedOptions.mediaType.previews = defaults.mediaType.previews.filter(
        (preview) => !mergedOptions.mediaType.previews.includes(preview)
      ).concat(mergedOptions.mediaType.previews);
    }
    mergedOptions.mediaType.previews = (mergedOptions.mediaType.previews || []).map((preview) => preview.replace(/-preview/, ""));
  }
  return mergedOptions;
}

// pkg/dist-src/util/add-query-parameters.js
function addQueryParameters(url, parameters) {
  const separator = /\?/.test(url) ? "&" : "?";
  const names = Object.keys(parameters);
  if (names.length === 0) {
    return url;
  }
  return url + separator + names.map((name) => {
    if (name === "q") {
      return "q=" + parameters.q.split("+").map(encodeURIComponent).join("+");
    }
    return `${name}=${encodeURIComponent(parameters[name])}`;
  }).join("&");
}

// pkg/dist-src/util/extract-url-variable-names.js
var urlVariableRegex = /\{[^}]+\}/g;
function removeNonChars(variableName) {
  return variableName.replace(/^\W+|\W+$/g, "").split(/,/);
}
function extractUrlVariableNames(url) {
  const matches = url.match(urlVariableRegex);
  if (!matches) {
    return [];
  }
  return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);
}

// pkg/dist-src/util/omit.js
function omit(object, keysToOmit) {
  const result = { __proto__: null };
  for (const key of Object.keys(object)) {
    if (keysToOmit.indexOf(key) === -1) {
      result[key] = object[key];
    }
  }
  return result;
}

// pkg/dist-src/util/url-template.js
function encodeReserved(str) {
  return str.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {
    if (!/%[0-9A-Fa-f]/.test(part)) {
      part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
    }
    return part;
  }).join("");
}
function encodeUnreserved(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
function encodeValue(operator, value, key) {
  value = operator === "+" || operator === "#" ? encodeReserved(value) : encodeUnreserved(value);
  if (key) {
    return encodeUnreserved(key) + "=" + value;
  } else {
    return value;
  }
}
function isDefined(value) {
  return value !== void 0 && value !== null;
}
function isKeyOperator(operator) {
  return operator === ";" || operator === "&" || operator === "?";
}
function getValues(context, operator, key, modifier) {
  var value = context[key], result = [];
  if (isDefined(value) && value !== "") {
    if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
      value = value.toString();
      if (modifier && modifier !== "*") {
        value = value.substring(0, parseInt(modifier, 10));
      }
      result.push(
        encodeValue(operator, value, isKeyOperator(operator) ? key : "")
      );
    } else {
      if (modifier === "*") {
        if (Array.isArray(value)) {
          value.filter(isDefined).forEach(function(value2) {
            result.push(
              encodeValue(operator, value2, isKeyOperator(operator) ? key : "")
            );
          });
        } else {
          Object.keys(value).forEach(function(k) {
            if (isDefined(value[k])) {
              result.push(encodeValue(operator, value[k], k));
            }
          });
        }
      } else {
        const tmp = [];
        if (Array.isArray(value)) {
          value.filter(isDefined).forEach(function(value2) {
            tmp.push(encodeValue(operator, value2));
          });
        } else {
          Object.keys(value).forEach(function(k) {
            if (isDefined(value[k])) {
              tmp.push(encodeUnreserved(k));
              tmp.push(encodeValue(operator, value[k].toString()));
            }
          });
        }
        if (isKeyOperator(operator)) {
          result.push(encodeUnreserved(key) + "=" + tmp.join(","));
        } else if (tmp.length !== 0) {
          result.push(tmp.join(","));
        }
      }
    }
  } else {
    if (operator === ";") {
      if (isDefined(value)) {
        result.push(encodeUnreserved(key));
      }
    } else if (value === "" && (operator === "&" || operator === "?")) {
      result.push(encodeUnreserved(key) + "=");
    } else if (value === "") {
      result.push("");
    }
  }
  return result;
}
function parseUrl(template) {
  return {
    expand: expand.bind(null, template)
  };
}
function expand(template, context) {
  var operators = ["+", "#", ".", "/", ";", "?", "&"];
  template = template.replace(
    /\{([^\{\}]+)\}|([^\{\}]+)/g,
    function(_, expression, literal) {
      if (expression) {
        let operator = "";
        const values = [];
        if (operators.indexOf(expression.charAt(0)) !== -1) {
          operator = expression.charAt(0);
          expression = expression.substr(1);
        }
        expression.split(/,/g).forEach(function(variable) {
          var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
          values.push(getValues(context, operator, tmp[1], tmp[2] || tmp[3]));
        });
        if (operator && operator !== "+") {
          var separator = ",";
          if (operator === "?") {
            separator = "&";
          } else if (operator !== "#") {
            separator = operator;
          }
          return (values.length !== 0 ? operator : "") + values.join(separator);
        } else {
          return values.join(",");
        }
      } else {
        return encodeReserved(literal);
      }
    }
  );
  if (template === "/") {
    return template;
  } else {
    return template.replace(/\/$/, "");
  }
}

// pkg/dist-src/parse.js
function parse(options) {
  let method = options.method.toUpperCase();
  let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{$1}");
  let headers = Object.assign({}, options.headers);
  let body;
  let parameters = omit(options, [
    "method",
    "baseUrl",
    "url",
    "headers",
    "request",
    "mediaType"
  ]);
  const urlVariableNames = extractUrlVariableNames(url);
  url = parseUrl(url).expand(parameters);
  if (!/^http/.test(url)) {
    url = options.baseUrl + url;
  }
  const omittedParameters = Object.keys(options).filter((option) => urlVariableNames.includes(option)).concat("baseUrl");
  const remainingParameters = omit(parameters, omittedParameters);
  const isBinaryRequest = /application\/octet-stream/i.test(headers.accept);
  if (!isBinaryRequest) {
    if (options.mediaType.format) {
      headers.accept = headers.accept.split(/,/).map(
        (format) => format.replace(
          /application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,
          `application/vnd$1$2.${options.mediaType.format}`
        )
      ).join(",");
    }
    if (url.endsWith("/graphql")) {
      if (options.mediaType.previews?.length) {
        const previewsFromAcceptHeader = headers.accept.match(/[\w-]+(?=-preview)/g) || [];
        headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map((preview) => {
          const format = options.mediaType.format ? `.${options.mediaType.format}` : "+json";
          return `application/vnd.github.${preview}-preview${format}`;
        }).join(",");
      }
    }
  }
  if (["GET", "HEAD"].includes(method)) {
    url = addQueryParameters(url, remainingParameters);
  } else {
    if ("data" in remainingParameters) {
      body = remainingParameters.data;
    } else {
      if (Object.keys(remainingParameters).length) {
        body = remainingParameters;
      }
    }
  }
  if (!headers["content-type"] && typeof body !== "undefined") {
    headers["content-type"] = "application/json; charset=utf-8";
  }
  if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") {
    body = "";
  }
  return Object.assign(
    { method, url, headers },
    typeof body !== "undefined" ? { body } : null,
    options.request ? { request: options.request } : null
  );
}

// pkg/dist-src/endpoint-with-defaults.js
function endpointWithDefaults(defaults, route, options) {
  return parse(merge(defaults, route, options));
}

// pkg/dist-src/with-defaults.js
function withDefaults(oldDefaults, newDefaults) {
  const DEFAULTS2 = merge(oldDefaults, newDefaults);
  const endpoint2 = endpointWithDefaults.bind(null, DEFAULTS2);
  return Object.assign(endpoint2, {
    DEFAULTS: DEFAULTS2,
    defaults: withDefaults.bind(null, DEFAULTS2),
    merge: merge.bind(null, DEFAULTS2),
    parse
  });
}

// pkg/dist-src/index.js
var endpoint = withDefaults(null, DEFAULTS);
// Annotate the CommonJS export names for ESM import in node:
0 && (0);


/***/ }),

/***/ 8467:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// pkg/dist-src/index.js
var dist_src_exports = {};
__export(dist_src_exports, {
  GraphqlResponseError: () => GraphqlResponseError,
  graphql: () => graphql2,
  withCustomRequest: () => withCustomRequest
});
module.exports = __toCommonJS(dist_src_exports);
var import_request3 = __nccwpck_require__(6234);
var import_universal_user_agent = __nccwpck_require__(5030);

// pkg/dist-src/version.js
var VERSION = "7.1.0";

// pkg/dist-src/with-defaults.js
var import_request2 = __nccwpck_require__(6234);

// pkg/dist-src/graphql.js
var import_request = __nccwpck_require__(6234);

// pkg/dist-src/error.js
function _buildMessageForResponseErrors(data) {
  return `Request failed due to following response errors:
` + data.errors.map((e) => ` - ${e.message}`).join("\n");
}
var GraphqlResponseError = class extends Error {
  constructor(request2, headers, response) {
    super(_buildMessageForResponseErrors(response));
    this.request = request2;
    this.headers = headers;
    this.response = response;
    this.name = "GraphqlResponseError";
    this.errors = response.errors;
    this.data = response.data;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
  }
};

// pkg/dist-src/graphql.js
var NON_VARIABLE_OPTIONS = [
  "method",
  "baseUrl",
  "url",
  "headers",
  "request",
  "query",
  "mediaType"
];
var FORBIDDEN_VARIABLE_OPTIONS = ["query", "method", "url"];
var GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/;
function graphql(request2, query, options) {
  if (options) {
    if (typeof query === "string" && "query" in options) {
      return Promise.reject(
        new Error(`[@octokit/graphql] "query" cannot be used as variable name`)
      );
    }
    for (const key in options) {
      if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key))
        continue;
      return Promise.reject(
        new Error(
          `[@octokit/graphql] "${key}" cannot be used as variable name`
        )
      );
    }
  }
  const parsedOptions = typeof query === "string" ? Object.assign({ query }, options) : query;
  const requestOptions = Object.keys(
    parsedOptions
  ).reduce((result, key) => {
    if (NON_VARIABLE_OPTIONS.includes(key)) {
      result[key] = parsedOptions[key];
      return result;
    }
    if (!result.variables) {
      result.variables = {};
    }
    result.variables[key] = parsedOptions[key];
    return result;
  }, {});
  const baseUrl = parsedOptions.baseUrl || request2.endpoint.DEFAULTS.baseUrl;
  if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {
    requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, "/api/graphql");
  }
  return request2(requestOptions).then((response) => {
    if (response.data.errors) {
      const headers = {};
      for (const key of Object.keys(response.headers)) {
        headers[key] = response.headers[key];
      }
      throw new GraphqlResponseError(
        requestOptions,
        headers,
        response.data
      );
    }
    return response.data.data;
  });
}

// pkg/dist-src/with-defaults.js
function withDefaults(request2, newDefaults) {
  const newRequest = request2.defaults(newDefaults);
  const newApi = (query, options) => {
    return graphql(newRequest, query, options);
  };
  return Object.assign(newApi, {
    defaults: withDefaults.bind(null, newRequest),
    endpoint: newRequest.endpoint
  });
}

// pkg/dist-src/index.js
var graphql2 = withDefaults(import_request3.request, {
  headers: {
    "user-agent": `octokit-graphql.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`
  },
  method: "POST",
  url: "/graphql"
});
function withCustomRequest(customRequest) {
  return withDefaults(customRequest, {
    method: "POST",
    url: "/graphql"
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (0);


/***/ }),

/***/ 4193:
/***/ ((module) => {

"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// pkg/dist-src/index.js
var dist_src_exports = {};
__export(dist_src_exports, {
  composePaginateRest: () => composePaginateRest,
  isPaginatingEndpoint: () => isPaginatingEndpoint,
  paginateRest: () => paginateRest,
  paginatingEndpoints: () => paginatingEndpoints
});
module.exports = __toCommonJS(dist_src_exports);

// pkg/dist-src/version.js
var VERSION = "9.2.1";

// pkg/dist-src/normalize-paginated-list-response.js
function normalizePaginatedListResponse(response) {
  if (!response.data) {
    return {
      ...response,
      data: []
    };
  }
  const responseNeedsNormalization = "total_count" in response.data && !("url" in response.data);
  if (!responseNeedsNormalization)
    return response;
  const incompleteResults = response.data.incomplete_results;
  const repositorySelection = response.data.repository_selection;
  const totalCount = response.data.total_count;
  delete response.data.incomplete_results;
  delete response.data.repository_selection;
  delete response.data.total_count;
  const namespaceKey = Object.keys(response.data)[0];
  const data = response.data[namespaceKey];
  response.data = data;
  if (typeof incompleteResults !== "undefined") {
    response.data.incomplete_results = incompleteResults;
  }
  if (typeof repositorySelection !== "undefined") {
    response.data.repository_selection = repositorySelection;
  }
  response.data.total_count = totalCount;
  return response;
}

// pkg/dist-src/iterator.js
function iterator(octokit, route, parameters) {
  const options = typeof route === "function" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);
  const requestMethod = typeof route === "function" ? route : octokit.request;
  const method = options.method;
  const headers = options.headers;
  let url = options.url;
  return {
    [Symbol.asyncIterator]: () => ({
      async next() {
        if (!url)
          return { done: true };
        try {
          const response = await requestMethod({ method, url, headers });
          const normalizedResponse = normalizePaginatedListResponse(response);
          url = ((normalizedResponse.headers.link || "").match(
            /<([^>]+)>;\s*rel="next"/
          ) || [])[1];
          return { value: normalizedResponse };
        } catch (error) {
          if (error.status !== 409)
            throw error;
          url = "";
          return {
            value: {
              status: 200,
              headers: {},
              data: []
            }
          };
        }
      }
    })
  };
}

// pkg/dist-src/paginate.js
function paginate(octokit, route, parameters, mapFn) {
  if (typeof parameters === "function") {
    mapFn = parameters;
    parameters = void 0;
  }
  return gather(
    octokit,
    [],
    iterator(octokit, route, parameters)[Symbol.asyncIterator](),
    mapFn
  );
}
function gather(octokit, results, iterator2, mapFn) {
  return iterator2.next().then((result) => {
    if (result.done) {
      return results;
    }
    let earlyExit = false;
    function done() {
      earlyExit = true;
    }
    results = results.concat(
      mapFn ? mapFn(result.value, done) : result.value.data
    );
    if (earlyExit) {
      return results;
    }
    return gather(octokit, results, iterator2, mapFn);
  });
}

// pkg/dist-src/compose-paginate.js
var composePaginateRest = Object.assign(paginate, {
  iterator
});

// pkg/dist-src/generated/paginating-endpoints.js
var paginatingEndpoints = [
  "GET /advisories",
  "GET /app/hook/deliveries",
  "GET /app/installation-requests",
  "GET /app/installations",
  "GET /assignments/{assignment_id}/accepted_assignments",
  "GET /classrooms",
  "GET /classrooms/{classroom_id}/assignments",
  "GET /enterprises/{enterprise}/dependabot/alerts",
  "GET /enterprises/{enterprise}/secret-scanning/alerts",
  "GET /events",
  "GET /gists",
  "GET /gists/public",
  "GET /gists/starred",
  "GET /gists/{gist_id}/comments",
  "GET /gists/{gist_id}/commits",
  "GET /gists/{gist_id}/forks",
  "GET /installation/repositories",
  "GET /issues",
  "GET /licenses",
  "GET /marketplace_listing/plans",
  "GET /marketplace_listing/plans/{plan_id}/accounts",
  "GET /marketplace_listing/stubbed/plans",
  "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",
  "GET /networks/{owner}/{repo}/events",
  "GET /notifications",
  "GET /organizations",
  "GET /orgs/{org}/actions/cache/usage-by-repository",
  "GET /orgs/{org}/actions/permissions/repositories",
  "GET /orgs/{org}/actions/runners",
  "GET /orgs/{org}/actions/secrets",
  "GET /orgs/{org}/actions/secrets/{secret_name}/repositories",
  "GET /orgs/{org}/actions/variables",
  "GET /orgs/{org}/actions/variables/{name}/repositories",
  "GET /orgs/{org}/blocks",
  "GET /orgs/{org}/code-scanning/alerts",
  "GET /orgs/{org}/codespaces",
  "GET /orgs/{org}/codespaces/secrets",
  "GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories",
  "GET /orgs/{org}/copilot/billing/seats",
  "GET /orgs/{org}/dependabot/alerts",
  "GET /orgs/{org}/dependabot/secrets",
  "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories",
  "GET /orgs/{org}/events",
  "GET /orgs/{org}/failed_invitations",
  "GET /orgs/{org}/hooks",
  "GET /orgs/{org}/hooks/{hook_id}/deliveries",
  "GET /orgs/{org}/installations",
  "GET /orgs/{org}/invitations",
  "GET /orgs/{org}/invitations/{invitation_id}/teams",
  "GET /orgs/{org}/issues",
  "GET /orgs/{org}/members",
  "GET /orgs/{org}/members/{username}/codespaces",
  "GET /orgs/{org}/migrations",
  "GET /orgs/{org}/migrations/{migration_id}/repositories",
  "GET /orgs/{org}/organization-roles/{role_id}/teams",
  "GET /orgs/{org}/organization-roles/{role_id}/users",
  "GET /orgs/{org}/outside_collaborators",
  "GET /orgs/{org}/packages",
  "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
  "GET /orgs/{org}/personal-access-token-requests",
  "GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories",
  "GET /orgs/{org}/personal-access-tokens",
  "GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories",
  "GET /orgs/{org}/projects",
  "GET /orgs/{org}/properties/values",
  "GET /orgs/{org}/public_members",
  "GET /orgs/{org}/repos",
  "GET /orgs/{org}/rulesets",
  "GET /orgs/{org}/rulesets/rule-suites",
  "GET /orgs/{org}/secret-scanning/alerts",
  "GET /orgs/{org}/security-advisories",
  "GET /orgs/{org}/teams",
  "GET /orgs/{org}/teams/{team_slug}/discussions",
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
  "GET /orgs/{org}/teams/{team_slug}/invitations",
  "GET /orgs/{org}/teams/{team_slug}/members",
  "GET /orgs/{org}/teams/{team_slug}/projects",
  "GET /orgs/{org}/teams/{team_slug}/repos",
  "GET /orgs/{org}/teams/{team_slug}/teams",
  "GET /projects/columns/{column_id}/cards",
  "GET /projects/{project_id}/collaborators",
  "GET /projects/{project_id}/columns",
  "GET /repos/{owner}/{repo}/actions/artifacts",
  "GET /repos/{owner}/{repo}/actions/caches",
  "GET /repos/{owner}/{repo}/actions/organization-secrets",
  "GET /repos/{owner}/{repo}/actions/organization-variables",
  "GET /repos/{owner}/{repo}/actions/runners",
  "GET /repos/{owner}/{repo}/actions/runs",
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
  "GET /repos/{owner}/{repo}/actions/secrets",
  "GET /repos/{owner}/{repo}/actions/variables",
  "GET /repos/{owner}/{repo}/actions/workflows",
  "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
  "GET /repos/{owner}/{repo}/activity",
  "GET /repos/{owner}/{repo}/assignees",
  "GET /repos/{owner}/{repo}/branches",
  "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
  "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
  "GET /repos/{owner}/{repo}/code-scanning/alerts",
  "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
  "GET /repos/{owner}/{repo}/code-scanning/analyses",
  "GET /repos/{owner}/{repo}/codespaces",
  "GET /repos/{owner}/{repo}/codespaces/devcontainers",
  "GET /repos/{owner}/{repo}/codespaces/secrets",
  "GET /repos/{owner}/{repo}/collaborators",
  "GET /repos/{owner}/{repo}/comments",
  "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",
  "GET /repos/{owner}/{repo}/commits",
  "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments",
  "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",
  "GET /repos/{owner}/{repo}/commits/{ref}/check-runs",
  "GET /repos/{owner}/{repo}/commits/{ref}/check-suites",
  "GET /repos/{owner}/{repo}/commits/{ref}/status",
  "GET /repos/{owner}/{repo}/commits/{ref}/statuses",
  "GET /repos/{owner}/{repo}/contributors",
  "GET /repos/{owner}/{repo}/dependabot/alerts",
  "GET /repos/{owner}/{repo}/dependabot/secrets",
  "GET /repos/{owner}/{repo}/deployments",
  "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
  "GET /repos/{owner}/{repo}/environments",
  "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
  "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps",
  "GET /repos/{owner}/{repo}/events",
  "GET /repos/{owner}/{repo}/forks",
  "GET /repos/{owner}/{repo}/hooks",
  "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
  "GET /repos/{owner}/{repo}/invitations",
  "GET /repos/{owner}/{repo}/issues",
  "GET /repos/{owner}/{repo}/issues/comments",
  "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
  "GET /repos/{owner}/{repo}/issues/events",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/comments",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/events",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/labels",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",
  "GET /repos/{owner}/{repo}/keys",
  "GET /repos/{owner}/{repo}/labels",
  "GET /repos/{owner}/{repo}/milestones",
  "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels",
  "GET /repos/{owner}/{repo}/notifications",
  "GET /repos/{owner}/{repo}/pages/builds",
  "GET /repos/{owner}/{repo}/projects",
  "GET /repos/{owner}/{repo}/pulls",
  "GET /repos/{owner}/{repo}/pulls/comments",
  "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/commits",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/files",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
  "GET /repos/{owner}/{repo}/releases",
  "GET /repos/{owner}/{repo}/releases/{release_id}/assets",
  "GET /repos/{owner}/{repo}/releases/{release_id}/reactions",
  "GET /repos/{owner}/{repo}/rules/branches/{branch}",
  "GET /repos/{owner}/{repo}/rulesets",
  "GET /repos/{owner}/{repo}/rulesets/rule-suites",
  "GET /repos/{owner}/{repo}/secret-scanning/alerts",
  "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations",
  "GET /repos/{owner}/{repo}/security-advisories",
  "GET /repos/{owner}/{repo}/stargazers",
  "GET /repos/{owner}/{repo}/subscribers",
  "GET /repos/{owner}/{repo}/tags",
  "GET /repos/{owner}/{repo}/teams",
  "GET /repos/{owner}/{repo}/topics",
  "GET /repositories",
  "GET /repositories/{repository_id}/environments/{environment_name}/secrets",
  "GET /repositories/{repository_id}/environments/{environment_name}/variables",
  "GET /search/code",
  "GET /search/commits",
  "GET /search/issues",
  "GET /search/labels",
  "GET /search/repositories",
  "GET /search/topics",
  "GET /search/users",
  "GET /teams/{team_id}/discussions",
  "GET /teams/{team_id}/discussions/{discussion_number}/comments",
  "GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
  "GET /teams/{team_id}/discussions/{discussion_number}/reactions",
  "GET /teams/{team_id}/invitations",
  "GET /teams/{team_id}/members",
  "GET /teams/{team_id}/projects",
  "GET /teams/{team_id}/repos",
  "GET /teams/{team_id}/teams",
  "GET /user/blocks",
  "GET /user/codespaces",
  "GET /user/codespaces/secrets",
  "GET /user/emails",
  "GET /user/followers",
  "GET /user/following",
  "GET /user/gpg_keys",
  "GET /user/installations",
  "GET /user/installations/{installation_id}/repositories",
  "GET /user/issues",
  "GET /user/keys",
  "GET /user/marketplace_purchases",
  "GET /user/marketplace_purchases/stubbed",
  "GET /user/memberships/orgs",
  "GET /user/migrations",
  "GET /user/migrations/{migration_id}/repositories",
  "GET /user/orgs",
  "GET /user/packages",
  "GET /user/packages/{package_type}/{package_name}/versions",
  "GET /user/public_emails",
  "GET /user/repos",
  "GET /user/repository_invitations",
  "GET /user/social_accounts",
  "GET /user/ssh_signing_keys",
  "GET /user/starred",
  "GET /user/subscriptions",
  "GET /user/teams",
  "GET /users",
  "GET /users/{username}/events",
  "GET /users/{username}/events/orgs/{org}",
  "GET /users/{username}/events/public",
  "GET /users/{username}/followers",
  "GET /users/{username}/following",
  "GET /users/{username}/gists",
  "GET /users/{username}/gpg_keys",
  "GET /users/{username}/keys",
  "GET /users/{username}/orgs",
  "GET /users/{username}/packages",
  "GET /users/{username}/projects",
  "GET /users/{username}/received_events",
  "GET /users/{username}/received_events/public",
  "GET /users/{username}/repos",
  "GET /users/{username}/social_accounts",
  "GET /users/{username}/ssh_signing_keys",
  "GET /users/{username}/starred",
  "GET /users/{username}/subscriptions"
];

// pkg/dist-src/paginating-endpoints.js
function isPaginatingEndpoint(arg) {
  if (typeof arg === "string") {
    return paginatingEndpoints.includes(arg);
  } else {
    return false;
  }
}

// pkg/dist-src/index.js
function paginateRest(octokit) {
  return {
    paginate: Object.assign(paginate.bind(null, octokit), {
      iterator: iterator.bind(null, octokit)
    })
  };
}
paginateRest.VERSION = VERSION;
// Annotate the CommonJS export names for ESM import in node:
0 && (0);


/***/ }),

/***/ 3044:
/***/ ((module) => {

"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// pkg/dist-src/index.js
var dist_src_exports = {};
__export(dist_src_exports, {
  legacyRestEndpointMethods: () => legacyRestEndpointMethods,
  restEndpointMethods: () => restEndpointMethods
});
module.exports = __toCommonJS(dist_src_exports);

// pkg/dist-src/version.js
var VERSION = "10.4.1";

// pkg/dist-src/generated/endpoints.js
var Endpoints = {
  actions: {
    addCustomLabelsToSelfHostedRunnerForOrg: [
      "POST /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    addCustomLabelsToSelfHostedRunnerForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    addSelectedRepoToOrgSecret: [
      "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    ],
    addSelectedRepoToOrgVariable: [
      "PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
    ],
    approveWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"
    ],
    cancelWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"
    ],
    createEnvironmentVariable: [
      "POST /repositories/{repository_id}/environments/{environment_name}/variables"
    ],
    createOrUpdateEnvironmentSecret: [
      "PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
    ],
    createOrUpdateOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}"],
    createOrUpdateRepoSecret: [
      "PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"
    ],
    createOrgVariable: ["POST /orgs/{org}/actions/variables"],
    createRegistrationTokenForOrg: [
      "POST /orgs/{org}/actions/runners/registration-token"
    ],
    createRegistrationTokenForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/registration-token"
    ],
    createRemoveTokenForOrg: ["POST /orgs/{org}/actions/runners/remove-token"],
    createRemoveTokenForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/remove-token"
    ],
    createRepoVariable: ["POST /repos/{owner}/{repo}/actions/variables"],
    createWorkflowDispatch: [
      "POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"
    ],
    deleteActionsCacheById: [
      "DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"
    ],
    deleteActionsCacheByKey: [
      "DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"
    ],
    deleteArtifact: [
      "DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
    ],
    deleteEnvironmentSecret: [
      "DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
    ],
    deleteEnvironmentVariable: [
      "DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}"
    ],
    deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
    deleteOrgVariable: ["DELETE /orgs/{org}/actions/variables/{name}"],
    deleteRepoSecret: [
      "DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"
    ],
    deleteRepoVariable: [
      "DELETE /repos/{owner}/{repo}/actions/variables/{name}"
    ],
    deleteSelfHostedRunnerFromOrg: [
      "DELETE /orgs/{org}/actions/runners/{runner_id}"
    ],
    deleteSelfHostedRunnerFromRepo: [
      "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"
    ],
    deleteWorkflowRun: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],
    deleteWorkflowRunLogs: [
      "DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
    ],
    disableSelectedRepositoryGithubActionsOrganization: [
      "DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"
    ],
    disableWorkflow: [
      "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"
    ],
    downloadArtifact: [
      "GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"
    ],
    downloadJobLogsForWorkflowRun: [
      "GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"
    ],
    downloadWorkflowRunAttemptLogs: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"
    ],
    downloadWorkflowRunLogs: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
    ],
    enableSelectedRepositoryGithubActionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"
    ],
    enableWorkflow: [
      "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"
    ],
    forceCancelWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"
    ],
    generateRunnerJitconfigForOrg: [
      "POST /orgs/{org}/actions/runners/generate-jitconfig"
    ],
    generateRunnerJitconfigForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"
    ],
    getActionsCacheList: ["GET /repos/{owner}/{repo}/actions/caches"],
    getActionsCacheUsage: ["GET /repos/{owner}/{repo}/actions/cache/usage"],
    getActionsCacheUsageByRepoForOrg: [
      "GET /orgs/{org}/actions/cache/usage-by-repository"
    ],
    getActionsCacheUsageForOrg: ["GET /orgs/{org}/actions/cache/usage"],
    getAllowedActionsOrganization: [
      "GET /orgs/{org}/actions/permissions/selected-actions"
    ],
    getAllowedActionsRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions/selected-actions"
    ],
    getArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
    getCustomOidcSubClaimForRepo: [
      "GET /repos/{owner}/{repo}/actions/oidc/customization/sub"
    ],
    getEnvironmentPublicKey: [
      "GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"
    ],
    getEnvironmentSecret: [
      "GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
    ],
    getEnvironmentVariable: [
      "GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}"
    ],
    getGithubActionsDefaultWorkflowPermissionsOrganization: [
      "GET /orgs/{org}/actions/permissions/workflow"
    ],
    getGithubActionsDefaultWorkflowPermissionsRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions/workflow"
    ],
    getGithubActionsPermissionsOrganization: [
      "GET /orgs/{org}/actions/permissions"
    ],
    getGithubActionsPermissionsRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions"
    ],
    getJobForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],
    getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
    getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
    getOrgVariable: ["GET /orgs/{org}/actions/variables/{name}"],
    getPendingDeploymentsForRun: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
    ],
    getRepoPermissions: [
      "GET /repos/{owner}/{repo}/actions/permissions",
      {},
      { renamed: ["actions", "getGithubActionsPermissionsRepository"] }
    ],
    getRepoPublicKey: ["GET /repos/{owner}/{repo}/actions/secrets/public-key"],
    getRepoSecret: ["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
    getRepoVariable: ["GET /repos/{owner}/{repo}/actions/variables/{name}"],
    getReviewsForRun: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"
    ],
    getSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}"],
    getSelfHostedRunnerForRepo: [
      "GET /repos/{owner}/{repo}/actions/runners/{runner_id}"
    ],
    getWorkflow: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],
    getWorkflowAccessToRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions/access"
    ],
    getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
    getWorkflowRunAttempt: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"
    ],
    getWorkflowRunUsage: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"
    ],
    getWorkflowUsage: [
      "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"
    ],
    listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
    listEnvironmentSecrets: [
      "GET /repositories/{repository_id}/environments/{environment_name}/secrets"
    ],
    listEnvironmentVariables: [
      "GET /repositories/{repository_id}/environments/{environment_name}/variables"
    ],
    listJobsForWorkflowRun: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"
    ],
    listJobsForWorkflowRunAttempt: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"
    ],
    listLabelsForSelfHostedRunnerForOrg: [
      "GET /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    listLabelsForSelfHostedRunnerForRepo: [
      "GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
    listOrgVariables: ["GET /orgs/{org}/actions/variables"],
    listRepoOrganizationSecrets: [
      "GET /repos/{owner}/{repo}/actions/organization-secrets"
    ],
    listRepoOrganizationVariables: [
      "GET /repos/{owner}/{repo}/actions/organization-variables"
    ],
    listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
    listRepoVariables: ["GET /repos/{owner}/{repo}/actions/variables"],
    listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
    listRunnerApplicationsForOrg: ["GET /orgs/{org}/actions/runners/downloads"],
    listRunnerApplicationsForRepo: [
      "GET /repos/{owner}/{repo}/actions/runners/downloads"
    ],
    listSelectedReposForOrgSecret: [
      "GET /orgs/{org}/actions/secrets/{secret_name}/repositories"
    ],
    listSelectedReposForOrgVariable: [
      "GET /orgs/{org}/actions/variables/{name}/repositories"
    ],
    listSelectedRepositoriesEnabledGithubActionsOrganization: [
      "GET /orgs/{org}/actions/permissions/repositories"
    ],
    listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
    listSelfHostedRunnersForRepo: ["GET /repos/{owner}/{repo}/actions/runners"],
    listWorkflowRunArtifacts: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"
    ],
    listWorkflowRuns: [
      "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"
    ],
    listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
    reRunJobForWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"
    ],
    reRunWorkflow: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],
    reRunWorkflowFailedJobs: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"
    ],
    removeAllCustomLabelsFromSelfHostedRunnerForOrg: [
      "DELETE /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    removeAllCustomLabelsFromSelfHostedRunnerForRepo: [
      "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    removeCustomLabelFromSelfHostedRunnerForOrg: [
      "DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"
    ],
    removeCustomLabelFromSelfHostedRunnerForRepo: [
      "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"
    ],
    removeSelectedRepoFromOrgSecret: [
      "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    ],
    removeSelectedRepoFromOrgVariable: [
      "DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
    ],
    reviewCustomGatesForRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"
    ],
    reviewPendingDeploymentsForRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
    ],
    setAllowedActionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/selected-actions"
    ],
    setAllowedActionsRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"
    ],
    setCustomLabelsForSelfHostedRunnerForOrg: [
      "PUT /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    setCustomLabelsForSelfHostedRunnerForRepo: [
      "PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    setCustomOidcSubClaimForRepo: [
      "PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"
    ],
    setGithubActionsDefaultWorkflowPermissionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/workflow"
    ],
    setGithubActionsDefaultWorkflowPermissionsRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions/workflow"
    ],
    setGithubActionsPermissionsOrganization: [
      "PUT /orgs/{org}/actions/permissions"
    ],
    setGithubActionsPermissionsRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions"
    ],
    setSelectedReposForOrgSecret: [
      "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"
    ],
    setSelectedReposForOrgVariable: [
      "PUT /orgs/{org}/actions/variables/{name}/repositories"
    ],
    setSelectedRepositoriesEnabledGithubActionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/repositories"
    ],
    setWorkflowAccessToRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions/access"
    ],
    updateEnvironmentVariable: [
      "PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}"
    ],
    updateOrgVariable: ["PATCH /orgs/{org}/actions/variables/{name}"],
    updateRepoVariable: [
      "PATCH /repos/{owner}/{repo}/actions/variables/{name}"
    ]
  },
  activity: {
    checkRepoIsStarredByAuthenticatedUser: ["GET /user/starred/{owner}/{repo}"],
    deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
    deleteThreadSubscription: [
      "DELETE /notifications/threads/{thread_id}/subscription"
    ],
    getFeeds: ["GET /feeds"],
    getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
    getThread: ["GET /notifications/threads/{thread_id}"],
    getThreadSubscriptionForAuthenticatedUser: [
      "GET /notifications/threads/{thread_id}/subscription"
    ],
    listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
    listNotificationsForAuthenticatedUser: ["GET /notifications"],
    listOrgEventsForAuthenticatedUser: [
      "GET /users/{username}/events/orgs/{org}"
    ],
    listPublicEvents: ["GET /events"],
    listPublicEventsForRepoNetwork: ["GET /networks/{owner}/{repo}/events"],
    listPublicEventsForUser: ["GET /users/{username}/events/public"],
    listPublicOrgEvents: ["GET /orgs/{org}/events"],
    listReceivedEventsForUser: ["GET /users/{username}/received_events"],
    listReceivedPublicEventsForUser: [
      "GET /users/{username}/received_events/public"
    ],
    listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
    listRepoNotificationsForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/notifications"
    ],
    listReposStarredByAuthenticatedUser: ["GET /user/starred"],
    listReposStarredByUser: ["GET /users/{username}/starred"],
    listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
    listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
    listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
    listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
    markNotificationsAsRead: ["PUT /notifications"],
    markRepoNotificationsAsRead: ["PUT /repos/{owner}/{repo}/notifications"],
    markThreadAsDone: ["DELETE /notifications/threads/{thread_id}"],
    markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
    setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
    setThreadSubscription: [
      "PUT /notifications/threads/{thread_id}/subscription"
    ],
    starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
    unstarRepoForAuthenticatedUser: ["DELETE /user/starred/{owner}/{repo}"]
  },
  apps: {
    addRepoToInstallation: [
      "PUT /user/installations/{installation_id}/repositories/{repository_id}",
      {},
      { renamed: ["apps", "addRepoToInstallationForAuthenticatedUser"] }
    ],
    addRepoToInstallationForAuthenticatedUser: [
      "PUT /user/installations/{installation_id}/repositories/{repository_id}"
    ],
    checkToken: ["POST /applications/{client_id}/token"],
    createFromManifest: ["POST /app-manifests/{code}/conversions"],
    createInstallationAccessToken: [
      "POST /app/installations/{installation_id}/access_tokens"
    ],
    deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
    deleteInstallation: ["DELETE /app/installations/{installation_id}"],
    deleteToken: ["DELETE /applications/{client_id}/token"],
    getAuthenticated: ["GET /app"],
    getBySlug: ["GET /apps/{app_slug}"],
    getInstallation: ["GET /app/installations/{installation_id}"],
    getOrgInstallation: ["GET /orgs/{org}/installation"],
    getRepoInstallation: ["GET /repos/{owner}/{repo}/installation"],
    getSubscriptionPlanForAccount: [
      "GET /marketplace_listing/accounts/{account_id}"
    ],
    getSubscriptionPlanForAccountStubbed: [
      "GET /marketplace_listing/stubbed/accounts/{account_id}"
    ],
    getUserInstallation: ["GET /users/{username}/installation"],
    getWebhookConfigForApp: ["GET /app/hook/config"],
    getWebhookDelivery: ["GET /app/hook/deliveries/{delivery_id}"],
    listAccountsForPlan: ["GET /marketplace_listing/plans/{plan_id}/accounts"],
    listAccountsForPlanStubbed: [
      "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"
    ],
    listInstallationReposForAuthenticatedUser: [
      "GET /user/installations/{installation_id}/repositories"
    ],
    listInstallationRequestsForAuthenticatedApp: [
      "GET /app/installation-requests"
    ],
    listInstallations: ["GET /app/installations"],
    listInstallationsForAuthenticatedUser: ["GET /user/installations"],
    listPlans: ["GET /marketplace_listing/plans"],
    listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
    listReposAccessibleToInstallation: ["GET /installation/repositories"],
    listSubscriptionsForAuthenticatedUser: ["GET /user/marketplace_purchases"],
    listSubscriptionsForAuthenticatedUserStubbed: [
      "GET /user/marketplace_purchases/stubbed"
    ],
    listWebhookDeliveries: ["GET /app/hook/deliveries"],
    redeliverWebhookDelivery: [
      "POST /app/hook/deliveries/{delivery_id}/attempts"
    ],
    removeRepoFromInstallation: [
      "DELETE /user/installations/{installation_id}/repositories/{repository_id}",
      {},
      { renamed: ["apps", "removeRepoFromInstallationForAuthenticatedUser"] }
    ],
    removeRepoFromInstallationForAuthenticatedUser: [
      "DELETE /user/installations/{installation_id}/repositories/{repository_id}"
    ],
    resetToken: ["PATCH /applications/{client_id}/token"],
    revokeInstallationAccessToken: ["DELETE /installation/token"],
    scopeToken: ["POST /applications/{client_id}/token/scoped"],
    suspendInstallation: ["PUT /app/installations/{installation_id}/suspended"],
    unsuspendInstallation: [
      "DELETE /app/installations/{installation_id}/suspended"
    ],
    updateWebhookConfigForApp: ["PATCH /app/hook/config"]
  },
  billing: {
    getGithubActionsBillingOrg: ["GET /orgs/{org}/settings/billing/actions"],
    getGithubActionsBillingUser: [
      "GET /users/{username}/settings/billing/actions"
    ],
    getGithubPackagesBillingOrg: ["GET /orgs/{org}/settings/billing/packages"],
    getGithubPackagesBillingUser: [
      "GET /users/{username}/settings/billing/packages"
    ],
    getSharedStorageBillingOrg: [
      "GET /orgs/{org}/settings/billing/shared-storage"
    ],
    getSharedStorageBillingUser: [
      "GET /users/{username}/settings/billing/shared-storage"
    ]
  },
  checks: {
    create: ["POST /repos/{owner}/{repo}/check-runs"],
    createSuite: ["POST /repos/{owner}/{repo}/check-suites"],
    get: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],
    getSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],
    listAnnotations: [
      "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"
    ],
    listForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],
    listForSuite: [
      "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"
    ],
    listSuitesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],
    rerequestRun: [
      "POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"
    ],
    rerequestSuite: [
      "POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"
    ],
    setSuitesPreferences: [
      "PATCH /repos/{owner}/{repo}/check-suites/preferences"
    ],
    update: ["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]
  },
  codeScanning: {
    deleteAnalysis: [
      "DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"
    ],
    getAlert: [
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
      {},
      { renamedParameters: { alert_id: "alert_number" } }
    ],
    getAnalysis: [
      "GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"
    ],
    getCodeqlDatabase: [
      "GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"
    ],
    getDefaultSetup: ["GET /repos/{owner}/{repo}/code-scanning/default-setup"],
    getSarif: ["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],
    listAlertInstances: [
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"
    ],
    listAlertsForOrg: ["GET /orgs/{org}/code-scanning/alerts"],
    listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
    listAlertsInstances: [
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
      {},
      { renamed: ["codeScanning", "listAlertInstances"] }
    ],
    listCodeqlDatabases: [
      "GET /repos/{owner}/{repo}/code-scanning/codeql/databases"
    ],
    listRecentAnalyses: ["GET /repos/{owner}/{repo}/code-scanning/analyses"],
    updateAlert: [
      "PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"
    ],
    updateDefaultSetup: [
      "PATCH /repos/{owner}/{repo}/code-scanning/default-setup"
    ],
    uploadSarif: ["POST /repos/{owner}/{repo}/code-scanning/sarifs"]
  },
  codesOfConduct: {
    getAllCodesOfConduct: ["GET /codes_of_conduct"],
    getConductCode: ["GET /codes_of_conduct/{key}"]
  },
  codespaces: {
    addRepositoryForSecretForAuthenticatedUser: [
      "PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    ],
    addSelectedRepoToOrgSecret: [
      "PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    ],
    checkPermissionsForDevcontainer: [
      "GET /repos/{owner}/{repo}/codespaces/permissions_check"
    ],
    codespaceMachinesForAuthenticatedUser: [
      "GET /user/codespaces/{codespace_name}/machines"
    ],
    createForAuthenticatedUser: ["POST /user/codespaces"],
    createOrUpdateOrgSecret: [
      "PUT /orgs/{org}/codespaces/secrets/{secret_name}"
    ],
    createOrUpdateRepoSecret: [
      "PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
    ],
    createOrUpdateSecretForAuthenticatedUser: [
      "PUT /user/codespaces/secrets/{secret_name}"
    ],
    createWithPrForAuthenticatedUser: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"
    ],
    createWithRepoForAuthenticatedUser: [
      "POST /repos/{owner}/{repo}/codespaces"
    ],
    deleteForAuthenticatedUser: ["DELETE /user/codespaces/{codespace_name}"],
    deleteFromOrganization: [
      "DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"
    ],
    deleteOrgSecret: ["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],
    deleteRepoSecret: [
      "DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
    ],
    deleteSecretForAuthenticatedUser: [
      "DELETE /user/codespaces/secrets/{secret_name}"
    ],
    exportForAuthenticatedUser: [
      "POST /user/codespaces/{codespace_name}/exports"
    ],
    getCodespacesForUserInOrg: [
      "GET /orgs/{org}/members/{username}/codespaces"
    ],
    getExportDetailsForAuthenticatedUser: [
      "GET /user/codespaces/{codespace_name}/exports/{export_id}"
    ],
    getForAuthenticatedUser: ["GET /user/codespaces/{codespace_name}"],
    getOrgPublicKey: ["GET /orgs/{org}/codespaces/secrets/public-key"],
    getOrgSecret: ["GET /orgs/{org}/codespaces/secrets/{secret_name}"],
    getPublicKeyForAuthenticatedUser: [
      "GET /user/codespaces/secrets/public-key"
    ],
    getRepoPublicKey: [
      "GET /repos/{owner}/{repo}/codespaces/secrets/public-key"
    ],
    getRepoSecret: [
      "GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
    ],
    getSecretForAuthenticatedUser: [
      "GET /user/codespaces/secrets/{secret_name}"
    ],
    listDevcontainersInRepositoryForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces/devcontainers"
    ],
    listForAuthenticatedUser: ["GET /user/codespaces"],
    listInOrganization: [
      "GET /orgs/{org}/codespaces",
      {},
      { renamedParameters: { org_id: "org" } }
    ],
    listInRepositoryForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces"
    ],
    listOrgSecrets: ["GET /orgs/{org}/codespaces/secrets"],
    listRepoSecrets: ["GET /repos/{owner}/{repo}/codespaces/secrets"],
    listRepositoriesForSecretForAuthenticatedUser: [
      "GET /user/codespaces/secrets/{secret_name}/repositories"
    ],
    listSecretsForAuthenticatedUser: ["GET /user/codespaces/secrets"],
    listSelectedReposForOrgSecret: [
      "GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"
    ],
    preFlightWithRepoForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces/new"
    ],
    publishForAuthenticatedUser: [
      "POST /user/codespaces/{codespace_name}/publish"
    ],
    removeRepositoryForSecretForAuthenticatedUser: [
      "DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    ],
    removeSelectedRepoFromOrgSecret: [
      "DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    ],
    repoMachinesForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces/machines"
    ],
    setRepositoriesForSecretForAuthenticatedUser: [
      "PUT /user/codespaces/secrets/{secret_name}/repositories"
    ],
    setSelectedReposForOrgSecret: [
      "PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"
    ],
    startForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/start"],
    stopForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/stop"],
    stopInOrganization: [
      "POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"
    ],
    updateForAuthenticatedUser: ["PATCH /user/codespaces/{codespace_name}"]
  },
  copilot: {
    addCopilotSeatsForTeams: [
      "POST /orgs/{org}/copilot/billing/selected_teams"
    ],
    addCopilotSeatsForUsers: [
      "POST /orgs/{org}/copilot/billing/selected_users"
    ],
    cancelCopilotSeatAssignmentForTeams: [
      "DELETE /orgs/{org}/copilot/billing/selected_teams"
    ],
    cancelCopilotSeatAssignmentForUsers: [
      "DELETE /orgs/{org}/copilot/billing/selected_users"
    ],
    getCopilotOrganizationDetails: ["GET /orgs/{org}/copilot/billing"],
    getCopilotSeatDetailsForUser: [
      "GET /orgs/{org}/members/{username}/copilot"
    ],
    listCopilotSeats: ["GET /orgs/{org}/copilot/billing/seats"]
  },
  dependabot: {
    addSelectedRepoToOrgSecret: [
      "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
    ],
    createOrUpdateOrgSecret: [
      "PUT /orgs/{org}/dependabot/secrets/{secret_name}"
    ],
    createOrUpdateRepoSecret: [
      "PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
    ],
    deleteOrgSecret: ["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],
    deleteRepoSecret: [
      "DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
    ],
    getAlert: ["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],
    getOrgPublicKey: ["GET /orgs/{org}/dependabot/secrets/public-key"],
    getOrgSecret: ["GET /orgs/{org}/dependabot/secrets/{secret_name}"],
    getRepoPublicKey: [
      "GET /repos/{owner}/{repo}/dependabot/secrets/public-key"
    ],
    getRepoSecret: [
      "GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
    ],
    listAlertsForEnterprise: [
      "GET /enterprises/{enterprise}/dependabot/alerts"
    ],
    listAlertsForOrg: ["GET /orgs/{org}/dependabot/alerts"],
    listAlertsForRepo: ["GET /repos/{owner}/{repo}/dependabot/alerts"],
    listOrgSecrets: ["GET /orgs/{org}/dependabot/secrets"],
    listRepoSecrets: ["GET /repos/{owner}/{repo}/dependabot/secrets"],
    listSelectedReposForOrgSecret: [
      "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
    ],
    removeSelectedRepoFromOrgSecret: [
      "DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
    ],
    setSelectedReposForOrgSecret: [
      "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
    ],
    updateAlert: [
      "PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"
    ]
  },
  dependencyGraph: {
    createRepositorySnapshot: [
      "POST /repos/{owner}/{repo}/dependency-graph/snapshots"
    ],
    diffRange: [
      "GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"
    ],
    exportSbom: ["GET /repos/{owner}/{repo}/dependency-graph/sbom"]
  },
  emojis: { get: ["GET /emojis"] },
  gists: {
    checkIsStarred: ["GET /gists/{gist_id}/star"],
    create: ["POST /gists"],
    createComment: ["POST /gists/{gist_id}/comments"],
    delete: ["DELETE /gists/{gist_id}"],
    deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
    fork: ["POST /gists/{gist_id}/forks"],
    get: ["GET /gists/{gist_id}"],
    getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
    getRevision: ["GET /gists/{gist_id}/{sha}"],
    list: ["GET /gists"],
    listComments: ["GET /gists/{gist_id}/comments"],
    listCommits: ["GET /gists/{gist_id}/commits"],
    listForUser: ["GET /users/{username}/gists"],
    listForks: ["GET /gists/{gist_id}/forks"],
    listPublic: ["GET /gists/public"],
    listStarred: ["GET /gists/starred"],
    star: ["PUT /gists/{gist_id}/star"],
    unstar: ["DELETE /gists/{gist_id}/star"],
    update: ["PATCH /gists/{gist_id}"],
    updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"]
  },
  git: {
    createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
    createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
    createRef: ["POST /repos/{owner}/{repo}/git/refs"],
    createTag: ["POST /repos/{owner}/{repo}/git/tags"],
    createTree: ["POST /repos/{owner}/{repo}/git/trees"],
    deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
    getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
    getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
    getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
    getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
    getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
    listMatchingRefs: ["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],
    updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]
  },
  gitignore: {
    getAllTemplates: ["GET /gitignore/templates"],
    getTemplate: ["GET /gitignore/templates/{name}"]
  },
  interactions: {
    getRestrictionsForAuthenticatedUser: ["GET /user/interaction-limits"],
    getRestrictionsForOrg: ["GET /orgs/{org}/interaction-limits"],
    getRestrictionsForRepo: ["GET /repos/{owner}/{repo}/interaction-limits"],
    getRestrictionsForYourPublicRepos: [
      "GET /user/interaction-limits",
      {},
      { renamed: ["interactions", "getRestrictionsForAuthenticatedUser"] }
    ],
    removeRestrictionsForAuthenticatedUser: ["DELETE /user/interaction-limits"],
    removeRestrictionsForOrg: ["DELETE /orgs/{org}/interaction-limits"],
    removeRestrictionsForRepo: [
      "DELETE /repos/{owner}/{repo}/interaction-limits"
    ],
    removeRestrictionsForYourPublicRepos: [
      "DELETE /user/interaction-limits",
      {},
      { renamed: ["interactions", "removeRestrictionsForAuthenticatedUser"] }
    ],
    setRestrictionsForAuthenticatedUser: ["PUT /user/interaction-limits"],
    setRestrictionsForOrg: ["PUT /orgs/{org}/interaction-limits"],
    setRestrictionsForRepo: ["PUT /repos/{owner}/{repo}/interaction-limits"],
    setRestrictionsForYourPublicRepos: [
      "PUT /user/interaction-limits",
      {},
      { renamed: ["interactions", "setRestrictionsForAuthenticatedUser"] }
    ]
  },
  issues: {
    addAssignees: [
      "POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"
    ],
    addLabels: ["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],
    checkUserCanBeAssigned: ["GET /repos/{owner}/{repo}/assignees/{assignee}"],
    checkUserCanBeAssignedToIssue: [
      "GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"
    ],
    create: ["POST /repos/{owner}/{repo}/issues"],
    createComment: [
      "POST /repos/{owner}/{repo}/issues/{issue_number}/comments"
    ],
    createLabel: ["POST /repos/{owner}/{repo}/labels"],
    createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
    deleteComment: [
      "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"
    ],
    deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
    deleteMilestone: [
      "DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"
    ],
    get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
    getComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],
    getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
    getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
    getMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],
    list: ["GET /issues"],
    listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
    listComments: ["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],
    listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
    listEvents: ["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],
    listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
    listEventsForTimeline: [
      "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"
    ],
    listForAuthenticatedUser: ["GET /user/issues"],
    listForOrg: ["GET /orgs/{org}/issues"],
    listForRepo: ["GET /repos/{owner}/{repo}/issues"],
    listLabelsForMilestone: [
      "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"
    ],
    listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
    listLabelsOnIssue: [
      "GET /repos/{owner}/{repo}/issues/{issue_number}/labels"
    ],
    listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
    lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
    removeAllLabels: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"
    ],
    removeAssignees: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"
    ],
    removeLabel: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"
    ],
    setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
    unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
    update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
    updateComment: ["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],
    updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
    updateMilestone: [
      "PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"
    ]
  },
  licenses: {
    get: ["GET /licenses/{license}"],
    getAllCommonlyUsed: ["GET /licenses"],
    getForRepo: ["GET /repos/{owner}/{repo}/license"]
  },
  markdown: {
    render: ["POST /markdown"],
    renderRaw: [
      "POST /markdown/raw",
      { headers: { "content-type": "text/plain; charset=utf-8" } }
    ]
  },
  meta: {
    get: ["GET /meta"],
    getAllVersions: ["GET /versions"],
    getOctocat: ["GET /octocat"],
    getZen: ["GET /zen"],
    root: ["GET /"]
  },
  migrations: {
    cancelImport: [
      "DELETE /repos/{owner}/{repo}/import",
      {},
      {
        deprecated: "octokit.rest.migrations.cancelImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#cancel-an-import"
      }
    ],
    deleteArchiveForAuthenticatedUser: [
      "DELETE /user/migrations/{migration_id}/archive"
    ],
    deleteArchiveForOrg: [
      "DELETE /orgs/{org}/migrations/{migration_id}/archive"
    ],
    downloadArchiveForOrg: [
      "GET /orgs/{org}/migrations/{migration_id}/archive"
    ],
    getArchiveForAuthenticatedUser: [
      "GET /user/migrations/{migration_id}/archive"
    ],
    getCommitAuthors: [
      "GET /repos/{owner}/{repo}/import/authors",
      {},
      {
        deprecated: "octokit.rest.migrations.getCommitAuthors() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-commit-authors"
      }
    ],
    getImportStatus: [
      "GET /repos/{owner}/{repo}/import",
      {},
      {
        deprecated: "octokit.rest.migrations.getImportStatus() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-an-import-status"
      }
    ],
    getLargeFiles: [
      "GET /repos/{owner}/{repo}/import/large_files",
      {},
      {
        deprecated: "octokit.rest.migrations.getLargeFiles() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-large-files"
      }
    ],
    getStatusForAuthenticatedUser: ["GET /user/migrations/{migration_id}"],
    getStatusForOrg: ["GET /orgs/{org}/migrations/{migration_id}"],
    listForAuthenticatedUser: ["GET /user/migrations"],
    listForOrg: ["GET /orgs/{org}/migrations"],
    listReposForAuthenticatedUser: [
      "GET /user/migrations/{migration_id}/repositories"
    ],
    listReposForOrg: ["GET /orgs/{org}/migrations/{migration_id}/repositories"],
    listReposForUser: [
      "GET /user/migrations/{migration_id}/repositories",
      {},
      { renamed: ["migrations", "listReposForAuthenticatedUser"] }
    ],
    mapCommitAuthor: [
      "PATCH /repos/{owner}/{repo}/import/authors/{author_id}",
      {},
      {
        deprecated: "octokit.rest.migrations.mapCommitAuthor() is deprecated, see https://docs.github.com/rest/migrations/source-imports#map-a-commit-author"
      }
    ],
    setLfsPreference: [
      "PATCH /repos/{owner}/{repo}/import/lfs",
      {},
      {
        deprecated: "octokit.rest.migrations.setLfsPreference() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference"
      }
    ],
    startForAuthenticatedUser: ["POST /user/migrations"],
    startForOrg: ["POST /orgs/{org}/migrations"],
    startImport: [
      "PUT /repos/{owner}/{repo}/import",
      {},
      {
        deprecated: "octokit.rest.migrations.startImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#start-an-import"
      }
    ],
    unlockRepoForAuthenticatedUser: [
      "DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"
    ],
    unlockRepoForOrg: [
      "DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"
    ],
    updateImport: [
      "PATCH /repos/{owner}/{repo}/import",
      {},
      {
        deprecated: "octokit.rest.migrations.updateImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-an-import"
      }
    ]
  },
  oidc: {
    getOidcCustomSubTemplateForOrg: [
      "GET /orgs/{org}/actions/oidc/customization/sub"
    ],
    updateOidcCustomSubTemplateForOrg: [
      "PUT /orgs/{org}/actions/oidc/customization/sub"
    ]
  },
  orgs: {
    addSecurityManagerTeam: [
      "PUT /orgs/{org}/security-managers/teams/{team_slug}"
    ],
    assignTeamToOrgRole: [
      "PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"
    ],
    assignUserToOrgRole: [
      "PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"
    ],
    blockUser: ["PUT /orgs/{org}/blocks/{username}"],
    cancelInvitation: ["DELETE /orgs/{org}/invitations/{invitation_id}"],
    checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
    checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
    checkPublicMembershipForUser: ["GET /orgs/{org}/public_members/{username}"],
    convertMemberToOutsideCollaborator: [
      "PUT /orgs/{org}/outside_collaborators/{username}"
    ],
    createCustomOrganizationRole: ["POST /orgs/{org}/organization-roles"],
    createInvitation: ["POST /orgs/{org}/invitations"],
    createOrUpdateCustomProperties: ["PATCH /orgs/{org}/properties/schema"],
    createOrUpdateCustomPropertiesValuesForRepos: [
      "PATCH /orgs/{org}/properties/values"
    ],
    createOrUpdateCustomProperty: [
      "PUT /orgs/{org}/properties/schema/{custom_property_name}"
    ],
    createWebhook: ["POST /orgs/{org}/hooks"],
    delete: ["DELETE /orgs/{org}"],
    deleteCustomOrganizationRole: [
      "DELETE /orgs/{org}/organization-roles/{role_id}"
    ],
    deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
    enableOrDisableSecurityProductOnAllOrgRepos: [
      "POST /orgs/{org}/{security_product}/{enablement}"
    ],
    get: ["GET /orgs/{org}"],
    getAllCustomProperties: ["GET /orgs/{org}/properties/schema"],
    getCustomProperty: [
      "GET /orgs/{org}/properties/schema/{custom_property_name}"
    ],
    getMembershipForAuthenticatedUser: ["GET /user/memberships/orgs/{org}"],
    getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
    getOrgRole: ["GET /orgs/{org}/organization-roles/{role_id}"],
    getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
    getWebhookConfigForOrg: ["GET /orgs/{org}/hooks/{hook_id}/config"],
    getWebhookDelivery: [
      "GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"
    ],
    list: ["GET /organizations"],
    listAppInstallations: ["GET /orgs/{org}/installations"],
    listBlockedUsers: ["GET /orgs/{org}/blocks"],
    listCustomPropertiesValuesForRepos: ["GET /orgs/{org}/properties/values"],
    listFailedInvitations: ["GET /orgs/{org}/failed_invitations"],
    listForAuthenticatedUser: ["GET /user/orgs"],
    listForUser: ["GET /users/{username}/orgs"],
    listInvitationTeams: ["GET /orgs/{org}/invitations/{invitation_id}/teams"],
    listMembers: ["GET /orgs/{org}/members"],
    listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
    listOrgRoleTeams: ["GET /orgs/{org}/organization-roles/{role_id}/teams"],
    listOrgRoleUsers: ["GET /orgs/{org}/organization-roles/{role_id}/users"],
    listOrgRoles: ["GET /orgs/{org}/organization-roles"],
    listOrganizationFineGrainedPermissions: [
      "GET /orgs/{org}/organization-fine-grained-permissions"
    ],
    listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
    listPatGrantRepositories: [
      "GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"
    ],
    listPatGrantRequestRepositories: [
      "GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"
    ],
    listPatGrantRequests: ["GET /orgs/{org}/personal-access-token-requests"],
    listPatGrants: ["GET /orgs/{org}/personal-access-tokens"],
    listPendingInvitations: ["GET /orgs/{org}/invitations"],
    listPublicMembers: ["GET /orgs/{org}/public_members"],
    listSecurityManagerTeams: ["GET /orgs/{org}/security-managers"],
    listWebhookDeliveries: ["GET /orgs/{org}/hooks/{hook_id}/deliveries"],
    listWebhooks: ["GET /orgs/{org}/hooks"],
    patchCustomOrganizationRole: [
      "PATCH /orgs/{org}/organization-roles/{role_id}"
    ],
    pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
    redeliverWebhookDelivery: [
      "POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
    ],
    removeCustomProperty: [
      "DELETE /orgs/{org}/properties/schema/{custom_property_name}"
    ],
    removeMember: ["DELETE /orgs/{org}/members/{username}"],
    removeMembershipForUser: ["DELETE /orgs/{org}/memberships/{username}"],
    removeOutsideCollaborator: [
      "DELETE /orgs/{org}/outside_collaborators/{username}"
    ],
    removePublicMembershipForAuthenticatedUser: [
      "DELETE /orgs/{org}/public_members/{username}"
    ],
    removeSecurityManagerTeam: [
      "DELETE /orgs/{org}/security-managers/teams/{team_slug}"
    ],
    reviewPatGrantRequest: [
      "POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"
    ],
    reviewPatGrantRequestsInBulk: [
      "POST /orgs/{org}/personal-access-token-requests"
    ],
    revokeAllOrgRolesTeam: [
      "DELETE /orgs/{org}/organization-roles/teams/{team_slug}"
    ],
    revokeAllOrgRolesUser: [
      "DELETE /orgs/{org}/organization-roles/users/{username}"
    ],
    revokeOrgRoleTeam: [
      "DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"
    ],
    revokeOrgRoleUser: [
      "DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"
    ],
    setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
    setPublicMembershipForAuthenticatedUser: [
      "PUT /orgs/{org}/public_members/{username}"
    ],
    unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
    update: ["PATCH /orgs/{org}"],
    updateMembershipForAuthenticatedUser: [
      "PATCH /user/memberships/orgs/{org}"
    ],
    updatePatAccess: ["POST /orgs/{org}/personal-access-tokens/{pat_id}"],
    updatePatAccesses: ["POST /orgs/{org}/personal-access-tokens"],
    updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"],
    updateWebhookConfigForOrg: ["PATCH /orgs/{org}/hooks/{hook_id}/config"]
  },
  packages: {
    deletePackageForAuthenticatedUser: [
      "DELETE /user/packages/{package_type}/{package_name}"
    ],
    deletePackageForOrg: [
      "DELETE /orgs/{org}/packages/{package_type}/{package_name}"
    ],
    deletePackageForUser: [
      "DELETE /users/{username}/packages/{package_type}/{package_name}"
    ],
    deletePackageVersionForAuthenticatedUser: [
      "DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    deletePackageVersionForOrg: [
      "DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    deletePackageVersionForUser: [
      "DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    getAllPackageVersionsForAPackageOwnedByAnOrg: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
      {},
      { renamed: ["packages", "getAllPackageVersionsForPackageOwnedByOrg"] }
    ],
    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}/versions",
      {},
      {
        renamed: [
          "packages",
          "getAllPackageVersionsForPackageOwnedByAuthenticatedUser"
        ]
      }
    ],
    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}/versions"
    ],
    getAllPackageVersionsForPackageOwnedByOrg: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}/versions"
    ],
    getAllPackageVersionsForPackageOwnedByUser: [
      "GET /users/{username}/packages/{package_type}/{package_name}/versions"
    ],
    getPackageForAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}"
    ],
    getPackageForOrganization: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}"
    ],
    getPackageForUser: [
      "GET /users/{username}/packages/{package_type}/{package_name}"
    ],
    getPackageVersionForAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    getPackageVersionForOrganization: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    getPackageVersionForUser: [
      "GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    listDockerMigrationConflictingPackagesForAuthenticatedUser: [
      "GET /user/docker/conflicts"
    ],
    listDockerMigrationConflictingPackagesForOrganization: [
      "GET /orgs/{org}/docker/conflicts"
    ],
    listDockerMigrationConflictingPackagesForUser: [
      "GET /users/{username}/docker/conflicts"
    ],
    listPackagesForAuthenticatedUser: ["GET /user/packages"],
    listPackagesForOrganization: ["GET /orgs/{org}/packages"],
    listPackagesForUser: ["GET /users/{username}/packages"],
    restorePackageForAuthenticatedUser: [
      "POST /user/packages/{package_type}/{package_name}/restore{?token}"
    ],
    restorePackageForOrg: [
      "POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"
    ],
    restorePackageForUser: [
      "POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"
    ],
    restorePackageVersionForAuthenticatedUser: [
      "POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
    ],
    restorePackageVersionForOrg: [
      "POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
    ],
    restorePackageVersionForUser: [
      "POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
    ]
  },
  projects: {
    addCollaborator: ["PUT /projects/{project_id}/collaborators/{username}"],
    createCard: ["POST /projects/columns/{column_id}/cards"],
    createColumn: ["POST /projects/{project_id}/columns"],
    createForAuthenticatedUser: ["POST /user/projects"],
    createForOrg: ["POST /orgs/{org}/projects"],
    createForRepo: ["POST /repos/{owner}/{repo}/projects"],
    delete: ["DELETE /projects/{project_id}"],
    deleteCard: ["DELETE /projects/columns/cards/{card_id}"],
    deleteColumn: ["DELETE /projects/columns/{column_id}"],
    get: ["GET /projects/{project_id}"],
    getCard: ["GET /projects/columns/cards/{card_id}"],
    getColumn: ["GET /projects/columns/{column_id}"],
    getPermissionForUser: [
      "GET /projects/{project_id}/collaborators/{username}/permission"
    ],
    listCards: ["GET /projects/columns/{column_id}/cards"],
    listCollaborators: ["GET /projects/{project_id}/collaborators"],
    listColumns: ["GET /projects/{project_id}/columns"],
    listForOrg: ["GET /orgs/{org}/projects"],
    listForRepo: ["GET /repos/{owner}/{repo}/projects"],
    listForUser: ["GET /users/{username}/projects"],
    moveCard: ["POST /projects/columns/cards/{card_id}/moves"],
    moveColumn: ["POST /projects/columns/{column_id}/moves"],
    removeCollaborator: [
      "DELETE /projects/{project_id}/collaborators/{username}"
    ],
    update: ["PATCH /projects/{project_id}"],
    updateCard: ["PATCH /projects/columns/cards/{card_id}"],
    updateColumn: ["PATCH /projects/columns/{column_id}"]
  },
  pulls: {
    checkIfMerged: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
    create: ["POST /repos/{owner}/{repo}/pulls"],
    createReplyForReviewComment: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"
    ],
    createReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
    createReviewComment: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"
    ],
    deletePendingReview: [
      "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
    ],
    deleteReviewComment: [
      "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"
    ],
    dismissReview: [
      "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"
    ],
    get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
    getReview: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
    ],
    getReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
    list: ["GET /repos/{owner}/{repo}/pulls"],
    listCommentsForReview: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"
    ],
    listCommits: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],
    listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
    listRequestedReviewers: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    ],
    listReviewComments: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"
    ],
    listReviewCommentsForRepo: ["GET /repos/{owner}/{repo}/pulls/comments"],
    listReviews: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
    merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
    removeRequestedReviewers: [
      "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    ],
    requestReviewers: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    ],
    submitReview: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"
    ],
    update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
    updateBranch: [
      "PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"
    ],
    updateReview: [
      "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
    ],
    updateReviewComment: [
      "PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"
    ]
  },
  rateLimit: { get: ["GET /rate_limit"] },
  reactions: {
    createForCommitComment: [
      "POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"
    ],
    createForIssue: [
      "POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"
    ],
    createForIssueComment: [
      "POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
    ],
    createForPullRequestReviewComment: [
      "POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
    ],
    createForRelease: [
      "POST /repos/{owner}/{repo}/releases/{release_id}/reactions"
    ],
    createForTeamDiscussionCommentInOrg: [
      "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
    ],
    createForTeamDiscussionInOrg: [
      "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
    ],
    deleteForCommitComment: [
      "DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"
    ],
    deleteForIssue: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"
    ],
    deleteForIssueComment: [
      "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"
    ],
    deleteForPullRequestComment: [
      "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"
    ],
    deleteForRelease: [
      "DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"
    ],
    deleteForTeamDiscussion: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"
    ],
    deleteForTeamDiscussionComment: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"
    ],
    listForCommitComment: [
      "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"
    ],
    listForIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
    listForIssueComment: [
      "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
    ],
    listForPullRequestReviewComment: [
      "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
    ],
    listForRelease: [
      "GET /repos/{owner}/{repo}/releases/{release_id}/reactions"
    ],
    listForTeamDiscussionCommentInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
    ],
    listForTeamDiscussionInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
    ]
  },
  repos: {
    acceptInvitation: [
      "PATCH /user/repository_invitations/{invitation_id}",
      {},
      { renamed: ["repos", "acceptInvitationForAuthenticatedUser"] }
    ],
    acceptInvitationForAuthenticatedUser: [
      "PATCH /user/repository_invitations/{invitation_id}"
    ],
    addAppAccessRestrictions: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      {},
      { mapToData: "apps" }
    ],
    addCollaborator: ["PUT /repos/{owner}/{repo}/collaborators/{username}"],
    addStatusCheckContexts: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      {},
      { mapToData: "contexts" }
    ],
    addTeamAccessRestrictions: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      {},
      { mapToData: "teams" }
    ],
    addUserAccessRestrictions: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      {},
      { mapToData: "users" }
    ],
    cancelPagesDeployment: [
      "POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"
    ],
    checkAutomatedSecurityFixes: [
      "GET /repos/{owner}/{repo}/automated-security-fixes"
    ],
    checkCollaborator: ["GET /repos/{owner}/{repo}/collaborators/{username}"],
    checkVulnerabilityAlerts: [
      "GET /repos/{owner}/{repo}/vulnerability-alerts"
    ],
    codeownersErrors: ["GET /repos/{owner}/{repo}/codeowners/errors"],
    compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
    compareCommitsWithBasehead: [
      "GET /repos/{owner}/{repo}/compare/{basehead}"
    ],
    createAutolink: ["POST /repos/{owner}/{repo}/autolinks"],
    createCommitComment: [
      "POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"
    ],
    createCommitSignatureProtection: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
    ],
    createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
    createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
    createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
    createDeploymentBranchPolicy: [
      "POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"
    ],
    createDeploymentProtectionRule: [
      "POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"
    ],
    createDeploymentStatus: [
      "POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
    ],
    createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
    createForAuthenticatedUser: ["POST /user/repos"],
    createFork: ["POST /repos/{owner}/{repo}/forks"],
    createInOrg: ["POST /orgs/{org}/repos"],
    createOrUpdateCustomPropertiesValues: [
      "PATCH /repos/{owner}/{repo}/properties/values"
    ],
    createOrUpdateEnvironment: [
      "PUT /repos/{owner}/{repo}/environments/{environment_name}"
    ],
    createOrUpdateFileContents: ["PUT /repos/{owner}/{repo}/contents/{path}"],
    createOrgRuleset: ["POST /orgs/{org}/rulesets"],
    createPagesDeployment: ["POST /repos/{owner}/{repo}/pages/deployments"],
    createPagesSite: ["POST /repos/{owner}/{repo}/pages"],
    createRelease: ["POST /repos/{owner}/{repo}/releases"],
    createRepoRuleset: ["POST /repos/{owner}/{repo}/rulesets"],
    createTagProtection: ["POST /repos/{owner}/{repo}/tags/protection"],
    createUsingTemplate: [
      "POST /repos/{template_owner}/{template_repo}/generate"
    ],
    createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
    declineInvitation: [
      "DELETE /user/repository_invitations/{invitation_id}",
      {},
      { renamed: ["repos", "declineInvitationForAuthenticatedUser"] }
    ],
    declineInvitationForAuthenticatedUser: [
      "DELETE /user/repository_invitations/{invitation_id}"
    ],
    delete: ["DELETE /repos/{owner}/{repo}"],
    deleteAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
    ],
    deleteAdminBranchProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
    ],
    deleteAnEnvironment: [
      "DELETE /repos/{owner}/{repo}/environments/{environment_name}"
    ],
    deleteAutolink: ["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],
    deleteBranchProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection"
    ],
    deleteCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],
    deleteCommitSignatureProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
    ],
    deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
    deleteDeployment: [
      "DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"
    ],
    deleteDeploymentBranchPolicy: [
      "DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
    ],
    deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
    deleteInvitation: [
      "DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"
    ],
    deleteOrgRuleset: ["DELETE /orgs/{org}/rulesets/{ruleset_id}"],
    deletePagesSite: ["DELETE /repos/{owner}/{repo}/pages"],
    deletePullRequestReviewProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
    ],
    deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
    deleteReleaseAsset: [
      "DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"
    ],
    deleteRepoRuleset: ["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
    deleteTagProtection: [
      "DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"
    ],
    deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
    disableAutomatedSecurityFixes: [
      "DELETE /repos/{owner}/{repo}/automated-security-fixes"
    ],
    disableDeploymentProtectionRule: [
      "DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"
    ],
    disablePrivateVulnerabilityReporting: [
      "DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"
    ],
    disableVulnerabilityAlerts: [
      "DELETE /repos/{owner}/{repo}/vulnerability-alerts"
    ],
    downloadArchive: [
      "GET /repos/{owner}/{repo}/zipball/{ref}",
      {},
      { renamed: ["repos", "downloadZipballArchive"] }
    ],
    downloadTarballArchive: ["GET /repos/{owner}/{repo}/tarball/{ref}"],
    downloadZipballArchive: ["GET /repos/{owner}/{repo}/zipball/{ref}"],
    enableAutomatedSecurityFixes: [
      "PUT /repos/{owner}/{repo}/automated-security-fixes"
    ],
    enablePrivateVulnerabilityReporting: [
      "PUT /repos/{owner}/{repo}/private-vulnerability-reporting"
    ],
    enableVulnerabilityAlerts: [
      "PUT /repos/{owner}/{repo}/vulnerability-alerts"
    ],
    generateReleaseNotes: [
      "POST /repos/{owner}/{repo}/releases/generate-notes"
    ],
    get: ["GET /repos/{owner}/{repo}"],
    getAccessRestrictions: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
    ],
    getAdminBranchProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
    ],
    getAllDeploymentProtectionRules: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"
    ],
    getAllEnvironments: ["GET /repos/{owner}/{repo}/environments"],
    getAllStatusCheckContexts: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
    ],
    getAllTopics: ["GET /repos/{owner}/{repo}/topics"],
    getAppsWithAccessToProtectedBranch: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
    ],
    getAutolink: ["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],
    getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
    getBranchProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection"
    ],
    getBranchRules: ["GET /repos/{owner}/{repo}/rules/branches/{branch}"],
    getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
    getCodeFrequencyStats: ["GET /repos/{owner}/{repo}/stats/code_frequency"],
    getCollaboratorPermissionLevel: [
      "GET /repos/{owner}/{repo}/collaborators/{username}/permission"
    ],
    getCombinedStatusForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/status"],
    getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
    getCommitActivityStats: ["GET /repos/{owner}/{repo}/stats/commit_activity"],
    getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
    getCommitSignatureProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
    ],
    getCommunityProfileMetrics: ["GET /repos/{owner}/{repo}/community/profile"],
    getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
    getContributorsStats: ["GET /repos/{owner}/{repo}/stats/contributors"],
    getCustomDeploymentProtectionRule: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"
    ],
    getCustomPropertiesValues: ["GET /repos/{owner}/{repo}/properties/values"],
    getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
    getDeployment: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],
    getDeploymentBranchPolicy: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
    ],
    getDeploymentStatus: [
      "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"
    ],
    getEnvironment: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}"
    ],
    getLatestPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/latest"],
    getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
    getOrgRuleSuite: ["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],
    getOrgRuleSuites: ["GET /orgs/{org}/rulesets/rule-suites"],
    getOrgRuleset: ["GET /orgs/{org}/rulesets/{ruleset_id}"],
    getOrgRulesets: ["GET /orgs/{org}/rulesets"],
    getPages: ["GET /repos/{owner}/{repo}/pages"],
    getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
    getPagesDeployment: [
      "GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"
    ],
    getPagesHealthCheck: ["GET /repos/{owner}/{repo}/pages/health"],
    getParticipationStats: ["GET /repos/{owner}/{repo}/stats/participation"],
    getPullRequestReviewProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
    ],
    getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
    getReadme: ["GET /repos/{owner}/{repo}/readme"],
    getReadmeInDirectory: ["GET /repos/{owner}/{repo}/readme/{dir}"],
    getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
    getReleaseAsset: ["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],
    getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
    getRepoRuleSuite: [
      "GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"
    ],
    getRepoRuleSuites: ["GET /repos/{owner}/{repo}/rulesets/rule-suites"],
    getRepoRuleset: ["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
    getRepoRulesets: ["GET /repos/{owner}/{repo}/rulesets"],
    getStatusChecksProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
    ],
    getTeamsWithAccessToProtectedBranch: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
    ],
    getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
    getTopReferrers: ["GET /repos/{owner}/{repo}/traffic/popular/referrers"],
    getUsersWithAccessToProtectedBranch: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
    ],
    getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
    getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
    getWebhookConfigForRepo: [
      "GET /repos/{owner}/{repo}/hooks/{hook_id}/config"
    ],
    getWebhookDelivery: [
      "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
    ],
    listActivities: ["GET /repos/{owner}/{repo}/activity"],
    listAutolinks: ["GET /repos/{owner}/{repo}/autolinks"],
    listBranches: ["GET /repos/{owner}/{repo}/branches"],
    listBranchesForHeadCommit: [
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"
    ],
    listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
    listCommentsForCommit: [
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"
    ],
    listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
    listCommitStatusesForRef: [
      "GET /repos/{owner}/{repo}/commits/{ref}/statuses"
    ],
    listCommits: ["GET /repos/{owner}/{repo}/commits"],
    listContributors: ["GET /repos/{owner}/{repo}/contributors"],
    listCustomDeploymentRuleIntegrations: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"
    ],
    listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
    listDeploymentBranchPolicies: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"
    ],
    listDeploymentStatuses: [
      "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
    ],
    listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
    listForAuthenticatedUser: ["GET /user/repos"],
    listForOrg: ["GET /orgs/{org}/repos"],
    listForUser: ["GET /users/{username}/repos"],
    listForks: ["GET /repos/{owner}/{repo}/forks"],
    listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
    listInvitationsForAuthenticatedUser: ["GET /user/repository_invitations"],
    listLanguages: ["GET /repos/{owner}/{repo}/languages"],
    listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
    listPublic: ["GET /repositories"],
    listPullRequestsAssociatedWithCommit: [
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"
    ],
    listReleaseAssets: [
      "GET /repos/{owner}/{repo}/releases/{release_id}/assets"
    ],
    listReleases: ["GET /repos/{owner}/{repo}/releases"],
    listTagProtection: ["GET /repos/{owner}/{repo}/tags/protection"],
    listTags: ["GET /repos/{owner}/{repo}/tags"],
    listTeams: ["GET /repos/{owner}/{repo}/teams"],
    listWebhookDeliveries: [
      "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
    ],
    listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
    merge: ["POST /repos/{owner}/{repo}/merges"],
    mergeUpstream: ["POST /repos/{owner}/{repo}/merge-upstream"],
    pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
    redeliverWebhookDelivery: [
      "POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
    ],
    removeAppAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      {},
      { mapToData: "apps" }
    ],
    removeCollaborator: [
      "DELETE /repos/{owner}/{repo}/collaborators/{username}"
    ],
    removeStatusCheckContexts: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      {},
      { mapToData: "contexts" }
    ],
    removeStatusCheckProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
    ],
    removeTeamAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      {},
      { mapToData: "teams" }
    ],
    removeUserAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      {},
      { mapToData: "users" }
    ],
    renameBranch: ["POST /repos/{owner}/{repo}/branches/{branch}/rename"],
    replaceAllTopics: ["PUT /repos/{owner}/{repo}/topics"],
    requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
    setAdminBranchProtection: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
    ],
    setAppAccessRestrictions: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      {},
      { mapToData: "apps" }
    ],
    setStatusCheckContexts: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      {},
      { mapToData: "contexts" }
    ],
    setTeamAccessRestrictions: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      {},
      { mapToData: "teams" }
    ],
    setUserAccessRestrictions: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      {},
      { mapToData: "users" }
    ],
    testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
    transfer: ["POST /repos/{owner}/{repo}/transfer"],
    update: ["PATCH /repos/{owner}/{repo}"],
    updateBranchProtection: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection"
    ],
    updateCommitComment: ["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],
    updateDeploymentBranchPolicy: [
      "PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
    ],
    updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
    updateInvitation: [
      "PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"
    ],
    updateOrgRuleset: ["PUT /orgs/{org}/rulesets/{ruleset_id}"],
    updatePullRequestReviewProtection: [
      "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
    ],
    updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
    updateReleaseAsset: [
      "PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"
    ],
    updateRepoRuleset: ["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
    updateStatusCheckPotection: [
      "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
      {},
      { renamed: ["repos", "updateStatusCheckProtection"] }
    ],
    updateStatusCheckProtection: [
      "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
    ],
    updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
    updateWebhookConfigForRepo: [
      "PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"
    ],
    uploadReleaseAsset: [
      "POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",
      { baseUrl: "https://uploads.github.com" }
    ]
  },
  search: {
    code: ["GET /search/code"],
    commits: ["GET /search/commits"],
    issuesAndPullRequests: ["GET /search/issues"],
    labels: ["GET /search/labels"],
    repos: ["GET /search/repositories"],
    topics: ["GET /search/topics"],
    users: ["GET /search/users"]
  },
  secretScanning: {
    getAlert: [
      "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
    ],
    listAlertsForEnterprise: [
      "GET /enterprises/{enterprise}/secret-scanning/alerts"
    ],
    listAlertsForOrg: ["GET /orgs/{org}/secret-scanning/alerts"],
    listAlertsForRepo: ["GET /repos/{owner}/{repo}/secret-scanning/alerts"],
    listLocationsForAlert: [
      "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"
    ],
    updateAlert: [
      "PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
    ]
  },
  securityAdvisories: {
    createFork: [
      "POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"
    ],
    createPrivateVulnerabilityReport: [
      "POST /repos/{owner}/{repo}/security-advisories/reports"
    ],
    createRepositoryAdvisory: [
      "POST /repos/{owner}/{repo}/security-advisories"
    ],
    createRepositoryAdvisoryCveRequest: [
      "POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"
    ],
    getGlobalAdvisory: ["GET /advisories/{ghsa_id}"],
    getRepositoryAdvisory: [
      "GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"
    ],
    listGlobalAdvisories: ["GET /advisories"],
    listOrgRepositoryAdvisories: ["GET /orgs/{org}/security-advisories"],
    listRepositoryAdvisories: ["GET /repos/{owner}/{repo}/security-advisories"],
    updateRepositoryAdvisory: [
      "PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"
    ]
  },
  teams: {
    addOrUpdateMembershipForUserInOrg: [
      "PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"
    ],
    addOrUpdateProjectPermissionsInOrg: [
      "PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"
    ],
    addOrUpdateRepoPermissionsInOrg: [
      "PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
    ],
    checkPermissionsForProjectInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"
    ],
    checkPermissionsForRepoInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
    ],
    create: ["POST /orgs/{org}/teams"],
    createDiscussionCommentInOrg: [
      "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
    ],
    createDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions"],
    deleteDiscussionCommentInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
    ],
    deleteDiscussionInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
    ],
    deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
    getByName: ["GET /orgs/{org}/teams/{team_slug}"],
    getDiscussionCommentInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
    ],
    getDiscussionInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
    ],
    getMembershipForUserInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/memberships/{username}"
    ],
    list: ["GET /orgs/{org}/teams"],
    listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
    listDiscussionCommentsInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
    ],
    listDiscussionsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions"],
    listForAuthenticatedUser: ["GET /user/teams"],
    listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
    listPendingInvitationsInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/invitations"
    ],
    listProjectsInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects"],
    listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
    removeMembershipForUserInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"
    ],
    removeProjectInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"
    ],
    removeRepoInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
    ],
    updateDiscussionCommentInOrg: [
      "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
    ],
    updateDiscussionInOrg: [
      "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
    ],
    updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"]
  },
  users: {
    addEmailForAuthenticated: [
      "POST /user/emails",
      {},
      { renamed: ["users", "addEmailForAuthenticatedUser"] }
    ],
    addEmailForAuthenticatedUser: ["POST /user/emails"],
    addSocialAccountForAuthenticatedUser: ["POST /user/social_accounts"],
    block: ["PUT /user/blocks/{username}"],
    checkBlocked: ["GET /user/blocks/{username}"],
    checkFollowingForUser: ["GET /users/{username}/following/{target_user}"],
    checkPersonIsFollowedByAuthenticated: ["GET /user/following/{username}"],
    createGpgKeyForAuthenticated: [
      "POST /user/gpg_keys",
      {},
      { renamed: ["users", "createGpgKeyForAuthenticatedUser"] }
    ],
    createGpgKeyForAuthenticatedUser: ["POST /user/gpg_keys"],
    createPublicSshKeyForAuthenticated: [
      "POST /user/keys",
      {},
      { renamed: ["users", "createPublicSshKeyForAuthenticatedUser"] }
    ],
    createPublicSshKeyForAuthenticatedUser: ["POST /user/keys"],
    createSshSigningKeyForAuthenticatedUser: ["POST /user/ssh_signing_keys"],
    deleteEmailForAuthenticated: [
      "DELETE /user/emails",
      {},
      { renamed: ["users", "deleteEmailForAuthenticatedUser"] }
    ],
    deleteEmailForAuthenticatedUser: ["DELETE /user/emails"],
    deleteGpgKeyForAuthenticated: [
      "DELETE /user/gpg_keys/{gpg_key_id}",
      {},
      { renamed: ["users", "deleteGpgKeyForAuthenticatedUser"] }
    ],
    deleteGpgKeyForAuthenticatedUser: ["DELETE /user/gpg_keys/{gpg_key_id}"],
    deletePublicSshKeyForAuthenticated: [
      "DELETE /user/keys/{key_id}",
      {},
      { renamed: ["users", "deletePublicSshKeyForAuthenticatedUser"] }
    ],
    deletePublicSshKeyForAuthenticatedUser: ["DELETE /user/keys/{key_id}"],
    deleteSocialAccountForAuthenticatedUser: ["DELETE /user/social_accounts"],
    deleteSshSigningKeyForAuthenticatedUser: [
      "DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"
    ],
    follow: ["PUT /user/following/{username}"],
    getAuthenticated: ["GET /user"],
    getByUsername: ["GET /users/{username}"],
    getContextForUser: ["GET /users/{username}/hovercard"],
    getGpgKeyForAuthenticated: [
      "GET /user/gpg_keys/{gpg_key_id}",
      {},
      { renamed: ["users", "getGpgKeyForAuthenticatedUser"] }
    ],
    getGpgKeyForAuthenticatedUser: ["GET /user/gpg_keys/{gpg_key_id}"],
    getPublicSshKeyForAuthenticated: [
      "GET /user/keys/{key_id}",
      {},
      { renamed: ["users", "getPublicSshKeyForAuthenticatedUser"] }
    ],
    getPublicSshKeyForAuthenticatedUser: ["GET /user/keys/{key_id}"],
    getSshSigningKeyForAuthenticatedUser: [
      "GET /user/ssh_signing_keys/{ssh_signing_key_id}"
    ],
    list: ["GET /users"],
    listBlockedByAuthenticated: [
      "GET /user/blocks",
      {},
      { renamed: ["users", "listBlockedByAuthenticatedUser"] }
    ],
    listBlockedByAuthenticatedUser: ["GET /user/blocks"],
    listEmailsForAuthenticated: [
      "GET /user/emails",
      {},
      { renamed: ["users", "listEmailsForAuthenticatedUser"] }
    ],
    listEmailsForAuthenticatedUser: ["GET /user/emails"],
    listFollowedByAuthenticated: [
      "GET /user/following",
      {},
      { renamed: ["users", "listFollowedByAuthenticatedUser"] }
    ],
    listFollowedByAuthenticatedUser: ["GET /user/following"],
    listFollowersForAuthenticatedUser: ["GET /user/followers"],
    listFollowersForUser: ["GET /users/{username}/followers"],
    listFollowingForUser: ["GET /users/{username}/following"],
    listGpgKeysForAuthenticated: [
      "GET /user/gpg_keys",
      {},
      { renamed: ["users", "listGpgKeysForAuthenticatedUser"] }
    ],
    listGpgKeysForAuthenticatedUser: ["GET /user/gpg_keys"],
    listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
    listPublicEmailsForAuthenticated: [
      "GET /user/public_emails",
      {},
      { renamed: ["users", "listPublicEmailsForAuthenticatedUser"] }
    ],
    listPublicEmailsForAuthenticatedUser: ["GET /user/public_emails"],
    listPublicKeysForUser: ["GET /users/{username}/keys"],
    listPublicSshKeysForAuthenticated: [
      "GET /user/keys",
      {},
      { renamed: ["users", "listPublicSshKeysForAuthenticatedUser"] }
    ],
    listPublicSshKeysForAuthenticatedUser: ["GET /user/keys"],
    listSocialAccountsForAuthenticatedUser: ["GET /user/social_accounts"],
    listSocialAccountsForUser: ["GET /users/{username}/social_accounts"],
    listSshSigningKeysForAuthenticatedUser: ["GET /user/ssh_signing_keys"],
    listSshSigningKeysForUser: ["GET /users/{username}/ssh_signing_keys"],
    setPrimaryEmailVisibilityForAuthenticated: [
      "PATCH /user/email/visibility",
      {},
      { renamed: ["users", "setPrimaryEmailVisibilityForAuthenticatedUser"] }
    ],
    setPrimaryEmailVisibilityForAuthenticatedUser: [
      "PATCH /user/email/visibility"
    ],
    unblock: ["DELETE /user/blocks/{username}"],
    unfollow: ["DELETE /user/following/{username}"],
    updateAuthenticated: ["PATCH /user"]
  }
};
var endpoints_default = Endpoints;

// pkg/dist-src/endpoints-to-methods.js
var endpointMethodsMap = /* @__PURE__ */ new Map();
for (const [scope, endpoints] of Object.entries(endpoints_default)) {
  for (const [methodName, endpoint] of Object.entries(endpoints)) {
    const [route, defaults, decorations] = endpoint;
    const [method, url] = route.split(/ /);
    const endpointDefaults = Object.assign(
      {
        method,
        url
      },
      defaults
    );
    if (!endpointMethodsMap.has(scope)) {
      endpointMethodsMap.set(scope, /* @__PURE__ */ new Map());
    }
    endpointMethodsMap.get(scope).set(methodName, {
      scope,
      methodName,
      endpointDefaults,
      decorations
    });
  }
}
var handler = {
  has({ scope }, methodName) {
    return endpointMethodsMap.get(scope).has(methodName);
  },
  getOwnPropertyDescriptor(target, methodName) {
    return {
      value: this.get(target, methodName),
      // ensures method is in the cache
      configurable: true,
      writable: true,
      enumerable: true
    };
  },
  defineProperty(target, methodName, descriptor) {
    Object.defineProperty(target.cache, methodName, descriptor);
    return true;
  },
  deleteProperty(target, methodName) {
    delete target.cache[methodName];
    return true;
  },
  ownKeys({ scope }) {
    return [...endpointMethodsMap.get(scope).keys()];
  },
  set(target, methodName, value) {
    return target.cache[methodName] = value;
  },
  get({ octokit, scope, cache }, methodName) {
    if (cache[methodName]) {
      return cache[methodName];
    }
    const method = endpointMethodsMap.get(scope).get(methodName);
    if (!method) {
      return void 0;
    }
    const { endpointDefaults, decorations } = method;
    if (decorations) {
      cache[methodName] = decorate(
        octokit,
        scope,
        methodName,
        endpointDefaults,
        decorations
      );
    } else {
      cache[methodName] = octokit.request.defaults(endpointDefaults);
    }
    return cache[methodName];
  }
};
function endpointsToMethods(octokit) {
  const newMethods = {};
  for (const scope of endpointMethodsMap.keys()) {
    newMethods[scope] = new Proxy({ octokit, scope, cache: {} }, handler);
  }
  return newMethods;
}
function decorate(octokit, scope, methodName, defaults, decorations) {
  const requestWithDefaults = octokit.request.defaults(defaults);
  function withDecorations(...args) {
    let options = requestWithDefaults.endpoint.merge(...args);
    if (decorations.mapToData) {
      options = Object.assign({}, options, {
        data: options[decorations.mapToData],
        [decorations.mapToData]: void 0
      });
      return requestWithDefaults(options);
    }
    if (decorations.renamed) {
      const [newScope, newMethodName] = decorations.renamed;
      octokit.log.warn(
        `octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`
      );
    }
    if (decorations.deprecated) {
      octokit.log.warn(decorations.deprecated);
    }
    if (decorations.renamedParameters) {
      const options2 = requestWithDefaults.endpoint.merge(...args);
      for (const [name, alias] of Object.entries(
        decorations.renamedParameters
      )) {
        if (name in options2) {
          octokit.log.warn(
            `"${name}" parameter is deprecated for "octokit.${scope}.${methodName}()". Use "${alias}" instead`
          );
          if (!(alias in options2)) {
            options2[alias] = options2[name];
          }
          delete options2[name];
        }
      }
      return requestWithDefaults(options2);
    }
    return requestWithDefaults(...args);
  }
  return Object.assign(withDecorations, requestWithDefaults);
}

// pkg/dist-src/index.js
function restEndpointMethods(octokit) {
  const api = endpointsToMethods(octokit);
  return {
    rest: api
  };
}
restEndpointMethods.VERSION = VERSION;
function legacyRestEndpointMethods(octokit) {
  const api = endpointsToMethods(octokit);
  return {
    ...api,
    rest: api
  };
}
legacyRestEndpointMethods.VERSION = VERSION;
// Annotate the CommonJS export names for ESM import in node:
0 && (0);


/***/ }),

/***/ 537:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// pkg/dist-src/index.js
var dist_src_exports = {};
__export(dist_src_exports, {
  RequestError: () => RequestError
});
module.exports = __toCommonJS(dist_src_exports);
var import_deprecation = __nccwpck_require__(8932);
var import_once = __toESM(__nccwpck_require__(1223));
var logOnceCode = (0, import_once.default)((deprecation) => console.warn(deprecation));
var logOnceHeaders = (0, import_once.default)((deprecation) => console.warn(deprecation));
var RequestError = class extends Error {
  constructor(message, statusCode, options) {
    super(message);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
    this.name = "HttpError";
    this.status = statusCode;
    let headers;
    if ("headers" in options && typeof options.headers !== "undefined") {
      headers = options.headers;
    }
    if ("response" in options) {
      this.response = options.response;
      headers = options.response.headers;
    }
    const requestCopy = Object.assign({}, options.request);
    if (options.request.headers.authorization) {
      requestCopy.headers = Object.assign({}, options.request.headers, {
        authorization: options.request.headers.authorization.replace(
          / .*$/,
          " [REDACTED]"
        )
      });
    }
    requestCopy.url = requestCopy.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
    this.request = requestCopy;
    Object.defineProperty(this, "code", {
      get() {
        logOnceCode(
          new import_deprecation.Deprecation(
            "[@octokit/request-error] `error.code` is deprecated, use `error.status`."
          )
        );
        return statusCode;
      }
    });
    Object.defineProperty(this, "headers", {
      get() {
        logOnceHeaders(
          new import_deprecation.Deprecation(
            "[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`."
          )
        );
        return headers || {};
      }
    });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (0);


/***/ }),

/***/ 6234:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// pkg/dist-src/index.js
var dist_src_exports = {};
__export(dist_src_exports, {
  request: () => request
});
module.exports = __toCommonJS(dist_src_exports);
var import_endpoint = __nccwpck_require__(9440);
var import_universal_user_agent = __nccwpck_require__(5030);

// pkg/dist-src/version.js
var VERSION = "8.3.1";

// pkg/dist-src/is-plain-object.js
function isPlainObject(value) {
  if (typeof value !== "object" || value === null)
    return false;
  if (Object.prototype.toString.call(value) !== "[object Object]")
    return false;
  const proto = Object.getPrototypeOf(value);
  if (proto === null)
    return true;
  const Ctor = Object.prototype.hasOwnProperty.call(proto, "constructor") && proto.constructor;
  return typeof Ctor === "function" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);
}

// pkg/dist-src/fetch-wrapper.js
var import_request_error = __nccwpck_require__(537);

// pkg/dist-src/get-buffer-response.js
function getBufferResponse(response) {
  return response.arrayBuffer();
}

// pkg/dist-src/fetch-wrapper.js
function fetchWrapper(requestOptions) {
  var _a, _b, _c;
  const log = requestOptions.request && requestOptions.request.log ? requestOptions.request.log : console;
  const parseSuccessResponseBody = ((_a = requestOptions.request) == null ? void 0 : _a.parseSuccessResponseBody) !== false;
  if (isPlainObject(requestOptions.body) || Array.isArray(requestOptions.body)) {
    requestOptions.body = JSON.stringify(requestOptions.body);
  }
  let headers = {};
  let status;
  let url;
  let { fetch } = globalThis;
  if ((_b = requestOptions.request) == null ? void 0 : _b.fetch) {
    fetch = requestOptions.request.fetch;
  }
  if (!fetch) {
    throw new Error(
      "fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing"
    );
  }
  return fetch(requestOptions.url, {
    method: requestOptions.method,
    body: requestOptions.body,
    headers: requestOptions.headers,
    signal: (_c = requestOptions.request) == null ? void 0 : _c.signal,
    // duplex must be set if request.body is ReadableStream or Async Iterables.
    // See https://fetch.spec.whatwg.org/#dom-requestinit-duplex.
    ...requestOptions.body && { duplex: "half" }
  }).then(async (response) => {
    url = response.url;
    status = response.status;
    for (const keyAndValue of response.headers) {
      headers[keyAndValue[0]] = keyAndValue[1];
    }
    if ("deprecation" in headers) {
      const matches = headers.link && headers.link.match(/<([^>]+)>; rel="deprecation"/);
      const deprecationLink = matches && matches.pop();
      log.warn(
        `[@octokit/request] "${requestOptions.method} ${requestOptions.url}" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : ""}`
      );
    }
    if (status === 204 || status === 205) {
      return;
    }
    if (requestOptions.method === "HEAD") {
      if (status < 400) {
        return;
      }
      throw new import_request_error.RequestError(response.statusText, status, {
        response: {
          url,
          status,
          headers,
          data: void 0
        },
        request: requestOptions
      });
    }
    if (status === 304) {
      throw new import_request_error.RequestError("Not modified", status, {
        response: {
          url,
          status,
          headers,
          data: await getResponseData(response)
        },
        request: requestOptions
      });
    }
    if (status >= 400) {
      const data = await getResponseData(response);
      const error = new import_request_error.RequestError(toErrorMessage(data), status, {
        response: {
          url,
          status,
          headers,
          data
        },
        request: requestOptions
      });
      throw error;
    }
    return parseSuccessResponseBody ? await getResponseData(response) : response.body;
  }).then((data) => {
    return {
      status,
      url,
      headers,
      data
    };
  }).catch((error) => {
    if (error instanceof import_request_error.RequestError)
      throw error;
    else if (error.name === "AbortError")
      throw error;
    let message = error.message;
    if (error.name === "TypeError" && "cause" in error) {
      if (error.cause instanceof Error) {
        message = error.cause.message;
      } else if (typeof error.cause === "string") {
        message = error.cause;
      }
    }
    throw new import_request_error.RequestError(message, 500, {
      request: requestOptions
    });
  });
}
async function getResponseData(response) {
  const contentType = response.headers.get("content-type");
  if (/application\/json/.test(contentType)) {
    return response.json().catch(() => response.text()).catch(() => "");
  }
  if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) {
    return response.text();
  }
  return getBufferResponse(response);
}
function toErrorMessage(data) {
  if (typeof data === "string")
    return data;
  let suffix;
  if ("documentation_url" in data) {
    suffix = ` - ${data.documentation_url}`;
  } else {
    suffix = "";
  }
  if ("message" in data) {
    if (Array.isArray(data.errors)) {
      return `${data.message}: ${data.errors.map(JSON.stringify).join(", ")}${suffix}`;
    }
    return `${data.message}${suffix}`;
  }
  return `Unknown error: ${JSON.stringify(data)}`;
}

// pkg/dist-src/with-defaults.js
function withDefaults(oldEndpoint, newDefaults) {
  const endpoint2 = oldEndpoint.defaults(newDefaults);
  const newApi = function(route, parameters) {
    const endpointOptions = endpoint2.merge(route, parameters);
    if (!endpointOptions.request || !endpointOptions.request.hook) {
      return fetchWrapper(endpoint2.parse(endpointOptions));
    }
    const request2 = (route2, parameters2) => {
      return fetchWrapper(
        endpoint2.parse(endpoint2.merge(route2, parameters2))
      );
    };
    Object.assign(request2, {
      endpoint: endpoint2,
      defaults: withDefaults.bind(null, endpoint2)
    });
    return endpointOptions.request.hook(request2, endpointOptions);
  };
  return Object.assign(newApi, {
    endpoint: endpoint2,
    defaults: withDefaults.bind(null, endpoint2)
  });
}

// pkg/dist-src/index.js
var request = withDefaults(import_endpoint.endpoint, {
  headers: {
    "user-agent": `octokit-request.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (0);


/***/ }),

/***/ 3682:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var register = __nccwpck_require__(4670);
var addHook = __nccwpck_require__(5549);
var removeHook = __nccwpck_require__(6819);

// bind with array of arguments: https://stackoverflow.com/a/21792913
var bind = Function.bind;
var bindable = bind.bind(bind);

function bindApi(hook, state, name) {
  var removeHookRef = bindable(removeHook, null).apply(
    null,
    name ? [state, name] : [state]
  );
  hook.api = { remove: removeHookRef };
  hook.remove = removeHookRef;
  ["before", "error", "after", "wrap"].forEach(function (kind) {
    var args = name ? [state, kind, name] : [state, kind];
    hook[kind] = hook.api[kind] = bindable(addHook, null).apply(null, args);
  });
}

function HookSingular() {
  var singularHookName = "h";
  var singularHookState = {
    registry: {},
  };
  var singularHook = register.bind(null, singularHookState, singularHookName);
  bindApi(singularHook, singularHookState, singularHookName);
  return singularHook;
}

function HookCollection() {
  var state = {
    registry: {},
  };

  var hook = register.bind(null, state);
  bindApi(hook, state);

  return hook;
}

var collectionHookDeprecationMessageDisplayed = false;
function Hook() {
  if (!collectionHookDeprecationMessageDisplayed) {
    console.warn(
      '[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'
    );
    collectionHookDeprecationMessageDisplayed = true;
  }
  return HookCollection();
}

Hook.Singular = HookSingular.bind();
Hook.Collection = HookCollection.bind();

module.exports = Hook;
// expose constructors as a named property for TypeScript
module.exports.Hook = Hook;
module.exports.Singular = Hook.Singular;
module.exports.Collection = Hook.Collection;


/***/ }),

/***/ 5549:
/***/ ((module) => {

module.exports = addHook;

function addHook(state, kind, name, hook) {
  var orig = hook;
  if (!state.registry[name]) {
    state.registry[name] = [];
  }

  if (kind === "before") {
    hook = function (method, options) {
      return Promise.resolve()
        .then(orig.bind(null, options))
        .then(method.bind(null, options));
    };
  }

  if (kind === "after") {
    hook = function (method, options) {
      var result;
      return Promise.resolve()
        .then(method.bind(null, options))
        .then(function (result_) {
          result = result_;
          return orig(result, options);
        })
        .then(function () {
          return result;
        });
    };
  }

  if (kind === "error") {
    hook = function (method, options) {
      return Promise.resolve()
        .then(method.bind(null, options))
        .catch(function (error) {
          return orig(error, options);
        });
    };
  }

  state.registry[name].push({
    hook: hook,
    orig: orig,
  });
}


/***/ }),

/***/ 4670:
/***/ ((module) => {

module.exports = register;

function register(state, name, method, options) {
  if (typeof method !== "function") {
    throw new Error("method for before hook must be a function");
  }

  if (!options) {
    options = {};
  }

  if (Array.isArray(name)) {
    return name.reverse().reduce(function (callback, name) {
      return register.bind(null, state, name, callback, options);
    }, method)();
  }

  return Promise.resolve().then(function () {
    if (!state.registry[name]) {
      return method(options);
    }

    return state.registry[name].reduce(function (method, registered) {
      return registered.hook.bind(null, method, options);
    }, method)();
  });
}


/***/ }),

/***/ 6819:
/***/ ((module) => {

module.exports = removeHook;

function removeHook(state, name, method) {
  if (!state.registry[name]) {
    return;
  }

  var index = state.registry[name]
    .map(function (registered) {
      return registered.orig;
    })
    .indexOf(method);

  if (index === -1) {
    return;
  }

  state.registry[name].splice(index, 1);
}


/***/ }),

/***/ 8932:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

class Deprecation extends Error {
  constructor(message) {
    super(message); // Maintains proper stack trace (only available on V8)

    /* istanbul ignore next */

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }

    this.name = 'Deprecation';
  }

}

exports.Deprecation = Deprecation;


/***/ }),

/***/ 1223:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var wrappy = __nccwpck_require__(2940)
module.exports = wrappy(once)
module.exports.strict = wrappy(onceStrict)

once.proto = once(function () {
  Object.defineProperty(Function.prototype, 'once', {
    value: function () {
      return once(this)
    },
    configurable: true
  })

  Object.defineProperty(Function.prototype, 'onceStrict', {
    value: function () {
      return onceStrict(this)
    },
    configurable: true
  })
})

function once (fn) {
  var f = function () {
    if (f.called) return f.value
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  f.called = false
  return f
}

function onceStrict (fn) {
  var f = function () {
    if (f.called)
      throw new Error(f.onceError)
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  var name = fn.name || 'Function wrapped with `once`'
  f.onceError = name + " shouldn't be called more than once"
  f.called = false
  return f
}


/***/ }),

/***/ 4294:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = __nccwpck_require__(4219);


/***/ }),

/***/ 4219:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


var net = __nccwpck_require__(1808);
var tls = __nccwpck_require__(4404);
var http = __nccwpck_require__(3685);
var https = __nccwpck_require__(5687);
var events = __nccwpck_require__(2361);
var assert = __nccwpck_require__(9491);
var util = __nccwpck_require__(3837);


exports.httpOverHttp = httpOverHttp;
exports.httpsOverHttp = httpsOverHttp;
exports.httpOverHttps = httpOverHttps;
exports.httpsOverHttps = httpsOverHttps;


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  return agent;
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  return agent;
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}


function TunnelingAgent(options) {
  var self = this;
  self.options = options || {};
  self.proxyOptions = self.options.proxy || {};
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;
  self.requests = [];
  self.sockets = [];

  self.on('free', function onFree(socket, host, port, localAddress) {
    var options = toOptions(host, port, localAddress);
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i];
      if (pending.host === options.host && pending.port === options.port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1);
        pending.request.onSocket(socket);
        return;
      }
    }
    socket.destroy();
    self.removeSocket(socket);
  });
}
util.inherits(TunnelingAgent, events.EventEmitter);

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
  var self = this;
  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push(options);
    return;
  }

  // If we are under maxSockets create a new one.
  self.createSocket(options, function(socket) {
    socket.on('free', onFree);
    socket.on('close', onCloseOrRemove);
    socket.on('agentRemove', onCloseOrRemove);
    req.onSocket(socket);

    function onFree() {
      self.emit('free', socket, options);
    }

    function onCloseOrRemove(err) {
      self.removeSocket(socket);
      socket.removeListener('free', onFree);
      socket.removeListener('close', onCloseOrRemove);
      socket.removeListener('agentRemove', onCloseOrRemove);
    }
  });
};

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this;
  var placeholder = {};
  self.sockets.push(placeholder);

  var connectOptions = mergeOptions({}, self.proxyOptions, {
    method: 'CONNECT',
    path: options.host + ':' + options.port,
    agent: false,
    headers: {
      host: options.host + ':' + options.port
    }
  });
  if (options.localAddress) {
    connectOptions.localAddress = options.localAddress;
  }
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {};
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64');
  }

  debug('making CONNECT request');
  var connectReq = self.request(connectOptions);
  connectReq.useChunkedEncodingByDefault = false; // for v0.6
  connectReq.once('response', onResponse); // for v0.6
  connectReq.once('upgrade', onUpgrade);   // for v0.6
  connectReq.once('connect', onConnect);   // for v0.7 or later
  connectReq.once('error', onError);
  connectReq.end();

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true;
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head);
    });
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners();
    socket.removeAllListeners();

    if (res.statusCode !== 200) {
      debug('tunneling socket could not be established, statusCode=%d',
        res.statusCode);
      socket.destroy();
      var error = new Error('tunneling socket could not be established, ' +
        'statusCode=' + res.statusCode);
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    if (head.length > 0) {
      debug('got illegal response body from proxy');
      socket.destroy();
      var error = new Error('got illegal response body from proxy');
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    debug('tunneling connection has established');
    self.sockets[self.sockets.indexOf(placeholder)] = socket;
    return cb(socket);
  }

  function onError(cause) {
    connectReq.removeAllListeners();

    debug('tunneling socket could not be established, cause=%s\n',
          cause.message, cause.stack);
    var error = new Error('tunneling socket could not be established, ' +
                          'cause=' + cause.message);
    error.code = 'ECONNRESET';
    options.request.emit('error', error);
    self.removeSocket(placeholder);
  }
};

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) {
    return;
  }
  this.sockets.splice(pos, 1);

  var pending = this.requests.shift();
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket);
    });
  }
};

function createSecureSocket(options, cb) {
  var self = this;
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    var hostHeader = options.request.getHeader('host');
    var tlsOptions = mergeOptions({}, self.options, {
      socket: socket,
      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host
    });

    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, tlsOptions);
    self.sockets[self.sockets.indexOf(socket)] = secureSocket;
    cb(secureSocket);
  });
}


function toOptions(host, port, localAddress) {
  if (typeof host === 'string') { // since v0.10
    return {
      host: host,
      port: port,
      localAddress: localAddress
    };
  }
  return host; // for v0.11 or later
}

function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i];
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides);
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j];
        if (overrides[k] !== undefined) {
          target[k] = overrides[k];
        }
      }
    }
  }
  return target;
}


var debug;
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments);
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0];
    } else {
      args.unshift('TUNNEL:');
    }
    console.error.apply(console, args);
  }
} else {
  debug = function() {};
}
exports.debug = debug; // for test


/***/ }),

/***/ 1773:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const Client = __nccwpck_require__(3598)
const Dispatcher = __nccwpck_require__(412)
const errors = __nccwpck_require__(8045)
const Pool = __nccwpck_require__(4634)
const BalancedPool = __nccwpck_require__(7931)
const Agent = __nccwpck_require__(7890)
const util = __nccwpck_require__(3983)
const { InvalidArgumentError } = errors
const api = __nccwpck_require__(4059)
const buildConnector = __nccwpck_require__(2067)
const MockClient = __nccwpck_require__(8687)
const MockAgent = __nccwpck_require__(6771)
const MockPool = __nccwpck_require__(6193)
const mockErrors = __nccwpck_require__(888)
const ProxyAgent = __nccwpck_require__(7858)
const RetryHandler = __nccwpck_require__(2286)
const { getGlobalDispatcher, setGlobalDispatcher } = __nccwpck_require__(1892)
const DecoratorHandler = __nccwpck_require__(6930)
const RedirectHandler = __nccwpck_require__(2860)
const createRedirectInterceptor = __nccwpck_require__(8861)

let hasCrypto
try {
  __nccwpck_require__(6113)
  hasCrypto = true
} catch {
  hasCrypto = false
}

Object.assign(Dispatcher.prototype, api)

module.exports.Dispatcher = Dispatcher
module.exports.Client = Client
module.exports.Pool = Pool
module.exports.BalancedPool = BalancedPool
module.exports.Agent = Agent
module.exports.ProxyAgent = ProxyAgent
module.exports.RetryHandler = RetryHandler

module.exports.DecoratorHandler = DecoratorHandler
module.exports.RedirectHandler = RedirectHandler
module.exports.createRedirectInterceptor = createRedirectInterceptor

module.exports.buildConnector = buildConnector
module.exports.errors = errors

function makeDispatcher (fn) {
  return (url, opts, handler) => {
    if (typeof opts === 'function') {
      handler = opts
      opts = null
    }

    if (!url || (typeof url !== 'string' && typeof url !== 'object' && !(url instanceof URL))) {
      throw new InvalidArgumentError('invalid url')
    }

    if (opts != null && typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    if (opts && opts.path != null) {
      if (typeof opts.path !== 'string') {
        throw new InvalidArgumentError('invalid opts.path')
      }

      let path = opts.path
      if (!opts.path.startsWith('/')) {
        path = `/${path}`
      }

      url = new URL(util.parseOrigin(url).origin + path)
    } else {
      if (!opts) {
        opts = typeof url === 'object' ? url : {}
      }

      url = util.parseURL(url)
    }

    const { agent, dispatcher = getGlobalDispatcher() } = opts

    if (agent) {
      throw new InvalidArgumentError('unsupported opts.agent. Did you mean opts.client?')
    }

    return fn.call(dispatcher, {
      ...opts,
      origin: url.origin,
      path: url.search ? `${url.pathname}${url.search}` : url.pathname,
      method: opts.method || (opts.body ? 'PUT' : 'GET')
    }, handler)
  }
}

module.exports.setGlobalDispatcher = setGlobalDispatcher
module.exports.getGlobalDispatcher = getGlobalDispatcher

if (util.nodeMajor > 16 || (util.nodeMajor === 16 && util.nodeMinor >= 8)) {
  let fetchImpl = null
  module.exports.fetch = async function fetch (resource) {
    if (!fetchImpl) {
      fetchImpl = (__nccwpck_require__(4881).fetch)
    }

    try {
      return await fetchImpl(...arguments)
    } catch (err) {
      if (typeof err === 'object') {
        Error.captureStackTrace(err, this)
      }

      throw err
    }
  }
  module.exports.Headers = __nccwpck_require__(554).Headers
  module.exports.Response = __nccwpck_require__(7823).Response
  module.exports.Request = __nccwpck_require__(8359).Request
  module.exports.FormData = __nccwpck_require__(2015).FormData
  module.exports.File = __nccwpck_require__(8511).File
  module.exports.FileReader = __nccwpck_require__(1446).FileReader

  const { setGlobalOrigin, getGlobalOrigin } = __nccwpck_require__(1246)

  module.exports.setGlobalOrigin = setGlobalOrigin
  module.exports.getGlobalOrigin = getGlobalOrigin

  const { CacheStorage } = __nccwpck_require__(7907)
  const { kConstruct } = __nccwpck_require__(9174)

  // Cache & CacheStorage are tightly coupled with fetch. Even if it may run
  // in an older version of Node, it doesn't have any use without fetch.
  module.exports.caches = new CacheStorage(kConstruct)
}

if (util.nodeMajor >= 16) {
  const { deleteCookie, getCookies, getSetCookies, setCookie } = __nccwpck_require__(1724)

  module.exports.deleteCookie = deleteCookie
  module.exports.getCookies = getCookies
  module.exports.getSetCookies = getSetCookies
  module.exports.setCookie = setCookie

  const { parseMIMEType, serializeAMimeType } = __nccwpck_require__(685)

  module.exports.parseMIMEType = parseMIMEType
  module.exports.serializeAMimeType = serializeAMimeType
}

if (util.nodeMajor >= 18 && hasCrypto) {
  const { WebSocket } = __nccwpck_require__(4284)

  module.exports.WebSocket = WebSocket
}

module.exports.request = makeDispatcher(api.request)
module.exports.stream = makeDispatcher(api.stream)
module.exports.pipeline = makeDispatcher(api.pipeline)
module.exports.connect = makeDispatcher(api.connect)
module.exports.upgrade = makeDispatcher(api.upgrade)

module.exports.MockClient = MockClient
module.exports.MockPool = MockPool
module.exports.MockAgent = MockAgent
module.exports.mockErrors = mockErrors


/***/ }),

/***/ 7890:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { InvalidArgumentError } = __nccwpck_require__(8045)
const { kClients, kRunning, kClose, kDestroy, kDispatch, kInterceptors } = __nccwpck_require__(2785)
const DispatcherBase = __nccwpck_require__(4839)
const Pool = __nccwpck_require__(4634)
const Client = __nccwpck_require__(3598)
const util = __nccwpck_require__(3983)
const createRedirectInterceptor = __nccwpck_require__(8861)
const { WeakRef, FinalizationRegistry } = __nccwpck_require__(6436)()

const kOnConnect = Symbol('onConnect')
const kOnDisconnect = Symbol('onDisconnect')
const kOnConnectionError = Symbol('onConnectionError')
const kMaxRedirections = Symbol('maxRedirections')
const kOnDrain = Symbol('onDrain')
const kFactory = Symbol('factory')
const kFinalizer = Symbol('finalizer')
const kOptions = Symbol('options')

function defaultFactory (origin, opts) {
  return opts && opts.connections === 1
    ? new Client(origin, opts)
    : new Pool(origin, opts)
}

class Agent extends DispatcherBase {
  constructor ({ factory = defaultFactory, maxRedirections = 0, connect, ...options } = {}) {
    super()

    if (typeof factory !== 'function') {
      throw new InvalidArgumentError('factory must be a function.')
    }

    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {
      throw new InvalidArgumentError('connect must be a function or an object')
    }

    if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {
      throw new InvalidArgumentError('maxRedirections must be a positive number')
    }

    if (connect && typeof connect !== 'function') {
      connect = { ...connect }
    }

    this[kInterceptors] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent)
      ? options.interceptors.Agent
      : [createRedirectInterceptor({ maxRedirections })]

    this[kOptions] = { ...util.deepClone(options), connect }
    this[kOptions].interceptors = options.interceptors
      ? { ...options.interceptors }
      : undefined
    this[kMaxRedirections] = maxRedirections
    this[kFactory] = factory
    this[kClients] = new Map()
    this[kFinalizer] = new FinalizationRegistry(/* istanbul ignore next: gc is undeterministic */ key => {
      const ref = this[kClients].get(key)
      if (ref !== undefined && ref.deref() === undefined) {
        this[kClients].delete(key)
      }
    })

    const agent = this

    this[kOnDrain] = (origin, targets) => {
      agent.emit('drain', origin, [agent, ...targets])
    }

    this[kOnConnect] = (origin, targets) => {
      agent.emit('connect', origin, [agent, ...targets])
    }

    this[kOnDisconnect] = (origin, targets, err) => {
      agent.emit('disconnect', origin, [agent, ...targets], err)
    }

    this[kOnConnectionError] = (origin, targets, err) => {
      agent.emit('connectionError', origin, [agent, ...targets], err)
    }
  }

  get [kRunning] () {
    let ret = 0
    for (const ref of this[kClients].values()) {
      const client = ref.deref()
      /* istanbul ignore next: gc is undeterministic */
      if (client) {
        ret += client[kRunning]
      }
    }
    return ret
  }

  [kDispatch] (opts, handler) {
    let key
    if (opts.origin && (typeof opts.origin === 'string' || opts.origin instanceof URL)) {
      key = String(opts.origin)
    } else {
      throw new InvalidArgumentError('opts.origin must be a non-empty string or URL.')
    }

    const ref = this[kClients].get(key)

    let dispatcher = ref ? ref.deref() : null
    if (!dispatcher) {
      dispatcher = this[kFactory](opts.origin, this[kOptions])
        .on('drain', this[kOnDrain])
        .on('connect', this[kOnConnect])
        .on('disconnect', this[kOnDisconnect])
        .on('connectionError', this[kOnConnectionError])

      this[kClients].set(key, new WeakRef(dispatcher))
      this[kFinalizer].register(dispatcher, key)
    }

    return dispatcher.dispatch(opts, handler)
  }

  async [kClose] () {
    const closePromises = []
    for (const ref of this[kClients].values()) {
      const client = ref.deref()
      /* istanbul ignore else: gc is undeterministic */
      if (client) {
        closePromises.push(client.close())
      }
    }

    await Promise.all(closePromises)
  }

  async [kDestroy] (err) {
    const destroyPromises = []
    for (const ref of this[kClients].values()) {
      const client = ref.deref()
      /* istanbul ignore else: gc is undeterministic */
      if (client) {
        destroyPromises.push(client.destroy(err))
      }
    }

    await Promise.all(destroyPromises)
  }
}

module.exports = Agent


/***/ }),

/***/ 7032:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const { addAbortListener } = __nccwpck_require__(3983)
const { RequestAbortedError } = __nccwpck_require__(8045)

const kListener = Symbol('kListener')
const kSignal = Symbol('kSignal')

function abort (self) {
  if (self.abort) {
    self.abort()
  } else {
    self.onError(new RequestAbortedError())
  }
}

function addSignal (self, signal) {
  self[kSignal] = null
  self[kListener] = null

  if (!signal) {
    return
  }

  if (signal.aborted) {
    abort(self)
    return
  }

  self[kSignal] = signal
  self[kListener] = () => {
    abort(self)
  }

  addAbortListener(self[kSignal], self[kListener])
}

function removeSignal (self) {
  if (!self[kSignal]) {
    return
  }

  if ('removeEventListener' in self[kSignal]) {
    self[kSignal].removeEventListener('abort', self[kListener])
  } else {
    self[kSignal].removeListener('abort', self[kListener])
  }

  self[kSignal] = null
  self[kListener] = null
}

module.exports = {
  addSignal,
  removeSignal
}


/***/ }),

/***/ 9744:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { AsyncResource } = __nccwpck_require__(852)
const { InvalidArgumentError, RequestAbortedError, SocketError } = __nccwpck_require__(8045)
const util = __nccwpck_require__(3983)
const { addSignal, removeSignal } = __nccwpck_require__(7032)

class ConnectHandler extends AsyncResource {
  constructor (opts, callback) {
    if (!opts || typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    if (typeof callback !== 'function') {
      throw new InvalidArgumentError('invalid callback')
    }

    const { signal, opaque, responseHeaders } = opts

    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
    }

    super('UNDICI_CONNECT')

    this.opaque = opaque || null
    this.responseHeaders = responseHeaders || null
    this.callback = callback
    this.abort = null

    addSignal(this, signal)
  }

  onConnect (abort, context) {
    if (!this.callback) {
      throw new RequestAbortedError()
    }

    this.abort = abort
    this.context = context
  }

  onHeaders () {
    throw new SocketError('bad connect', null)
  }

  onUpgrade (statusCode, rawHeaders, socket) {
    const { callback, opaque, context } = this

    removeSignal(this)

    this.callback = null

    let headers = rawHeaders
    // Indicates is an HTTP2Session
    if (headers != null) {
      headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)
    }

    this.runInAsyncScope(callback, null, null, {
      statusCode,
      headers,
      socket,
      opaque,
      context
    })
  }

  onError (err) {
    const { callback, opaque } = this

    removeSignal(this)

    if (callback) {
      this.callback = null
      queueMicrotask(() => {
        this.runInAsyncScope(callback, null, err, { opaque })
      })
    }
  }
}

function connect (opts, callback) {
  if (callback === undefined) {
    return new Promise((resolve, reject) => {
      connect.call(this, opts, (err, data) => {
        return err ? reject(err) : resolve(data)
      })
    })
  }

  try {
    const connectHandler = new ConnectHandler(opts, callback)
    this.dispatch({ ...opts, method: 'CONNECT' }, connectHandler)
  } catch (err) {
    if (typeof callback !== 'function') {
      throw err
    }
    const opaque = opts && opts.opaque
    queueMicrotask(() => callback(err, { opaque }))
  }
}

module.exports = connect


/***/ }),

/***/ 8752:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const {
  Readable,
  Duplex,
  PassThrough
} = __nccwpck_require__(2781)
const {
  InvalidArgumentError,
  InvalidReturnValueError,
  RequestAbortedError
} = __nccwpck_require__(8045)
const util = __nccwpck_require__(3983)
const { AsyncResource } = __nccwpck_require__(852)
const { addSignal, removeSignal } = __nccwpck_require__(7032)
const assert = __nccwpck_require__(9491)

const kResume = Symbol('resume')

class PipelineRequest extends Readable {
  constructor () {
    super({ autoDestroy: true })

    this[kResume] = null
  }

  _read () {
    const { [kResume]: resume } = this

    if (resume) {
      this[kResume] = null
      resume()
    }
  }

  _destroy (err, callback) {
    this._read()

    callback(err)
  }
}

class PipelineResponse extends Readable {
  constructor (resume) {
    super({ autoDestroy: true })
    this[kResume] = resume
  }

  _read () {
    this[kResume]()
  }

  _destroy (err, callback) {
    if (!err && !this._readableState.endEmitted) {
      err = new RequestAbortedError()
    }

    callback(err)
  }
}

class PipelineHandler extends AsyncResource {
  constructor (opts, handler) {
    if (!opts || typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    if (typeof handler !== 'function') {
      throw new InvalidArgumentError('invalid handler')
    }

    const { signal, method, opaque, onInfo, responseHeaders } = opts

    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
    }

    if (method === 'CONNECT') {
      throw new InvalidArgumentError('invalid method')
    }

    if (onInfo && typeof onInfo !== 'function') {
      throw new InvalidArgumentError('invalid onInfo callback')
    }

    super('UNDICI_PIPELINE')

    this.opaque = opaque || null
    this.responseHeaders = responseHeaders || null
    this.handler = handler
    this.abort = null
    this.context = null
    this.onInfo = onInfo || null

    this.req = new PipelineRequest().on('error', util.nop)

    this.ret = new Duplex({
      readableObjectMode: opts.objectMode,
      autoDestroy: true,
      read: () => {
        const { body } = this

        if (body && body.resume) {
          body.resume()
        }
      },
      write: (chunk, encoding, callback) => {
        const { req } = this

        if (req.push(chunk, encoding) || req._readableState.destroyed) {
          callback()
        } else {
          req[kResume] = callback
        }
      },
      destroy: (err, callback) => {
        const { body, req, res, ret, abort } = this

        if (!err && !ret._readableState.endEmitted) {
          err = new RequestAbortedError()
        }

        if (abort && err) {
          abort()
        }

        util.destroy(body, err)
        util.destroy(req, err)
        util.destroy(res, err)

        removeSignal(this)

        callback(err)
      }
    }).on('prefinish', () => {
      const { req } = this

      // Node < 15 does not call _final in same tick.
      req.push(null)
    })

    this.res = null

    addSignal(this, signal)
  }

  onConnect (abort, context) {
    const { ret, res } = this

    assert(!res, 'pipeline cannot be retried')

    if (ret.destroyed) {
      throw new RequestAbortedError()
    }

    this.abort = abort
    this.context = context
  }

  onHeaders (statusCode, rawHeaders, resume) {
    const { opaque, handler, context } = this

    if (statusCode < 200) {
      if (this.onInfo) {
        const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)
        this.onInfo({ statusCode, headers })
      }
      return
    }

    this.res = new PipelineResponse(resume)

    let body
    try {
      this.handler = null
      const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)
      body = this.runInAsyncScope(handler, null, {
        statusCode,
        headers,
        opaque,
        body: this.res,
        context
      })
    } catch (err) {
      this.res.on('error', util.nop)
      throw err
    }

    if (!body || typeof body.on !== 'function') {
      throw new InvalidReturnValueError('expected Readable')
    }

    body
      .on('data', (chunk) => {
        const { ret, body } = this

        if (!ret.push(chunk) && body.pause) {
          body.pause()
        }
      })
      .on('error', (err) => {
        const { ret } = this

        util.destroy(ret, err)
      })
      .on('end', () => {
        const { ret } = this

        ret.push(null)
      })
      .on('close', () => {
        const { ret } = this

        if (!ret._readableState.ended) {
          util.destroy(ret, new RequestAbortedError())
        }
      })

    this.body = body
  }

  onData (chunk) {
    const { res } = this
    return res.push(chunk)
  }

  onComplete (trailers) {
    const { res } = this
    res.push(null)
  }

  onError (err) {
    const { ret } = this
    this.handler = null
    util.destroy(ret, err)
  }
}

function pipeline (opts, handler) {
  try {
    const pipelineHandler = new PipelineHandler(opts, handler)
    this.dispatch({ ...opts, body: pipelineHandler.req }, pipelineHandler)
    return pipelineHandler.ret
  } catch (err) {
    return new PassThrough().destroy(err)
  }
}

module.exports = pipeline


/***/ }),

/***/ 5448:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const Readable = __nccwpck_require__(3858)
const {
  InvalidArgumentError,
  RequestAbortedError
} = __nccwpck_require__(8045)
const util = __nccwpck_require__(3983)
const { getResolveErrorBodyCallback } = __nccwpck_require__(7474)
const { AsyncResource } = __nccwpck_require__(852)
const { addSignal, removeSignal } = __nccwpck_require__(7032)

class RequestHandler extends AsyncResource {
  constructor (opts, callback) {
    if (!opts || typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark } = opts

    try {
      if (typeof callback !== 'function') {
        throw new InvalidArgumentError('invalid callback')
      }

      if (highWaterMark && (typeof highWaterMark !== 'number' || highWaterMark < 0)) {
        throw new InvalidArgumentError('invalid highWaterMark')
      }

      if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
        throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
      }

      if (method === 'CONNECT') {
        throw new InvalidArgumentError('invalid method')
      }

      if (onInfo && typeof onInfo !== 'function') {
        throw new InvalidArgumentError('invalid onInfo callback')
      }

      super('UNDICI_REQUEST')
    } catch (err) {
      if (util.isStream(body)) {
        util.destroy(body.on('error', util.nop), err)
      }
      throw err
    }

    this.responseHeaders = responseHeaders || null
    this.opaque = opaque || null
    this.callback = callback
    this.res = null
    this.abort = null
    this.body = body
    this.trailers = {}
    this.context = null
    this.onInfo = onInfo || null
    this.throwOnError = throwOnError
    this.highWaterMark = highWaterMark

    if (util.isStream(body)) {
      body.on('error', (err) => {
        this.onError(err)
      })
    }

    addSignal(this, signal)
  }

  onConnect (abort, context) {
    if (!this.callback) {
      throw new RequestAbortedError()
    }

    this.abort = abort
    this.context = context
  }

  onHeaders (statusCode, rawHeaders, resume, statusMessage) {
    const { callback, opaque, abort, context, responseHeaders, highWaterMark } = this

    const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)

    if (statusCode < 200) {
      if (this.onInfo) {
        this.onInfo({ statusCode, headers })
      }
      return
    }

    const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers
    const contentType = parsedHeaders['content-type']
    const body = new Readable({ resume, abort, contentType, highWaterMark })

    this.callback = null
    this.res = body
    if (callback !== null) {
      if (this.throwOnError && statusCode >= 400) {
        this.runInAsyncScope(getResolveErrorBodyCallback, null,
          { callback, body, contentType, statusCode, statusMessage, headers }
        )
      } else {
        this.runInAsyncScope(callback, null, null, {
          statusCode,
          headers,
          trailers: this.trailers,
          opaque,
          body,
          context
        })
      }
    }
  }

  onData (chunk) {
    const { res } = this
    return res.push(chunk)
  }

  onComplete (trailers) {
    const { res } = this

    removeSignal(this)

    util.parseHeaders(trailers, this.trailers)

    res.push(null)
  }

  onError (err) {
    const { res, callback, body, opaque } = this

    removeSignal(this)

    if (callback) {
      // TODO: Does this need queueMicrotask?
      this.callback = null
      queueMicrotask(() => {
        this.runInAsyncScope(callback, null, err, { opaque })
      })
    }

    if (res) {
      this.res = null
      // Ensure all queued handlers are invoked before destroying res.
      queueMicrotask(() => {
        util.destroy(res, err)
      })
    }

    if (body) {
      this.body = null
      util.destroy(body, err)
    }
  }
}

function request (opts, callback) {
  if (callback === undefined) {
    return new Promise((resolve, reject) => {
      request.call(this, opts, (err, data) => {
        return err ? reject(err) : resolve(data)
      })
    })
  }

  try {
    this.dispatch(opts, new RequestHandler(opts, callback))
  } catch (err) {
    if (typeof callback !== 'function') {
      throw err
    }
    const opaque = opts && opts.opaque
    queueMicrotask(() => callback(err, { opaque }))
  }
}

module.exports = request
module.exports.RequestHandler = RequestHandler


/***/ }),

/***/ 5395:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { finished, PassThrough } = __nccwpck_require__(2781)
const {
  InvalidArgumentError,
  InvalidReturnValueError,
  RequestAbortedError
} = __nccwpck_require__(8045)
const util = __nccwpck_require__(3983)
const { getResolveErrorBodyCallback } = __nccwpck_require__(7474)
const { AsyncResource } = __nccwpck_require__(852)
const { addSignal, removeSignal } = __nccwpck_require__(7032)

class StreamHandler extends AsyncResource {
  constructor (opts, factory, callback) {
    if (!opts || typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError } = opts

    try {
      if (typeof callback !== 'function') {
        throw new InvalidArgumentError('invalid callback')
      }

      if (typeof factory !== 'function') {
        throw new InvalidArgumentError('invalid factory')
      }

      if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
        throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
      }

      if (method === 'CONNECT') {
        throw new InvalidArgumentError('invalid method')
      }

      if (onInfo && typeof onInfo !== 'function') {
        throw new InvalidArgumentError('invalid onInfo callback')
      }

      super('UNDICI_STREAM')
    } catch (err) {
      if (util.isStream(body)) {
        util.destroy(body.on('error', util.nop), err)
      }
      throw err
    }

    this.responseHeaders = responseHeaders || null
    this.opaque = opaque || null
    this.factory = factory
    this.callback = callback
    this.res = null
    this.abort = null
    this.context = null
    this.trailers = null
    this.body = body
    this.onInfo = onInfo || null
    this.throwOnError = throwOnError || false

    if (util.isStream(body)) {
      body.on('error', (err) => {
        this.onError(err)
      })
    }

    addSignal(this, signal)
  }

  onConnect (abort, context) {
    if (!this.callback) {
      throw new RequestAbortedError()
    }

    this.abort = abort
    this.context = context
  }

  onHeaders (statusCode, rawHeaders, resume, statusMessage) {
    const { factory, opaque, context, callback, responseHeaders } = this

    const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)

    if (statusCode < 200) {
      if (this.onInfo) {
        this.onInfo({ statusCode, headers })
      }
      return
    }

    this.factory = null

    let res

    if (this.throwOnError && statusCode >= 400) {
      const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers
      const contentType = parsedHeaders['content-type']
      res = new PassThrough()

      this.callback = null
      this.runInAsyncScope(getResolveErrorBodyCallback, null,
        { callback, body: res, contentType, statusCode, statusMessage, headers }
      )
    } else {
      if (factory === null) {
        return
      }

      res = this.runInAsyncScope(factory, null, {
        statusCode,
        headers,
        opaque,
        context
      })

      if (
        !res ||
        typeof res.write !== 'function' ||
        typeof res.end !== 'function' ||
        typeof res.on !== 'function'
      ) {
        throw new InvalidReturnValueError('expected Writable')
      }

      // TODO: Avoid finished. It registers an unnecessary amount of listeners.
      finished(res, { readable: false }, (err) => {
        const { callback, res, opaque, trailers, abort } = this

        this.res = null
        if (err || !res.readable) {
          util.destroy(res, err)
        }

        this.callback = null
        this.runInAsyncScope(callback, null, err || null, { opaque, trailers })

        if (err) {
          abort()
        }
      })
    }

    res.on('drain', resume)

    this.res = res

    const needDrain = res.writableNeedDrain !== undefined
      ? res.writableNeedDrain
      : res._writableState && res._writableState.needDrain

    return needDrain !== true
  }

  onData (chunk) {
    const { res } = this

    return res ? res.write(chunk) : true
  }

  onComplete (trailers) {
    const { res } = this

    removeSignal(this)

    if (!res) {
      return
    }

    this.trailers = util.parseHeaders(trailers)

    res.end()
  }

  onError (err) {
    const { res, callback, opaque, body } = this

    removeSignal(this)

    this.factory = null

    if (res) {
      this.res = null
      util.destroy(res, err)
    } else if (callback) {
      this.callback = null
      queueMicrotask(() => {
        this.runInAsyncScope(callback, null, err, { opaque })
      })
    }

    if (body) {
      this.body = null
      util.destroy(body, err)
    }
  }
}

function stream (opts, factory, callback) {
  if (callback === undefined) {
    return new Promise((resolve, reject) => {
      stream.call(this, opts, factory, (err, data) => {
        return err ? reject(err) : resolve(data)
      })
    })
  }

  try {
    this.dispatch(opts, new StreamHandler(opts, factory, callback))
  } catch (err) {
    if (typeof callback !== 'function') {
      throw err
    }
    const opaque = opts && opts.opaque
    queueMicrotask(() => callback(err, { opaque }))
  }
}

module.exports = stream


/***/ }),

/***/ 6923:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { InvalidArgumentError, RequestAbortedError, SocketError } = __nccwpck_require__(8045)
const { AsyncResource } = __nccwpck_require__(852)
const util = __nccwpck_require__(3983)
const { addSignal, removeSignal } = __nccwpck_require__(7032)
const assert = __nccwpck_require__(9491)

class UpgradeHandler extends AsyncResource {
  constructor (opts, callback) {
    if (!opts || typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    if (typeof callback !== 'function') {
      throw new InvalidArgumentError('invalid callback')
    }

    const { signal, opaque, responseHeaders } = opts

    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
    }

    super('UNDICI_UPGRADE')

    this.responseHeaders = responseHeaders || null
    this.opaque = opaque || null
    this.callback = callback
    this.abort = null
    this.context = null

    addSignal(this, signal)
  }

  onConnect (abort, context) {
    if (!this.callback) {
      throw new RequestAbortedError()
    }

    this.abort = abort
    this.context = null
  }

  onHeaders () {
    throw new SocketError('bad upgrade', null)
  }

  onUpgrade (statusCode, rawHeaders, socket) {
    const { callback, opaque, context } = this

    assert.strictEqual(statusCode, 101)

    removeSignal(this)

    this.callback = null
    const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)
    this.runInAsyncScope(callback, null, null, {
      headers,
      socket,
      opaque,
      context
    })
  }

  onError (err) {
    const { callback, opaque } = this

    removeSignal(this)

    if (callback) {
      this.callback = null
      queueMicrotask(() => {
        this.runInAsyncScope(callback, null, err, { opaque })
      })
    }
  }
}

function upgrade (opts, callback) {
  if (callback === undefined) {
    return new Promise((resolve, reject) => {
      upgrade.call(this, opts, (err, data) => {
        return err ? reject(err) : resolve(data)
      })
    })
  }

  try {
    const upgradeHandler = new UpgradeHandler(opts, callback)
    this.dispatch({
      ...opts,
      method: opts.method || 'GET',
      upgrade: opts.protocol || 'Websocket'
    }, upgradeHandler)
  } catch (err) {
    if (typeof callback !== 'function') {
      throw err
    }
    const opaque = opts && opts.opaque
    queueMicrotask(() => callback(err, { opaque }))
  }
}

module.exports = upgrade


/***/ }),

/***/ 4059:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


module.exports.request = __nccwpck_require__(5448)
module.exports.stream = __nccwpck_require__(5395)
module.exports.pipeline = __nccwpck_require__(8752)
module.exports.upgrade = __nccwpck_require__(6923)
module.exports.connect = __nccwpck_require__(9744)


/***/ }),

/***/ 3858:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
// Ported from https://github.com/nodejs/undici/pull/907



const assert = __nccwpck_require__(9491)
const { Readable } = __nccwpck_require__(2781)
const { RequestAbortedError, NotSupportedError, InvalidArgumentError } = __nccwpck_require__(8045)
const util = __nccwpck_require__(3983)
const { ReadableStreamFrom, toUSVString } = __nccwpck_require__(3983)

let Blob

const kConsume = Symbol('kConsume')
const kReading = Symbol('kReading')
const kBody = Symbol('kBody')
const kAbort = Symbol('abort')
const kContentType = Symbol('kContentType')

const noop = () => {}

module.exports = class BodyReadable extends Readable {
  constructor ({
    resume,
    abort,
    contentType = '',
    highWaterMark = 64 * 1024 // Same as nodejs fs streams.
  }) {
    super({
      autoDestroy: true,
      read: resume,
      highWaterMark
    })

    this._readableState.dataEmitted = false

    this[kAbort] = abort
    this[kConsume] = null
    this[kBody] = null
    this[kContentType] = contentType

    // Is stream being consumed through Readable API?
    // This is an optimization so that we avoid checking
    // for 'data' and 'readable' listeners in the hot path
    // inside push().
    this[kReading] = false
  }

  destroy (err) {
    if (this.destroyed) {
      // Node < 16
      return this
    }

    if (!err && !this._readableState.endEmitted) {
      err = new RequestAbortedError()
    }

    if (err) {
      this[kAbort]()
    }

    return super.destroy(err)
  }

  emit (ev, ...args) {
    if (ev === 'data') {
      // Node < 16.7
      this._readableState.dataEmitted = true
    } else if (ev === 'error') {
      // Node < 16
      this._readableState.errorEmitted = true
    }
    return super.emit(ev, ...args)
  }

  on (ev, ...args) {
    if (ev === 'data' || ev === 'readable') {
      this[kReading] = true
    }
    return super.on(ev, ...args)
  }

  addListener (ev, ...args) {
    return this.on(ev, ...args)
  }

  off (ev, ...args) {
    const ret = super.off(ev, ...args)
    if (ev === 'data' || ev === 'readable') {
      this[kReading] = (
        this.listenerCount('data') > 0 ||
        this.listenerCount('readable') > 0
      )
    }
    return ret
  }

  removeListener (ev, ...args) {
    return this.off(ev, ...args)
  }

  push (chunk) {
    if (this[kConsume] && chunk !== null && this.readableLength === 0) {
      consumePush(this[kConsume], chunk)
      return this[kReading] ? super.push(chunk) : true
    }
    return super.push(chunk)
  }

  // https://fetch.spec.whatwg.org/#dom-body-text
  async text () {
    return consume(this, 'text')
  }

  // https://fetch.spec.whatwg.org/#dom-body-json
  async json () {
    return consume(this, 'json')
  }

  // https://fetch.spec.whatwg.org/#dom-body-blob
  async blob () {
    return consume(this, 'blob')
  }

  // https://fetch.spec.whatwg.org/#dom-body-arraybuffer
  async arrayBuffer () {
    return consume(this, 'arrayBuffer')
  }

  // https://fetch.spec.whatwg.org/#dom-body-formdata
  async formData () {
    // TODO: Implement.
    throw new NotSupportedError()
  }

  // https://fetch.spec.whatwg.org/#dom-body-bodyused
  get bodyUsed () {
    return util.isDisturbed(this)
  }

  // https://fetch.spec.whatwg.org/#dom-body-body
  get body () {
    if (!this[kBody]) {
      this[kBody] = ReadableStreamFrom(this)
      if (this[kConsume]) {
        // TODO: Is this the best way to force a lock?
        this[kBody].getReader() // Ensure stream is locked.
        assert(this[kBody].locked)
      }
    }
    return this[kBody]
  }

  dump (opts) {
    let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144
    const signal = opts && opts.signal

    if (signal) {
      try {
        if (typeof signal !== 'object' || !('aborted' in signal)) {
          throw new InvalidArgumentError('signal must be an AbortSignal')
        }
        util.throwIfAborted(signal)
      } catch (err) {
        return Promise.reject(err)
      }
    }

    if (this.closed) {
      return Promise.resolve(null)
    }

    return new Promise((resolve, reject) => {
      const signalListenerCleanup = signal
        ? util.addAbortListener(signal, () => {
          this.destroy()
        })
        : noop

      this
        .on('close', function () {
          signalListenerCleanup()
          if (signal && signal.aborted) {
            reject(signal.reason || Object.assign(new Error('The operation was aborted'), { name: 'AbortError' }))
          } else {
            resolve(null)
          }
        })
        .on('error', noop)
        .on('data', function (chunk) {
          limit -= chunk.length
          if (limit <= 0) {
            this.destroy()
          }
        })
        .resume()
    })
  }
}

// https://streams.spec.whatwg.org/#readablestream-locked
function isLocked (self) {
  // Consume is an implicit lock.
  return (self[kBody] && self[kBody].locked === true) || self[kConsume]
}

// https://fetch.spec.whatwg.org/#body-unusable
function isUnusable (self) {
  return util.isDisturbed(self) || isLocked(self)
}

async function consume (stream, type) {
  if (isUnusable(stream)) {
    throw new TypeError('unusable')
  }

  assert(!stream[kConsume])

  return new Promise((resolve, reject) => {
    stream[kConsume] = {
      type,
      stream,
      resolve,
      reject,
      length: 0,
      body: []
    }

    stream
      .on('error', function (err) {
        consumeFinish(this[kConsume], err)
      })
      .on('close', function () {
        if (this[kConsume].body !== null) {
          consumeFinish(this[kConsume], new RequestAbortedError())
        }
      })

    process.nextTick(consumeStart, stream[kConsume])
  })
}

function consumeStart (consume) {
  if (consume.body === null) {
    return
  }

  const { _readableState: state } = consume.stream

  for (const chunk of state.buffer) {
    consumePush(consume, chunk)
  }

  if (state.endEmitted) {
    consumeEnd(this[kConsume])
  } else {
    consume.stream.on('end', function () {
      consumeEnd(this[kConsume])
    })
  }

  consume.stream.resume()

  while (consume.stream.read() != null) {
    // Loop
  }
}

function consumeEnd (consume) {
  const { type, body, resolve, stream, length } = consume

  try {
    if (type === 'text') {
      resolve(toUSVString(Buffer.concat(body)))
    } else if (type === 'json') {
      resolve(JSON.parse(Buffer.concat(body)))
    } else if (type === 'arrayBuffer') {
      const dst = new Uint8Array(length)

      let pos = 0
      for (const buf of body) {
        dst.set(buf, pos)
        pos += buf.byteLength
      }

      resolve(dst.buffer)
    } else if (type === 'blob') {
      if (!Blob) {
        Blob = (__nccwpck_require__(4300).Blob)
      }
      resolve(new Blob(body, { type: stream[kContentType] }))
    }

    consumeFinish(consume)
  } catch (err) {
    stream.destroy(err)
  }
}

function consumePush (consume, chunk) {
  consume.length += chunk.length
  consume.body.push(chunk)
}

function consumeFinish (consume, err) {
  if (consume.body === null) {
    return
  }

  if (err) {
    consume.reject(err)
  } else {
    consume.resolve()
  }

  consume.type = null
  consume.stream = null
  consume.resolve = null
  consume.reject = null
  consume.length = 0
  consume.body = null
}


/***/ }),

/***/ 7474:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const assert = __nccwpck_require__(9491)
const {
  ResponseStatusCodeError
} = __nccwpck_require__(8045)
const { toUSVString } = __nccwpck_require__(3983)

async function getResolveErrorBodyCallback ({ callback, body, contentType, statusCode, statusMessage, headers }) {
  assert(body)

  let chunks = []
  let limit = 0

  for await (const chunk of body) {
    chunks.push(chunk)
    limit += chunk.length
    if (limit > 128 * 1024) {
      chunks = null
      break
    }
  }

  if (statusCode === 204 || !contentType || !chunks) {
    process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers))
    return
  }

  try {
    if (contentType.startsWith('application/json')) {
      const payload = JSON.parse(toUSVString(Buffer.concat(chunks)))
      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers, payload))
      return
    }

    if (contentType.startsWith('text/')) {
      const payload = toUSVString(Buffer.concat(chunks))
      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers, payload))
      return
    }
  } catch (err) {
    // Process in a fallback if error
  }

  process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers))
}

module.exports = { getResolveErrorBodyCallback }


/***/ }),

/***/ 7931:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const {
  BalancedPoolMissingUpstreamError,
  InvalidArgumentError
} = __nccwpck_require__(8045)
const {
  PoolBase,
  kClients,
  kNeedDrain,
  kAddClient,
  kRemoveClient,
  kGetDispatcher
} = __nccwpck_require__(3198)
const Pool = __nccwpck_require__(4634)
const { kUrl, kInterceptors } = __nccwpck_require__(2785)
const { parseOrigin } = __nccwpck_require__(3983)
const kFactory = Symbol('factory')

const kOptions = Symbol('options')
const kGreatestCommonDivisor = Symbol('kGreatestCommonDivisor')
const kCurrentWeight = Symbol('kCurrentWeight')
const kIndex = Symbol('kIndex')
const kWeight = Symbol('kWeight')
const kMaxWeightPerServer = Symbol('kMaxWeightPerServer')
const kErrorPenalty = Symbol('kErrorPenalty')

function getGreatestCommonDivisor (a, b) {
  if (b === 0) return a
  return getGreatestCommonDivisor(b, a % b)
}

function defaultFactory (origin, opts) {
  return new Pool(origin, opts)
}

class BalancedPool extends PoolBase {
  constructor (upstreams = [], { factory = defaultFactory, ...opts } = {}) {
    super()

    this[kOptions] = opts
    this[kIndex] = -1
    this[kCurrentWeight] = 0

    this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100
    this[kErrorPenalty] = this[kOptions].errorPenalty || 15

    if (!Array.isArray(upstreams)) {
      upstreams = [upstreams]
    }

    if (typeof factory !== 'function') {
      throw new InvalidArgumentError('factory must be a function.')
    }

    this[kInterceptors] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool)
      ? opts.interceptors.BalancedPool
      : []
    this[kFactory] = factory

    for (const upstream of upstreams) {
      this.addUpstream(upstream)
    }
    this._updateBalancedPoolStats()
  }

  addUpstream (upstream) {
    const upstreamOrigin = parseOrigin(upstream).origin

    if (this[kClients].find((pool) => (
      pool[kUrl].origin === upstreamOrigin &&
      pool.closed !== true &&
      pool.destroyed !== true
    ))) {
      return this
    }
    const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]))

    this[kAddClient](pool)
    pool.on('connect', () => {
      pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty])
    })

    pool.on('connectionError', () => {
      pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty])
      this._updateBalancedPoolStats()
    })

    pool.on('disconnect', (...args) => {
      const err = args[2]
      if (err && err.code === 'UND_ERR_SOCKET') {
        // decrease the weight of the pool.
        pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty])
        this._updateBalancedPoolStats()
      }
    })

    for (const client of this[kClients]) {
      client[kWeight] = this[kMaxWeightPerServer]
    }

    this._updateBalancedPoolStats()

    return this
  }

  _updateBalancedPoolStats () {
    this[kGreatestCommonDivisor] = this[kClients].map(p => p[kWeight]).reduce(getGreatestCommonDivisor, 0)
  }

  removeUpstream (upstream) {
    const upstreamOrigin = parseOrigin(upstream).origin

    const pool = this[kClients].find((pool) => (
      pool[kUrl].origin === upstreamOrigin &&
      pool.closed !== true &&
      pool.destroyed !== true
    ))

    if (pool) {
      this[kRemoveClient](pool)
    }

    return this
  }

  get upstreams () {
    return this[kClients]
      .filter(dispatcher => dispatcher.closed !== true && dispatcher.destroyed !== true)
      .map((p) => p[kUrl].origin)
  }

  [kGetDispatcher] () {
    // We validate that pools is greater than 0,
    // otherwise we would have to wait until an upstream
    // is added, which might never happen.
    if (this[kClients].length === 0) {
      throw new BalancedPoolMissingUpstreamError()
    }

    const dispatcher = this[kClients].find(dispatcher => (
      !dispatcher[kNeedDrain] &&
      dispatcher.closed !== true &&
      dispatcher.destroyed !== true
    ))

    if (!dispatcher) {
      return
    }

    const allClientsBusy = this[kClients].map(pool => pool[kNeedDrain]).reduce((a, b) => a && b, true)

    if (allClientsBusy) {
      return
    }

    let counter = 0

    let maxWeightIndex = this[kClients].findIndex(pool => !pool[kNeedDrain])

    while (counter++ < this[kClients].length) {
      this[kIndex] = (this[kIndex] + 1) % this[kClients].length
      const pool = this[kClients][this[kIndex]]

      // find pool index with the largest weight
      if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {
        maxWeightIndex = this[kIndex]
      }

      // decrease the current weight every `this[kClients].length`.
      if (this[kIndex] === 0) {
        // Set the current weight to the next lower weight.
        this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor]

        if (this[kCurrentWeight] <= 0) {
          this[kCurrentWeight] = this[kMaxWeightPerServer]
        }
      }
      if (pool[kWeight] >= this[kCurrentWeight] && (!pool[kNeedDrain])) {
        return pool
      }
    }

    this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight]
    this[kIndex] = maxWeightIndex
    return this[kClients][maxWeightIndex]
  }
}

module.exports = BalancedPool


/***/ }),

/***/ 6101:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { kConstruct } = __nccwpck_require__(9174)
const { urlEquals, fieldValues: getFieldValues } = __nccwpck_require__(2396)
const { kEnumerableProperty, isDisturbed } = __nccwpck_require__(3983)
const { kHeadersList } = __nccwpck_require__(2785)
const { webidl } = __nccwpck_require__(1744)
const { Response, cloneResponse } = __nccwpck_require__(7823)
const { Request } = __nccwpck_require__(8359)
const { kState, kHeaders, kGuard, kRealm } = __nccwpck_require__(5861)
const { fetching } = __nccwpck_require__(4881)
const { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = __nccwpck_require__(2538)
const assert = __nccwpck_require__(9491)
const { getGlobalDispatcher } = __nccwpck_require__(1892)

/**
 * @see https://w3c.github.io/ServiceWorker/#dfn-cache-batch-operation
 * @typedef {Object} CacheBatchOperation
 * @property {'delete' | 'put'} type
 * @property {any} request
 * @property {any} response
 * @property {import('../../types/cache').CacheQueryOptions} options
 */

/**
 * @see https://w3c.github.io/ServiceWorker/#dfn-request-response-list
 * @typedef {[any, any][]} requestResponseList
 */

class Cache {
  /**
   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list
   * @type {requestResponseList}
   */
  #relevantRequestResponseList

  constructor () {
    if (arguments[0] !== kConstruct) {
      webidl.illegalConstructor()
    }

    this.#relevantRequestResponseList = arguments[1]
  }

  async match (request, options = {}) {
    webidl.brandCheck(this, Cache)
    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.match' })

    request = webidl.converters.RequestInfo(request)
    options = webidl.converters.CacheQueryOptions(options)

    const p = await this.matchAll(request, options)

    if (p.length === 0) {
      return
    }

    return p[0]
  }

  async matchAll (request = undefined, options = {}) {
    webidl.brandCheck(this, Cache)

    if (request !== undefined) request = webidl.converters.RequestInfo(request)
    options = webidl.converters.CacheQueryOptions(options)

    // 1.
    let r = null

    // 2.
    if (request !== undefined) {
      if (request instanceof Request) {
        // 2.1.1
        r = request[kState]

        // 2.1.2
        if (r.method !== 'GET' && !options.ignoreMethod) {
          return []
        }
      } else if (typeof request === 'string') {
        // 2.2.1
        r = new Request(request)[kState]
      }
    }

    // 5.
    // 5.1
    const responses = []

    // 5.2
    if (request === undefined) {
      // 5.2.1
      for (const requestResponse of this.#relevantRequestResponseList) {
        responses.push(requestResponse[1])
      }
    } else { // 5.3
      // 5.3.1
      const requestResponses = this.#queryCache(r, options)

      // 5.3.2
      for (const requestResponse of requestResponses) {
        responses.push(requestResponse[1])
      }
    }

    // 5.4
    // We don't implement CORs so we don't need to loop over the responses, yay!

    // 5.5.1
    const responseList = []

    // 5.5.2
    for (const response of responses) {
      // 5.5.2.1
      const responseObject = new Response(response.body?.source ?? null)
      const body = responseObject[kState].body
      responseObject[kState] = response
      responseObject[kState].body = body
      responseObject[kHeaders][kHeadersList] = response.headersList
      responseObject[kHeaders][kGuard] = 'immutable'

      responseList.push(responseObject)
    }

    // 6.
    return Object.freeze(responseList)
  }

  async add (request) {
    webidl.brandCheck(this, Cache)
    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.add' })

    request = webidl.converters.RequestInfo(request)

    // 1.
    const requests = [request]

    // 2.
    const responseArrayPromise = this.addAll(requests)

    // 3.
    return await responseArrayPromise
  }

  async addAll (requests) {
    webidl.brandCheck(this, Cache)
    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.addAll' })

    requests = webidl.converters['sequence<RequestInfo>'](requests)

    // 1.
    const responsePromises = []

    // 2.
    const requestList = []

    // 3.
    for (const request of requests) {
      if (typeof request === 'string') {
        continue
      }

      // 3.1
      const r = request[kState]

      // 3.2
      if (!urlIsHttpHttpsScheme(r.url) || r.method !== 'GET') {
        throw webidl.errors.exception({
          header: 'Cache.addAll',
          message: 'Expected http/s scheme when method is not GET.'
        })
      }
    }

    // 4.
    /** @type {ReturnType<typeof fetching>[]} */
    const fetchControllers = []

    // 5.
    for (const request of requests) {
      // 5.1
      const r = new Request(request)[kState]

      // 5.2
      if (!urlIsHttpHttpsScheme(r.url)) {
        throw webidl.errors.exception({
          header: 'Cache.addAll',
          message: 'Expected http/s scheme.'
        })
      }

      // 5.4
      r.initiator = 'fetch'
      r.destination = 'subresource'

      // 5.5
      requestList.push(r)

      // 5.6
      const responsePromise = createDeferredPromise()

      // 5.7
      fetchControllers.push(fetching({
        request: r,
        dispatcher: getGlobalDispatcher(),
        processResponse (response) {
          // 1.
          if (response.type === 'error' || response.status === 206 || response.status < 200 || response.status > 299) {
            responsePromise.reject(webidl.errors.exception({
              header: 'Cache.addAll',
              message: 'Received an invalid status code or the request failed.'
            }))
          } else if (response.headersList.contains('vary')) { // 2.
            // 2.1
            const fieldValues = getFieldValues(response.headersList.get('vary'))

            // 2.2
            for (const fieldValue of fieldValues) {
              // 2.2.1
              if (fieldValue === '*') {
                responsePromise.reject(webidl.errors.exception({
                  header: 'Cache.addAll',
                  message: 'invalid vary field value'
                }))

                for (const controller of fetchControllers) {
                  controller.abort()
                }

                return
              }
            }
          }
        },
        processResponseEndOfBody (response) {
          // 1.
          if (response.aborted) {
            responsePromise.reject(new DOMException('aborted', 'AbortError'))
            return
          }

          // 2.
          responsePromise.resolve(response)
        }
      }))

      // 5.8
      responsePromises.push(responsePromise.promise)
    }

    // 6.
    const p = Promise.all(responsePromises)

    // 7.
    const responses = await p

    // 7.1
    const operations = []

    // 7.2
    let index = 0

    // 7.3
    for (const response of responses) {
      // 7.3.1
      /** @type {CacheBatchOperation} */
      const operation = {
        type: 'put', // 7.3.2
        request: requestList[index], // 7.3.3
        response // 7.3.4
      }

      operations.push(operation) // 7.3.5

      index++ // 7.3.6
    }

    // 7.5
    const cacheJobPromise = createDeferredPromise()

    // 7.6.1
    let errorData = null

    // 7.6.2
    try {
      this.#batchCacheOperations(operations)
    } catch (e) {
      errorData = e
    }

    // 7.6.3
    queueMicrotask(() => {
      // 7.6.3.1
      if (errorData === null) {
        cacheJobPromise.resolve(undefined)
      } else {
        // 7.6.3.2
        cacheJobPromise.reject(errorData)
      }
    })

    // 7.7
    return cacheJobPromise.promise
  }

  async put (request, response) {
    webidl.brandCheck(this, Cache)
    webidl.argumentLengthCheck(arguments, 2, { header: 'Cache.put' })

    request = webidl.converters.RequestInfo(request)
    response = webidl.converters.Response(response)

    // 1.
    let innerRequest = null

    // 2.
    if (request instanceof Request) {
      innerRequest = request[kState]
    } else { // 3.
      innerRequest = new Request(request)[kState]
    }

    // 4.
    if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== 'GET') {
      throw webidl.errors.exception({
        header: 'Cache.put',
        message: 'Expected an http/s scheme when method is not GET'
      })
    }

    // 5.
    const innerResponse = response[kState]

    // 6.
    if (innerResponse.status === 206) {
      throw webidl.errors.exception({
        header: 'Cache.put',
        message: 'Got 206 status'
      })
    }

    // 7.
    if (innerResponse.headersList.contains('vary')) {
      // 7.1.
      const fieldValues = getFieldValues(innerResponse.headersList.get('vary'))

      // 7.2.
      for (const fieldValue of fieldValues) {
        // 7.2.1
        if (fieldValue === '*') {
          throw webidl.errors.exception({
            header: 'Cache.put',
            message: 'Got * vary field value'
          })
        }
      }
    }

    // 8.
    if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {
      throw webidl.errors.exception({
        header: 'Cache.put',
        message: 'Response body is locked or disturbed'
      })
    }

    // 9.
    const clonedResponse = cloneResponse(innerResponse)

    // 10.
    const bodyReadPromise = createDeferredPromise()

    // 11.
    if (innerResponse.body != null) {
      // 11.1
      const stream = innerResponse.body.stream

      // 11.2
      const reader = stream.getReader()

      // 11.3
      readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject)
    } else {
      bodyReadPromise.resolve(undefined)
    }

    // 12.
    /** @type {CacheBatchOperation[]} */
    const operations = []

    // 13.
    /** @type {CacheBatchOperation} */
    const operation = {
      type: 'put', // 14.
      request: innerRequest, // 15.
      response: clonedResponse // 16.
    }

    // 17.
    operations.push(operation)

    // 19.
    const bytes = await bodyReadPromise.promise

    if (clonedResponse.body != null) {
      clonedResponse.body.source = bytes
    }

    // 19.1
    const cacheJobPromise = createDeferredPromise()

    // 19.2.1
    let errorData = null

    // 19.2.2
    try {
      this.#batchCacheOperations(operations)
    } catch (e) {
      errorData = e
    }

    // 19.2.3
    queueMicrotask(() => {
      // 19.2.3.1
      if (errorData === null) {
        cacheJobPromise.resolve()
      } else { // 19.2.3.2
        cacheJobPromise.reject(errorData)
      }
    })

    return cacheJobPromise.promise
  }

  async delete (request, options = {}) {
    webidl.brandCheck(this, Cache)
    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.delete' })

    request = webidl.converters.RequestInfo(request)
    options = webidl.converters.CacheQueryOptions(options)

    /**
     * @type {Request}
     */
    let r = null

    if (request instanceof Request) {
      r = request[kState]

      if (r.method !== 'GET' && !options.ignoreMethod) {
        return false
      }
    } else {
      assert(typeof request === 'string')

      r = new Request(request)[kState]
    }

    /** @type {CacheBatchOperation[]} */
    const operations = []

    /** @type {CacheBatchOperation} */
    const operation = {
      type: 'delete',
      request: r,
      options
    }

    operations.push(operation)

    const cacheJobPromise = createDeferredPromise()

    let errorData = null
    let requestResponses

    try {
      requestResponses = this.#batchCacheOperations(operations)
    } catch (e) {
      errorData = e
    }

    queueMicrotask(() => {
      if (errorData === null) {
        cacheJobPromise.resolve(!!requestResponses?.length)
      } else {
        cacheJobPromise.reject(errorData)
      }
    })

    return cacheJobPromise.promise
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys
   * @param {any} request
   * @param {import('../../types/cache').CacheQueryOptions} options
   * @returns {readonly Request[]}
   */
  async keys (request = undefined, options = {}) {
    webidl.brandCheck(this, Cache)

    if (request !== undefined) request = webidl.converters.RequestInfo(request)
    options = webidl.converters.CacheQueryOptions(options)

    // 1.
    let r = null

    // 2.
    if (request !== undefined) {
      // 2.1
      if (request instanceof Request) {
        // 2.1.1
        r = request[kState]

        // 2.1.2
        if (r.method !== 'GET' && !options.ignoreMethod) {
          return []
        }
      } else if (typeof request === 'string') { // 2.2
        r = new Request(request)[kState]
      }
    }

    // 4.
    const promise = createDeferredPromise()

    // 5.
    // 5.1
    const requests = []

    // 5.2
    if (request === undefined) {
      // 5.2.1
      for (const requestResponse of this.#relevantRequestResponseList) {
        // 5.2.1.1
        requests.push(requestResponse[0])
      }
    } else { // 5.3
      // 5.3.1
      const requestResponses = this.#queryCache(r, options)

      // 5.3.2
      for (const requestResponse of requestResponses) {
        // 5.3.2.1
        requests.push(requestResponse[0])
      }
    }

    // 5.4
    queueMicrotask(() => {
      // 5.4.1
      const requestList = []

      // 5.4.2
      for (const request of requests) {
        const requestObject = new Request('https://a')
        requestObject[kState] = request
        requestObject[kHeaders][kHeadersList] = request.headersList
        requestObject[kHeaders][kGuard] = 'immutable'
        requestObject[kRealm] = request.client

        // 5.4.2.1
        requestList.push(requestObject)
      }

      // 5.4.3
      promise.resolve(Object.freeze(requestList))
    })

    return promise.promise
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm
   * @param {CacheBatchOperation[]} operations
   * @returns {requestResponseList}
   */
  #batchCacheOperations (operations) {
    // 1.
    const cache = this.#relevantRequestResponseList

    // 2.
    const backupCache = [...cache]

    // 3.
    const addedItems = []

    // 4.1
    const resultList = []

    try {
      // 4.2
      for (const operation of operations) {
        // 4.2.1
        if (operation.type !== 'delete' && operation.type !== 'put') {
          throw webidl.errors.exception({
            header: 'Cache.#batchCacheOperations',
            message: 'operation type does not match "delete" or "put"'
          })
        }

        // 4.2.2
        if (operation.type === 'delete' && operation.response != null) {
          throw webidl.errors.exception({
            header: 'Cache.#batchCacheOperations',
            message: 'delete operation should not have an associated response'
          })
        }

        // 4.2.3
        if (this.#queryCache(operation.request, operation.options, addedItems).length) {
          throw new DOMException('???', 'InvalidStateError')
        }

        // 4.2.4
        let requestResponses

        // 4.2.5
        if (operation.type === 'delete') {
          // 4.2.5.1
          requestResponses = this.#queryCache(operation.request, operation.options)

          // TODO: the spec is wrong, this is needed to pass WPTs
          if (requestResponses.length === 0) {
            return []
          }

          // 4.2.5.2
          for (const requestResponse of requestResponses) {
            const idx = cache.indexOf(requestResponse)
            assert(idx !== -1)

            // 4.2.5.2.1
            cache.splice(idx, 1)
          }
        } else if (operation.type === 'put') { // 4.2.6
          // 4.2.6.1
          if (operation.response == null) {
            throw webidl.errors.exception({
              header: 'Cache.#batchCacheOperations',
              message: 'put operation should have an associated response'
            })
          }

          // 4.2.6.2
          const r = operation.request

          // 4.2.6.3
          if (!urlIsHttpHttpsScheme(r.url)) {
            throw webidl.errors.exception({
              header: 'Cache.#batchCacheOperations',
              message: 'expected http or https scheme'
            })
          }

          // 4.2.6.4
          if (r.method !== 'GET') {
            throw webidl.errors.exception({
              header: 'Cache.#batchCacheOperations',
              message: 'not get method'
            })
          }

          // 4.2.6.5
          if (operation.options != null) {
            throw webidl.errors.exception({
              header: 'Cache.#batchCacheOperations',
              message: 'options must not be defined'
            })
          }

          // 4.2.6.6
          requestResponses = this.#queryCache(operation.request)

          // 4.2.6.7
          for (const requestResponse of requestResponses) {
            const idx = cache.indexOf(requestResponse)
            assert(idx !== -1)

            // 4.2.6.7.1
            cache.splice(idx, 1)
          }

          // 4.2.6.8
          cache.push([operation.request, operation.response])

          // 4.2.6.10
          addedItems.push([operation.request, operation.response])
        }

        // 4.2.7
        resultList.push([operation.request, operation.response])
      }

      // 4.3
      return resultList
    } catch (e) { // 5.
      // 5.1
      this.#relevantRequestResponseList.length = 0

      // 5.2
      this.#relevantRequestResponseList = backupCache

      // 5.3
      throw e
    }
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#query-cache
   * @param {any} requestQuery
   * @param {import('../../types/cache').CacheQueryOptions} options
   * @param {requestResponseList} targetStorage
   * @returns {requestResponseList}
   */
  #queryCache (requestQuery, options, targetStorage) {
    /** @type {requestResponseList} */
    const resultList = []

    const storage = targetStorage ?? this.#relevantRequestResponseList

    for (const requestResponse of storage) {
      const [cachedRequest, cachedResponse] = requestResponse
      if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) {
        resultList.push(requestResponse)
      }
    }

    return resultList
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm
   * @param {any} requestQuery
   * @param {any} request
   * @param {any | null} response
   * @param {import('../../types/cache').CacheQueryOptions | undefined} options
   * @returns {boolean}
   */
  #requestMatchesCachedItem (requestQuery, request, response = null, options) {
    // if (options?.ignoreMethod === false && request.method === 'GET') {
    //   return false
    // }

    const queryURL = new URL(requestQuery.url)

    const cachedURL = new URL(request.url)

    if (options?.ignoreSearch) {
      cachedURL.search = ''

      queryURL.search = ''
    }

    if (!urlEquals(queryURL, cachedURL, true)) {
      return false
    }

    if (
      response == null ||
      options?.ignoreVary ||
      !response.headersList.contains('vary')
    ) {
      return true
    }

    const fieldValues = getFieldValues(response.headersList.get('vary'))

    for (const fieldValue of fieldValues) {
      if (fieldValue === '*') {
        return false
      }

      const requestValue = request.headersList.get(fieldValue)
      const queryValue = requestQuery.headersList.get(fieldValue)

      // If one has the header and the other doesn't, or one has
      // a different value than the other, return false
      if (requestValue !== queryValue) {
        return false
      }
    }

    return true
  }
}

Object.defineProperties(Cache.prototype, {
  [Symbol.toStringTag]: {
    value: 'Cache',
    configurable: true
  },
  match: kEnumerableProperty,
  matchAll: kEnumerableProperty,
  add: kEnumerableProperty,
  addAll: kEnumerableProperty,
  put: kEnumerableProperty,
  delete: kEnumerableProperty,
  keys: kEnumerableProperty
})

const cacheQueryOptionConverters = [
  {
    key: 'ignoreSearch',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'ignoreMethod',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'ignoreVary',
    converter: webidl.converters.boolean,
    defaultValue: false
  }
]

webidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters)

webidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([
  ...cacheQueryOptionConverters,
  {
    key: 'cacheName',
    converter: webidl.converters.DOMString
  }
])

webidl.converters.Response = webidl.interfaceConverter(Response)

webidl.converters['sequence<RequestInfo>'] = webidl.sequenceConverter(
  webidl.converters.RequestInfo
)

module.exports = {
  Cache
}


/***/ }),

/***/ 7907:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { kConstruct } = __nccwpck_require__(9174)
const { Cache } = __nccwpck_require__(6101)
const { webidl } = __nccwpck_require__(1744)
const { kEnumerableProperty } = __nccwpck_require__(3983)

class CacheStorage {
  /**
   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map
   * @type {Map<string, import('./cache').requestResponseList}
   */
  #caches = new Map()

  constructor () {
    if (arguments[0] !== kConstruct) {
      webidl.illegalConstructor()
    }
  }

  async match (request, options = {}) {
    webidl.brandCheck(this, CacheStorage)
    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.match' })

    request = webidl.converters.RequestInfo(request)
    options = webidl.converters.MultiCacheQueryOptions(options)

    // 1.
    if (options.cacheName != null) {
      // 1.1.1.1
      if (this.#caches.has(options.cacheName)) {
        // 1.1.1.1.1
        const cacheList = this.#caches.get(options.cacheName)
        const cache = new Cache(kConstruct, cacheList)

        return await cache.match(request, options)
      }
    } else { // 2.
      // 2.2
      for (const cacheList of this.#caches.values()) {
        const cache = new Cache(kConstruct, cacheList)

        // 2.2.1.2
        const response = await cache.match(request, options)

        if (response !== undefined) {
          return response
        }
      }
    }
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#cache-storage-has
   * @param {string} cacheName
   * @returns {Promise<boolean>}
   */
  async has (cacheName) {
    webidl.brandCheck(this, CacheStorage)
    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.has' })

    cacheName = webidl.converters.DOMString(cacheName)

    // 2.1.1
    // 2.2
    return this.#caches.has(cacheName)
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open
   * @param {string} cacheName
   * @returns {Promise<Cache>}
   */
  async open (cacheName) {
    webidl.brandCheck(this, CacheStorage)
    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.open' })

    cacheName = webidl.converters.DOMString(cacheName)

    // 2.1
    if (this.#caches.has(cacheName)) {
      // await caches.open('v1') !== await caches.open('v1')

      // 2.1.1
      const cache = this.#caches.get(cacheName)

      // 2.1.1.1
      return new Cache(kConstruct, cache)
    }

    // 2.2
    const cache = []

    // 2.3
    this.#caches.set(cacheName, cache)

    // 2.4
    return new Cache(kConstruct, cache)
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete
   * @param {string} cacheName
   * @returns {Promise<boolean>}
   */
  async delete (cacheName) {
    webidl.brandCheck(this, CacheStorage)
    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.delete' })

    cacheName = webidl.converters.DOMString(cacheName)

    return this.#caches.delete(cacheName)
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys
   * @returns {string[]}
   */
  async keys () {
    webidl.brandCheck(this, CacheStorage)

    // 2.1
    const keys = this.#caches.keys()

    // 2.2
    return [...keys]
  }
}

Object.defineProperties(CacheStorage.prototype, {
  [Symbol.toStringTag]: {
    value: 'CacheStorage',
    configurable: true
  },
  match: kEnumerableProperty,
  has: kEnumerableProperty,
  open: kEnumerableProperty,
  delete: kEnumerableProperty,
  keys: kEnumerableProperty
})

module.exports = {
  CacheStorage
}


/***/ }),

/***/ 9174:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


module.exports = {
  kConstruct: (__nccwpck_require__(2785).kConstruct)
}


/***/ }),

/***/ 2396:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const assert = __nccwpck_require__(9491)
const { URLSerializer } = __nccwpck_require__(685)
const { isValidHeaderName } = __nccwpck_require__(2538)

/**
 * @see https://url.spec.whatwg.org/#concept-url-equals
 * @param {URL} A
 * @param {URL} B
 * @param {boolean | undefined} excludeFragment
 * @returns {boolean}
 */
function urlEquals (A, B, excludeFragment = false) {
  const serializedA = URLSerializer(A, excludeFragment)

  const serializedB = URLSerializer(B, excludeFragment)

  return serializedA === serializedB
}

/**
 * @see https://github.com/chromium/chromium/blob/694d20d134cb553d8d89e5500b9148012b1ba299/content/browser/cache_storage/cache_storage_cache.cc#L260-L262
 * @param {string} header
 */
function fieldValues (header) {
  assert(header !== null)

  const values = []

  for (let value of header.split(',')) {
    value = value.trim()

    if (!value.length) {
      continue
    } else if (!isValidHeaderName(value)) {
      continue
    }

    values.push(value)
  }

  return values
}

module.exports = {
  urlEquals,
  fieldValues
}


/***/ }),

/***/ 3598:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
// @ts-check



/* global WebAssembly */

const assert = __nccwpck_require__(9491)
const net = __nccwpck_require__(1808)
const http = __nccwpck_require__(3685)
const { pipeline } = __nccwpck_require__(2781)
const util = __nccwpck_require__(3983)
const timers = __nccwpck_require__(9459)
const Request = __nccwpck_require__(2905)
const DispatcherBase = __nccwpck_require__(4839)
const {
  RequestContentLengthMismatchError,
  ResponseContentLengthMismatchError,
  InvalidArgumentError,
  RequestAbortedError,
  HeadersTimeoutError,
  HeadersOverflowError,
  SocketError,
  InformationalError,
  BodyTimeoutError,
  HTTPParserError,
  ResponseExceededMaxSizeError,
  ClientDestroyedError
} = __nccwpck_require__(8045)
const buildConnector = __nccwpck_require__(2067)
const {
  kUrl,
  kReset,
  kServerName,
  kClient,
  kBusy,
  kParser,
  kConnect,
  kBlocking,
  kResuming,
  kRunning,
  kPending,
  kSize,
  kWriting,
  kQueue,
  kConnected,
  kConnecting,
  kNeedDrain,
  kNoRef,
  kKeepAliveDefaultTimeout,
  kHostHeader,
  kPendingIdx,
  kRunningIdx,
  kError,
  kPipelining,
  kSocket,
  kKeepAliveTimeoutValue,
  kMaxHeadersSize,
  kKeepAliveMaxTimeout,
  kKeepAliveTimeoutThreshold,
  kHeadersTimeout,
  kBodyTimeout,
  kStrictContentLength,
  kConnector,
  kMaxRedirections,
  kMaxRequests,
  kCounter,
  kClose,
  kDestroy,
  kDispatch,
  kInterceptors,
  kLocalAddress,
  kMaxResponseSize,
  kHTTPConnVersion,
  // HTTP2
  kHost,
  kHTTP2Session,
  kHTTP2SessionState,
  kHTTP2BuildRequest,
  kHTTP2CopyHeaders,
  kHTTP1BuildRequest
} = __nccwpck_require__(2785)

/** @type {import('http2')} */
let http2
try {
  http2 = __nccwpck_require__(5158)
} catch {
  // @ts-ignore
  http2 = { constants: {} }
}

const {
  constants: {
    HTTP2_HEADER_AUTHORITY,
    HTTP2_HEADER_METHOD,
    HTTP2_HEADER_PATH,
    HTTP2_HEADER_SCHEME,
    HTTP2_HEADER_CONTENT_LENGTH,
    HTTP2_HEADER_EXPECT,
    HTTP2_HEADER_STATUS
  }
} = http2

// Experimental
let h2ExperimentalWarned = false

const FastBuffer = Buffer[Symbol.species]

const kClosedResolve = Symbol('kClosedResolve')

const channels = {}

try {
  const diagnosticsChannel = __nccwpck_require__(7643)
  channels.sendHeaders = diagnosticsChannel.channel('undici:client:sendHeaders')
  channels.beforeConnect = diagnosticsChannel.channel('undici:client:beforeConnect')
  channels.connectError = diagnosticsChannel.channel('undici:client:connectError')
  channels.connected = diagnosticsChannel.channel('undici:client:connected')
} catch {
  channels.sendHeaders = { hasSubscribers: false }
  channels.beforeConnect = { hasSubscribers: false }
  channels.connectError = { hasSubscribers: false }
  channels.connected = { hasSubscribers: false }
}

/**
 * @type {import('../types/client').default}
 */
class Client extends DispatcherBase {
  /**
   *
   * @param {string|URL} url
   * @param {import('../types/client').Client.Options} options
   */
  constructor (url, {
    interceptors,
    maxHeaderSize,
    headersTimeout,
    socketTimeout,
    requestTimeout,
    connectTimeout,
    bodyTimeout,
    idleTimeout,
    keepAlive,
    keepAliveTimeout,
    maxKeepAliveTimeout,
    keepAliveMaxTimeout,
    keepAliveTimeoutThreshold,
    socketPath,
    pipelining,
    tls,
    strictContentLength,
    maxCachedSessions,
    maxRedirections,
    connect,
    maxRequestsPerClient,
    localAddress,
    maxResponseSize,
    autoSelectFamily,
    autoSelectFamilyAttemptTimeout,
    // h2
    allowH2,
    maxConcurrentStreams
  } = {}) {
    super()

    if (keepAlive !== undefined) {
      throw new InvalidArgumentError('unsupported keepAlive, use pipelining=0 instead')
    }

    if (socketTimeout !== undefined) {
      throw new InvalidArgumentError('unsupported socketTimeout, use headersTimeout & bodyTimeout instead')
    }

    if (requestTimeout !== undefined) {
      throw new InvalidArgumentError('unsupported requestTimeout, use headersTimeout & bodyTimeout instead')
    }

    if (idleTimeout !== undefined) {
      throw new InvalidArgumentError('unsupported idleTimeout, use keepAliveTimeout instead')
    }

    if (maxKeepAliveTimeout !== undefined) {
      throw new InvalidArgumentError('unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead')
    }

    if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {
      throw new InvalidArgumentError('invalid maxHeaderSize')
    }

    if (socketPath != null && typeof socketPath !== 'string') {
      throw new InvalidArgumentError('invalid socketPath')
    }

    if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {
      throw new InvalidArgumentError('invalid connectTimeout')
    }

    if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {
      throw new InvalidArgumentError('invalid keepAliveTimeout')
    }

    if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {
      throw new InvalidArgumentError('invalid keepAliveMaxTimeout')
    }

    if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {
      throw new InvalidArgumentError('invalid keepAliveTimeoutThreshold')
    }

    if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {
      throw new InvalidArgumentError('headersTimeout must be a positive integer or zero')
    }

    if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {
      throw new InvalidArgumentError('bodyTimeout must be a positive integer or zero')
    }

    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {
      throw new InvalidArgumentError('connect must be a function or an object')
    }

    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
      throw new InvalidArgumentError('maxRedirections must be a positive number')
    }

    if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {
      throw new InvalidArgumentError('maxRequestsPerClient must be a positive number')
    }

    if (localAddress != null && (typeof localAddress !== 'string' || net.isIP(localAddress) === 0)) {
      throw new InvalidArgumentError('localAddress must be valid string IP address')
    }

    if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) {
      throw new InvalidArgumentError('maxResponseSize must be a positive number')
    }

    if (
      autoSelectFamilyAttemptTimeout != null &&
      (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)
    ) {
      throw new InvalidArgumentError('autoSelectFamilyAttemptTimeout must be a positive number')
    }

    // h2
    if (allowH2 != null && typeof allowH2 !== 'boolean') {
      throw new InvalidArgumentError('allowH2 must be a valid boolean value')
    }

    if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== 'number' || maxConcurrentStreams < 1)) {
      throw new InvalidArgumentError('maxConcurrentStreams must be a possitive integer, greater than 0')
    }

    if (typeof connect !== 'function') {
      connect = buildConnector({
        ...tls,
        maxCachedSessions,
        allowH2,
        socketPath,
        timeout: connectTimeout,
        ...(util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined),
        ...connect
      })
    }

    this[kInterceptors] = interceptors && interceptors.Client && Array.isArray(interceptors.Client)
      ? interceptors.Client
      : [createRedirectInterceptor({ maxRedirections })]
    this[kUrl] = util.parseOrigin(url)
    this[kConnector] = connect
    this[kSocket] = null
    this[kPipelining] = pipelining != null ? pipelining : 1
    this[kMaxHeadersSize] = maxHeaderSize || http.maxHeaderSize
    this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout
    this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 600e3 : keepAliveMaxTimeout
    this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold
    this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout]
    this[kServerName] = null
    this[kLocalAddress] = localAddress != null ? localAddress : null
    this[kResuming] = 0 // 0, idle, 1, scheduled, 2 resuming
    this[kNeedDrain] = 0 // 0, idle, 1, scheduled, 2 resuming
    this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ''}\r\n`
    this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 300e3
    this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 300e3
    this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength
    this[kMaxRedirections] = maxRedirections
    this[kMaxRequests] = maxRequestsPerClient
    this[kClosedResolve] = null
    this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1
    this[kHTTPConnVersion] = 'h1'

    // HTTP/2
    this[kHTTP2Session] = null
    this[kHTTP2SessionState] = !allowH2
      ? null
      : {
        // streams: null, // Fixed queue of streams - For future support of `push`
          openStreams: 0, // Keep track of them to decide wether or not unref the session
          maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100 // Max peerConcurrentStreams for a Node h2 server
        }
    this[kHost] = `${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ''}`

    // kQueue is built up of 3 sections separated by
    // the kRunningIdx and kPendingIdx indices.
    // |   complete   |   running   |   pending   |
    //                ^ kRunningIdx ^ kPendingIdx ^ kQueue.length
    // kRunningIdx points to the first running element.
    // kPendingIdx points to the first pending element.
    // This implements a fast queue with an amortized
    // time of O(1).

    this[kQueue] = []
    this[kRunningIdx] = 0
    this[kPendingIdx] = 0
  }

  get pipelining () {
    return this[kPipelining]
  }

  set pipelining (value) {
    this[kPipelining] = value
    resume(this, true)
  }

  get [kPending] () {
    return this[kQueue].length - this[kPendingIdx]
  }

  get [kRunning] () {
    return this[kPendingIdx] - this[kRunningIdx]
  }

  get [kSize] () {
    return this[kQueue].length - this[kRunningIdx]
  }

  get [kConnected] () {
    return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed
  }

  get [kBusy] () {
    const socket = this[kSocket]
    return (
      (socket && (socket[kReset] || socket[kWriting] || socket[kBlocking])) ||
      (this[kSize] >= (this[kPipelining] || 1)) ||
      this[kPending] > 0
    )
  }

  /* istanbul ignore: only used for test */
  [kConnect] (cb) {
    connect(this)
    this.once('connect', cb)
  }

  [kDispatch] (opts, handler) {
    const origin = opts.origin || this[kUrl].origin

    const request = this[kHTTPConnVersion] === 'h2'
      ? Request[kHTTP2BuildRequest](origin, opts, handler)
      : Request[kHTTP1BuildRequest](origin, opts, handler)

    this[kQueue].push(request)
    if (this[kResuming]) {
      // Do nothing.
    } else if (util.bodyLength(request.body) == null && util.isIterable(request.body)) {
      // Wait a tick in case stream/iterator is ended in the same tick.
      this[kResuming] = 1
      process.nextTick(resume, this)
    } else {
      resume(this, true)
    }

    if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {
      this[kNeedDrain] = 2
    }

    return this[kNeedDrain] < 2
  }

  async [kClose] () {
    // TODO: for H2 we need to gracefully flush the remaining enqueued
    // request and close each stream.
    return new Promise((resolve) => {
      if (!this[kSize]) {
        resolve(null)
      } else {
        this[kClosedResolve] = resolve
      }
    })
  }

  async [kDestroy] (err) {
    return new Promise((resolve) => {
      const requests = this[kQueue].splice(this[kPendingIdx])
      for (let i = 0; i < requests.length; i++) {
        const request = requests[i]
        errorRequest(this, request, err)
      }

      const callback = () => {
        if (this[kClosedResolve]) {
          // TODO (fix): Should we error here with ClientDestroyedError?
          this[kClosedResolve]()
          this[kClosedResolve] = null
        }
        resolve()
      }

      if (this[kHTTP2Session] != null) {
        util.destroy(this[kHTTP2Session], err)
        this[kHTTP2Session] = null
        this[kHTTP2SessionState] = null
      }

      if (!this[kSocket]) {
        queueMicrotask(callback)
      } else {
        util.destroy(this[kSocket].on('close', callback), err)
      }

      resume(this)
    })
  }
}

function onHttp2SessionError (err) {
  assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID')

  this[kSocket][kError] = err

  onError(this[kClient], err)
}

function onHttp2FrameError (type, code, id) {
  const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`)

  if (id === 0) {
    this[kSocket][kError] = err
    onError(this[kClient], err)
  }
}

function onHttp2SessionEnd () {
  util.destroy(this, new SocketError('other side closed'))
  util.destroy(this[kSocket], new SocketError('other side closed'))
}

function onHTTP2GoAway (code) {
  const client = this[kClient]
  const err = new InformationalError(`HTTP/2: "GOAWAY" frame received with code ${code}`)
  client[kSocket] = null
  client[kHTTP2Session] = null

  if (client.destroyed) {
    assert(this[kPending] === 0)

    // Fail entire queue.
    const requests = client[kQueue].splice(client[kRunningIdx])
    for (let i = 0; i < requests.length; i++) {
      const request = requests[i]
      errorRequest(this, request, err)
    }
  } else if (client[kRunning] > 0) {
    // Fail head of pipeline.
    const request = client[kQueue][client[kRunningIdx]]
    client[kQueue][client[kRunningIdx]++] = null

    errorRequest(client, request, err)
  }

  client[kPendingIdx] = client[kRunningIdx]

  assert(client[kRunning] === 0)

  client.emit('disconnect',
    client[kUrl],
    [client],
    err
  )

  resume(client)
}

const constants = __nccwpck_require__(953)
const createRedirectInterceptor = __nccwpck_require__(8861)
const EMPTY_BUF = Buffer.alloc(0)

async function lazyllhttp () {
  const llhttpWasmData = process.env.JEST_WORKER_ID ? __nccwpck_require__(1145) : undefined

  let mod
  try {
    mod = await WebAssembly.compile(Buffer.from(__nccwpck_require__(5627), 'base64'))
  } catch (e) {
    /* istanbul ignore next */

    // We could check if the error was caused by the simd option not
    // being enabled, but the occurring of this other error
    // * https://github.com/emscripten-core/emscripten/issues/11495
    // got me to remove that check to avoid breaking Node 12.
    mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || __nccwpck_require__(1145), 'base64'))
  }

  return await WebAssembly.instantiate(mod, {
    env: {
      /* eslint-disable camelcase */

      wasm_on_url: (p, at, len) => {
        /* istanbul ignore next */
        return 0
      },
      wasm_on_status: (p, at, len) => {
        assert.strictEqual(currentParser.ptr, p)
        const start = at - currentBufferPtr + currentBufferRef.byteOffset
        return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0
      },
      wasm_on_message_begin: (p) => {
        assert.strictEqual(currentParser.ptr, p)
        return currentParser.onMessageBegin() || 0
      },
      wasm_on_header_field: (p, at, len) => {
        assert.strictEqual(currentParser.ptr, p)
        const start = at - currentBufferPtr + currentBufferRef.byteOffset
        return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0
      },
      wasm_on_header_value: (p, at, len) => {
        assert.strictEqual(currentParser.ptr, p)
        const start = at - currentBufferPtr + currentBufferRef.byteOffset
        return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0
      },
      wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive) => {
        assert.strictEqual(currentParser.ptr, p)
        return currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0
      },
      wasm_on_body: (p, at, len) => {
        assert.strictEqual(currentParser.ptr, p)
        const start = at - currentBufferPtr + currentBufferRef.byteOffset
        return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0
      },
      wasm_on_message_complete: (p) => {
        assert.strictEqual(currentParser.ptr, p)
        return currentParser.onMessageComplete() || 0
      }

      /* eslint-enable camelcase */
    }
  })
}

let llhttpInstance = null
let llhttpPromise = lazyllhttp()
llhttpPromise.catch()

let currentParser = null
let currentBufferRef = null
let currentBufferSize = 0
let currentBufferPtr = null

const TIMEOUT_HEADERS = 1
const TIMEOUT_BODY = 2
const TIMEOUT_IDLE = 3

class Parser {
  constructor (client, socket, { exports }) {
    assert(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0)

    this.llhttp = exports
    this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE)
    this.client = client
    this.socket = socket
    this.timeout = null
    this.timeoutValue = null
    this.timeoutType = null
    this.statusCode = null
    this.statusText = ''
    this.upgrade = false
    this.headers = []
    this.headersSize = 0
    this.headersMaxSize = client[kMaxHeadersSize]
    this.shouldKeepAlive = false
    this.paused = false
    this.resume = this.resume.bind(this)

    this.bytesRead = 0

    this.keepAlive = ''
    this.contentLength = ''
    this.connection = ''
    this.maxResponseSize = client[kMaxResponseSize]
  }

  setTimeout (value, type) {
    this.timeoutType = type
    if (value !== this.timeoutValue) {
      timers.clearTimeout(this.timeout)
      if (value) {
        this.timeout = timers.setTimeout(onParserTimeout, value, this)
        // istanbul ignore else: only for jest
        if (this.timeout.unref) {
          this.timeout.unref()
        }
      } else {
        this.timeout = null
      }
      this.timeoutValue = value
    } else if (this.timeout) {
      // istanbul ignore else: only for jest
      if (this.timeout.refresh) {
        this.timeout.refresh()
      }
    }
  }

  resume () {
    if (this.socket.destroyed || !this.paused) {
      return
    }

    assert(this.ptr != null)
    assert(currentParser == null)

    this.llhttp.llhttp_resume(this.ptr)

    assert(this.timeoutType === TIMEOUT_BODY)
    if (this.timeout) {
      // istanbul ignore else: only for jest
      if (this.timeout.refresh) {
        this.timeout.refresh()
      }
    }

    this.paused = false
    this.execute(this.socket.read() || EMPTY_BUF) // Flush parser.
    this.readMore()
  }

  readMore () {
    while (!this.paused && this.ptr) {
      const chunk = this.socket.read()
      if (chunk === null) {
        break
      }
      this.execute(chunk)
    }
  }

  execute (data) {
    assert(this.ptr != null)
    assert(currentParser == null)
    assert(!this.paused)

    const { socket, llhttp } = this

    if (data.length > currentBufferSize) {
      if (currentBufferPtr) {
        llhttp.free(currentBufferPtr)
      }
      currentBufferSize = Math.ceil(data.length / 4096) * 4096
      currentBufferPtr = llhttp.malloc(currentBufferSize)
    }

    new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data)

    // Call `execute` on the wasm parser.
    // We pass the `llhttp_parser` pointer address, the pointer address of buffer view data,
    // and finally the length of bytes to parse.
    // The return value is an error code or `constants.ERROR.OK`.
    try {
      let ret

      try {
        currentBufferRef = data
        currentParser = this
        ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length)
        /* eslint-disable-next-line no-useless-catch */
      } catch (err) {
        /* istanbul ignore next: difficult to make a test case for */
        throw err
      } finally {
        currentParser = null
        currentBufferRef = null
      }

      const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr

      if (ret === constants.ERROR.PAUSED_UPGRADE) {
        this.onUpgrade(data.slice(offset))
      } else if (ret === constants.ERROR.PAUSED) {
        this.paused = true
        socket.unshift(data.slice(offset))
      } else if (ret !== constants.ERROR.OK) {
        const ptr = llhttp.llhttp_get_error_reason(this.ptr)
        let message = ''
        /* istanbul ignore else: difficult to make a test case for */
        if (ptr) {
          const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0)
          message =
            'Response does not match the HTTP/1.1 protocol (' +
            Buffer.from(llhttp.memory.buffer, ptr, len).toString() +
            ')'
        }
        throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset))
      }
    } catch (err) {
      util.destroy(socket, err)
    }
  }

  destroy () {
    assert(this.ptr != null)
    assert(currentParser == null)

    this.llhttp.llhttp_free(this.ptr)
    this.ptr = null

    timers.clearTimeout(this.timeout)
    this.timeout = null
    this.timeoutValue = null
    this.timeoutType = null

    this.paused = false
  }

  onStatus (buf) {
    this.statusText = buf.toString()
  }

  onMessageBegin () {
    const { socket, client } = this

    /* istanbul ignore next: difficult to make a test case for */
    if (socket.destroyed) {
      return -1
    }

    const request = client[kQueue][client[kRunningIdx]]
    if (!request) {
      return -1
    }
  }

  onHeaderField (buf) {
    const len = this.headers.length

    if ((len & 1) === 0) {
      this.headers.push(buf)
    } else {
      this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf])
    }

    this.trackHeader(buf.length)
  }

  onHeaderValue (buf) {
    let len = this.headers.length

    if ((len & 1) === 1) {
      this.headers.push(buf)
      len += 1
    } else {
      this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf])
    }

    const key = this.headers[len - 2]
    if (key.length === 10 && key.toString().toLowerCase() === 'keep-alive') {
      this.keepAlive += buf.toString()
    } else if (key.length === 10 && key.toString().toLowerCase() === 'connection') {
      this.connection += buf.toString()
    } else if (key.length === 14 && key.toString().toLowerCase() === 'content-length') {
      this.contentLength += buf.toString()
    }

    this.trackHeader(buf.length)
  }

  trackHeader (len) {
    this.headersSize += len
    if (this.headersSize >= this.headersMaxSize) {
      util.destroy(this.socket, new HeadersOverflowError())
    }
  }

  onUpgrade (head) {
    const { upgrade, client, socket, headers, statusCode } = this

    assert(upgrade)

    const request = client[kQueue][client[kRunningIdx]]
    assert(request)

    assert(!socket.destroyed)
    assert(socket === client[kSocket])
    assert(!this.paused)
    assert(request.upgrade || request.method === 'CONNECT')

    this.statusCode = null
    this.statusText = ''
    this.shouldKeepAlive = null

    assert(this.headers.length % 2 === 0)
    this.headers = []
    this.headersSize = 0

    socket.unshift(head)

    socket[kParser].destroy()
    socket[kParser] = null

    socket[kClient] = null
    socket[kError] = null
    socket
      .removeListener('error', onSocketError)
      .removeListener('readable', onSocketReadable)
      .removeListener('end', onSocketEnd)
      .removeListener('close', onSocketClose)

    client[kSocket] = null
    client[kQueue][client[kRunningIdx]++] = null
    client.emit('disconnect', client[kUrl], [client], new InformationalError('upgrade'))

    try {
      request.onUpgrade(statusCode, headers, socket)
    } catch (err) {
      util.destroy(socket, err)
    }

    resume(client)
  }

  onHeadersComplete (statusCode, upgrade, shouldKeepAlive) {
    const { client, socket, headers, statusText } = this

    /* istanbul ignore next: difficult to make a test case for */
    if (socket.destroyed) {
      return -1
    }

    const request = client[kQueue][client[kRunningIdx]]

    /* istanbul ignore next: difficult to make a test case for */
    if (!request) {
      return -1
    }

    assert(!this.upgrade)
    assert(this.statusCode < 200)

    if (statusCode === 100) {
      util.destroy(socket, new SocketError('bad response', util.getSocketInfo(socket)))
      return -1
    }

    /* this can only happen if server is misbehaving */
    if (upgrade && !request.upgrade) {
      util.destroy(socket, new SocketError('bad upgrade', util.getSocketInfo(socket)))
      return -1
    }

    assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS)

    this.statusCode = statusCode
    this.shouldKeepAlive = (
      shouldKeepAlive ||
      // Override llhttp value which does not allow keepAlive for HEAD.
      (request.method === 'HEAD' && !socket[kReset] && this.connection.toLowerCase() === 'keep-alive')
    )

    if (this.statusCode >= 200) {
      const bodyTimeout = request.bodyTimeout != null
        ? request.bodyTimeout
        : client[kBodyTimeout]
      this.setTimeout(bodyTimeout, TIMEOUT_BODY)
    } else if (this.timeout) {
      // istanbul ignore else: only for jest
      if (this.timeout.refresh) {
        this.timeout.refresh()
      }
    }

    if (request.method === 'CONNECT') {
      assert(client[kRunning] === 1)
      this.upgrade = true
      return 2
    }

    if (upgrade) {
      assert(client[kRunning] === 1)
      this.upgrade = true
      return 2
    }

    assert(this.headers.length % 2 === 0)
    this.headers = []
    this.headersSize = 0

    if (this.shouldKeepAlive && client[kPipelining]) {
      const keepAliveTimeout = this.keepAlive ? util.parseKeepAliveTimeout(this.keepAlive) : null

      if (keepAliveTimeout != null) {
        const timeout = Math.min(
          keepAliveTimeout - client[kKeepAliveTimeoutThreshold],
          client[kKeepAliveMaxTimeout]
        )
        if (timeout <= 0) {
          socket[kReset] = true
        } else {
          client[kKeepAliveTimeoutValue] = timeout
        }
      } else {
        client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout]
      }
    } else {
      // Stop more requests from being dispatched.
      socket[kReset] = true
    }

    const pause = request.onHeaders(statusCode, headers, this.resume, statusText) === false

    if (request.aborted) {
      return -1
    }

    if (request.method === 'HEAD') {
      return 1
    }

    if (statusCode < 200) {
      return 1
    }

    if (socket[kBlocking]) {
      socket[kBlocking] = false
      resume(client)
    }

    return pause ? constants.ERROR.PAUSED : 0
  }

  onBody (buf) {
    const { client, socket, statusCode, maxResponseSize } = this

    if (socket.destroyed) {
      return -1
    }

    const request = client[kQueue][client[kRunningIdx]]
    assert(request)

    assert.strictEqual(this.timeoutType, TIMEOUT_BODY)
    if (this.timeout) {
      // istanbul ignore else: only for jest
      if (this.timeout.refresh) {
        this.timeout.refresh()
      }
    }

    assert(statusCode >= 200)

    if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {
      util.destroy(socket, new ResponseExceededMaxSizeError())
      return -1
    }

    this.bytesRead += buf.length

    if (request.onData(buf) === false) {
      return constants.ERROR.PAUSED
    }
  }

  onMessageComplete () {
    const { client, socket, statusCode, upgrade, headers, contentLength, bytesRead, shouldKeepAlive } = this

    if (socket.destroyed && (!statusCode || shouldKeepAlive)) {
      return -1
    }

    if (upgrade) {
      return
    }

    const request = client[kQueue][client[kRunningIdx]]
    assert(request)

    assert(statusCode >= 100)

    this.statusCode = null
    this.statusText = ''
    this.bytesRead = 0
    this.contentLength = ''
    this.keepAlive = ''
    this.connection = ''

    assert(this.headers.length % 2 === 0)
    this.headers = []
    this.headersSize = 0

    if (statusCode < 200) {
      return
    }

    /* istanbul ignore next: should be handled by llhttp? */
    if (request.method !== 'HEAD' && contentLength && bytesRead !== parseInt(contentLength, 10)) {
      util.destroy(socket, new ResponseContentLengthMismatchError())
      return -1
    }

    request.onComplete(headers)

    client[kQueue][client[kRunningIdx]++] = null

    if (socket[kWriting]) {
      assert.strictEqual(client[kRunning], 0)
      // Response completed before request.
      util.destroy(socket, new InformationalError('reset'))
      return constants.ERROR.PAUSED
    } else if (!shouldKeepAlive) {
      util.destroy(socket, new InformationalError('reset'))
      return constants.ERROR.PAUSED
    } else if (socket[kReset] && client[kRunning] === 0) {
      // Destroy socket once all requests have completed.
      // The request at the tail of the pipeline is the one
      // that requested reset and no further requests should
      // have been queued since then.
      util.destroy(socket, new InformationalError('reset'))
      return constants.ERROR.PAUSED
    } else if (client[kPipelining] === 1) {
      // We must wait a full event loop cycle to reuse this socket to make sure
      // that non-spec compliant servers are not closing the connection even if they
      // said they won't.
      setImmediate(resume, client)
    } else {
      resume(client)
    }
  }
}

function onParserTimeout (parser) {
  const { socket, timeoutType, client } = parser

  /* istanbul ignore else */
  if (timeoutType === TIMEOUT_HEADERS) {
    if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning] > 1) {
      assert(!parser.paused, 'cannot be paused while waiting for headers')
      util.destroy(socket, new HeadersTimeoutError())
    }
  } else if (timeoutType === TIMEOUT_BODY) {
    if (!parser.paused) {
      util.destroy(socket, new BodyTimeoutError())
    }
  } else if (timeoutType === TIMEOUT_IDLE) {
    assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue])
    util.destroy(socket, new InformationalError('socket idle timeout'))
  }
}

function onSocketReadable () {
  const { [kParser]: parser } = this
  if (parser) {
    parser.readMore()
  }
}

function onSocketError (err) {
  const { [kClient]: client, [kParser]: parser } = this

  assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID')

  if (client[kHTTPConnVersion] !== 'h2') {
    // On Mac OS, we get an ECONNRESET even if there is a full body to be forwarded
    // to the user.
    if (err.code === 'ECONNRESET' && parser.statusCode && !parser.shouldKeepAlive) {
      // We treat all incoming data so for as a valid response.
      parser.onMessageComplete()
      return
    }
  }

  this[kError] = err

  onError(this[kClient], err)
}

function onError (client, err) {
  if (
    client[kRunning] === 0 &&
    err.code !== 'UND_ERR_INFO' &&
    err.code !== 'UND_ERR_SOCKET'
  ) {
    // Error is not caused by running request and not a recoverable
    // socket error.

    assert(client[kPendingIdx] === client[kRunningIdx])

    const requests = client[kQueue].splice(client[kRunningIdx])
    for (let i = 0; i < requests.length; i++) {
      const request = requests[i]
      errorRequest(client, request, err)
    }
    assert(client[kSize] === 0)
  }
}

function onSocketEnd () {
  const { [kParser]: parser, [kClient]: client } = this

  if (client[kHTTPConnVersion] !== 'h2') {
    if (parser.statusCode && !parser.shouldKeepAlive) {
      // We treat all incoming data so far as a valid response.
      parser.onMessageComplete()
      return
    }
  }

  util.destroy(this, new SocketError('other side closed', util.getSocketInfo(this)))
}

function onSocketClose () {
  const { [kClient]: client, [kParser]: parser } = this

  if (client[kHTTPConnVersion] === 'h1' && parser) {
    if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {
      // We treat all incoming data so far as a valid response.
      parser.onMessageComplete()
    }

    this[kParser].destroy()
    this[kParser] = null
  }

  const err = this[kError] || new SocketError('closed', util.getSocketInfo(this))

  client[kSocket] = null

  if (client.destroyed) {
    assert(client[kPending] === 0)

    // Fail entire queue.
    const requests = client[kQueue].splice(client[kRunningIdx])
    for (let i = 0; i < requests.length; i++) {
      const request = requests[i]
      errorRequest(client, request, err)
    }
  } else if (client[kRunning] > 0 && err.code !== 'UND_ERR_INFO') {
    // Fail head of pipeline.
    const request = client[kQueue][client[kRunningIdx]]
    client[kQueue][client[kRunningIdx]++] = null

    errorRequest(client, request, err)
  }

  client[kPendingIdx] = client[kRunningIdx]

  assert(client[kRunning] === 0)

  client.emit('disconnect', client[kUrl], [client], err)

  resume(client)
}

async function connect (client) {
  assert(!client[kConnecting])
  assert(!client[kSocket])

  let { host, hostname, protocol, port } = client[kUrl]

  // Resolve ipv6
  if (hostname[0] === '[') {
    const idx = hostname.indexOf(']')

    assert(idx !== -1)
    const ip = hostname.substring(1, idx)

    assert(net.isIP(ip))
    hostname = ip
  }

  client[kConnecting] = true

  if (channels.beforeConnect.hasSubscribers) {
    channels.beforeConnect.publish({
      connectParams: {
        host,
        hostname,
        protocol,
        port,
        servername: client[kServerName],
        localAddress: client[kLocalAddress]
      },
      connector: client[kConnector]
    })
  }

  try {
    const socket = await new Promise((resolve, reject) => {
      client[kConnector]({
        host,
        hostname,
        protocol,
        port,
        servername: client[kServerName],
        localAddress: client[kLocalAddress]
      }, (err, socket) => {
        if (err) {
          reject(err)
        } else {
          resolve(socket)
        }
      })
    })

    if (client.destroyed) {
      util.destroy(socket.on('error', () => {}), new ClientDestroyedError())
      return
    }

    client[kConnecting] = false

    assert(socket)

    const isH2 = socket.alpnProtocol === 'h2'
    if (isH2) {
      if (!h2ExperimentalWarned) {
        h2ExperimentalWarned = true
        process.emitWarning('H2 support is experimental, expect them to change at any time.', {
          code: 'UNDICI-H2'
        })
      }

      const session = http2.connect(client[kUrl], {
        createConnection: () => socket,
        peerMaxConcurrentStreams: client[kHTTP2SessionState].maxConcurrentStreams
      })

      client[kHTTPConnVersion] = 'h2'
      session[kClient] = client
      session[kSocket] = socket
      session.on('error', onHttp2SessionError)
      session.on('frameError', onHttp2FrameError)
      session.on('end', onHttp2SessionEnd)
      session.on('goaway', onHTTP2GoAway)
      session.on('close', onSocketClose)
      session.unref()

      client[kHTTP2Session] = session
      socket[kHTTP2Session] = session
    } else {
      if (!llhttpInstance) {
        llhttpInstance = await llhttpPromise
        llhttpPromise = null
      }

      socket[kNoRef] = false
      socket[kWriting] = false
      socket[kReset] = false
      socket[kBlocking] = false
      socket[kParser] = new Parser(client, socket, llhttpInstance)
    }

    socket[kCounter] = 0
    socket[kMaxRequests] = client[kMaxRequests]
    socket[kClient] = client
    socket[kError] = null

    socket
      .on('error', onSocketError)
      .on('readable', onSocketReadable)
      .on('end', onSocketEnd)
      .on('close', onSocketClose)

    client[kSocket] = socket

    if (channels.connected.hasSubscribers) {
      channels.connected.publish({
        connectParams: {
          host,
          hostname,
          protocol,
          port,
          servername: client[kServerName],
          localAddress: client[kLocalAddress]
        },
        connector: client[kConnector],
        socket
      })
    }
    client.emit('connect', client[kUrl], [client])
  } catch (err) {
    if (client.destroyed) {
      return
    }

    client[kConnecting] = false

    if (channels.connectError.hasSubscribers) {
      channels.connectError.publish({
        connectParams: {
          host,
          hostname,
          protocol,
          port,
          servername: client[kServerName],
          localAddress: client[kLocalAddress]
        },
        connector: client[kConnector],
        error: err
      })
    }

    if (err.code === 'ERR_TLS_CERT_ALTNAME_INVALID') {
      assert(client[kRunning] === 0)
      while (client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]) {
        const request = client[kQueue][client[kPendingIdx]++]
        errorRequest(client, request, err)
      }
    } else {
      onError(client, err)
    }

    client.emit('connectionError', client[kUrl], [client], err)
  }

  resume(client)
}

function emitDrain (client) {
  client[kNeedDrain] = 0
  client.emit('drain', client[kUrl], [client])
}

function resume (client, sync) {
  if (client[kResuming] === 2) {
    return
  }

  client[kResuming] = 2

  _resume(client, sync)
  client[kResuming] = 0

  if (client[kRunningIdx] > 256) {
    client[kQueue].splice(0, client[kRunningIdx])
    client[kPendingIdx] -= client[kRunningIdx]
    client[kRunningIdx] = 0
  }
}

function _resume (client, sync) {
  while (true) {
    if (client.destroyed) {
      assert(client[kPending] === 0)
      return
    }

    if (client[kClosedResolve] && !client[kSize]) {
      client[kClosedResolve]()
      client[kClosedResolve] = null
      return
    }

    const socket = client[kSocket]

    if (socket && !socket.destroyed && socket.alpnProtocol !== 'h2') {
      if (client[kSize] === 0) {
        if (!socket[kNoRef] && socket.unref) {
          socket.unref()
          socket[kNoRef] = true
        }
      } else if (socket[kNoRef] && socket.ref) {
        socket.ref()
        socket[kNoRef] = false
      }

      if (client[kSize] === 0) {
        if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {
          socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE)
        }
      } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {
        if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
          const request = client[kQueue][client[kRunningIdx]]
          const headersTimeout = request.headersTimeout != null
            ? request.headersTimeout
            : client[kHeadersTimeout]
          socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS)
        }
      }
    }

    if (client[kBusy]) {
      client[kNeedDrain] = 2
    } else if (client[kNeedDrain] === 2) {
      if (sync) {
        client[kNeedDrain] = 1
        process.nextTick(emitDrain, client)
      } else {
        emitDrain(client)
      }
      continue
    }

    if (client[kPending] === 0) {
      return
    }

    if (client[kRunning] >= (client[kPipelining] || 1)) {
      return
    }

    const request = client[kQueue][client[kPendingIdx]]

    if (client[kUrl].protocol === 'https:' && client[kServerName] !== request.servername) {
      if (client[kRunning] > 0) {
        return
      }

      client[kServerName] = request.servername

      if (socket && socket.servername !== request.servername) {
        util.destroy(socket, new InformationalError('servername changed'))
        return
      }
    }

    if (client[kConnecting]) {
      return
    }

    if (!socket && !client[kHTTP2Session]) {
      connect(client)
      return
    }

    if (socket.destroyed || socket[kWriting] || socket[kReset] || socket[kBlocking]) {
      return
    }

    if (client[kRunning] > 0 && !request.idempotent) {
      // Non-idempotent request cannot be retried.
      // Ensure that no other requests are inflight and
      // could cause failure.
      return
    }

    if (client[kRunning] > 0 && (request.upgrade || request.method === 'CONNECT')) {
      // Don't dispatch an upgrade until all preceding requests have completed.
      // A misbehaving server might upgrade the connection before all pipelined
      // request has completed.
      return
    }

    if (client[kRunning] > 0 && util.bodyLength(request.body) !== 0 &&
      (util.isStream(request.body) || util.isAsyncIterable(request.body))) {
      // Request with stream or iterator body can error while other requests
      // are inflight and indirectly error those as well.
      // Ensure this doesn't happen by waiting for inflight
      // to complete before dispatching.

      // Request with stream or iterator body cannot be retried.
      // Ensure that no other requests are inflight and
      // could cause failure.
      return
    }

    if (!request.aborted && write(client, request)) {
      client[kPendingIdx]++
    } else {
      client[kQueue].splice(client[kPendingIdx], 1)
    }
  }
}

// https://www.rfc-editor.org/rfc/rfc7230#section-3.3.2
function shouldSendContentLength (method) {
  return method !== 'GET' && method !== 'HEAD' && method !== 'OPTIONS' && method !== 'TRACE' && method !== 'CONNECT'
}

function write (client, request) {
  if (client[kHTTPConnVersion] === 'h2') {
    writeH2(client, client[kHTTP2Session], request)
    return
  }

  const { body, method, path, host, upgrade, headers, blocking, reset } = request

  // https://tools.ietf.org/html/rfc7231#section-4.3.1
  // https://tools.ietf.org/html/rfc7231#section-4.3.2
  // https://tools.ietf.org/html/rfc7231#section-4.3.5

  // Sending a payload body on a request that does not
  // expect it can cause undefined behavior on some
  // servers and corrupt connection state. Do not
  // re-use the connection for further requests.

  const expectsPayload = (
    method === 'PUT' ||
    method === 'POST' ||
    method === 'PATCH'
  )

  if (body && typeof body.read === 'function') {
    // Try to read EOF in order to get length.
    body.read(0)
  }

  const bodyLength = util.bodyLength(body)

  let contentLength = bodyLength

  if (contentLength === null) {
    contentLength = request.contentLength
  }

  if (contentLength === 0 && !expectsPayload) {
    // https://tools.ietf.org/html/rfc7230#section-3.3.2
    // A user agent SHOULD NOT send a Content-Length header field when
    // the request message does not contain a payload body and the method
    // semantics do not anticipate such a body.

    contentLength = null
  }

  // https://github.com/nodejs/undici/issues/2046
  // A user agent may send a Content-Length header with 0 value, this should be allowed.
  if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength !== null && request.contentLength !== contentLength) {
    if (client[kStrictContentLength]) {
      errorRequest(client, request, new RequestContentLengthMismatchError())
      return false
    }

    process.emitWarning(new RequestContentLengthMismatchError())
  }

  const socket = client[kSocket]

  try {
    request.onConnect((err) => {
      if (request.aborted || request.completed) {
        return
      }

      errorRequest(client, request, err || new RequestAbortedError())

      util.destroy(socket, new InformationalError('aborted'))
    })
  } catch (err) {
    errorRequest(client, request, err)
  }

  if (request.aborted) {
    return false
  }

  if (method === 'HEAD') {
    // https://github.com/mcollina/undici/issues/258
    // Close after a HEAD request to interop with misbehaving servers
    // that may send a body in the response.

    socket[kReset] = true
  }

  if (upgrade || method === 'CONNECT') {
    // On CONNECT or upgrade, block pipeline from dispatching further
    // requests on this connection.

    socket[kReset] = true
  }

  if (reset != null) {
    socket[kReset] = reset
  }

  if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {
    socket[kReset] = true
  }

  if (blocking) {
    socket[kBlocking] = true
  }

  let header = `${method} ${path} HTTP/1.1\r\n`

  if (typeof host === 'string') {
    header += `host: ${host}\r\n`
  } else {
    header += client[kHostHeader]
  }

  if (upgrade) {
    header += `connection: upgrade\r\nupgrade: ${upgrade}\r\n`
  } else if (client[kPipelining] && !socket[kReset]) {
    header += 'connection: keep-alive\r\n'
  } else {
    header += 'connection: close\r\n'
  }

  if (headers) {
    header += headers
  }

  if (channels.sendHeaders.hasSubscribers) {
    channels.sendHeaders.publish({ request, headers: header, socket })
  }

  /* istanbul ignore else: assertion */
  if (!body || bodyLength === 0) {
    if (contentLength === 0) {
      socket.write(`${header}content-length: 0\r\n\r\n`, 'latin1')
    } else {
      assert(contentLength === null, 'no body must not have content length')
      socket.write(`${header}\r\n`, 'latin1')
    }
    request.onRequestSent()
  } else if (util.isBuffer(body)) {
    assert(contentLength === body.byteLength, 'buffer body must have content length')

    socket.cork()
    socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, 'latin1')
    socket.write(body)
    socket.uncork()
    request.onBodySent(body)
    request.onRequestSent()
    if (!expectsPayload) {
      socket[kReset] = true
    }
  } else if (util.isBlobLike(body)) {
    if (typeof body.stream === 'function') {
      writeIterable({ body: body.stream(), client, request, socket, contentLength, header, expectsPayload })
    } else {
      writeBlob({ body, client, request, socket, contentLength, header, expectsPayload })
    }
  } else if (util.isStream(body)) {
    writeStream({ body, client, request, socket, contentLength, header, expectsPayload })
  } else if (util.isIterable(body)) {
    writeIterable({ body, client, request, socket, contentLength, header, expectsPayload })
  } else {
    assert(false)
  }

  return true
}

function writeH2 (client, session, request) {
  const { body, method, path, host, upgrade, expectContinue, signal, headers: reqHeaders } = request

  let headers
  if (typeof reqHeaders === 'string') headers = Request[kHTTP2CopyHeaders](reqHeaders.trim())
  else headers = reqHeaders

  if (upgrade) {
    errorRequest(client, request, new Error('Upgrade not supported for H2'))
    return false
  }

  try {
    // TODO(HTTP/2): Should we call onConnect immediately or on stream ready event?
    request.onConnect((err) => {
      if (request.aborted || request.completed) {
        return
      }

      errorRequest(client, request, err || new RequestAbortedError())
    })
  } catch (err) {
    errorRequest(client, request, err)
  }

  if (request.aborted) {
    return false
  }

  /** @type {import('node:http2').ClientHttp2Stream} */
  let stream
  const h2State = client[kHTTP2SessionState]

  headers[HTTP2_HEADER_AUTHORITY] = host || client[kHost]
  headers[HTTP2_HEADER_METHOD] = method

  if (method === 'CONNECT') {
    session.ref()
    // we are already connected, streams are pending, first request
    // will create a new stream. We trigger a request to create the stream and wait until
    // `ready` event is triggered
    // We disabled endStream to allow the user to write to the stream
    stream = session.request(headers, { endStream: false, signal })

    if (stream.id && !stream.pending) {
      request.onUpgrade(null, null, stream)
      ++h2State.openStreams
    } else {
      stream.once('ready', () => {
        request.onUpgrade(null, null, stream)
        ++h2State.openStreams
      })
    }

    stream.once('close', () => {
      h2State.openStreams -= 1
      // TODO(HTTP/2): unref only if current streams count is 0
      if (h2State.openStreams === 0) session.unref()
    })

    return true
  }

  // https://tools.ietf.org/html/rfc7540#section-8.3
  // :path and :scheme headers must be omited when sending CONNECT

  headers[HTTP2_HEADER_PATH] = path
  headers[HTTP2_HEADER_SCHEME] = 'https'

  // https://tools.ietf.org/html/rfc7231#section-4.3.1
  // https://tools.ietf.org/html/rfc7231#section-4.3.2
  // https://tools.ietf.org/html/rfc7231#section-4.3.5

  // Sending a payload body on a request that does not
  // expect it can cause undefined behavior on some
  // servers and corrupt connection state. Do not
  // re-use the connection for further requests.

  const expectsPayload = (
    method === 'PUT' ||
    method === 'POST' ||
    method === 'PATCH'
  )

  if (body && typeof body.read === 'function') {
    // Try to read EOF in order to get length.
    body.read(0)
  }

  let contentLength = util.bodyLength(body)

  if (contentLength == null) {
    contentLength = request.contentLength
  }

  if (contentLength === 0 || !expectsPayload) {
    // https://tools.ietf.org/html/rfc7230#section-3.3.2
    // A user agent SHOULD NOT send a Content-Length header field when
    // the request message does not contain a payload body and the method
    // semantics do not anticipate such a body.

    contentLength = null
  }

  // https://github.com/nodejs/undici/issues/2046
  // A user agent may send a Content-Length header with 0 value, this should be allowed.
  if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength != null && request.contentLength !== contentLength) {
    if (client[kStrictContentLength]) {
      errorRequest(client, request, new RequestContentLengthMismatchError())
      return false
    }

    process.emitWarning(new RequestContentLengthMismatchError())
  }

  if (contentLength != null) {
    assert(body, 'no body must not have content length')
    headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`
  }

  session.ref()

  const shouldEndStream = method === 'GET' || method === 'HEAD'
  if (expectContinue) {
    headers[HTTP2_HEADER_EXPECT] = '100-continue'
    stream = session.request(headers, { endStream: shouldEndStream, signal })

    stream.once('continue', writeBodyH2)
  } else {
    stream = session.request(headers, {
      endStream: shouldEndStream,
      signal
    })
    writeBodyH2()
  }

  // Increment counter as we have new several streams open
  ++h2State.openStreams

  stream.once('response', headers => {
    const { [HTTP2_HEADER_STATUS]: statusCode, ...realHeaders } = headers

    if (request.onHeaders(Number(statusCode), realHeaders, stream.resume.bind(stream), '') === false) {
      stream.pause()
    }
  })

  stream.once('end', () => {
    request.onComplete([])
  })

  stream.on('data', (chunk) => {
    if (request.onData(chunk) === false) {
      stream.pause()
    }
  })

  stream.once('close', () => {
    h2State.openStreams -= 1
    // TODO(HTTP/2): unref only if current streams count is 0
    if (h2State.openStreams === 0) {
      session.unref()
    }
  })

  stream.once('error', function (err) {
    if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
      h2State.streams -= 1
      util.destroy(stream, err)
    }
  })

  stream.once('frameError', (type, code) => {
    const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`)
    errorRequest(client, request, err)

    if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
      h2State.streams -= 1
      util.destroy(stream, err)
    }
  })

  // stream.on('aborted', () => {
  //   // TODO(HTTP/2): Support aborted
  // })

  // stream.on('timeout', () => {
  //   // TODO(HTTP/2): Support timeout
  // })

  // stream.on('push', headers => {
  //   // TODO(HTTP/2): Suppor push
  // })

  // stream.on('trailers', headers => {
  //   // TODO(HTTP/2): Support trailers
  // })

  return true

  function writeBodyH2 () {
    /* istanbul ignore else: assertion */
    if (!body) {
      request.onRequestSent()
    } else if (util.isBuffer(body)) {
      assert(contentLength === body.byteLength, 'buffer body must have content length')
      stream.cork()
      stream.write(body)
      stream.uncork()
      stream.end()
      request.onBodySent(body)
      request.onRequestSent()
    } else if (util.isBlobLike(body)) {
      if (typeof body.stream === 'function') {
        writeIterable({
          client,
          request,
          contentLength,
          h2stream: stream,
          expectsPayload,
          body: body.stream(),
          socket: client[kSocket],
          header: ''
        })
      } else {
        writeBlob({
          body,
          client,
          request,
          contentLength,
          expectsPayload,
          h2stream: stream,
          header: '',
          socket: client[kSocket]
        })
      }
    } else if (util.isStream(body)) {
      writeStream({
        body,
        client,
        request,
        contentLength,
        expectsPayload,
        socket: client[kSocket],
        h2stream: stream,
        header: ''
      })
    } else if (util.isIterable(body)) {
      writeIterable({
        body,
        client,
        request,
        contentLength,
        expectsPayload,
        header: '',
        h2stream: stream,
        socket: client[kSocket]
      })
    } else {
      assert(false)
    }
  }
}

function writeStream ({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
  assert(contentLength !== 0 || client[kRunning] === 0, 'stream body cannot be pipelined')

  if (client[kHTTPConnVersion] === 'h2') {
    // For HTTP/2, is enough to pipe the stream
    const pipe = pipeline(
      body,
      h2stream,
      (err) => {
        if (err) {
          util.destroy(body, err)
          util.destroy(h2stream, err)
        } else {
          request.onRequestSent()
        }
      }
    )

    pipe.on('data', onPipeData)
    pipe.once('end', () => {
      pipe.removeListener('data', onPipeData)
      util.destroy(pipe)
    })

    function onPipeData (chunk) {
      request.onBodySent(chunk)
    }

    return
  }

  let finished = false

  const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header })

  const onData = function (chunk) {
    if (finished) {
      return
    }

    try {
      if (!writer.write(chunk) && this.pause) {
        this.pause()
      }
    } catch (err) {
      util.destroy(this, err)
    }
  }
  const onDrain = function () {
    if (finished) {
      return
    }

    if (body.resume) {
      body.resume()
    }
  }
  const onAbort = function () {
    if (finished) {
      return
    }
    const err = new RequestAbortedError()
    queueMicrotask(() => onFinished(err))
  }
  const onFinished = function (err) {
    if (finished) {
      return
    }

    finished = true

    assert(socket.destroyed || (socket[kWriting] && client[kRunning] <= 1))

    socket
      .off('drain', onDrain)
      .off('error', onFinished)

    body
      .removeListener('data', onData)
      .removeListener('end', onFinished)
      .removeListener('error', onFinished)
      .removeListener('close', onAbort)

    if (!err) {
      try {
        writer.end()
      } catch (er) {
        err = er
      }
    }

    writer.destroy(err)

    if (err && (err.code !== 'UND_ERR_INFO' || err.message !== 'reset')) {
      util.destroy(body, err)
    } else {
      util.destroy(body)
    }
  }

  body
    .on('data', onData)
    .on('end', onFinished)
    .on('error', onFinished)
    .on('close', onAbort)

  if (body.resume) {
    body.resume()
  }

  socket
    .on('drain', onDrain)
    .on('error', onFinished)
}

async function writeBlob ({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
  assert(contentLength === body.size, 'blob body must have content length')

  const isH2 = client[kHTTPConnVersion] === 'h2'
  try {
    if (contentLength != null && contentLength !== body.size) {
      throw new RequestContentLengthMismatchError()
    }

    const buffer = Buffer.from(await body.arrayBuffer())

    if (isH2) {
      h2stream.cork()
      h2stream.write(buffer)
      h2stream.uncork()
    } else {
      socket.cork()
      socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, 'latin1')
      socket.write(buffer)
      socket.uncork()
    }

    request.onBodySent(buffer)
    request.onRequestSent()

    if (!expectsPayload) {
      socket[kReset] = true
    }

    resume(client)
  } catch (err) {
    util.destroy(isH2 ? h2stream : socket, err)
  }
}

async function writeIterable ({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
  assert(contentLength !== 0 || client[kRunning] === 0, 'iterator body cannot be pipelined')

  let callback = null
  function onDrain () {
    if (callback) {
      const cb = callback
      callback = null
      cb()
    }
  }

  const waitForDrain = () => new Promise((resolve, reject) => {
    assert(callback === null)

    if (socket[kError]) {
      reject(socket[kError])
    } else {
      callback = resolve
    }
  })

  if (client[kHTTPConnVersion] === 'h2') {
    h2stream
      .on('close', onDrain)
      .on('drain', onDrain)

    try {
      // It's up to the user to somehow abort the async iterable.
      for await (const chunk of body) {
        if (socket[kError]) {
          throw socket[kError]
        }

        const res = h2stream.write(chunk)
        request.onBodySent(chunk)
        if (!res) {
          await waitForDrain()
        }
      }
    } catch (err) {
      h2stream.destroy(err)
    } finally {
      request.onRequestSent()
      h2stream.end()
      h2stream
        .off('close', onDrain)
        .off('drain', onDrain)
    }

    return
  }

  socket
    .on('close', onDrain)
    .on('drain', onDrain)

  const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header })
  try {
    // It's up to the user to somehow abort the async iterable.
    for await (const chunk of body) {
      if (socket[kError]) {
        throw socket[kError]
      }

      if (!writer.write(chunk)) {
        await waitForDrain()
      }
    }

    writer.end()
  } catch (err) {
    writer.destroy(err)
  } finally {
    socket
      .off('close', onDrain)
      .off('drain', onDrain)
  }
}

class AsyncWriter {
  constructor ({ socket, request, contentLength, client, expectsPayload, header }) {
    this.socket = socket
    this.request = request
    this.contentLength = contentLength
    this.client = client
    this.bytesWritten = 0
    this.expectsPayload = expectsPayload
    this.header = header

    socket[kWriting] = true
  }

  write (chunk) {
    const { socket, request, contentLength, client, bytesWritten, expectsPayload, header } = this

    if (socket[kError]) {
      throw socket[kError]
    }

    if (socket.destroyed) {
      return false
    }

    const len = Buffer.byteLength(chunk)
    if (!len) {
      return true
    }

    // We should defer writing chunks.
    if (contentLength !== null && bytesWritten + len > contentLength) {
      if (client[kStrictContentLength]) {
        throw new RequestContentLengthMismatchError()
      }

      process.emitWarning(new RequestContentLengthMismatchError())
    }

    socket.cork()

    if (bytesWritten === 0) {
      if (!expectsPayload) {
        socket[kReset] = true
      }

      if (contentLength === null) {
        socket.write(`${header}transfer-encoding: chunked\r\n`, 'latin1')
      } else {
        socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, 'latin1')
      }
    }

    if (contentLength === null) {
      socket.write(`\r\n${len.toString(16)}\r\n`, 'latin1')
    }

    this.bytesWritten += len

    const ret = socket.write(chunk)

    socket.uncork()

    request.onBodySent(chunk)

    if (!ret) {
      if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
        // istanbul ignore else: only for jest
        if (socket[kParser].timeout.refresh) {
          socket[kParser].timeout.refresh()
        }
      }
    }

    return ret
  }

  end () {
    const { socket, contentLength, client, bytesWritten, expectsPayload, header, request } = this
    request.onRequestSent()

    socket[kWriting] = false

    if (socket[kError]) {
      throw socket[kError]
    }

    if (socket.destroyed) {
      return
    }

    if (bytesWritten === 0) {
      if (expectsPayload) {
        // https://tools.ietf.org/html/rfc7230#section-3.3.2
        // A user agent SHOULD send a Content-Length in a request message when
        // no Transfer-Encoding is sent and the request method defines a meaning
        // for an enclosed payload body.

        socket.write(`${header}content-length: 0\r\n\r\n`, 'latin1')
      } else {
        socket.write(`${header}\r\n`, 'latin1')
      }
    } else if (contentLength === null) {
      socket.write('\r\n0\r\n\r\n', 'latin1')
    }

    if (contentLength !== null && bytesWritten !== contentLength) {
      if (client[kStrictContentLength]) {
        throw new RequestContentLengthMismatchError()
      } else {
        process.emitWarning(new RequestContentLengthMismatchError())
      }
    }

    if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
      // istanbul ignore else: only for jest
      if (socket[kParser].timeout.refresh) {
        socket[kParser].timeout.refresh()
      }
    }

    resume(client)
  }

  destroy (err) {
    const { socket, client } = this

    socket[kWriting] = false

    if (err) {
      assert(client[kRunning] <= 1, 'pipeline should only contain this request')
      util.destroy(socket, err)
    }
  }
}

function errorRequest (client, request, err) {
  try {
    request.onError(err)
    assert(request.aborted)
  } catch (err) {
    client.emit('error', err)
  }
}

module.exports = Client


/***/ }),

/***/ 6436:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


/* istanbul ignore file: only for Node 12 */

const { kConnected, kSize } = __nccwpck_require__(2785)

class CompatWeakRef {
  constructor (value) {
    this.value = value
  }

  deref () {
    return this.value[kConnected] === 0 && this.value[kSize] === 0
      ? undefined
      : this.value
  }
}

class CompatFinalizer {
  constructor (finalizer) {
    this.finalizer = finalizer
  }

  register (dispatcher, key) {
    if (dispatcher.on) {
      dispatcher.on('disconnect', () => {
        if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {
          this.finalizer(key)
        }
      })
    }
  }
}

module.exports = function () {
  // FIXME: remove workaround when the Node bug is fixed
  // https://github.com/nodejs/node/issues/49344#issuecomment-1741776308
  if (process.env.NODE_V8_COVERAGE) {
    return {
      WeakRef: CompatWeakRef,
      FinalizationRegistry: CompatFinalizer
    }
  }
  return {
    WeakRef: global.WeakRef || CompatWeakRef,
    FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer
  }
}


/***/ }),

/***/ 663:
/***/ ((module) => {

"use strict";


// https://wicg.github.io/cookie-store/#cookie-maximum-attribute-value-size
const maxAttributeValueSize = 1024

// https://wicg.github.io/cookie-store/#cookie-maximum-name-value-pair-size
const maxNameValuePairSize = 4096

module.exports = {
  maxAttributeValueSize,
  maxNameValuePairSize
}


/***/ }),

/***/ 1724:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { parseSetCookie } = __nccwpck_require__(4408)
const { stringify, getHeadersList } = __nccwpck_require__(3121)
const { webidl } = __nccwpck_require__(1744)
const { Headers } = __nccwpck_require__(554)

/**
 * @typedef {Object} Cookie
 * @property {string} name
 * @property {string} value
 * @property {Date|number|undefined} expires
 * @property {number|undefined} maxAge
 * @property {string|undefined} domain
 * @property {string|undefined} path
 * @property {boolean|undefined} secure
 * @property {boolean|undefined} httpOnly
 * @property {'Strict'|'Lax'|'None'} sameSite
 * @property {string[]} unparsed
 */

/**
 * @param {Headers} headers
 * @returns {Record<string, string>}
 */
function getCookies (headers) {
  webidl.argumentLengthCheck(arguments, 1, { header: 'getCookies' })

  webidl.brandCheck(headers, Headers, { strict: false })

  const cookie = headers.get('cookie')
  const out = {}

  if (!cookie) {
    return out
  }

  for (const piece of cookie.split(';')) {
    const [name, ...value] = piece.split('=')

    out[name.trim()] = value.join('=')
  }

  return out
}

/**
 * @param {Headers} headers
 * @param {string} name
 * @param {{ path?: string, domain?: string }|undefined} attributes
 * @returns {void}
 */
function deleteCookie (headers, name, attributes) {
  webidl.argumentLengthCheck(arguments, 2, { header: 'deleteCookie' })

  webidl.brandCheck(headers, Headers, { strict: false })

  name = webidl.converters.DOMString(name)
  attributes = webidl.converters.DeleteCookieAttributes(attributes)

  // Matches behavior of
  // https://github.com/denoland/deno_std/blob/63827b16330b82489a04614027c33b7904e08be5/http/cookie.ts#L278
  setCookie(headers, {
    name,
    value: '',
    expires: new Date(0),
    ...attributes
  })
}

/**
 * @param {Headers} headers
 * @returns {Cookie[]}
 */
function getSetCookies (headers) {
  webidl.argumentLengthCheck(arguments, 1, { header: 'getSetCookies' })

  webidl.brandCheck(headers, Headers, { strict: false })

  const cookies = getHeadersList(headers).cookies

  if (!cookies) {
    return []
  }

  // In older versions of undici, cookies is a list of name:value.
  return cookies.map((pair) => parseSetCookie(Array.isArray(pair) ? pair[1] : pair))
}

/**
 * @param {Headers} headers
 * @param {Cookie} cookie
 * @returns {void}
 */
function setCookie (headers, cookie) {
  webidl.argumentLengthCheck(arguments, 2, { header: 'setCookie' })

  webidl.brandCheck(headers, Headers, { strict: false })

  cookie = webidl.converters.Cookie(cookie)

  const str = stringify(cookie)

  if (str) {
    headers.append('Set-Cookie', stringify(cookie))
  }
}

webidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([
  {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: 'path',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: 'domain',
    defaultValue: null
  }
])

webidl.converters.Cookie = webidl.dictionaryConverter([
  {
    converter: webidl.converters.DOMString,
    key: 'name'
  },
  {
    converter: webidl.converters.DOMString,
    key: 'value'
  },
  {
    converter: webidl.nullableConverter((value) => {
      if (typeof value === 'number') {
        return webidl.converters['unsigned long long'](value)
      }

      return new Date(value)
    }),
    key: 'expires',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters['long long']),
    key: 'maxAge',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: 'domain',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: 'path',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters.boolean),
    key: 'secure',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters.boolean),
    key: 'httpOnly',
    defaultValue: null
  },
  {
    converter: webidl.converters.USVString,
    key: 'sameSite',
    allowedValues: ['Strict', 'Lax', 'None']
  },
  {
    converter: webidl.sequenceConverter(webidl.converters.DOMString),
    key: 'unparsed',
    defaultValue: []
  }
])

module.exports = {
  getCookies,
  deleteCookie,
  getSetCookies,
  setCookie
}


/***/ }),

/***/ 4408:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { maxNameValuePairSize, maxAttributeValueSize } = __nccwpck_require__(663)
const { isCTLExcludingHtab } = __nccwpck_require__(3121)
const { collectASequenceOfCodePointsFast } = __nccwpck_require__(685)
const assert = __nccwpck_require__(9491)

/**
 * @description Parses the field-value attributes of a set-cookie header string.
 * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
 * @param {string} header
 * @returns if the header is invalid, null will be returned
 */
function parseSetCookie (header) {
  // 1. If the set-cookie-string contains a %x00-08 / %x0A-1F / %x7F
  //    character (CTL characters excluding HTAB): Abort these steps and
  //    ignore the set-cookie-string entirely.
  if (isCTLExcludingHtab(header)) {
    return null
  }

  let nameValuePair = ''
  let unparsedAttributes = ''
  let name = ''
  let value = ''

  // 2. If the set-cookie-string contains a %x3B (";") character:
  if (header.includes(';')) {
    // 1. The name-value-pair string consists of the characters up to,
    //    but not including, the first %x3B (";"), and the unparsed-
    //    attributes consist of the remainder of the set-cookie-string
    //    (including the %x3B (";") in question).
    const position = { position: 0 }

    nameValuePair = collectASequenceOfCodePointsFast(';', header, position)
    unparsedAttributes = header.slice(position.position)
  } else {
    // Otherwise:

    // 1. The name-value-pair string consists of all the characters
    //    contained in the set-cookie-string, and the unparsed-
    //    attributes is the empty string.
    nameValuePair = header
  }

  // 3. If the name-value-pair string lacks a %x3D ("=") character, then
  //    the name string is empty, and the value string is the value of
  //    name-value-pair.
  if (!nameValuePair.includes('=')) {
    value = nameValuePair
  } else {
    //    Otherwise, the name string consists of the characters up to, but
    //    not including, the first %x3D ("=") character, and the (possibly
    //    empty) value string consists of the characters after the first
    //    %x3D ("=") character.
    const position = { position: 0 }
    name = collectASequenceOfCodePointsFast(
      '=',
      nameValuePair,
      position
    )
    value = nameValuePair.slice(position.position + 1)
  }

  // 4. Remove any leading or trailing WSP characters from the name
  //    string and the value string.
  name = name.trim()
  value = value.trim()

  // 5. If the sum of the lengths of the name string and the value string
  //    is more than 4096 octets, abort these steps and ignore the set-
  //    cookie-string entirely.
  if (name.length + value.length > maxNameValuePairSize) {
    return null
  }

  // 6. The cookie-name is the name string, and the cookie-value is the
  //    value string.
  return {
    name, value, ...parseUnparsedAttributes(unparsedAttributes)
  }
}

/**
 * Parses the remaining attributes of a set-cookie header
 * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
 * @param {string} unparsedAttributes
 * @param {[Object.<string, unknown>]={}} cookieAttributeList
 */
function parseUnparsedAttributes (unparsedAttributes, cookieAttributeList = {}) {
  // 1. If the unparsed-attributes string is empty, skip the rest of
  //    these steps.
  if (unparsedAttributes.length === 0) {
    return cookieAttributeList
  }

  // 2. Discard the first character of the unparsed-attributes (which
  //    will be a %x3B (";") character).
  assert(unparsedAttributes[0] === ';')
  unparsedAttributes = unparsedAttributes.slice(1)

  let cookieAv = ''

  // 3. If the remaining unparsed-attributes contains a %x3B (";")
  //    character:
  if (unparsedAttributes.includes(';')) {
    // 1. Consume the characters of the unparsed-attributes up to, but
    //    not including, the first %x3B (";") character.
    cookieAv = collectASequenceOfCodePointsFast(
      ';',
      unparsedAttributes,
      { position: 0 }
    )
    unparsedAttributes = unparsedAttributes.slice(cookieAv.length)
  } else {
    // Otherwise:

    // 1. Consume the remainder of the unparsed-attributes.
    cookieAv = unparsedAttributes
    unparsedAttributes = ''
  }

  // Let the cookie-av string be the characters consumed in this step.

  let attributeName = ''
  let attributeValue = ''

  // 4. If the cookie-av string contains a %x3D ("=") character:
  if (cookieAv.includes('=')) {
    // 1. The (possibly empty) attribute-name string consists of the
    //    characters up to, but not including, the first %x3D ("=")
    //    character, and the (possibly empty) attribute-value string
    //    consists of the characters after the first %x3D ("=")
    //    character.
    const position = { position: 0 }

    attributeName = collectASequenceOfCodePointsFast(
      '=',
      cookieAv,
      position
    )
    attributeValue = cookieAv.slice(position.position + 1)
  } else {
    // Otherwise:

    // 1. The attribute-name string consists of the entire cookie-av
    //    string, and the attribute-value string is empty.
    attributeName = cookieAv
  }

  // 5. Remove any leading or trailing WSP characters from the attribute-
  //    name string and the attribute-value string.
  attributeName = attributeName.trim()
  attributeValue = attributeValue.trim()

  // 6. If the attribute-value is longer than 1024 octets, ignore the
  //    cookie-av string and return to Step 1 of this algorithm.
  if (attributeValue.length > maxAttributeValueSize) {
    return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
  }

  // 7. Process the attribute-name and attribute-value according to the
  //    requirements in the following subsections.  (Notice that
  //    attributes with unrecognized attribute-names are ignored.)
  const attributeNameLowercase = attributeName.toLowerCase()

  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.1
  // If the attribute-name case-insensitively matches the string
  // "Expires", the user agent MUST process the cookie-av as follows.
  if (attributeNameLowercase === 'expires') {
    // 1. Let the expiry-time be the result of parsing the attribute-value
    //    as cookie-date (see Section 5.1.1).
    const expiryTime = new Date(attributeValue)

    // 2. If the attribute-value failed to parse as a cookie date, ignore
    //    the cookie-av.

    cookieAttributeList.expires = expiryTime
  } else if (attributeNameLowercase === 'max-age') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.2
    // If the attribute-name case-insensitively matches the string "Max-
    // Age", the user agent MUST process the cookie-av as follows.

    // 1. If the first character of the attribute-value is not a DIGIT or a
    //    "-" character, ignore the cookie-av.
    const charCode = attributeValue.charCodeAt(0)

    if ((charCode < 48 || charCode > 57) && attributeValue[0] !== '-') {
      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
    }

    // 2. If the remainder of attribute-value contains a non-DIGIT
    //    character, ignore the cookie-av.
    if (!/^\d+$/.test(attributeValue)) {
      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
    }

    // 3. Let delta-seconds be the attribute-value converted to an integer.
    const deltaSeconds = Number(attributeValue)

    // 4. Let cookie-age-limit be the maximum age of the cookie (which
    //    SHOULD be 400 days or less, see Section 4.1.2.2).

    // 5. Set delta-seconds to the smaller of its present value and cookie-
    //    age-limit.
    // deltaSeconds = Math.min(deltaSeconds * 1000, maxExpiresMs)

    // 6. If delta-seconds is less than or equal to zero (0), let expiry-
    //    time be the earliest representable date and time.  Otherwise, let
    //    the expiry-time be the current date and time plus delta-seconds
    //    seconds.
    // const expiryTime = deltaSeconds <= 0 ? Date.now() : Date.now() + deltaSeconds

    // 7. Append an attribute to the cookie-attribute-list with an
    //    attribute-name of Max-Age and an attribute-value of expiry-time.
    cookieAttributeList.maxAge = deltaSeconds
  } else if (attributeNameLowercase === 'domain') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.3
    // If the attribute-name case-insensitively matches the string "Domain",
    // the user agent MUST process the cookie-av as follows.

    // 1. Let cookie-domain be the attribute-value.
    let cookieDomain = attributeValue

    // 2. If cookie-domain starts with %x2E ("."), let cookie-domain be
    //    cookie-domain without its leading %x2E (".").
    if (cookieDomain[0] === '.') {
      cookieDomain = cookieDomain.slice(1)
    }

    // 3. Convert the cookie-domain to lower case.
    cookieDomain = cookieDomain.toLowerCase()

    // 4. Append an attribute to the cookie-attribute-list with an
    //    attribute-name of Domain and an attribute-value of cookie-domain.
    cookieAttributeList.domain = cookieDomain
  } else if (attributeNameLowercase === 'path') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.4
    // If the attribute-name case-insensitively matches the string "Path",
    // the user agent MUST process the cookie-av as follows.

    // 1. If the attribute-value is empty or if the first character of the
    //    attribute-value is not %x2F ("/"):
    let cookiePath = ''
    if (attributeValue.length === 0 || attributeValue[0] !== '/') {
      // 1. Let cookie-path be the default-path.
      cookiePath = '/'
    } else {
      // Otherwise:

      // 1. Let cookie-path be the attribute-value.
      cookiePath = attributeValue
    }

    // 2. Append an attribute to the cookie-attribute-list with an
    //    attribute-name of Path and an attribute-value of cookie-path.
    cookieAttributeList.path = cookiePath
  } else if (attributeNameLowercase === 'secure') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.5
    // If the attribute-name case-insensitively matches the string "Secure",
    // the user agent MUST append an attribute to the cookie-attribute-list
    // with an attribute-name of Secure and an empty attribute-value.

    cookieAttributeList.secure = true
  } else if (attributeNameLowercase === 'httponly') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.6
    // If the attribute-name case-insensitively matches the string
    // "HttpOnly", the user agent MUST append an attribute to the cookie-
    // attribute-list with an attribute-name of HttpOnly and an empty
    // attribute-value.

    cookieAttributeList.httpOnly = true
  } else if (attributeNameLowercase === 'samesite') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.7
    // If the attribute-name case-insensitively matches the string
    // "SameSite", the user agent MUST process the cookie-av as follows:

    // 1. Let enforcement be "Default".
    let enforcement = 'Default'

    const attributeValueLowercase = attributeValue.toLowerCase()
    // 2. If cookie-av's attribute-value is a case-insensitive match for
    //    "None", set enforcement to "None".
    if (attributeValueLowercase.includes('none')) {
      enforcement = 'None'
    }

    // 3. If cookie-av's attribute-value is a case-insensitive match for
    //    "Strict", set enforcement to "Strict".
    if (attributeValueLowercase.includes('strict')) {
      enforcement = 'Strict'
    }

    // 4. If cookie-av's attribute-value is a case-insensitive match for
    //    "Lax", set enforcement to "Lax".
    if (attributeValueLowercase.includes('lax')) {
      enforcement = 'Lax'
    }

    // 5. Append an attribute to the cookie-attribute-list with an
    //    attribute-name of "SameSite" and an attribute-value of
    //    enforcement.
    cookieAttributeList.sameSite = enforcement
  } else {
    cookieAttributeList.unparsed ??= []

    cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`)
  }

  // 8. Return to Step 1 of this algorithm.
  return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
}

module.exports = {
  parseSetCookie,
  parseUnparsedAttributes
}


/***/ }),

/***/ 3121:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const assert = __nccwpck_require__(9491)
const { kHeadersList } = __nccwpck_require__(2785)

function isCTLExcludingHtab (value) {
  if (value.length === 0) {
    return false
  }

  for (const char of value) {
    const code = char.charCodeAt(0)

    if (
      (code >= 0x00 || code <= 0x08) ||
      (code >= 0x0A || code <= 0x1F) ||
      code === 0x7F
    ) {
      return false
    }
  }
}

/**
 CHAR           = <any US-ASCII character (octets 0 - 127)>
 token          = 1*<any CHAR except CTLs or separators>
 separators     = "(" | ")" | "<" | ">" | "@"
                | "," | ";" | ":" | "\" | <">
                | "/" | "[" | "]" | "?" | "="
                | "{" | "}" | SP | HT
 * @param {string} name
 */
function validateCookieName (name) {
  for (const char of name) {
    const code = char.charCodeAt(0)

    if (
      (code <= 0x20 || code > 0x7F) ||
      char === '(' ||
      char === ')' ||
      char === '>' ||
      char === '<' ||
      char === '@' ||
      char === ',' ||
      char === ';' ||
      char === ':' ||
      char === '\\' ||
      char === '"' ||
      char === '/' ||
      char === '[' ||
      char === ']' ||
      char === '?' ||
      char === '=' ||
      char === '{' ||
      char === '}'
    ) {
      throw new Error('Invalid cookie name')
    }
  }
}

/**
 cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
 cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
                       ; US-ASCII characters excluding CTLs,
                       ; whitespace DQUOTE, comma, semicolon,
                       ; and backslash
 * @param {string} value
 */
function validateCookieValue (value) {
  for (const char of value) {
    const code = char.charCodeAt(0)

    if (
      code < 0x21 || // exclude CTLs (0-31)
      code === 0x22 ||
      code === 0x2C ||
      code === 0x3B ||
      code === 0x5C ||
      code > 0x7E // non-ascii
    ) {
      throw new Error('Invalid header value')
    }
  }
}

/**
 * path-value        = <any CHAR except CTLs or ";">
 * @param {string} path
 */
function validateCookiePath (path) {
  for (const char of path) {
    const code = char.charCodeAt(0)

    if (code < 0x21 || char === ';') {
      throw new Error('Invalid cookie path')
    }
  }
}

/**
 * I have no idea why these values aren't allowed to be honest,
 * but Deno tests these. - Khafra
 * @param {string} domain
 */
function validateCookieDomain (domain) {
  if (
    domain.startsWith('-') ||
    domain.endsWith('.') ||
    domain.endsWith('-')
  ) {
    throw new Error('Invalid cookie domain')
  }
}

/**
 * @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1
 * @param {number|Date} date
  IMF-fixdate  = day-name "," SP date1 SP time-of-day SP GMT
  ; fixed length/zone/capitalization subset of the format
  ; see Section 3.3 of [RFC5322]

  day-name     = %x4D.6F.6E ; "Mon", case-sensitive
              / %x54.75.65 ; "Tue", case-sensitive
              / %x57.65.64 ; "Wed", case-sensitive
              / %x54.68.75 ; "Thu", case-sensitive
              / %x46.72.69 ; "Fri", case-sensitive
              / %x53.61.74 ; "Sat", case-sensitive
              / %x53.75.6E ; "Sun", case-sensitive
  date1        = day SP month SP year
                  ; e.g., 02 Jun 1982

  day          = 2DIGIT
  month        = %x4A.61.6E ; "Jan", case-sensitive
              / %x46.65.62 ; "Feb", case-sensitive
              / %x4D.61.72 ; "Mar", case-sensitive
              / %x41.70.72 ; "Apr", case-sensitive
              / %x4D.61.79 ; "May", case-sensitive
              / %x4A.75.6E ; "Jun", case-sensitive
              / %x4A.75.6C ; "Jul", case-sensitive
              / %x41.75.67 ; "Aug", case-sensitive
              / %x53.65.70 ; "Sep", case-sensitive
              / %x4F.63.74 ; "Oct", case-sensitive
              / %x4E.6F.76 ; "Nov", case-sensitive
              / %x44.65.63 ; "Dec", case-sensitive
  year         = 4DIGIT

  GMT          = %x47.4D.54 ; "GMT", case-sensitive

  time-of-day  = hour ":" minute ":" second
              ; 00:00:00 - 23:59:60 (leap second)

  hour         = 2DIGIT
  minute       = 2DIGIT
  second       = 2DIGIT
 */
function toIMFDate (date) {
  if (typeof date === 'number') {
    date = new Date(date)
  }

  const days = [
    'Sun', 'Mon', 'Tue', 'Wed',
    'Thu', 'Fri', 'Sat'
  ]

  const months = [
    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
  ]

  const dayName = days[date.getUTCDay()]
  const day = date.getUTCDate().toString().padStart(2, '0')
  const month = months[date.getUTCMonth()]
  const year = date.getUTCFullYear()
  const hour = date.getUTCHours().toString().padStart(2, '0')
  const minute = date.getUTCMinutes().toString().padStart(2, '0')
  const second = date.getUTCSeconds().toString().padStart(2, '0')

  return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`
}

/**
 max-age-av        = "Max-Age=" non-zero-digit *DIGIT
                       ; In practice, both expires-av and max-age-av
                       ; are limited to dates representable by the
                       ; user agent.
 * @param {number} maxAge
 */
function validateCookieMaxAge (maxAge) {
  if (maxAge < 0) {
    throw new Error('Invalid cookie max-age')
  }
}

/**
 * @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1
 * @param {import('./index').Cookie} cookie
 */
function stringify (cookie) {
  if (cookie.name.length === 0) {
    return null
  }

  validateCookieName(cookie.name)
  validateCookieValue(cookie.value)

  const out = [`${cookie.name}=${cookie.value}`]

  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.1
  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.2
  if (cookie.name.startsWith('__Secure-')) {
    cookie.secure = true
  }

  if (cookie.name.startsWith('__Host-')) {
    cookie.secure = true
    cookie.domain = null
    cookie.path = '/'
  }

  if (cookie.secure) {
    out.push('Secure')
  }

  if (cookie.httpOnly) {
    out.push('HttpOnly')
  }

  if (typeof cookie.maxAge === 'number') {
    validateCookieMaxAge(cookie.maxAge)
    out.push(`Max-Age=${cookie.maxAge}`)
  }

  if (cookie.domain) {
    validateCookieDomain(cookie.domain)
    out.push(`Domain=${cookie.domain}`)
  }

  if (cookie.path) {
    validateCookiePath(cookie.path)
    out.push(`Path=${cookie.path}`)
  }

  if (cookie.expires && cookie.expires.toString() !== 'Invalid Date') {
    out.push(`Expires=${toIMFDate(cookie.expires)}`)
  }

  if (cookie.sameSite) {
    out.push(`SameSite=${cookie.sameSite}`)
  }

  for (const part of cookie.unparsed) {
    if (!part.includes('=')) {
      throw new Error('Invalid unparsed')
    }

    const [key, ...value] = part.split('=')

    out.push(`${key.trim()}=${value.join('=')}`)
  }

  return out.join('; ')
}

let kHeadersListNode

function getHeadersList (headers) {
  if (headers[kHeadersList]) {
    return headers[kHeadersList]
  }

  if (!kHeadersListNode) {
    kHeadersListNode = Object.getOwnPropertySymbols(headers).find(
      (symbol) => symbol.description === 'headers list'
    )

    assert(kHeadersListNode, 'Headers cannot be parsed')
  }

  const headersList = headers[kHeadersListNode]
  assert(headersList)

  return headersList
}

module.exports = {
  isCTLExcludingHtab,
  stringify,
  getHeadersList
}


/***/ }),

/***/ 2067:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const net = __nccwpck_require__(1808)
const assert = __nccwpck_require__(9491)
const util = __nccwpck_require__(3983)
const { InvalidArgumentError, ConnectTimeoutError } = __nccwpck_require__(8045)

let tls // include tls conditionally since it is not always available

// TODO: session re-use does not wait for the first
// connection to resolve the session and might therefore
// resolve the same servername multiple times even when
// re-use is enabled.

let SessionCache
// FIXME: remove workaround when the Node bug is fixed
// https://github.com/nodejs/node/issues/49344#issuecomment-1741776308
if (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) {
  SessionCache = class WeakSessionCache {
    constructor (maxCachedSessions) {
      this._maxCachedSessions = maxCachedSessions
      this._sessionCache = new Map()
      this._sessionRegistry = new global.FinalizationRegistry((key) => {
        if (this._sessionCache.size < this._maxCachedSessions) {
          return
        }

        const ref = this._sessionCache.get(key)
        if (ref !== undefined && ref.deref() === undefined) {
          this._sessionCache.delete(key)
        }
      })
    }

    get (sessionKey) {
      const ref = this._sessionCache.get(sessionKey)
      return ref ? ref.deref() : null
    }

    set (sessionKey, session) {
      if (this._maxCachedSessions === 0) {
        return
      }

      this._sessionCache.set(sessionKey, new WeakRef(session))
      this._sessionRegistry.register(session, sessionKey)
    }
  }
} else {
  SessionCache = class SimpleSessionCache {
    constructor (maxCachedSessions) {
      this._maxCachedSessions = maxCachedSessions
      this._sessionCache = new Map()
    }

    get (sessionKey) {
      return this._sessionCache.get(sessionKey)
    }

    set (sessionKey, session) {
      if (this._maxCachedSessions === 0) {
        return
      }

      if (this._sessionCache.size >= this._maxCachedSessions) {
        // remove the oldest session
        const { value: oldestKey } = this._sessionCache.keys().next()
        this._sessionCache.delete(oldestKey)
      }

      this._sessionCache.set(sessionKey, session)
    }
  }
}

function buildConnector ({ allowH2, maxCachedSessions, socketPath, timeout, ...opts }) {
  if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {
    throw new InvalidArgumentError('maxCachedSessions must be a positive integer or zero')
  }

  const options = { path: socketPath, ...opts }
  const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions)
  timeout = timeout == null ? 10e3 : timeout
  allowH2 = allowH2 != null ? allowH2 : false
  return function connect ({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {
    let socket
    if (protocol === 'https:') {
      if (!tls) {
        tls = __nccwpck_require__(4404)
      }
      servername = servername || options.servername || util.getServerName(host) || null

      const sessionKey = servername || hostname
      const session = sessionCache.get(sessionKey) || null

      assert(sessionKey)

      socket = tls.connect({
        highWaterMark: 16384, // TLS in node can't have bigger HWM anyway...
        ...options,
        servername,
        session,
        localAddress,
        // TODO(HTTP/2): Add support for h2c
        ALPNProtocols: allowH2 ? ['http/1.1', 'h2'] : ['http/1.1'],
        socket: httpSocket, // upgrade socket connection
        port: port || 443,
        host: hostname
      })

      socket
        .on('session', function (session) {
          // TODO (fix): Can a session become invalid once established? Don't think so?
          sessionCache.set(sessionKey, session)
        })
    } else {
      assert(!httpSocket, 'httpSocket can only be sent on TLS update')
      socket = net.connect({
        highWaterMark: 64 * 1024, // Same as nodejs fs streams.
        ...options,
        localAddress,
        port: port || 80,
        host: hostname
      })
    }

    // Set TCP keep alive options on the socket here instead of in connect() for the case of assigning the socket
    if (options.keepAlive == null || options.keepAlive) {
      const keepAliveInitialDelay = options.keepAliveInitialDelay === undefined ? 60e3 : options.keepAliveInitialDelay
      socket.setKeepAlive(true, keepAliveInitialDelay)
    }

    const cancelTimeout = setupTimeout(() => onConnectTimeout(socket), timeout)

    socket
      .setNoDelay(true)
      .once(protocol === 'https:' ? 'secureConnect' : 'connect', function () {
        cancelTimeout()

        if (callback) {
          const cb = callback
          callback = null
          cb(null, this)
        }
      })
      .on('error', function (err) {
        cancelTimeout()

        if (callback) {
          const cb = callback
          callback = null
          cb(err)
        }
      })

    return socket
  }
}

function setupTimeout (onConnectTimeout, timeout) {
  if (!timeout) {
    return () => {}
  }

  let s1 = null
  let s2 = null
  const timeoutId = setTimeout(() => {
    // setImmediate is added to make sure that we priotorise socket error events over timeouts
    s1 = setImmediate(() => {
      if (process.platform === 'win32') {
        // Windows needs an extra setImmediate probably due to implementation differences in the socket logic
        s2 = setImmediate(() => onConnectTimeout())
      } else {
        onConnectTimeout()
      }
    })
  }, timeout)
  return () => {
    clearTimeout(timeoutId)
    clearImmediate(s1)
    clearImmediate(s2)
  }
}

function onConnectTimeout (socket) {
  util.destroy(socket, new ConnectTimeoutError())
}

module.exports = buildConnector


/***/ }),

/***/ 4462:
/***/ ((module) => {

"use strict";


/** @type {Record<string, string | undefined>} */
const headerNameLowerCasedRecord = {}

// https://developer.mozilla.org/docs/Web/HTTP/Headers
const wellknownHeaderNames = [
  'Accept',
  'Accept-Encoding',
  'Accept-Language',
  'Accept-Ranges',
  'Access-Control-Allow-Credentials',
  'Access-Control-Allow-Headers',
  'Access-Control-Allow-Methods',
  'Access-Control-Allow-Origin',
  'Access-Control-Expose-Headers',
  'Access-Control-Max-Age',
  'Access-Control-Request-Headers',
  'Access-Control-Request-Method',
  'Age',
  'Allow',
  'Alt-Svc',
  'Alt-Used',
  'Authorization',
  'Cache-Control',
  'Clear-Site-Data',
  'Connection',
  'Content-Disposition',
  'Content-Encoding',
  'Content-Language',
  'Content-Length',
  'Content-Location',
  'Content-Range',
  'Content-Security-Policy',
  'Content-Security-Policy-Report-Only',
  'Content-Type',
  'Cookie',
  'Cross-Origin-Embedder-Policy',
  'Cross-Origin-Opener-Policy',
  'Cross-Origin-Resource-Policy',
  'Date',
  'Device-Memory',
  'Downlink',
  'ECT',
  'ETag',
  'Expect',
  'Expect-CT',
  'Expires',
  'Forwarded',
  'From',
  'Host',
  'If-Match',
  'If-Modified-Since',
  'If-None-Match',
  'If-Range',
  'If-Unmodified-Since',
  'Keep-Alive',
  'Last-Modified',
  'Link',
  'Location',
  'Max-Forwards',
  'Origin',
  'Permissions-Policy',
  'Pragma',
  'Proxy-Authenticate',
  'Proxy-Authorization',
  'RTT',
  'Range',
  'Referer',
  'Referrer-Policy',
  'Refresh',
  'Retry-After',
  'Sec-WebSocket-Accept',
  'Sec-WebSocket-Extensions',
  'Sec-WebSocket-Key',
  'Sec-WebSocket-Protocol',
  'Sec-WebSocket-Version',
  'Server',
  'Server-Timing',
  'Service-Worker-Allowed',
  'Service-Worker-Navigation-Preload',
  'Set-Cookie',
  'SourceMap',
  'Strict-Transport-Security',
  'Supports-Loading-Mode',
  'TE',
  'Timing-Allow-Origin',
  'Trailer',
  'Transfer-Encoding',
  'Upgrade',
  'Upgrade-Insecure-Requests',
  'User-Agent',
  'Vary',
  'Via',
  'WWW-Authenticate',
  'X-Content-Type-Options',
  'X-DNS-Prefetch-Control',
  'X-Frame-Options',
  'X-Permitted-Cross-Domain-Policies',
  'X-Powered-By',
  'X-Requested-With',
  'X-XSS-Protection'
]

for (let i = 0; i < wellknownHeaderNames.length; ++i) {
  const key = wellknownHeaderNames[i]
  const lowerCasedKey = key.toLowerCase()
  headerNameLowerCasedRecord[key] = headerNameLowerCasedRecord[lowerCasedKey] =
    lowerCasedKey
}

// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.
Object.setPrototypeOf(headerNameLowerCasedRecord, null)

module.exports = {
  wellknownHeaderNames,
  headerNameLowerCasedRecord
}


/***/ }),

/***/ 8045:
/***/ ((module) => {

"use strict";


class UndiciError extends Error {
  constructor (message) {
    super(message)
    this.name = 'UndiciError'
    this.code = 'UND_ERR'
  }
}

class ConnectTimeoutError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, ConnectTimeoutError)
    this.name = 'ConnectTimeoutError'
    this.message = message || 'Connect Timeout Error'
    this.code = 'UND_ERR_CONNECT_TIMEOUT'
  }
}

class HeadersTimeoutError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, HeadersTimeoutError)
    this.name = 'HeadersTimeoutError'
    this.message = message || 'Headers Timeout Error'
    this.code = 'UND_ERR_HEADERS_TIMEOUT'
  }
}

class HeadersOverflowError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, HeadersOverflowError)
    this.name = 'HeadersOverflowError'
    this.message = message || 'Headers Overflow Error'
    this.code = 'UND_ERR_HEADERS_OVERFLOW'
  }
}

class BodyTimeoutError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, BodyTimeoutError)
    this.name = 'BodyTimeoutError'
    this.message = message || 'Body Timeout Error'
    this.code = 'UND_ERR_BODY_TIMEOUT'
  }
}

class ResponseStatusCodeError extends UndiciError {
  constructor (message, statusCode, headers, body) {
    super(message)
    Error.captureStackTrace(this, ResponseStatusCodeError)
    this.name = 'ResponseStatusCodeError'
    this.message = message || 'Response Status Code Error'
    this.code = 'UND_ERR_RESPONSE_STATUS_CODE'
    this.body = body
    this.status = statusCode
    this.statusCode = statusCode
    this.headers = headers
  }
}

class InvalidArgumentError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, InvalidArgumentError)
    this.name = 'InvalidArgumentError'
    this.message = message || 'Invalid Argument Error'
    this.code = 'UND_ERR_INVALID_ARG'
  }
}

class InvalidReturnValueError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, InvalidReturnValueError)
    this.name = 'InvalidReturnValueError'
    this.message = message || 'Invalid Return Value Error'
    this.code = 'UND_ERR_INVALID_RETURN_VALUE'
  }
}

class RequestAbortedError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, RequestAbortedError)
    this.name = 'AbortError'
    this.message = message || 'Request aborted'
    this.code = 'UND_ERR_ABORTED'
  }
}

class InformationalError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, InformationalError)
    this.name = 'InformationalError'
    this.message = message || 'Request information'
    this.code = 'UND_ERR_INFO'
  }
}

class RequestContentLengthMismatchError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, RequestContentLengthMismatchError)
    this.name = 'RequestContentLengthMismatchError'
    this.message = message || 'Request body length does not match content-length header'
    this.code = 'UND_ERR_REQ_CONTENT_LENGTH_MISMATCH'
  }
}

class ResponseContentLengthMismatchError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, ResponseContentLengthMismatchError)
    this.name = 'ResponseContentLengthMismatchError'
    this.message = message || 'Response body length does not match content-length header'
    this.code = 'UND_ERR_RES_CONTENT_LENGTH_MISMATCH'
  }
}

class ClientDestroyedError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, ClientDestroyedError)
    this.name = 'ClientDestroyedError'
    this.message = message || 'The client is destroyed'
    this.code = 'UND_ERR_DESTROYED'
  }
}

class ClientClosedError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, ClientClosedError)
    this.name = 'ClientClosedError'
    this.message = message || 'The client is closed'
    this.code = 'UND_ERR_CLOSED'
  }
}

class SocketError extends UndiciError {
  constructor (message, socket) {
    super(message)
    Error.captureStackTrace(this, SocketError)
    this.name = 'SocketError'
    this.message = message || 'Socket error'
    this.code = 'UND_ERR_SOCKET'
    this.socket = socket
  }
}

class NotSupportedError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, NotSupportedError)
    this.name = 'NotSupportedError'
    this.message = message || 'Not supported error'
    this.code = 'UND_ERR_NOT_SUPPORTED'
  }
}

class BalancedPoolMissingUpstreamError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, NotSupportedError)
    this.name = 'MissingUpstreamError'
    this.message = message || 'No upstream has been added to the BalancedPool'
    this.code = 'UND_ERR_BPL_MISSING_UPSTREAM'
  }
}

class HTTPParserError extends Error {
  constructor (message, code, data) {
    super(message)
    Error.captureStackTrace(this, HTTPParserError)
    this.name = 'HTTPParserError'
    this.code = code ? `HPE_${code}` : undefined
    this.data = data ? data.toString() : undefined
  }
}

class ResponseExceededMaxSizeError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, ResponseExceededMaxSizeError)
    this.name = 'ResponseExceededMaxSizeError'
    this.message = message || 'Response content exceeded max size'
    this.code = 'UND_ERR_RES_EXCEEDED_MAX_SIZE'
  }
}

class RequestRetryError extends UndiciError {
  constructor (message, code, { headers, data }) {
    super(message)
    Error.captureStackTrace(this, RequestRetryError)
    this.name = 'RequestRetryError'
    this.message = message || 'Request retry error'
    this.code = 'UND_ERR_REQ_RETRY'
    this.statusCode = code
    this.data = data
    this.headers = headers
  }
}

module.exports = {
  HTTPParserError,
  UndiciError,
  HeadersTimeoutError,
  HeadersOverflowError,
  BodyTimeoutError,
  RequestContentLengthMismatchError,
  ConnectTimeoutError,
  ResponseStatusCodeError,
  InvalidArgumentError,
  InvalidReturnValueError,
  RequestAbortedError,
  ClientDestroyedError,
  ClientClosedError,
  InformationalError,
  SocketError,
  NotSupportedError,
  ResponseContentLengthMismatchError,
  BalancedPoolMissingUpstreamError,
  ResponseExceededMaxSizeError,
  RequestRetryError
}


/***/ }),

/***/ 2905:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const {
  InvalidArgumentError,
  NotSupportedError
} = __nccwpck_require__(8045)
const assert = __nccwpck_require__(9491)
const { kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } = __nccwpck_require__(2785)
const util = __nccwpck_require__(3983)

// tokenRegExp and headerCharRegex have been lifted from
// https://github.com/nodejs/node/blob/main/lib/_http_common.js

/**
 * Verifies that the given val is a valid HTTP token
 * per the rules defined in RFC 7230
 * See https://tools.ietf.org/html/rfc7230#section-3.2.6
 */
const tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/

/**
 * Matches if val contains an invalid field-vchar
 *  field-value    = *( field-content / obs-fold )
 *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]
 *  field-vchar    = VCHAR / obs-text
 */
const headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/

// Verifies that a given path is valid does not contain control chars \x00 to \x20
const invalidPathRegex = /[^\u0021-\u00ff]/

const kHandler = Symbol('handler')

const channels = {}

let extractBody

try {
  const diagnosticsChannel = __nccwpck_require__(7643)
  channels.create = diagnosticsChannel.channel('undici:request:create')
  channels.bodySent = diagnosticsChannel.channel('undici:request:bodySent')
  channels.headers = diagnosticsChannel.channel('undici:request:headers')
  channels.trailers = diagnosticsChannel.channel('undici:request:trailers')
  channels.error = diagnosticsChannel.channel('undici:request:error')
} catch {
  channels.create = { hasSubscribers: false }
  channels.bodySent = { hasSubscribers: false }
  channels.headers = { hasSubscribers: false }
  channels.trailers = { hasSubscribers: false }
  channels.error = { hasSubscribers: false }
}

class Request {
  constructor (origin, {
    path,
    method,
    body,
    headers,
    query,
    idempotent,
    blocking,
    upgrade,
    headersTimeout,
    bodyTimeout,
    reset,
    throwOnError,
    expectContinue
  }, handler) {
    if (typeof path !== 'string') {
      throw new InvalidArgumentError('path must be a string')
    } else if (
      path[0] !== '/' &&
      !(path.startsWith('http://') || path.startsWith('https://')) &&
      method !== 'CONNECT'
    ) {
      throw new InvalidArgumentError('path must be an absolute URL or start with a slash')
    } else if (invalidPathRegex.exec(path) !== null) {
      throw new InvalidArgumentError('invalid request path')
    }

    if (typeof method !== 'string') {
      throw new InvalidArgumentError('method must be a string')
    } else if (tokenRegExp.exec(method) === null) {
      throw new InvalidArgumentError('invalid request method')
    }

    if (upgrade && typeof upgrade !== 'string') {
      throw new InvalidArgumentError('upgrade must be a string')
    }

    if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {
      throw new InvalidArgumentError('invalid headersTimeout')
    }

    if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {
      throw new InvalidArgumentError('invalid bodyTimeout')
    }

    if (reset != null && typeof reset !== 'boolean') {
      throw new InvalidArgumentError('invalid reset')
    }

    if (expectContinue != null && typeof expectContinue !== 'boolean') {
      throw new InvalidArgumentError('invalid expectContinue')
    }

    this.headersTimeout = headersTimeout

    this.bodyTimeout = bodyTimeout

    this.throwOnError = throwOnError === true

    this.method = method

    this.abort = null

    if (body == null) {
      this.body = null
    } else if (util.isStream(body)) {
      this.body = body

      const rState = this.body._readableState
      if (!rState || !rState.autoDestroy) {
        this.endHandler = function autoDestroy () {
          util.destroy(this)
        }
        this.body.on('end', this.endHandler)
      }

      this.errorHandler = err => {
        if (this.abort) {
          this.abort(err)
        } else {
          this.error = err
        }
      }
      this.body.on('error', this.errorHandler)
    } else if (util.isBuffer(body)) {
      this.body = body.byteLength ? body : null
    } else if (ArrayBuffer.isView(body)) {
      this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null
    } else if (body instanceof ArrayBuffer) {
      this.body = body.byteLength ? Buffer.from(body) : null
    } else if (typeof body === 'string') {
      this.body = body.length ? Buffer.from(body) : null
    } else if (util.isFormDataLike(body) || util.isIterable(body) || util.isBlobLike(body)) {
      this.body = body
    } else {
      throw new InvalidArgumentError('body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable')
    }

    this.completed = false

    this.aborted = false

    this.upgrade = upgrade || null

    this.path = query ? util.buildURL(path, query) : path

    this.origin = origin

    this.idempotent = idempotent == null
      ? method === 'HEAD' || method === 'GET'
      : idempotent

    this.blocking = blocking == null ? false : blocking

    this.reset = reset == null ? null : reset

    this.host = null

    this.contentLength = null

    this.contentType = null

    this.headers = ''

    // Only for H2
    this.expectContinue = expectContinue != null ? expectContinue : false

    if (Array.isArray(headers)) {
      if (headers.length % 2 !== 0) {
        throw new InvalidArgumentError('headers array must be even')
      }
      for (let i = 0; i < headers.length; i += 2) {
        processHeader(this, headers[i], headers[i + 1])
      }
    } else if (headers && typeof headers === 'object') {
      const keys = Object.keys(headers)
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i]
        processHeader(this, key, headers[key])
      }
    } else if (headers != null) {
      throw new InvalidArgumentError('headers must be an object or an array')
    }

    if (util.isFormDataLike(this.body)) {
      if (util.nodeMajor < 16 || (util.nodeMajor === 16 && util.nodeMinor < 8)) {
        throw new InvalidArgumentError('Form-Data bodies are only supported in node v16.8 and newer.')
      }

      if (!extractBody) {
        extractBody = (__nccwpck_require__(1472).extractBody)
      }

      const [bodyStream, contentType] = extractBody(body)
      if (this.contentType == null) {
        this.contentType = contentType
        this.headers += `content-type: ${contentType}\r\n`
      }
      this.body = bodyStream.stream
      this.contentLength = bodyStream.length
    } else if (util.isBlobLike(body) && this.contentType == null && body.type) {
      this.contentType = body.type
      this.headers += `content-type: ${body.type}\r\n`
    }

    util.validateHandler(handler, method, upgrade)

    this.servername = util.getServerName(this.host)

    this[kHandler] = handler

    if (channels.create.hasSubscribers) {
      channels.create.publish({ request: this })
    }
  }

  onBodySent (chunk) {
    if (this[kHandler].onBodySent) {
      try {
        return this[kHandler].onBodySent(chunk)
      } catch (err) {
        this.abort(err)
      }
    }
  }

  onRequestSent () {
    if (channels.bodySent.hasSubscribers) {
      channels.bodySent.publish({ request: this })
    }

    if (this[kHandler].onRequestSent) {
      try {
        return this[kHandler].onRequestSent()
      } catch (err) {
        this.abort(err)
      }
    }
  }

  onConnect (abort) {
    assert(!this.aborted)
    assert(!this.completed)

    if (this.error) {
      abort(this.error)
    } else {
      this.abort = abort
      return this[kHandler].onConnect(abort)
    }
  }

  onHeaders (statusCode, headers, resume, statusText) {
    assert(!this.aborted)
    assert(!this.completed)

    if (channels.headers.hasSubscribers) {
      channels.headers.publish({ request: this, response: { statusCode, headers, statusText } })
    }

    try {
      return this[kHandler].onHeaders(statusCode, headers, resume, statusText)
    } catch (err) {
      this.abort(err)
    }
  }

  onData (chunk) {
    assert(!this.aborted)
    assert(!this.completed)

    try {
      return this[kHandler].onData(chunk)
    } catch (err) {
      this.abort(err)
      return false
    }
  }

  onUpgrade (statusCode, headers, socket) {
    assert(!this.aborted)
    assert(!this.completed)

    return this[kHandler].onUpgrade(statusCode, headers, socket)
  }

  onComplete (trailers) {
    this.onFinally()

    assert(!this.aborted)

    this.completed = true
    if (channels.trailers.hasSubscribers) {
      channels.trailers.publish({ request: this, trailers })
    }

    try {
      return this[kHandler].onComplete(trailers)
    } catch (err) {
      // TODO (fix): This might be a bad idea?
      this.onError(err)
    }
  }

  onError (error) {
    this.onFinally()

    if (channels.error.hasSubscribers) {
      channels.error.publish({ request: this, error })
    }

    if (this.aborted) {
      return
    }
    this.aborted = true

    return this[kHandler].onError(error)
  }

  onFinally () {
    if (this.errorHandler) {
      this.body.off('error', this.errorHandler)
      this.errorHandler = null
    }

    if (this.endHandler) {
      this.body.off('end', this.endHandler)
      this.endHandler = null
    }
  }

  // TODO: adjust to support H2
  addHeader (key, value) {
    processHeader(this, key, value)
    return this
  }

  static [kHTTP1BuildRequest] (origin, opts, handler) {
    // TODO: Migrate header parsing here, to make Requests
    // HTTP agnostic
    return new Request(origin, opts, handler)
  }

  static [kHTTP2BuildRequest] (origin, opts, handler) {
    const headers = opts.headers
    opts = { ...opts, headers: null }

    const request = new Request(origin, opts, handler)

    request.headers = {}

    if (Array.isArray(headers)) {
      if (headers.length % 2 !== 0) {
        throw new InvalidArgumentError('headers array must be even')
      }
      for (let i = 0; i < headers.length; i += 2) {
        processHeader(request, headers[i], headers[i + 1], true)
      }
    } else if (headers && typeof headers === 'object') {
      const keys = Object.keys(headers)
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i]
        processHeader(request, key, headers[key], true)
      }
    } else if (headers != null) {
      throw new InvalidArgumentError('headers must be an object or an array')
    }

    return request
  }

  static [kHTTP2CopyHeaders] (raw) {
    const rawHeaders = raw.split('\r\n')
    const headers = {}

    for (const header of rawHeaders) {
      const [key, value] = header.split(': ')

      if (value == null || value.length === 0) continue

      if (headers[key]) headers[key] += `,${value}`
      else headers[key] = value
    }

    return headers
  }
}

function processHeaderValue (key, val, skipAppend) {
  if (val && typeof val === 'object') {
    throw new InvalidArgumentError(`invalid ${key} header`)
  }

  val = val != null ? `${val}` : ''

  if (headerCharRegex.exec(val) !== null) {
    throw new InvalidArgumentError(`invalid ${key} header`)
  }

  return skipAppend ? val : `${key}: ${val}\r\n`
}

function processHeader (request, key, val, skipAppend = false) {
  if (val && (typeof val === 'object' && !Array.isArray(val))) {
    throw new InvalidArgumentError(`invalid ${key} header`)
  } else if (val === undefined) {
    return
  }

  if (
    request.host === null &&
    key.length === 4 &&
    key.toLowerCase() === 'host'
  ) {
    if (headerCharRegex.exec(val) !== null) {
      throw new InvalidArgumentError(`invalid ${key} header`)
    }
    // Consumed by Client
    request.host = val
  } else if (
    request.contentLength === null &&
    key.length === 14 &&
    key.toLowerCase() === 'content-length'
  ) {
    request.contentLength = parseInt(val, 10)
    if (!Number.isFinite(request.contentLength)) {
      throw new InvalidArgumentError('invalid content-length header')
    }
  } else if (
    request.contentType === null &&
    key.length === 12 &&
    key.toLowerCase() === 'content-type'
  ) {
    request.contentType = val
    if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend)
    else request.headers += processHeaderValue(key, val)
  } else if (
    key.length === 17 &&
    key.toLowerCase() === 'transfer-encoding'
  ) {
    throw new InvalidArgumentError('invalid transfer-encoding header')
  } else if (
    key.length === 10 &&
    key.toLowerCase() === 'connection'
  ) {
    const value = typeof val === 'string' ? val.toLowerCase() : null
    if (value !== 'close' && value !== 'keep-alive') {
      throw new InvalidArgumentError('invalid connection header')
    } else if (value === 'close') {
      request.reset = true
    }
  } else if (
    key.length === 10 &&
    key.toLowerCase() === 'keep-alive'
  ) {
    throw new InvalidArgumentError('invalid keep-alive header')
  } else if (
    key.length === 7 &&
    key.toLowerCase() === 'upgrade'
  ) {
    throw new InvalidArgumentError('invalid upgrade header')
  } else if (
    key.length === 6 &&
    key.toLowerCase() === 'expect'
  ) {
    throw new NotSupportedError('expect header not supported')
  } else if (tokenRegExp.exec(key) === null) {
    throw new InvalidArgumentError('invalid header key')
  } else {
    if (Array.isArray(val)) {
      for (let i = 0; i < val.length; i++) {
        if (skipAppend) {
          if (request.headers[key]) request.headers[key] += `,${processHeaderValue(key, val[i], skipAppend)}`
          else request.headers[key] = processHeaderValue(key, val[i], skipAppend)
        } else {
          request.headers += processHeaderValue(key, val[i])
        }
      }
    } else {
      if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend)
      else request.headers += processHeaderValue(key, val)
    }
  }
}

module.exports = Request


/***/ }),

/***/ 2785:
/***/ ((module) => {

module.exports = {
  kClose: Symbol('close'),
  kDestroy: Symbol('destroy'),
  kDispatch: Symbol('dispatch'),
  kUrl: Symbol('url'),
  kWriting: Symbol('writing'),
  kResuming: Symbol('resuming'),
  kQueue: Symbol('queue'),
  kConnect: Symbol('connect'),
  kConnecting: Symbol('connecting'),
  kHeadersList: Symbol('headers list'),
  kKeepAliveDefaultTimeout: Symbol('default keep alive timeout'),
  kKeepAliveMaxTimeout: Symbol('max keep alive timeout'),
  kKeepAliveTimeoutThreshold: Symbol('keep alive timeout threshold'),
  kKeepAliveTimeoutValue: Symbol('keep alive timeout'),
  kKeepAlive: Symbol('keep alive'),
  kHeadersTimeout: Symbol('headers timeout'),
  kBodyTimeout: Symbol('body timeout'),
  kServerName: Symbol('server name'),
  kLocalAddress: Symbol('local address'),
  kHost: Symbol('host'),
  kNoRef: Symbol('no ref'),
  kBodyUsed: Symbol('used'),
  kRunning: Symbol('running'),
  kBlocking: Symbol('blocking'),
  kPending: Symbol('pending'),
  kSize: Symbol('size'),
  kBusy: Symbol('busy'),
  kQueued: Symbol('queued'),
  kFree: Symbol('free'),
  kConnected: Symbol('connected'),
  kClosed: Symbol('closed'),
  kNeedDrain: Symbol('need drain'),
  kReset: Symbol('reset'),
  kDestroyed: Symbol.for('nodejs.stream.destroyed'),
  kMaxHeadersSize: Symbol('max headers size'),
  kRunningIdx: Symbol('running index'),
  kPendingIdx: Symbol('pending index'),
  kError: Symbol('error'),
  kClients: Symbol('clients'),
  kClient: Symbol('client'),
  kParser: Symbol('parser'),
  kOnDestroyed: Symbol('destroy callbacks'),
  kPipelining: Symbol('pipelining'),
  kSocket: Symbol('socket'),
  kHostHeader: Symbol('host header'),
  kConnector: Symbol('connector'),
  kStrictContentLength: Symbol('strict content length'),
  kMaxRedirections: Symbol('maxRedirections'),
  kMaxRequests: Symbol('maxRequestsPerClient'),
  kProxy: Symbol('proxy agent options'),
  kCounter: Symbol('socket request counter'),
  kInterceptors: Symbol('dispatch interceptors'),
  kMaxResponseSize: Symbol('max response size'),
  kHTTP2Session: Symbol('http2Session'),
  kHTTP2SessionState: Symbol('http2Session state'),
  kHTTP2BuildRequest: Symbol('http2 build request'),
  kHTTP1BuildRequest: Symbol('http1 build request'),
  kHTTP2CopyHeaders: Symbol('http2 copy headers'),
  kHTTPConnVersion: Symbol('http connection version'),
  kRetryHandlerDefaultRetry: Symbol('retry agent default retry'),
  kConstruct: Symbol('constructable')
}


/***/ }),

/***/ 3983:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const assert = __nccwpck_require__(9491)
const { kDestroyed, kBodyUsed } = __nccwpck_require__(2785)
const { IncomingMessage } = __nccwpck_require__(3685)
const stream = __nccwpck_require__(2781)
const net = __nccwpck_require__(1808)
const { InvalidArgumentError } = __nccwpck_require__(8045)
const { Blob } = __nccwpck_require__(4300)
const nodeUtil = __nccwpck_require__(3837)
const { stringify } = __nccwpck_require__(3477)
const { headerNameLowerCasedRecord } = __nccwpck_require__(4462)

const [nodeMajor, nodeMinor] = process.versions.node.split('.').map(v => Number(v))

function nop () {}

function isStream (obj) {
  return obj && typeof obj === 'object' && typeof obj.pipe === 'function' && typeof obj.on === 'function'
}

// based on https://github.com/node-fetch/fetch-blob/blob/8ab587d34080de94140b54f07168451e7d0b655e/index.js#L229-L241 (MIT License)
function isBlobLike (object) {
  return (Blob && object instanceof Blob) || (
    object &&
    typeof object === 'object' &&
    (typeof object.stream === 'function' ||
      typeof object.arrayBuffer === 'function') &&
    /^(Blob|File)$/.test(object[Symbol.toStringTag])
  )
}

function buildURL (url, queryParams) {
  if (url.includes('?') || url.includes('#')) {
    throw new Error('Query params cannot be passed when url already contains "?" or "#".')
  }

  const stringified = stringify(queryParams)

  if (stringified) {
    url += '?' + stringified
  }

  return url
}

function parseURL (url) {
  if (typeof url === 'string') {
    url = new URL(url)

    if (!/^https?:/.test(url.origin || url.protocol)) {
      throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.')
    }

    return url
  }

  if (!url || typeof url !== 'object') {
    throw new InvalidArgumentError('Invalid URL: The URL argument must be a non-null object.')
  }

  if (!/^https?:/.test(url.origin || url.protocol)) {
    throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.')
  }

  if (!(url instanceof URL)) {
    if (url.port != null && url.port !== '' && !Number.isFinite(parseInt(url.port))) {
      throw new InvalidArgumentError('Invalid URL: port must be a valid integer or a string representation of an integer.')
    }

    if (url.path != null && typeof url.path !== 'string') {
      throw new InvalidArgumentError('Invalid URL path: the path must be a string or null/undefined.')
    }

    if (url.pathname != null && typeof url.pathname !== 'string') {
      throw new InvalidArgumentError('Invalid URL pathname: the pathname must be a string or null/undefined.')
    }

    if (url.hostname != null && typeof url.hostname !== 'string') {
      throw new InvalidArgumentError('Invalid URL hostname: the hostname must be a string or null/undefined.')
    }

    if (url.origin != null && typeof url.origin !== 'string') {
      throw new InvalidArgumentError('Invalid URL origin: the origin must be a string or null/undefined.')
    }

    const port = url.port != null
      ? url.port
      : (url.protocol === 'https:' ? 443 : 80)
    let origin = url.origin != null
      ? url.origin
      : `${url.protocol}//${url.hostname}:${port}`
    let path = url.path != null
      ? url.path
      : `${url.pathname || ''}${url.search || ''}`

    if (origin.endsWith('/')) {
      origin = origin.substring(0, origin.length - 1)
    }

    if (path && !path.startsWith('/')) {
      path = `/${path}`
    }
    // new URL(path, origin) is unsafe when `path` contains an absolute URL
    // From https://developer.mozilla.org/en-US/docs/Web/API/URL/URL:
    // If first parameter is a relative URL, second param is required, and will be used as the base URL.
    // If first parameter is an absolute URL, a given second param will be ignored.
    url = new URL(origin + path)
  }

  return url
}

function parseOrigin (url) {
  url = parseURL(url)

  if (url.pathname !== '/' || url.search || url.hash) {
    throw new InvalidArgumentError('invalid url')
  }

  return url
}

function getHostname (host) {
  if (host[0] === '[') {
    const idx = host.indexOf(']')

    assert(idx !== -1)
    return host.substring(1, idx)
  }

  const idx = host.indexOf(':')
  if (idx === -1) return host

  return host.substring(0, idx)
}

// IP addresses are not valid server names per RFC6066
// > Currently, the only server names supported are DNS hostnames
function getServerName (host) {
  if (!host) {
    return null
  }

  assert.strictEqual(typeof host, 'string')

  const servername = getHostname(host)
  if (net.isIP(servername)) {
    return ''
  }

  return servername
}

function deepClone (obj) {
  return JSON.parse(JSON.stringify(obj))
}

function isAsyncIterable (obj) {
  return !!(obj != null && typeof obj[Symbol.asyncIterator] === 'function')
}

function isIterable (obj) {
  return !!(obj != null && (typeof obj[Symbol.iterator] === 'function' || typeof obj[Symbol.asyncIterator] === 'function'))
}

function bodyLength (body) {
  if (body == null) {
    return 0
  } else if (isStream(body)) {
    const state = body._readableState
    return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length)
      ? state.length
      : null
  } else if (isBlobLike(body)) {
    return body.size != null ? body.size : null
  } else if (isBuffer(body)) {
    return body.byteLength
  }

  return null
}

function isDestroyed (stream) {
  return !stream || !!(stream.destroyed || stream[kDestroyed])
}

function isReadableAborted (stream) {
  const state = stream && stream._readableState
  return isDestroyed(stream) && state && !state.endEmitted
}

function destroy (stream, err) {
  if (stream == null || !isStream(stream) || isDestroyed(stream)) {
    return
  }

  if (typeof stream.destroy === 'function') {
    if (Object.getPrototypeOf(stream).constructor === IncomingMessage) {
      // See: https://github.com/nodejs/node/pull/38505/files
      stream.socket = null
    }

    stream.destroy(err)
  } else if (err) {
    process.nextTick((stream, err) => {
      stream.emit('error', err)
    }, stream, err)
  }

  if (stream.destroyed !== true) {
    stream[kDestroyed] = true
  }
}

const KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/
function parseKeepAliveTimeout (val) {
  const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR)
  return m ? parseInt(m[1], 10) * 1000 : null
}

/**
 * Retrieves a header name and returns its lowercase value.
 * @param {string | Buffer} value Header name
 * @returns {string}
 */
function headerNameToString (value) {
  return headerNameLowerCasedRecord[value] || value.toLowerCase()
}

function parseHeaders (headers, obj = {}) {
  // For H2 support
  if (!Array.isArray(headers)) return headers

  for (let i = 0; i < headers.length; i += 2) {
    const key = headers[i].toString().toLowerCase()
    let val = obj[key]

    if (!val) {
      if (Array.isArray(headers[i + 1])) {
        obj[key] = headers[i + 1].map(x => x.toString('utf8'))
      } else {
        obj[key] = headers[i + 1].toString('utf8')
      }
    } else {
      if (!Array.isArray(val)) {
        val = [val]
        obj[key] = val
      }
      val.push(headers[i + 1].toString('utf8'))
    }
  }

  // See https://github.com/nodejs/node/pull/46528
  if ('content-length' in obj && 'content-disposition' in obj) {
    obj['content-disposition'] = Buffer.from(obj['content-disposition']).toString('latin1')
  }

  return obj
}

function parseRawHeaders (headers) {
  const ret = []
  let hasContentLength = false
  let contentDispositionIdx = -1

  for (let n = 0; n < headers.length; n += 2) {
    const key = headers[n + 0].toString()
    const val = headers[n + 1].toString('utf8')

    if (key.length === 14 && (key === 'content-length' || key.toLowerCase() === 'content-length')) {
      ret.push(key, val)
      hasContentLength = true
    } else if (key.length === 19 && (key === 'content-disposition' || key.toLowerCase() === 'content-disposition')) {
      contentDispositionIdx = ret.push(key, val) - 1
    } else {
      ret.push(key, val)
    }
  }

  // See https://github.com/nodejs/node/pull/46528
  if (hasContentLength && contentDispositionIdx !== -1) {
    ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString('latin1')
  }

  return ret
}

function isBuffer (buffer) {
  // See, https://github.com/mcollina/undici/pull/319
  return buffer instanceof Uint8Array || Buffer.isBuffer(buffer)
}

function validateHandler (handler, method, upgrade) {
  if (!handler || typeof handler !== 'object') {
    throw new InvalidArgumentError('handler must be an object')
  }

  if (typeof handler.onConnect !== 'function') {
    throw new InvalidArgumentError('invalid onConnect method')
  }

  if (typeof handler.onError !== 'function') {
    throw new InvalidArgumentError('invalid onError method')
  }

  if (typeof handler.onBodySent !== 'function' && handler.onBodySent !== undefined) {
    throw new InvalidArgumentError('invalid onBodySent method')
  }

  if (upgrade || method === 'CONNECT') {
    if (typeof handler.onUpgrade !== 'function') {
      throw new InvalidArgumentError('invalid onUpgrade method')
    }
  } else {
    if (typeof handler.onHeaders !== 'function') {
      throw new InvalidArgumentError('invalid onHeaders method')
    }

    if (typeof handler.onData !== 'function') {
      throw new InvalidArgumentError('invalid onData method')
    }

    if (typeof handler.onComplete !== 'function') {
      throw new InvalidArgumentError('invalid onComplete method')
    }
  }
}

// A body is disturbed if it has been read from and it cannot
// be re-used without losing state or data.
function isDisturbed (body) {
  return !!(body && (
    stream.isDisturbed
      ? stream.isDisturbed(body) || body[kBodyUsed] // TODO (fix): Why is body[kBodyUsed] needed?
      : body[kBodyUsed] ||
        body.readableDidRead ||
        (body._readableState && body._readableState.dataEmitted) ||
        isReadableAborted(body)
  ))
}

function isErrored (body) {
  return !!(body && (
    stream.isErrored
      ? stream.isErrored(body)
      : /state: 'errored'/.test(nodeUtil.inspect(body)
      )))
}

function isReadable (body) {
  return !!(body && (
    stream.isReadable
      ? stream.isReadable(body)
      : /state: 'readable'/.test(nodeUtil.inspect(body)
      )))
}

function getSocketInfo (socket) {
  return {
    localAddress: socket.localAddress,
    localPort: socket.localPort,
    remoteAddress: socket.remoteAddress,
    remotePort: socket.remotePort,
    remoteFamily: socket.remoteFamily,
    timeout: socket.timeout,
    bytesWritten: socket.bytesWritten,
    bytesRead: socket.bytesRead
  }
}

async function * convertIterableToBuffer (iterable) {
  for await (const chunk of iterable) {
    yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk)
  }
}

let ReadableStream
function ReadableStreamFrom (iterable) {
  if (!ReadableStream) {
    ReadableStream = (__nccwpck_require__(5356).ReadableStream)
  }

  if (ReadableStream.from) {
    return ReadableStream.from(convertIterableToBuffer(iterable))
  }

  let iterator
  return new ReadableStream(
    {
      async start () {
        iterator = iterable[Symbol.asyncIterator]()
      },
      async pull (controller) {
        const { done, value } = await iterator.next()
        if (done) {
          queueMicrotask(() => {
            controller.close()
          })
        } else {
          const buf = Buffer.isBuffer(value) ? value : Buffer.from(value)
          controller.enqueue(new Uint8Array(buf))
        }
        return controller.desiredSize > 0
      },
      async cancel (reason) {
        await iterator.return()
      }
    },
    0
  )
}

// The chunk should be a FormData instance and contains
// all the required methods.
function isFormDataLike (object) {
  return (
    object &&
    typeof object === 'object' &&
    typeof object.append === 'function' &&
    typeof object.delete === 'function' &&
    typeof object.get === 'function' &&
    typeof object.getAll === 'function' &&
    typeof object.has === 'function' &&
    typeof object.set === 'function' &&
    object[Symbol.toStringTag] === 'FormData'
  )
}

function throwIfAborted (signal) {
  if (!signal) { return }
  if (typeof signal.throwIfAborted === 'function') {
    signal.throwIfAborted()
  } else {
    if (signal.aborted) {
      // DOMException not available < v17.0.0
      const err = new Error('The operation was aborted')
      err.name = 'AbortError'
      throw err
    }
  }
}

function addAbortListener (signal, listener) {
  if ('addEventListener' in signal) {
    signal.addEventListener('abort', listener, { once: true })
    return () => signal.removeEventListener('abort', listener)
  }
  signal.addListener('abort', listener)
  return () => signal.removeListener('abort', listener)
}

const hasToWellFormed = !!String.prototype.toWellFormed

/**
 * @param {string} val
 */
function toUSVString (val) {
  if (hasToWellFormed) {
    return `${val}`.toWellFormed()
  } else if (nodeUtil.toUSVString) {
    return nodeUtil.toUSVString(val)
  }

  return `${val}`
}

// Parsed accordingly to RFC 9110
// https://www.rfc-editor.org/rfc/rfc9110#field.content-range
function parseRangeHeader (range) {
  if (range == null || range === '') return { start: 0, end: null, size: null }

  const m = range ? range.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null
  return m
    ? {
        start: parseInt(m[1]),
        end: m[2] ? parseInt(m[2]) : null,
        size: m[3] ? parseInt(m[3]) : null
      }
    : null
}

const kEnumerableProperty = Object.create(null)
kEnumerableProperty.enumerable = true

module.exports = {
  kEnumerableProperty,
  nop,
  isDisturbed,
  isErrored,
  isReadable,
  toUSVString,
  isReadableAborted,
  isBlobLike,
  parseOrigin,
  parseURL,
  getServerName,
  isStream,
  isIterable,
  isAsyncIterable,
  isDestroyed,
  headerNameToString,
  parseRawHeaders,
  parseHeaders,
  parseKeepAliveTimeout,
  destroy,
  bodyLength,
  deepClone,
  ReadableStreamFrom,
  isBuffer,
  validateHandler,
  getSocketInfo,
  isFormDataLike,
  buildURL,
  throwIfAborted,
  addAbortListener,
  parseRangeHeader,
  nodeMajor,
  nodeMinor,
  nodeHasAutoSelectFamily: nodeMajor > 18 || (nodeMajor === 18 && nodeMinor >= 13),
  safeHTTPMethods: ['GET', 'HEAD', 'OPTIONS', 'TRACE']
}


/***/ }),

/***/ 4839:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const Dispatcher = __nccwpck_require__(412)
const {
  ClientDestroyedError,
  ClientClosedError,
  InvalidArgumentError
} = __nccwpck_require__(8045)
const { kDestroy, kClose, kDispatch, kInterceptors } = __nccwpck_require__(2785)

const kDestroyed = Symbol('destroyed')
const kClosed = Symbol('closed')
const kOnDestroyed = Symbol('onDestroyed')
const kOnClosed = Symbol('onClosed')
const kInterceptedDispatch = Symbol('Intercepted Dispatch')

class DispatcherBase extends Dispatcher {
  constructor () {
    super()

    this[kDestroyed] = false
    this[kOnDestroyed] = null
    this[kClosed] = false
    this[kOnClosed] = []
  }

  get destroyed () {
    return this[kDestroyed]
  }

  get closed () {
    return this[kClosed]
  }

  get interceptors () {
    return this[kInterceptors]
  }

  set interceptors (newInterceptors) {
    if (newInterceptors) {
      for (let i = newInterceptors.length - 1; i >= 0; i--) {
        const interceptor = this[kInterceptors][i]
        if (typeof interceptor !== 'function') {
          throw new InvalidArgumentError('interceptor must be an function')
        }
      }
    }

    this[kInterceptors] = newInterceptors
  }

  close (callback) {
    if (callback === undefined) {
      return new Promise((resolve, reject) => {
        this.close((err, data) => {
          return err ? reject(err) : resolve(data)
        })
      })
    }

    if (typeof callback !== 'function') {
      throw new InvalidArgumentError('invalid callback')
    }

    if (this[kDestroyed]) {
      queueMicrotask(() => callback(new ClientDestroyedError(), null))
      return
    }

    if (this[kClosed]) {
      if (this[kOnClosed]) {
        this[kOnClosed].push(callback)
      } else {
        queueMicrotask(() => callback(null, null))
      }
      return
    }

    this[kClosed] = true
    this[kOnClosed].push(callback)

    const onClosed = () => {
      const callbacks = this[kOnClosed]
      this[kOnClosed] = null
      for (let i = 0; i < callbacks.length; i++) {
        callbacks[i](null, null)
      }
    }

    // Should not error.
    this[kClose]()
      .then(() => this.destroy())
      .then(() => {
        queueMicrotask(onClosed)
      })
  }

  destroy (err, callback) {
    if (typeof err === 'function') {
      callback = err
      err = null
    }

    if (callback === undefined) {
      return new Promise((resolve, reject) => {
        this.destroy(err, (err, data) => {
          return err ? /* istanbul ignore next: should never error */ reject(err) : resolve(data)
        })
      })
    }

    if (typeof callback !== 'function') {
      throw new InvalidArgumentError('invalid callback')
    }

    if (this[kDestroyed]) {
      if (this[kOnDestroyed]) {
        this[kOnDestroyed].push(callback)
      } else {
        queueMicrotask(() => callback(null, null))
      }
      return
    }

    if (!err) {
      err = new ClientDestroyedError()
    }

    this[kDestroyed] = true
    this[kOnDestroyed] = this[kOnDestroyed] || []
    this[kOnDestroyed].push(callback)

    const onDestroyed = () => {
      const callbacks = this[kOnDestroyed]
      this[kOnDestroyed] = null
      for (let i = 0; i < callbacks.length; i++) {
        callbacks[i](null, null)
      }
    }

    // Should not error.
    this[kDestroy](err).then(() => {
      queueMicrotask(onDestroyed)
    })
  }

  [kInterceptedDispatch] (opts, handler) {
    if (!this[kInterceptors] || this[kInterceptors].length === 0) {
      this[kInterceptedDispatch] = this[kDispatch]
      return this[kDispatch](opts, handler)
    }

    let dispatch = this[kDispatch].bind(this)
    for (let i = this[kInterceptors].length - 1; i >= 0; i--) {
      dispatch = this[kInterceptors][i](dispatch)
    }
    this[kInterceptedDispatch] = dispatch
    return dispatch(opts, handler)
  }

  dispatch (opts, handler) {
    if (!handler || typeof handler !== 'object') {
      throw new InvalidArgumentError('handler must be an object')
    }

    try {
      if (!opts || typeof opts !== 'object') {
        throw new InvalidArgumentError('opts must be an object.')
      }

      if (this[kDestroyed] || this[kOnDestroyed]) {
        throw new ClientDestroyedError()
      }

      if (this[kClosed]) {
        throw new ClientClosedError()
      }

      return this[kInterceptedDispatch](opts, handler)
    } catch (err) {
      if (typeof handler.onError !== 'function') {
        throw new InvalidArgumentError('invalid onError method')
      }

      handler.onError(err)

      return false
    }
  }
}

module.exports = DispatcherBase


/***/ }),

/***/ 412:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const EventEmitter = __nccwpck_require__(2361)

class Dispatcher extends EventEmitter {
  dispatch () {
    throw new Error('not implemented')
  }

  close () {
    throw new Error('not implemented')
  }

  destroy () {
    throw new Error('not implemented')
  }
}

module.exports = Dispatcher


/***/ }),

/***/ 1472:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const Busboy = __nccwpck_require__(727)
const util = __nccwpck_require__(3983)
const {
  ReadableStreamFrom,
  isBlobLike,
  isReadableStreamLike,
  readableStreamClose,
  createDeferredPromise,
  fullyReadBody
} = __nccwpck_require__(2538)
const { FormData } = __nccwpck_require__(2015)
const { kState } = __nccwpck_require__(5861)
const { webidl } = __nccwpck_require__(1744)
const { DOMException, structuredClone } = __nccwpck_require__(1037)
const { Blob, File: NativeFile } = __nccwpck_require__(4300)
const { kBodyUsed } = __nccwpck_require__(2785)
const assert = __nccwpck_require__(9491)
const { isErrored } = __nccwpck_require__(3983)
const { isUint8Array, isArrayBuffer } = __nccwpck_require__(9830)
const { File: UndiciFile } = __nccwpck_require__(8511)
const { parseMIMEType, serializeAMimeType } = __nccwpck_require__(685)

let ReadableStream = globalThis.ReadableStream

/** @type {globalThis['File']} */
const File = NativeFile ?? UndiciFile
const textEncoder = new TextEncoder()
const textDecoder = new TextDecoder()

// https://fetch.spec.whatwg.org/#concept-bodyinit-extract
function extractBody (object, keepalive = false) {
  if (!ReadableStream) {
    ReadableStream = (__nccwpck_require__(5356).ReadableStream)
  }

  // 1. Let stream be null.
  let stream = null

  // 2. If object is a ReadableStream object, then set stream to object.
  if (object instanceof ReadableStream) {
    stream = object
  } else if (isBlobLike(object)) {
    // 3. Otherwise, if object is a Blob object, set stream to the
    //    result of running object’s get stream.
    stream = object.stream()
  } else {
    // 4. Otherwise, set stream to a new ReadableStream object, and set
    //    up stream.
    stream = new ReadableStream({
      async pull (controller) {
        controller.enqueue(
          typeof source === 'string' ? textEncoder.encode(source) : source
        )
        queueMicrotask(() => readableStreamClose(controller))
      },
      start () {},
      type: undefined
    })
  }

  // 5. Assert: stream is a ReadableStream object.
  assert(isReadableStreamLike(stream))

  // 6. Let action be null.
  let action = null

  // 7. Let source be null.
  let source = null

  // 8. Let length be null.
  let length = null

  // 9. Let type be null.
  let type = null

  // 10. Switch on object:
  if (typeof object === 'string') {
    // Set source to the UTF-8 encoding of object.
    // Note: setting source to a Uint8Array here breaks some mocking assumptions.
    source = object

    // Set type to `text/plain;charset=UTF-8`.
    type = 'text/plain;charset=UTF-8'
  } else if (object instanceof URLSearchParams) {
    // URLSearchParams

    // spec says to run application/x-www-form-urlencoded on body.list
    // this is implemented in Node.js as apart of an URLSearchParams instance toString method
    // See: https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L490
    // and https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L1100

    // Set source to the result of running the application/x-www-form-urlencoded serializer with object’s list.
    source = object.toString()

    // Set type to `application/x-www-form-urlencoded;charset=UTF-8`.
    type = 'application/x-www-form-urlencoded;charset=UTF-8'
  } else if (isArrayBuffer(object)) {
    // BufferSource/ArrayBuffer

    // Set source to a copy of the bytes held by object.
    source = new Uint8Array(object.slice())
  } else if (ArrayBuffer.isView(object)) {
    // BufferSource/ArrayBufferView

    // Set source to a copy of the bytes held by object.
    source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength))
  } else if (util.isFormDataLike(object)) {
    const boundary = `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, '0')}`
    const prefix = `--${boundary}\r\nContent-Disposition: form-data`

    /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
    const escape = (str) =>
      str.replace(/\n/g, '%0A').replace(/\r/g, '%0D').replace(/"/g, '%22')
    const normalizeLinefeeds = (value) => value.replace(/\r?\n|\r/g, '\r\n')

    // Set action to this step: run the multipart/form-data
    // encoding algorithm, with object’s entry list and UTF-8.
    // - This ensures that the body is immutable and can't be changed afterwords
    // - That the content-length is calculated in advance.
    // - And that all parts are pre-encoded and ready to be sent.

    const blobParts = []
    const rn = new Uint8Array([13, 10]) // '\r\n'
    length = 0
    let hasUnknownSizeValue = false

    for (const [name, value] of object) {
      if (typeof value === 'string') {
        const chunk = textEncoder.encode(prefix +
          `; name="${escape(normalizeLinefeeds(name))}"` +
          `\r\n\r\n${normalizeLinefeeds(value)}\r\n`)
        blobParts.push(chunk)
        length += chunk.byteLength
      } else {
        const chunk = textEncoder.encode(`${prefix}; name="${escape(normalizeLinefeeds(name))}"` +
          (value.name ? `; filename="${escape(value.name)}"` : '') + '\r\n' +
          `Content-Type: ${
            value.type || 'application/octet-stream'
          }\r\n\r\n`)
        blobParts.push(chunk, value, rn)
        if (typeof value.size === 'number') {
          length += chunk.byteLength + value.size + rn.byteLength
        } else {
          hasUnknownSizeValue = true
        }
      }
    }

    const chunk = textEncoder.encode(`--${boundary}--`)
    blobParts.push(chunk)
    length += chunk.byteLength
    if (hasUnknownSizeValue) {
      length = null
    }

    // Set source to object.
    source = object

    action = async function * () {
      for (const part of blobParts) {
        if (part.stream) {
          yield * part.stream()
        } else {
          yield part
        }
      }
    }

    // Set type to `multipart/form-data; boundary=`,
    // followed by the multipart/form-data boundary string generated
    // by the multipart/form-data encoding algorithm.
    type = 'multipart/form-data; boundary=' + boundary
  } else if (isBlobLike(object)) {
    // Blob

    // Set source to object.
    source = object

    // Set length to object’s size.
    length = object.size

    // If object’s type attribute is not the empty byte sequence, set
    // type to its value.
    if (object.type) {
      type = object.type
    }
  } else if (typeof object[Symbol.asyncIterator] === 'function') {
    // If keepalive is true, then throw a TypeError.
    if (keepalive) {
      throw new TypeError('keepalive')
    }

    // If object is disturbed or locked, then throw a TypeError.
    if (util.isDisturbed(object) || object.locked) {
      throw new TypeError(
        'Response body object should not be disturbed or locked'
      )
    }

    stream =
      object instanceof ReadableStream ? object : ReadableStreamFrom(object)
  }

  // 11. If source is a byte sequence, then set action to a
  // step that returns source and length to source’s length.
  if (typeof source === 'string' || util.isBuffer(source)) {
    length = Buffer.byteLength(source)
  }

  // 12. If action is non-null, then run these steps in in parallel:
  if (action != null) {
    // Run action.
    let iterator
    stream = new ReadableStream({
      async start () {
        iterator = action(object)[Symbol.asyncIterator]()
      },
      async pull (controller) {
        const { value, done } = await iterator.next()
        if (done) {
          // When running action is done, close stream.
          queueMicrotask(() => {
            controller.close()
          })
        } else {
          // Whenever one or more bytes are available and stream is not errored,
          // enqueue a Uint8Array wrapping an ArrayBuffer containing the available
          // bytes into stream.
          if (!isErrored(stream)) {
            controller.enqueue(new Uint8Array(value))
          }
        }
        return controller.desiredSize > 0
      },
      async cancel (reason) {
        await iterator.return()
      },
      type: undefined
    })
  }

  // 13. Let body be a body whose stream is stream, source is source,
  // and length is length.
  const body = { stream, source, length }

  // 14. Return (body, type).
  return [body, type]
}

// https://fetch.spec.whatwg.org/#bodyinit-safely-extract
function safelyExtractBody (object, keepalive = false) {
  if (!ReadableStream) {
    // istanbul ignore next
    ReadableStream = (__nccwpck_require__(5356).ReadableStream)
  }

  // To safely extract a body and a `Content-Type` value from
  // a byte sequence or BodyInit object object, run these steps:

  // 1. If object is a ReadableStream object, then:
  if (object instanceof ReadableStream) {
    // Assert: object is neither disturbed nor locked.
    // istanbul ignore next
    assert(!util.isDisturbed(object), 'The body has already been consumed.')
    // istanbul ignore next
    assert(!object.locked, 'The stream is locked.')
  }

  // 2. Return the results of extracting object.
  return extractBody(object, keepalive)
}

function cloneBody (body) {
  // To clone a body body, run these steps:

  // https://fetch.spec.whatwg.org/#concept-body-clone

  // 1. Let « out1, out2 » be the result of teeing body’s stream.
  const [out1, out2] = body.stream.tee()
  const out2Clone = structuredClone(out2, { transfer: [out2] })
  // This, for whatever reasons, unrefs out2Clone which allows
  // the process to exit by itself.
  const [, finalClone] = out2Clone.tee()

  // 2. Set body’s stream to out1.
  body.stream = out1

  // 3. Return a body whose stream is out2 and other members are copied from body.
  return {
    stream: finalClone,
    length: body.length,
    source: body.source
  }
}

async function * consumeBody (body) {
  if (body) {
    if (isUint8Array(body)) {
      yield body
    } else {
      const stream = body.stream

      if (util.isDisturbed(stream)) {
        throw new TypeError('The body has already been consumed.')
      }

      if (stream.locked) {
        throw new TypeError('The stream is locked.')
      }

      // Compat.
      stream[kBodyUsed] = true

      yield * stream
    }
  }
}

function throwIfAborted (state) {
  if (state.aborted) {
    throw new DOMException('The operation was aborted.', 'AbortError')
  }
}

function bodyMixinMethods (instance) {
  const methods = {
    blob () {
      // The blob() method steps are to return the result of
      // running consume body with this and the following step
      // given a byte sequence bytes: return a Blob whose
      // contents are bytes and whose type attribute is this’s
      // MIME type.
      return specConsumeBody(this, (bytes) => {
        let mimeType = bodyMimeType(this)

        if (mimeType === 'failure') {
          mimeType = ''
        } else if (mimeType) {
          mimeType = serializeAMimeType(mimeType)
        }

        // Return a Blob whose contents are bytes and type attribute
        // is mimeType.
        return new Blob([bytes], { type: mimeType })
      }, instance)
    },

    arrayBuffer () {
      // The arrayBuffer() method steps are to return the result
      // of running consume body with this and the following step
      // given a byte sequence bytes: return a new ArrayBuffer
      // whose contents are bytes.
      return specConsumeBody(this, (bytes) => {
        return new Uint8Array(bytes).buffer
      }, instance)
    },

    text () {
      // The text() method steps are to return the result of running
      // consume body with this and UTF-8 decode.
      return specConsumeBody(this, utf8DecodeBytes, instance)
    },

    json () {
      // The json() method steps are to return the result of running
      // consume body with this and parse JSON from bytes.
      return specConsumeBody(this, parseJSONFromBytes, instance)
    },

    async formData () {
      webidl.brandCheck(this, instance)

      throwIfAborted(this[kState])

      const contentType = this.headers.get('Content-Type')

      // If mimeType’s essence is "multipart/form-data", then:
      if (/multipart\/form-data/.test(contentType)) {
        const headers = {}
        for (const [key, value] of this.headers) headers[key.toLowerCase()] = value

        const responseFormData = new FormData()

        let busboy

        try {
          busboy = new Busboy({
            headers,
            preservePath: true
          })
        } catch (err) {
          throw new DOMException(`${err}`, 'AbortError')
        }

        busboy.on('field', (name, value) => {
          responseFormData.append(name, value)
        })
        busboy.on('file', (name, value, filename, encoding, mimeType) => {
          const chunks = []

          if (encoding === 'base64' || encoding.toLowerCase() === 'base64') {
            let base64chunk = ''

            value.on('data', (chunk) => {
              base64chunk += chunk.toString().replace(/[\r\n]/gm, '')

              const end = base64chunk.length - base64chunk.length % 4
              chunks.push(Buffer.from(base64chunk.slice(0, end), 'base64'))

              base64chunk = base64chunk.slice(end)
            })
            value.on('end', () => {
              chunks.push(Buffer.from(base64chunk, 'base64'))
              responseFormData.append(name, new File(chunks, filename, { type: mimeType }))
            })
          } else {
            value.on('data', (chunk) => {
              chunks.push(chunk)
            })
            value.on('end', () => {
              responseFormData.append(name, new File(chunks, filename, { type: mimeType }))
            })
          }
        })

        const busboyResolve = new Promise((resolve, reject) => {
          busboy.on('finish', resolve)
          busboy.on('error', (err) => reject(new TypeError(err)))
        })

        if (this.body !== null) for await (const chunk of consumeBody(this[kState].body)) busboy.write(chunk)
        busboy.end()
        await busboyResolve

        return responseFormData
      } else if (/application\/x-www-form-urlencoded/.test(contentType)) {
        // Otherwise, if mimeType’s essence is "application/x-www-form-urlencoded", then:

        // 1. Let entries be the result of parsing bytes.
        let entries
        try {
          let text = ''
          // application/x-www-form-urlencoded parser will keep the BOM.
          // https://url.spec.whatwg.org/#concept-urlencoded-parser
          // Note that streaming decoder is stateful and cannot be reused
          const streamingDecoder = new TextDecoder('utf-8', { ignoreBOM: true })

          for await (const chunk of consumeBody(this[kState].body)) {
            if (!isUint8Array(chunk)) {
              throw new TypeError('Expected Uint8Array chunk')
            }
            text += streamingDecoder.decode(chunk, { stream: true })
          }
          text += streamingDecoder.decode()
          entries = new URLSearchParams(text)
        } catch (err) {
          // istanbul ignore next: Unclear when new URLSearchParams can fail on a string.
          // 2. If entries is failure, then throw a TypeError.
          throw Object.assign(new TypeError(), { cause: err })
        }

        // 3. Return a new FormData object whose entries are entries.
        const formData = new FormData()
        for (const [name, value] of entries) {
          formData.append(name, value)
        }
        return formData
      } else {
        // Wait a tick before checking if the request has been aborted.
        // Otherwise, a TypeError can be thrown when an AbortError should.
        await Promise.resolve()

        throwIfAborted(this[kState])

        // Otherwise, throw a TypeError.
        throw webidl.errors.exception({
          header: `${instance.name}.formData`,
          message: 'Could not parse content as FormData.'
        })
      }
    }
  }

  return methods
}

function mixinBody (prototype) {
  Object.assign(prototype.prototype, bodyMixinMethods(prototype))
}

/**
 * @see https://fetch.spec.whatwg.org/#concept-body-consume-body
 * @param {Response|Request} object
 * @param {(value: unknown) => unknown} convertBytesToJSValue
 * @param {Response|Request} instance
 */
async function specConsumeBody (object, convertBytesToJSValue, instance) {
  webidl.brandCheck(object, instance)

  throwIfAborted(object[kState])

  // 1. If object is unusable, then return a promise rejected
  //    with a TypeError.
  if (bodyUnusable(object[kState].body)) {
    throw new TypeError('Body is unusable')
  }

  // 2. Let promise be a new promise.
  const promise = createDeferredPromise()

  // 3. Let errorSteps given error be to reject promise with error.
  const errorSteps = (error) => promise.reject(error)

  // 4. Let successSteps given a byte sequence data be to resolve
  //    promise with the result of running convertBytesToJSValue
  //    with data. If that threw an exception, then run errorSteps
  //    with that exception.
  const successSteps = (data) => {
    try {
      promise.resolve(convertBytesToJSValue(data))
    } catch (e) {
      errorSteps(e)
    }
  }

  // 5. If object’s body is null, then run successSteps with an
  //    empty byte sequence.
  if (object[kState].body == null) {
    successSteps(new Uint8Array())
    return promise.promise
  }

  // 6. Otherwise, fully read object’s body given successSteps,
  //    errorSteps, and object’s relevant global object.
  await fullyReadBody(object[kState].body, successSteps, errorSteps)

  // 7. Return promise.
  return promise.promise
}

// https://fetch.spec.whatwg.org/#body-unusable
function bodyUnusable (body) {
  // An object including the Body interface mixin is
  // said to be unusable if its body is non-null and
  // its body’s stream is disturbed or locked.
  return body != null && (body.stream.locked || util.isDisturbed(body.stream))
}

/**
 * @see https://encoding.spec.whatwg.org/#utf-8-decode
 * @param {Buffer} buffer
 */
function utf8DecodeBytes (buffer) {
  if (buffer.length === 0) {
    return ''
  }

  // 1. Let buffer be the result of peeking three bytes from
  //    ioQueue, converted to a byte sequence.

  // 2. If buffer is 0xEF 0xBB 0xBF, then read three
  //    bytes from ioQueue. (Do nothing with those bytes.)
  if (buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {
    buffer = buffer.subarray(3)
  }

  // 3. Process a queue with an instance of UTF-8’s
  //    decoder, ioQueue, output, and "replacement".
  const output = textDecoder.decode(buffer)

  // 4. Return output.
  return output
}

/**
 * @see https://infra.spec.whatwg.org/#parse-json-bytes-to-a-javascript-value
 * @param {Uint8Array} bytes
 */
function parseJSONFromBytes (bytes) {
  return JSON.parse(utf8DecodeBytes(bytes))
}

/**
 * @see https://fetch.spec.whatwg.org/#concept-body-mime-type
 * @param {import('./response').Response|import('./request').Request} object
 */
function bodyMimeType (object) {
  const { headersList } = object[kState]
  const contentType = headersList.get('content-type')

  if (contentType === null) {
    return 'failure'
  }

  return parseMIMEType(contentType)
}

module.exports = {
  extractBody,
  safelyExtractBody,
  cloneBody,
  mixinBody
}


/***/ }),

/***/ 1037:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { MessageChannel, receiveMessageOnPort } = __nccwpck_require__(1267)

const corsSafeListedMethods = ['GET', 'HEAD', 'POST']
const corsSafeListedMethodsSet = new Set(corsSafeListedMethods)

const nullBodyStatus = [101, 204, 205, 304]

const redirectStatus = [301, 302, 303, 307, 308]
const redirectStatusSet = new Set(redirectStatus)

// https://fetch.spec.whatwg.org/#block-bad-port
const badPorts = [
  '1', '7', '9', '11', '13', '15', '17', '19', '20', '21', '22', '23', '25', '37', '42', '43', '53', '69', '77', '79',
  '87', '95', '101', '102', '103', '104', '109', '110', '111', '113', '115', '117', '119', '123', '135', '137',
  '139', '143', '161', '179', '389', '427', '465', '512', '513', '514', '515', '526', '530', '531', '532',
  '540', '548', '554', '556', '563', '587', '601', '636', '989', '990', '993', '995', '1719', '1720', '1723',
  '2049', '3659', '4045', '5060', '5061', '6000', '6566', '6665', '6666', '6667', '6668', '6669', '6697',
  '10080'
]

const badPortsSet = new Set(badPorts)

// https://w3c.github.io/webappsec-referrer-policy/#referrer-policies
const referrerPolicy = [
  '',
  'no-referrer',
  'no-referrer-when-downgrade',
  'same-origin',
  'origin',
  'strict-origin',
  'origin-when-cross-origin',
  'strict-origin-when-cross-origin',
  'unsafe-url'
]
const referrerPolicySet = new Set(referrerPolicy)

const requestRedirect = ['follow', 'manual', 'error']

const safeMethods = ['GET', 'HEAD', 'OPTIONS', 'TRACE']
const safeMethodsSet = new Set(safeMethods)

const requestMode = ['navigate', 'same-origin', 'no-cors', 'cors']

const requestCredentials = ['omit', 'same-origin', 'include']

const requestCache = [
  'default',
  'no-store',
  'reload',
  'no-cache',
  'force-cache',
  'only-if-cached'
]

// https://fetch.spec.whatwg.org/#request-body-header-name
const requestBodyHeader = [
  'content-encoding',
  'content-language',
  'content-location',
  'content-type',
  // See https://github.com/nodejs/undici/issues/2021
  // 'Content-Length' is a forbidden header name, which is typically
  // removed in the Headers implementation. However, undici doesn't
  // filter out headers, so we add it here.
  'content-length'
]

// https://fetch.spec.whatwg.org/#enumdef-requestduplex
const requestDuplex = [
  'half'
]

// http://fetch.spec.whatwg.org/#forbidden-method
const forbiddenMethods = ['CONNECT', 'TRACE', 'TRACK']
const forbiddenMethodsSet = new Set(forbiddenMethods)

const subresource = [
  'audio',
  'audioworklet',
  'font',
  'image',
  'manifest',
  'paintworklet',
  'script',
  'style',
  'track',
  'video',
  'xslt',
  ''
]
const subresourceSet = new Set(subresource)

/** @type {globalThis['DOMException']} */
const DOMException = globalThis.DOMException ?? (() => {
  // DOMException was only made a global in Node v17.0.0,
  // but fetch supports >= v16.8.
  try {
    atob('~')
  } catch (err) {
    return Object.getPrototypeOf(err).constructor
  }
})()

let channel

/** @type {globalThis['structuredClone']} */
const structuredClone =
  globalThis.structuredClone ??
  // https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js
  // structuredClone was added in v17.0.0, but fetch supports v16.8
  function structuredClone (value, options = undefined) {
    if (arguments.length === 0) {
      throw new TypeError('missing argument')
    }

    if (!channel) {
      channel = new MessageChannel()
    }
    channel.port1.unref()
    channel.port2.unref()
    channel.port1.postMessage(value, options?.transfer)
    return receiveMessageOnPort(channel.port2).message
  }

module.exports = {
  DOMException,
  structuredClone,
  subresource,
  forbiddenMethods,
  requestBodyHeader,
  referrerPolicy,
  requestRedirect,
  requestMode,
  requestCredentials,
  requestCache,
  redirectStatus,
  corsSafeListedMethods,
  nullBodyStatus,
  safeMethods,
  badPorts,
  requestDuplex,
  subresourceSet,
  badPortsSet,
  redirectStatusSet,
  corsSafeListedMethodsSet,
  safeMethodsSet,
  forbiddenMethodsSet,
  referrerPolicySet
}


/***/ }),

/***/ 685:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const assert = __nccwpck_require__(9491)
const { atob } = __nccwpck_require__(4300)
const { isomorphicDecode } = __nccwpck_require__(2538)

const encoder = new TextEncoder()

/**
 * @see https://mimesniff.spec.whatwg.org/#http-token-code-point
 */
const HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/
const HTTP_WHITESPACE_REGEX = /(\u000A|\u000D|\u0009|\u0020)/ // eslint-disable-line
/**
 * @see https://mimesniff.spec.whatwg.org/#http-quoted-string-token-code-point
 */
const HTTP_QUOTED_STRING_TOKENS = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/ // eslint-disable-line

// https://fetch.spec.whatwg.org/#data-url-processor
/** @param {URL} dataURL */
function dataURLProcessor (dataURL) {
  // 1. Assert: dataURL’s scheme is "data".
  assert(dataURL.protocol === 'data:')

  // 2. Let input be the result of running the URL
  // serializer on dataURL with exclude fragment
  // set to true.
  let input = URLSerializer(dataURL, true)

  // 3. Remove the leading "data:" string from input.
  input = input.slice(5)

  // 4. Let position point at the start of input.
  const position = { position: 0 }

  // 5. Let mimeType be the result of collecting a
  // sequence of code points that are not equal
  // to U+002C (,), given position.
  let mimeType = collectASequenceOfCodePointsFast(
    ',',
    input,
    position
  )

  // 6. Strip leading and trailing ASCII whitespace
  // from mimeType.
  // Undici implementation note: we need to store the
  // length because if the mimetype has spaces removed,
  // the wrong amount will be sliced from the input in
  // step #9
  const mimeTypeLength = mimeType.length
  mimeType = removeASCIIWhitespace(mimeType, true, true)

  // 7. If position is past the end of input, then
  // return failure
  if (position.position >= input.length) {
    return 'failure'
  }

  // 8. Advance position by 1.
  position.position++

  // 9. Let encodedBody be the remainder of input.
  const encodedBody = input.slice(mimeTypeLength + 1)

  // 10. Let body be the percent-decoding of encodedBody.
  let body = stringPercentDecode(encodedBody)

  // 11. If mimeType ends with U+003B (;), followed by
  // zero or more U+0020 SPACE, followed by an ASCII
  // case-insensitive match for "base64", then:
  if (/;(\u0020){0,}base64$/i.test(mimeType)) {
    // 1. Let stringBody be the isomorphic decode of body.
    const stringBody = isomorphicDecode(body)

    // 2. Set body to the forgiving-base64 decode of
    // stringBody.
    body = forgivingBase64(stringBody)

    // 3. If body is failure, then return failure.
    if (body === 'failure') {
      return 'failure'
    }

    // 4. Remove the last 6 code points from mimeType.
    mimeType = mimeType.slice(0, -6)

    // 5. Remove trailing U+0020 SPACE code points from mimeType,
    // if any.
    mimeType = mimeType.replace(/(\u0020)+$/, '')

    // 6. Remove the last U+003B (;) code point from mimeType.
    mimeType = mimeType.slice(0, -1)
  }

  // 12. If mimeType starts with U+003B (;), then prepend
  // "text/plain" to mimeType.
  if (mimeType.startsWith(';')) {
    mimeType = 'text/plain' + mimeType
  }

  // 13. Let mimeTypeRecord be the result of parsing
  // mimeType.
  let mimeTypeRecord = parseMIMEType(mimeType)

  // 14. If mimeTypeRecord is failure, then set
  // mimeTypeRecord to text/plain;charset=US-ASCII.
  if (mimeTypeRecord === 'failure') {
    mimeTypeRecord = parseMIMEType('text/plain;charset=US-ASCII')
  }

  // 15. Return a new data: URL struct whose MIME
  // type is mimeTypeRecord and body is body.
  // https://fetch.spec.whatwg.org/#data-url-struct
  return { mimeType: mimeTypeRecord, body }
}

// https://url.spec.whatwg.org/#concept-url-serializer
/**
 * @param {URL} url
 * @param {boolean} excludeFragment
 */
function URLSerializer (url, excludeFragment = false) {
  if (!excludeFragment) {
    return url.href
  }

  const href = url.href
  const hashLength = url.hash.length

  return hashLength === 0 ? href : href.substring(0, href.length - hashLength)
}

// https://infra.spec.whatwg.org/#collect-a-sequence-of-code-points
/**
 * @param {(char: string) => boolean} condition
 * @param {string} input
 * @param {{ position: number }} position
 */
function collectASequenceOfCodePoints (condition, input, position) {
  // 1. Let result be the empty string.
  let result = ''

  // 2. While position doesn’t point past the end of input and the
  // code point at position within input meets the condition condition:
  while (position.position < input.length && condition(input[position.position])) {
    // 1. Append that code point to the end of result.
    result += input[position.position]

    // 2. Advance position by 1.
    position.position++
  }

  // 3. Return result.
  return result
}

/**
 * A faster collectASequenceOfCodePoints that only works when comparing a single character.
 * @param {string} char
 * @param {string} input
 * @param {{ position: number }} position
 */
function collectASequenceOfCodePointsFast (char, input, position) {
  const idx = input.indexOf(char, position.position)
  const start = position.position

  if (idx === -1) {
    position.position = input.length
    return input.slice(start)
  }

  position.position = idx
  return input.slice(start, position.position)
}

// https://url.spec.whatwg.org/#string-percent-decode
/** @param {string} input */
function stringPercentDecode (input) {
  // 1. Let bytes be the UTF-8 encoding of input.
  const bytes = encoder.encode(input)

  // 2. Return the percent-decoding of bytes.
  return percentDecode(bytes)
}

// https://url.spec.whatwg.org/#percent-decode
/** @param {Uint8Array} input */
function percentDecode (input) {
  // 1. Let output be an empty byte sequence.
  /** @type {number[]} */
  const output = []

  // 2. For each byte byte in input:
  for (let i = 0; i < input.length; i++) {
    const byte = input[i]

    // 1. If byte is not 0x25 (%), then append byte to output.
    if (byte !== 0x25) {
      output.push(byte)

    // 2. Otherwise, if byte is 0x25 (%) and the next two bytes
    // after byte in input are not in the ranges
    // 0x30 (0) to 0x39 (9), 0x41 (A) to 0x46 (F),
    // and 0x61 (a) to 0x66 (f), all inclusive, append byte
    // to output.
    } else if (
      byte === 0x25 &&
      !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))
    ) {
      output.push(0x25)

    // 3. Otherwise:
    } else {
      // 1. Let bytePoint be the two bytes after byte in input,
      // decoded, and then interpreted as hexadecimal number.
      const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2])
      const bytePoint = Number.parseInt(nextTwoBytes, 16)

      // 2. Append a byte whose value is bytePoint to output.
      output.push(bytePoint)

      // 3. Skip the next two bytes in input.
      i += 2
    }
  }

  // 3. Return output.
  return Uint8Array.from(output)
}

// https://mimesniff.spec.whatwg.org/#parse-a-mime-type
/** @param {string} input */
function parseMIMEType (input) {
  // 1. Remove any leading and trailing HTTP whitespace
  // from input.
  input = removeHTTPWhitespace(input, true, true)

  // 2. Let position be a position variable for input,
  // initially pointing at the start of input.
  const position = { position: 0 }

  // 3. Let type be the result of collecting a sequence
  // of code points that are not U+002F (/) from
  // input, given position.
  const type = collectASequenceOfCodePointsFast(
    '/',
    input,
    position
  )

  // 4. If type is the empty string or does not solely
  // contain HTTP token code points, then return failure.
  // https://mimesniff.spec.whatwg.org/#http-token-code-point
  if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {
    return 'failure'
  }

  // 5. If position is past the end of input, then return
  // failure
  if (position.position > input.length) {
    return 'failure'
  }

  // 6. Advance position by 1. (This skips past U+002F (/).)
  position.position++

  // 7. Let subtype be the result of collecting a sequence of
  // code points that are not U+003B (;) from input, given
  // position.
  let subtype = collectASequenceOfCodePointsFast(
    ';',
    input,
    position
  )

  // 8. Remove any trailing HTTP whitespace from subtype.
  subtype = removeHTTPWhitespace(subtype, false, true)

  // 9. If subtype is the empty string or does not solely
  // contain HTTP token code points, then return failure.
  if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {
    return 'failure'
  }

  const typeLowercase = type.toLowerCase()
  const subtypeLowercase = subtype.toLowerCase()

  // 10. Let mimeType be a new MIME type record whose type
  // is type, in ASCII lowercase, and subtype is subtype,
  // in ASCII lowercase.
  // https://mimesniff.spec.whatwg.org/#mime-type
  const mimeType = {
    type: typeLowercase,
    subtype: subtypeLowercase,
    /** @type {Map<string, string>} */
    parameters: new Map(),
    // https://mimesniff.spec.whatwg.org/#mime-type-essence
    essence: `${typeLowercase}/${subtypeLowercase}`
  }

  // 11. While position is not past the end of input:
  while (position.position < input.length) {
    // 1. Advance position by 1. (This skips past U+003B (;).)
    position.position++

    // 2. Collect a sequence of code points that are HTTP
    // whitespace from input given position.
    collectASequenceOfCodePoints(
      // https://fetch.spec.whatwg.org/#http-whitespace
      char => HTTP_WHITESPACE_REGEX.test(char),
      input,
      position
    )

    // 3. Let parameterName be the result of collecting a
    // sequence of code points that are not U+003B (;)
    // or U+003D (=) from input, given position.
    let parameterName = collectASequenceOfCodePoints(
      (char) => char !== ';' && char !== '=',
      input,
      position
    )

    // 4. Set parameterName to parameterName, in ASCII
    // lowercase.
    parameterName = parameterName.toLowerCase()

    // 5. If position is not past the end of input, then:
    if (position.position < input.length) {
      // 1. If the code point at position within input is
      // U+003B (;), then continue.
      if (input[position.position] === ';') {
        continue
      }

      // 2. Advance position by 1. (This skips past U+003D (=).)
      position.position++
    }

    // 6. If position is past the end of input, then break.
    if (position.position > input.length) {
      break
    }

    // 7. Let parameterValue be null.
    let parameterValue = null

    // 8. If the code point at position within input is
    // U+0022 ("), then:
    if (input[position.position] === '"') {
      // 1. Set parameterValue to the result of collecting
      // an HTTP quoted string from input, given position
      // and the extract-value flag.
      parameterValue = collectAnHTTPQuotedString(input, position, true)

      // 2. Collect a sequence of code points that are not
      // U+003B (;) from input, given position.
      collectASequenceOfCodePointsFast(
        ';',
        input,
        position
      )

    // 9. Otherwise:
    } else {
      // 1. Set parameterValue to the result of collecting
      // a sequence of code points that are not U+003B (;)
      // from input, given position.
      parameterValue = collectASequenceOfCodePointsFast(
        ';',
        input,
        position
      )

      // 2. Remove any trailing HTTP whitespace from parameterValue.
      parameterValue = removeHTTPWhitespace(parameterValue, false, true)

      // 3. If parameterValue is the empty string, then continue.
      if (parameterValue.length === 0) {
        continue
      }
    }

    // 10. If all of the following are true
    // - parameterName is not the empty string
    // - parameterName solely contains HTTP token code points
    // - parameterValue solely contains HTTP quoted-string token code points
    // - mimeType’s parameters[parameterName] does not exist
    // then set mimeType’s parameters[parameterName] to parameterValue.
    if (
      parameterName.length !== 0 &&
      HTTP_TOKEN_CODEPOINTS.test(parameterName) &&
      (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) &&
      !mimeType.parameters.has(parameterName)
    ) {
      mimeType.parameters.set(parameterName, parameterValue)
    }
  }

  // 12. Return mimeType.
  return mimeType
}

// https://infra.spec.whatwg.org/#forgiving-base64-decode
/** @param {string} data */
function forgivingBase64 (data) {
  // 1. Remove all ASCII whitespace from data.
  data = data.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, '')  // eslint-disable-line

  // 2. If data’s code point length divides by 4 leaving
  // no remainder, then:
  if (data.length % 4 === 0) {
    // 1. If data ends with one or two U+003D (=) code points,
    // then remove them from data.
    data = data.replace(/=?=$/, '')
  }

  // 3. If data’s code point length divides by 4 leaving
  // a remainder of 1, then return failure.
  if (data.length % 4 === 1) {
    return 'failure'
  }

  // 4. If data contains a code point that is not one of
  //  U+002B (+)
  //  U+002F (/)
  //  ASCII alphanumeric
  // then return failure.
  if (/[^+/0-9A-Za-z]/.test(data)) {
    return 'failure'
  }

  const binary = atob(data)
  const bytes = new Uint8Array(binary.length)

  for (let byte = 0; byte < binary.length; byte++) {
    bytes[byte] = binary.charCodeAt(byte)
  }

  return bytes
}

// https://fetch.spec.whatwg.org/#collect-an-http-quoted-string
// tests: https://fetch.spec.whatwg.org/#example-http-quoted-string
/**
 * @param {string} input
 * @param {{ position: number }} position
 * @param {boolean?} extractValue
 */
function collectAnHTTPQuotedString (input, position, extractValue) {
  // 1. Let positionStart be position.
  const positionStart = position.position

  // 2. Let value be the empty string.
  let value = ''

  // 3. Assert: the code point at position within input
  // is U+0022 (").
  assert(input[position.position] === '"')

  // 4. Advance position by 1.
  position.position++

  // 5. While true:
  while (true) {
    // 1. Append the result of collecting a sequence of code points
    // that are not U+0022 (") or U+005C (\) from input, given
    // position, to value.
    value += collectASequenceOfCodePoints(
      (char) => char !== '"' && char !== '\\',
      input,
      position
    )

    // 2. If position is past the end of input, then break.
    if (position.position >= input.length) {
      break
    }

    // 3. Let quoteOrBackslash be the code point at position within
    // input.
    const quoteOrBackslash = input[position.position]

    // 4. Advance position by 1.
    position.position++

    // 5. If quoteOrBackslash is U+005C (\), then:
    if (quoteOrBackslash === '\\') {
      // 1. If position is past the end of input, then append
      // U+005C (\) to value and break.
      if (position.position >= input.length) {
        value += '\\'
        break
      }

      // 2. Append the code point at position within input to value.
      value += input[position.position]

      // 3. Advance position by 1.
      position.position++

    // 6. Otherwise:
    } else {
      // 1. Assert: quoteOrBackslash is U+0022 (").
      assert(quoteOrBackslash === '"')

      // 2. Break.
      break
    }
  }

  // 6. If the extract-value flag is set, then return value.
  if (extractValue) {
    return value
  }

  // 7. Return the code points from positionStart to position,
  // inclusive, within input.
  return input.slice(positionStart, position.position)
}

/**
 * @see https://mimesniff.spec.whatwg.org/#serialize-a-mime-type
 */
function serializeAMimeType (mimeType) {
  assert(mimeType !== 'failure')
  const { parameters, essence } = mimeType

  // 1. Let serialization be the concatenation of mimeType’s
  //    type, U+002F (/), and mimeType’s subtype.
  let serialization = essence

  // 2. For each name → value of mimeType’s parameters:
  for (let [name, value] of parameters.entries()) {
    // 1. Append U+003B (;) to serialization.
    serialization += ';'

    // 2. Append name to serialization.
    serialization += name

    // 3. Append U+003D (=) to serialization.
    serialization += '='

    // 4. If value does not solely contain HTTP token code
    //    points or value is the empty string, then:
    if (!HTTP_TOKEN_CODEPOINTS.test(value)) {
      // 1. Precede each occurence of U+0022 (") or
      //    U+005C (\) in value with U+005C (\).
      value = value.replace(/(\\|")/g, '\\$1')

      // 2. Prepend U+0022 (") to value.
      value = '"' + value

      // 3. Append U+0022 (") to value.
      value += '"'
    }

    // 5. Append value to serialization.
    serialization += value
  }

  // 3. Return serialization.
  return serialization
}

/**
 * @see https://fetch.spec.whatwg.org/#http-whitespace
 * @param {string} char
 */
function isHTTPWhiteSpace (char) {
  return char === '\r' || char === '\n' || char === '\t' || char === ' '
}

/**
 * @see https://fetch.spec.whatwg.org/#http-whitespace
 * @param {string} str
 */
function removeHTTPWhitespace (str, leading = true, trailing = true) {
  let lead = 0
  let trail = str.length - 1

  if (leading) {
    for (; lead < str.length && isHTTPWhiteSpace(str[lead]); lead++);
  }

  if (trailing) {
    for (; trail > 0 && isHTTPWhiteSpace(str[trail]); trail--);
  }

  return str.slice(lead, trail + 1)
}

/**
 * @see https://infra.spec.whatwg.org/#ascii-whitespace
 * @param {string} char
 */
function isASCIIWhitespace (char) {
  return char === '\r' || char === '\n' || char === '\t' || char === '\f' || char === ' '
}

/**
 * @see https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace
 */
function removeASCIIWhitespace (str, leading = true, trailing = true) {
  let lead = 0
  let trail = str.length - 1

  if (leading) {
    for (; lead < str.length && isASCIIWhitespace(str[lead]); lead++);
  }

  if (trailing) {
    for (; trail > 0 && isASCIIWhitespace(str[trail]); trail--);
  }

  return str.slice(lead, trail + 1)
}

module.exports = {
  dataURLProcessor,
  URLSerializer,
  collectASequenceOfCodePoints,
  collectASequenceOfCodePointsFast,
  stringPercentDecode,
  parseMIMEType,
  collectAnHTTPQuotedString,
  serializeAMimeType
}


/***/ }),

/***/ 8511:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { Blob, File: NativeFile } = __nccwpck_require__(4300)
const { types } = __nccwpck_require__(3837)
const { kState } = __nccwpck_require__(5861)
const { isBlobLike } = __nccwpck_require__(2538)
const { webidl } = __nccwpck_require__(1744)
const { parseMIMEType, serializeAMimeType } = __nccwpck_require__(685)
const { kEnumerableProperty } = __nccwpck_require__(3983)
const encoder = new TextEncoder()

class File extends Blob {
  constructor (fileBits, fileName, options = {}) {
    // The File constructor is invoked with two or three parameters, depending
    // on whether the optional dictionary parameter is used. When the File()
    // constructor is invoked, user agents must run the following steps:
    webidl.argumentLengthCheck(arguments, 2, { header: 'File constructor' })

    fileBits = webidl.converters['sequence<BlobPart>'](fileBits)
    fileName = webidl.converters.USVString(fileName)
    options = webidl.converters.FilePropertyBag(options)

    // 1. Let bytes be the result of processing blob parts given fileBits and
    // options.
    // Note: Blob handles this for us

    // 2. Let n be the fileName argument to the constructor.
    const n = fileName

    // 3. Process FilePropertyBag dictionary argument by running the following
    // substeps:

    //    1. If the type member is provided and is not the empty string, let t
    //    be set to the type dictionary member. If t contains any characters
    //    outside the range U+0020 to U+007E, then set t to the empty string
    //    and return from these substeps.
    //    2. Convert every character in t to ASCII lowercase.
    let t = options.type
    let d

    // eslint-disable-next-line no-labels
    substep: {
      if (t) {
        t = parseMIMEType(t)

        if (t === 'failure') {
          t = ''
          // eslint-disable-next-line no-labels
          break substep
        }

        t = serializeAMimeType(t).toLowerCase()
      }

      //    3. If the lastModified member is provided, let d be set to the
      //    lastModified dictionary member. If it is not provided, set d to the
      //    current date and time represented as the number of milliseconds since
      //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).
      d = options.lastModified
    }

    // 4. Return a new File object F such that:
    // F refers to the bytes byte sequence.
    // F.size is set to the number of total bytes in bytes.
    // F.name is set to n.
    // F.type is set to t.
    // F.lastModified is set to d.

    super(processBlobParts(fileBits, options), { type: t })
    this[kState] = {
      name: n,
      lastModified: d,
      type: t
    }
  }

  get name () {
    webidl.brandCheck(this, File)

    return this[kState].name
  }

  get lastModified () {
    webidl.brandCheck(this, File)

    return this[kState].lastModified
  }

  get type () {
    webidl.brandCheck(this, File)

    return this[kState].type
  }
}

class FileLike {
  constructor (blobLike, fileName, options = {}) {
    // TODO: argument idl type check

    // The File constructor is invoked with two or three parameters, depending
    // on whether the optional dictionary parameter is used. When the File()
    // constructor is invoked, user agents must run the following steps:

    // 1. Let bytes be the result of processing blob parts given fileBits and
    // options.

    // 2. Let n be the fileName argument to the constructor.
    const n = fileName

    // 3. Process FilePropertyBag dictionary argument by running the following
    // substeps:

    //    1. If the type member is provided and is not the empty string, let t
    //    be set to the type dictionary member. If t contains any characters
    //    outside the range U+0020 to U+007E, then set t to the empty string
    //    and return from these substeps.
    //    TODO
    const t = options.type

    //    2. Convert every character in t to ASCII lowercase.
    //    TODO

    //    3. If the lastModified member is provided, let d be set to the
    //    lastModified dictionary member. If it is not provided, set d to the
    //    current date and time represented as the number of milliseconds since
    //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).
    const d = options.lastModified ?? Date.now()

    // 4. Return a new File object F such that:
    // F refers to the bytes byte sequence.
    // F.size is set to the number of total bytes in bytes.
    // F.name is set to n.
    // F.type is set to t.
    // F.lastModified is set to d.

    this[kState] = {
      blobLike,
      name: n,
      type: t,
      lastModified: d
    }
  }

  stream (...args) {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.stream(...args)
  }

  arrayBuffer (...args) {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.arrayBuffer(...args)
  }

  slice (...args) {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.slice(...args)
  }

  text (...args) {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.text(...args)
  }

  get size () {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.size
  }

  get type () {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.type
  }

  get name () {
    webidl.brandCheck(this, FileLike)

    return this[kState].name
  }

  get lastModified () {
    webidl.brandCheck(this, FileLike)

    return this[kState].lastModified
  }

  get [Symbol.toStringTag] () {
    return 'File'
  }
}

Object.defineProperties(File.prototype, {
  [Symbol.toStringTag]: {
    value: 'File',
    configurable: true
  },
  name: kEnumerableProperty,
  lastModified: kEnumerableProperty
})

webidl.converters.Blob = webidl.interfaceConverter(Blob)

webidl.converters.BlobPart = function (V, opts) {
  if (webidl.util.Type(V) === 'Object') {
    if (isBlobLike(V)) {
      return webidl.converters.Blob(V, { strict: false })
    }

    if (
      ArrayBuffer.isView(V) ||
      types.isAnyArrayBuffer(V)
    ) {
      return webidl.converters.BufferSource(V, opts)
    }
  }

  return webidl.converters.USVString(V, opts)
}

webidl.converters['sequence<BlobPart>'] = webidl.sequenceConverter(
  webidl.converters.BlobPart
)

// https://www.w3.org/TR/FileAPI/#dfn-FilePropertyBag
webidl.converters.FilePropertyBag = webidl.dictionaryConverter([
  {
    key: 'lastModified',
    converter: webidl.converters['long long'],
    get defaultValue () {
      return Date.now()
    }
  },
  {
    key: 'type',
    converter: webidl.converters.DOMString,
    defaultValue: ''
  },
  {
    key: 'endings',
    converter: (value) => {
      value = webidl.converters.DOMString(value)
      value = value.toLowerCase()

      if (value !== 'native') {
        value = 'transparent'
      }

      return value
    },
    defaultValue: 'transparent'
  }
])

/**
 * @see https://www.w3.org/TR/FileAPI/#process-blob-parts
 * @param {(NodeJS.TypedArray|Blob|string)[]} parts
 * @param {{ type: string, endings: string }} options
 */
function processBlobParts (parts, options) {
  // 1. Let bytes be an empty sequence of bytes.
  /** @type {NodeJS.TypedArray[]} */
  const bytes = []

  // 2. For each element in parts:
  for (const element of parts) {
    // 1. If element is a USVString, run the following substeps:
    if (typeof element === 'string') {
      // 1. Let s be element.
      let s = element

      // 2. If the endings member of options is "native", set s
      //    to the result of converting line endings to native
      //    of element.
      if (options.endings === 'native') {
        s = convertLineEndingsNative(s)
      }

      // 3. Append the result of UTF-8 encoding s to bytes.
      bytes.push(encoder.encode(s))
    } else if (
      types.isAnyArrayBuffer(element) ||
      types.isTypedArray(element)
    ) {
      // 2. If element is a BufferSource, get a copy of the
      //    bytes held by the buffer source, and append those
      //    bytes to bytes.
      if (!element.buffer) { // ArrayBuffer
        bytes.push(new Uint8Array(element))
      } else {
        bytes.push(
          new Uint8Array(element.buffer, element.byteOffset, element.byteLength)
        )
      }
    } else if (isBlobLike(element)) {
      // 3. If element is a Blob, append the bytes it represents
      //    to bytes.
      bytes.push(element)
    }
  }

  // 3. Return bytes.
  return bytes
}

/**
 * @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native
 * @param {string} s
 */
function convertLineEndingsNative (s) {
  // 1. Let native line ending be be the code point U+000A LF.
  let nativeLineEnding = '\n'

  // 2. If the underlying platform’s conventions are to
  //    represent newlines as a carriage return and line feed
  //    sequence, set native line ending to the code point
  //    U+000D CR followed by the code point U+000A LF.
  if (process.platform === 'win32') {
    nativeLineEnding = '\r\n'
  }

  return s.replace(/\r?\n/g, nativeLineEnding)
}

// If this function is moved to ./util.js, some tools (such as
// rollup) will warn about circular dependencies. See:
// https://github.com/nodejs/undici/issues/1629
function isFileLike (object) {
  return (
    (NativeFile && object instanceof NativeFile) ||
    object instanceof File || (
      object &&
      (typeof object.stream === 'function' ||
      typeof object.arrayBuffer === 'function') &&
      object[Symbol.toStringTag] === 'File'
    )
  )
}

module.exports = { File, FileLike, isFileLike }


/***/ }),

/***/ 2015:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { isBlobLike, toUSVString, makeIterator } = __nccwpck_require__(2538)
const { kState } = __nccwpck_require__(5861)
const { File: UndiciFile, FileLike, isFileLike } = __nccwpck_require__(8511)
const { webidl } = __nccwpck_require__(1744)
const { Blob, File: NativeFile } = __nccwpck_require__(4300)

/** @type {globalThis['File']} */
const File = NativeFile ?? UndiciFile

// https://xhr.spec.whatwg.org/#formdata
class FormData {
  constructor (form) {
    if (form !== undefined) {
      throw webidl.errors.conversionFailed({
        prefix: 'FormData constructor',
        argument: 'Argument 1',
        types: ['undefined']
      })
    }

    this[kState] = []
  }

  append (name, value, filename = undefined) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 2, { header: 'FormData.append' })

    if (arguments.length === 3 && !isBlobLike(value)) {
      throw new TypeError(
        "Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'"
      )
    }

    // 1. Let value be value if given; otherwise blobValue.

    name = webidl.converters.USVString(name)
    value = isBlobLike(value)
      ? webidl.converters.Blob(value, { strict: false })
      : webidl.converters.USVString(value)
    filename = arguments.length === 3
      ? webidl.converters.USVString(filename)
      : undefined

    // 2. Let entry be the result of creating an entry with
    // name, value, and filename if given.
    const entry = makeEntry(name, value, filename)

    // 3. Append entry to this’s entry list.
    this[kState].push(entry)
  }

  delete (name) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.delete' })

    name = webidl.converters.USVString(name)

    // The delete(name) method steps are to remove all entries whose name
    // is name from this’s entry list.
    this[kState] = this[kState].filter(entry => entry.name !== name)
  }

  get (name) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.get' })

    name = webidl.converters.USVString(name)

    // 1. If there is no entry whose name is name in this’s entry list,
    // then return null.
    const idx = this[kState].findIndex((entry) => entry.name === name)
    if (idx === -1) {
      return null
    }

    // 2. Return the value of the first entry whose name is name from
    // this’s entry list.
    return this[kState][idx].value
  }

  getAll (name) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.getAll' })

    name = webidl.converters.USVString(name)

    // 1. If there is no entry whose name is name in this’s entry list,
    // then return the empty list.
    // 2. Return the values of all entries whose name is name, in order,
    // from this’s entry list.
    return this[kState]
      .filter((entry) => entry.name === name)
      .map((entry) => entry.value)
  }

  has (name) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.has' })

    name = webidl.converters.USVString(name)

    // The has(name) method steps are to return true if there is an entry
    // whose name is name in this’s entry list; otherwise false.
    return this[kState].findIndex((entry) => entry.name === name) !== -1
  }

  set (name, value, filename = undefined) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 2, { header: 'FormData.set' })

    if (arguments.length === 3 && !isBlobLike(value)) {
      throw new TypeError(
        "Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'"
      )
    }

    // The set(name, value) and set(name, blobValue, filename) method steps
    // are:

    // 1. Let value be value if given; otherwise blobValue.

    name = webidl.converters.USVString(name)
    value = isBlobLike(value)
      ? webidl.converters.Blob(value, { strict: false })
      : webidl.converters.USVString(value)
    filename = arguments.length === 3
      ? toUSVString(filename)
      : undefined

    // 2. Let entry be the result of creating an entry with name, value, and
    // filename if given.
    const entry = makeEntry(name, value, filename)

    // 3. If there are entries in this’s entry list whose name is name, then
    // replace the first such entry with entry and remove the others.
    const idx = this[kState].findIndex((entry) => entry.name === name)
    if (idx !== -1) {
      this[kState] = [
        ...this[kState].slice(0, idx),
        entry,
        ...this[kState].slice(idx + 1).filter((entry) => entry.name !== name)
      ]
    } else {
      // 4. Otherwise, append entry to this’s entry list.
      this[kState].push(entry)
    }
  }

  entries () {
    webidl.brandCheck(this, FormData)

    return makeIterator(
      () => this[kState].map(pair => [pair.name, pair.value]),
      'FormData',
      'key+value'
    )
  }

  keys () {
    webidl.brandCheck(this, FormData)

    return makeIterator(
      () => this[kState].map(pair => [pair.name, pair.value]),
      'FormData',
      'key'
    )
  }

  values () {
    webidl.brandCheck(this, FormData)

    return makeIterator(
      () => this[kState].map(pair => [pair.name, pair.value]),
      'FormData',
      'value'
    )
  }

  /**
   * @param {(value: string, key: string, self: FormData) => void} callbackFn
   * @param {unknown} thisArg
   */
  forEach (callbackFn, thisArg = globalThis) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.forEach' })

    if (typeof callbackFn !== 'function') {
      throw new TypeError(
        "Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'."
      )
    }

    for (const [key, value] of this) {
      callbackFn.apply(thisArg, [value, key, this])
    }
  }
}

FormData.prototype[Symbol.iterator] = FormData.prototype.entries

Object.defineProperties(FormData.prototype, {
  [Symbol.toStringTag]: {
    value: 'FormData',
    configurable: true
  }
})

/**
 * @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry
 * @param {string} name
 * @param {string|Blob} value
 * @param {?string} filename
 * @returns
 */
function makeEntry (name, value, filename) {
  // 1. Set name to the result of converting name into a scalar value string.
  // "To convert a string into a scalar value string, replace any surrogates
  //  with U+FFFD."
  // see: https://nodejs.org/dist/latest-v18.x/docs/api/buffer.html#buftostringencoding-start-end
  name = Buffer.from(name).toString('utf8')

  // 2. If value is a string, then set value to the result of converting
  //    value into a scalar value string.
  if (typeof value === 'string') {
    value = Buffer.from(value).toString('utf8')
  } else {
    // 3. Otherwise:

    // 1. If value is not a File object, then set value to a new File object,
    //    representing the same bytes, whose name attribute value is "blob"
    if (!isFileLike(value)) {
      value = value instanceof Blob
        ? new File([value], 'blob', { type: value.type })
        : new FileLike(value, 'blob', { type: value.type })
    }

    // 2. If filename is given, then set value to a new File object,
    //    representing the same bytes, whose name attribute is filename.
    if (filename !== undefined) {
      /** @type {FilePropertyBag} */
      const options = {
        type: value.type,
        lastModified: value.lastModified
      }

      value = (NativeFile && value instanceof NativeFile) || value instanceof UndiciFile
        ? new File([value], filename, options)
        : new FileLike(value, filename, options)
    }
  }

  // 4. Return an entry whose name is name and whose value is value.
  return { name, value }
}

module.exports = { FormData }


/***/ }),

/***/ 1246:
/***/ ((module) => {

"use strict";


// In case of breaking changes, increase the version
// number to avoid conflicts.
const globalOrigin = Symbol.for('undici.globalOrigin.1')

function getGlobalOrigin () {
  return globalThis[globalOrigin]
}

function setGlobalOrigin (newOrigin) {
  if (newOrigin === undefined) {
    Object.defineProperty(globalThis, globalOrigin, {
      value: undefined,
      writable: true,
      enumerable: false,
      configurable: false
    })

    return
  }

  const parsedURL = new URL(newOrigin)

  if (parsedURL.protocol !== 'http:' && parsedURL.protocol !== 'https:') {
    throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`)
  }

  Object.defineProperty(globalThis, globalOrigin, {
    value: parsedURL,
    writable: true,
    enumerable: false,
    configurable: false
  })
}

module.exports = {
  getGlobalOrigin,
  setGlobalOrigin
}


/***/ }),

/***/ 554:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
// https://github.com/Ethan-Arrowood/undici-fetch



const { kHeadersList, kConstruct } = __nccwpck_require__(2785)
const { kGuard } = __nccwpck_require__(5861)
const { kEnumerableProperty } = __nccwpck_require__(3983)
const {
  makeIterator,
  isValidHeaderName,
  isValidHeaderValue
} = __nccwpck_require__(2538)
const { webidl } = __nccwpck_require__(1744)
const assert = __nccwpck_require__(9491)

const kHeadersMap = Symbol('headers map')
const kHeadersSortedMap = Symbol('headers map sorted')

/**
 * @param {number} code
 */
function isHTTPWhiteSpaceCharCode (code) {
  return code === 0x00a || code === 0x00d || code === 0x009 || code === 0x020
}

/**
 * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize
 * @param {string} potentialValue
 */
function headerValueNormalize (potentialValue) {
  //  To normalize a byte sequence potentialValue, remove
  //  any leading and trailing HTTP whitespace bytes from
  //  potentialValue.
  let i = 0; let j = potentialValue.length

  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1))) --j
  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i))) ++i

  return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j)
}

function fill (headers, object) {
  // To fill a Headers object headers with a given object object, run these steps:

  // 1. If object is a sequence, then for each header in object:
  // Note: webidl conversion to array has already been done.
  if (Array.isArray(object)) {
    for (let i = 0; i < object.length; ++i) {
      const header = object[i]
      // 1. If header does not contain exactly two items, then throw a TypeError.
      if (header.length !== 2) {
        throw webidl.errors.exception({
          header: 'Headers constructor',
          message: `expected name/value pair to be length 2, found ${header.length}.`
        })
      }

      // 2. Append (header’s first item, header’s second item) to headers.
      appendHeader(headers, header[0], header[1])
    }
  } else if (typeof object === 'object' && object !== null) {
    // Note: null should throw

    // 2. Otherwise, object is a record, then for each key → value in object,
    //    append (key, value) to headers
    const keys = Object.keys(object)
    for (let i = 0; i < keys.length; ++i) {
      appendHeader(headers, keys[i], object[keys[i]])
    }
  } else {
    throw webidl.errors.conversionFailed({
      prefix: 'Headers constructor',
      argument: 'Argument 1',
      types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']
    })
  }
}

/**
 * @see https://fetch.spec.whatwg.org/#concept-headers-append
 */
function appendHeader (headers, name, value) {
  // 1. Normalize value.
  value = headerValueNormalize(value)

  // 2. If name is not a header name or value is not a
  //    header value, then throw a TypeError.
  if (!isValidHeaderName(name)) {
    throw webidl.errors.invalidArgument({
      prefix: 'Headers.append',
      value: name,
      type: 'header name'
    })
  } else if (!isValidHeaderValue(value)) {
    throw webidl.errors.invalidArgument({
      prefix: 'Headers.append',
      value,
      type: 'header value'
    })
  }

  // 3. If headers’s guard is "immutable", then throw a TypeError.
  // 4. Otherwise, if headers’s guard is "request" and name is a
  //    forbidden header name, return.
  // Note: undici does not implement forbidden header names
  if (headers[kGuard] === 'immutable') {
    throw new TypeError('immutable')
  } else if (headers[kGuard] === 'request-no-cors') {
    // 5. Otherwise, if headers’s guard is "request-no-cors":
    // TODO
  }

  // 6. Otherwise, if headers’s guard is "response" and name is a
  //    forbidden response-header name, return.

  // 7. Append (name, value) to headers’s header list.
  return headers[kHeadersList].append(name, value)

  // 8. If headers’s guard is "request-no-cors", then remove
  //    privileged no-CORS request headers from headers
}

class HeadersList {
  /** @type {[string, string][]|null} */
  cookies = null

  constructor (init) {
    if (init instanceof HeadersList) {
      this[kHeadersMap] = new Map(init[kHeadersMap])
      this[kHeadersSortedMap] = init[kHeadersSortedMap]
      this.cookies = init.cookies === null ? null : [...init.cookies]
    } else {
      this[kHeadersMap] = new Map(init)
      this[kHeadersSortedMap] = null
    }
  }

  // https://fetch.spec.whatwg.org/#header-list-contains
  contains (name) {
    // A header list list contains a header name name if list
    // contains a header whose name is a byte-case-insensitive
    // match for name.
    name = name.toLowerCase()

    return this[kHeadersMap].has(name)
  }

  clear () {
    this[kHeadersMap].clear()
    this[kHeadersSortedMap] = null
    this.cookies = null
  }

  // https://fetch.spec.whatwg.org/#concept-header-list-append
  append (name, value) {
    this[kHeadersSortedMap] = null

    // 1. If list contains name, then set name to the first such
    //    header’s name.
    const lowercaseName = name.toLowerCase()
    const exists = this[kHeadersMap].get(lowercaseName)

    // 2. Append (name, value) to list.
    if (exists) {
      const delimiter = lowercaseName === 'cookie' ? '; ' : ', '
      this[kHeadersMap].set(lowercaseName, {
        name: exists.name,
        value: `${exists.value}${delimiter}${value}`
      })
    } else {
      this[kHeadersMap].set(lowercaseName, { name, value })
    }

    if (lowercaseName === 'set-cookie') {
      this.cookies ??= []
      this.cookies.push(value)
    }
  }

  // https://fetch.spec.whatwg.org/#concept-header-list-set
  set (name, value) {
    this[kHeadersSortedMap] = null
    const lowercaseName = name.toLowerCase()

    if (lowercaseName === 'set-cookie') {
      this.cookies = [value]
    }

    // 1. If list contains name, then set the value of
    //    the first such header to value and remove the
    //    others.
    // 2. Otherwise, append header (name, value) to list.
    this[kHeadersMap].set(lowercaseName, { name, value })
  }

  // https://fetch.spec.whatwg.org/#concept-header-list-delete
  delete (name) {
    this[kHeadersSortedMap] = null

    name = name.toLowerCase()

    if (name === 'set-cookie') {
      this.cookies = null
    }

    this[kHeadersMap].delete(name)
  }

  // https://fetch.spec.whatwg.org/#concept-header-list-get
  get (name) {
    const value = this[kHeadersMap].get(name.toLowerCase())

    // 1. If list does not contain name, then return null.
    // 2. Return the values of all headers in list whose name
    //    is a byte-case-insensitive match for name,
    //    separated from each other by 0x2C 0x20, in order.
    return value === undefined ? null : value.value
  }

  * [Symbol.iterator] () {
    // use the lowercased name
    for (const [name, { value }] of this[kHeadersMap]) {
      yield [name, value]
    }
  }

  get entries () {
    const headers = {}

    if (this[kHeadersMap].size) {
      for (const { name, value } of this[kHeadersMap].values()) {
        headers[name] = value
      }
    }

    return headers
  }
}

// https://fetch.spec.whatwg.org/#headers-class
class Headers {
  constructor (init = undefined) {
    if (init === kConstruct) {
      return
    }
    this[kHeadersList] = new HeadersList()

    // The new Headers(init) constructor steps are:

    // 1. Set this’s guard to "none".
    this[kGuard] = 'none'

    // 2. If init is given, then fill this with init.
    if (init !== undefined) {
      init = webidl.converters.HeadersInit(init)
      fill(this, init)
    }
  }

  // https://fetch.spec.whatwg.org/#dom-headers-append
  append (name, value) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 2, { header: 'Headers.append' })

    name = webidl.converters.ByteString(name)
    value = webidl.converters.ByteString(value)

    return appendHeader(this, name, value)
  }

  // https://fetch.spec.whatwg.org/#dom-headers-delete
  delete (name) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.delete' })

    name = webidl.converters.ByteString(name)

    // 1. If name is not a header name, then throw a TypeError.
    if (!isValidHeaderName(name)) {
      throw webidl.errors.invalidArgument({
        prefix: 'Headers.delete',
        value: name,
        type: 'header name'
      })
    }

    // 2. If this’s guard is "immutable", then throw a TypeError.
    // 3. Otherwise, if this’s guard is "request" and name is a
    //    forbidden header name, return.
    // 4. Otherwise, if this’s guard is "request-no-cors", name
    //    is not a no-CORS-safelisted request-header name, and
    //    name is not a privileged no-CORS request-header name,
    //    return.
    // 5. Otherwise, if this’s guard is "response" and name is
    //    a forbidden response-header name, return.
    // Note: undici does not implement forbidden header names
    if (this[kGuard] === 'immutable') {
      throw new TypeError('immutable')
    } else if (this[kGuard] === 'request-no-cors') {
      // TODO
    }

    // 6. If this’s header list does not contain name, then
    //    return.
    if (!this[kHeadersList].contains(name)) {
      return
    }

    // 7. Delete name from this’s header list.
    // 8. If this’s guard is "request-no-cors", then remove
    //    privileged no-CORS request headers from this.
    this[kHeadersList].delete(name)
  }

  // https://fetch.spec.whatwg.org/#dom-headers-get
  get (name) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.get' })

    name = webidl.converters.ByteString(name)

    // 1. If name is not a header name, then throw a TypeError.
    if (!isValidHeaderName(name)) {
      throw webidl.errors.invalidArgument({
        prefix: 'Headers.get',
        value: name,
        type: 'header name'
      })
    }

    // 2. Return the result of getting name from this’s header
    //    list.
    return this[kHeadersList].get(name)
  }

  // https://fetch.spec.whatwg.org/#dom-headers-has
  has (name) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.has' })

    name = webidl.converters.ByteString(name)

    // 1. If name is not a header name, then throw a TypeError.
    if (!isValidHeaderName(name)) {
      throw webidl.errors.invalidArgument({
        prefix: 'Headers.has',
        value: name,
        type: 'header name'
      })
    }

    // 2. Return true if this’s header list contains name;
    //    otherwise false.
    return this[kHeadersList].contains(name)
  }

  // https://fetch.spec.whatwg.org/#dom-headers-set
  set (name, value) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 2, { header: 'Headers.set' })

    name = webidl.converters.ByteString(name)
    value = webidl.converters.ByteString(value)

    // 1. Normalize value.
    value = headerValueNormalize(value)

    // 2. If name is not a header name or value is not a
    //    header value, then throw a TypeError.
    if (!isValidHeaderName(name)) {
      throw webidl.errors.invalidArgument({
        prefix: 'Headers.set',
        value: name,
        type: 'header name'
      })
    } else if (!isValidHeaderValue(value)) {
      throw webidl.errors.invalidArgument({
        prefix: 'Headers.set',
        value,
        type: 'header value'
      })
    }

    // 3. If this’s guard is "immutable", then throw a TypeError.
    // 4. Otherwise, if this’s guard is "request" and name is a
    //    forbidden header name, return.
    // 5. Otherwise, if this’s guard is "request-no-cors" and
    //    name/value is not a no-CORS-safelisted request-header,
    //    return.
    // 6. Otherwise, if this’s guard is "response" and name is a
    //    forbidden response-header name, return.
    // Note: undici does not implement forbidden header names
    if (this[kGuard] === 'immutable') {
      throw new TypeError('immutable')
    } else if (this[kGuard] === 'request-no-cors') {
      // TODO
    }

    // 7. Set (name, value) in this’s header list.
    // 8. If this’s guard is "request-no-cors", then remove
    //    privileged no-CORS request headers from this
    this[kHeadersList].set(name, value)
  }

  // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie
  getSetCookie () {
    webidl.brandCheck(this, Headers)

    // 1. If this’s header list does not contain `Set-Cookie`, then return « ».
    // 2. Return the values of all headers in this’s header list whose name is
    //    a byte-case-insensitive match for `Set-Cookie`, in order.

    const list = this[kHeadersList].cookies

    if (list) {
      return [...list]
    }

    return []
  }

  // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine
  get [kHeadersSortedMap] () {
    if (this[kHeadersList][kHeadersSortedMap]) {
      return this[kHeadersList][kHeadersSortedMap]
    }

    // 1. Let headers be an empty list of headers with the key being the name
    //    and value the value.
    const headers = []

    // 2. Let names be the result of convert header names to a sorted-lowercase
    //    set with all the names of the headers in list.
    const names = [...this[kHeadersList]].sort((a, b) => a[0] < b[0] ? -1 : 1)
    const cookies = this[kHeadersList].cookies

    // 3. For each name of names:
    for (let i = 0; i < names.length; ++i) {
      const [name, value] = names[i]
      // 1. If name is `set-cookie`, then:
      if (name === 'set-cookie') {
        // 1. Let values be a list of all values of headers in list whose name
        //    is a byte-case-insensitive match for name, in order.

        // 2. For each value of values:
        // 1. Append (name, value) to headers.
        for (let j = 0; j < cookies.length; ++j) {
          headers.push([name, cookies[j]])
        }
      } else {
        // 2. Otherwise:

        // 1. Let value be the result of getting name from list.

        // 2. Assert: value is non-null.
        assert(value !== null)

        // 3. Append (name, value) to headers.
        headers.push([name, value])
      }
    }

    this[kHeadersList][kHeadersSortedMap] = headers

    // 4. Return headers.
    return headers
  }

  keys () {
    webidl.brandCheck(this, Headers)

    if (this[kGuard] === 'immutable') {
      const value = this[kHeadersSortedMap]
      return makeIterator(() => value, 'Headers',
        'key')
    }

    return makeIterator(
      () => [...this[kHeadersSortedMap].values()],
      'Headers',
      'key'
    )
  }

  values () {
    webidl.brandCheck(this, Headers)

    if (this[kGuard] === 'immutable') {
      const value = this[kHeadersSortedMap]
      return makeIterator(() => value, 'Headers',
        'value')
    }

    return makeIterator(
      () => [...this[kHeadersSortedMap].values()],
      'Headers',
      'value'
    )
  }

  entries () {
    webidl.brandCheck(this, Headers)

    if (this[kGuard] === 'immutable') {
      const value = this[kHeadersSortedMap]
      return makeIterator(() => value, 'Headers',
        'key+value')
    }

    return makeIterator(
      () => [...this[kHeadersSortedMap].values()],
      'Headers',
      'key+value'
    )
  }

  /**
   * @param {(value: string, key: string, self: Headers) => void} callbackFn
   * @param {unknown} thisArg
   */
  forEach (callbackFn, thisArg = globalThis) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.forEach' })

    if (typeof callbackFn !== 'function') {
      throw new TypeError(
        "Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'."
      )
    }

    for (const [key, value] of this) {
      callbackFn.apply(thisArg, [value, key, this])
    }
  }

  [Symbol.for('nodejs.util.inspect.custom')] () {
    webidl.brandCheck(this, Headers)

    return this[kHeadersList]
  }
}

Headers.prototype[Symbol.iterator] = Headers.prototype.entries

Object.defineProperties(Headers.prototype, {
  append: kEnumerableProperty,
  delete: kEnumerableProperty,
  get: kEnumerableProperty,
  has: kEnumerableProperty,
  set: kEnumerableProperty,
  getSetCookie: kEnumerableProperty,
  keys: kEnumerableProperty,
  values: kEnumerableProperty,
  entries: kEnumerableProperty,
  forEach: kEnumerableProperty,
  [Symbol.iterator]: { enumerable: false },
  [Symbol.toStringTag]: {
    value: 'Headers',
    configurable: true
  }
})

webidl.converters.HeadersInit = function (V) {
  if (webidl.util.Type(V) === 'Object') {
    if (V[Symbol.iterator]) {
      return webidl.converters['sequence<sequence<ByteString>>'](V)
    }

    return webidl.converters['record<ByteString, ByteString>'](V)
  }

  throw webidl.errors.conversionFailed({
    prefix: 'Headers constructor',
    argument: 'Argument 1',
    types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']
  })
}

module.exports = {
  fill,
  Headers,
  HeadersList
}


/***/ }),

/***/ 4881:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
// https://github.com/Ethan-Arrowood/undici-fetch



const {
  Response,
  makeNetworkError,
  makeAppropriateNetworkError,
  filterResponse,
  makeResponse
} = __nccwpck_require__(7823)
const { Headers } = __nccwpck_require__(554)
const { Request, makeRequest } = __nccwpck_require__(8359)
const zlib = __nccwpck_require__(9796)
const {
  bytesMatch,
  makePolicyContainer,
  clonePolicyContainer,
  requestBadPort,
  TAOCheck,
  appendRequestOriginHeader,
  responseLocationURL,
  requestCurrentURL,
  setRequestReferrerPolicyOnRedirect,
  tryUpgradeRequestToAPotentiallyTrustworthyURL,
  createOpaqueTimingInfo,
  appendFetchMetadata,
  corsCheck,
  crossOriginResourcePolicyCheck,
  determineRequestsReferrer,
  coarsenedSharedCurrentTime,
  createDeferredPromise,
  isBlobLike,
  sameOrigin,
  isCancelled,
  isAborted,
  isErrorLike,
  fullyReadBody,
  readableStreamClose,
  isomorphicEncode,
  urlIsLocal,
  urlIsHttpHttpsScheme,
  urlHasHttpsScheme
} = __nccwpck_require__(2538)
const { kState, kHeaders, kGuard, kRealm } = __nccwpck_require__(5861)
const assert = __nccwpck_require__(9491)
const { safelyExtractBody } = __nccwpck_require__(1472)
const {
  redirectStatusSet,
  nullBodyStatus,
  safeMethodsSet,
  requestBodyHeader,
  subresourceSet,
  DOMException
} = __nccwpck_require__(1037)
const { kHeadersList } = __nccwpck_require__(2785)
const EE = __nccwpck_require__(2361)
const { Readable, pipeline } = __nccwpck_require__(2781)
const { addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor } = __nccwpck_require__(3983)
const { dataURLProcessor, serializeAMimeType } = __nccwpck_require__(685)
const { TransformStream } = __nccwpck_require__(5356)
const { getGlobalDispatcher } = __nccwpck_require__(1892)
const { webidl } = __nccwpck_require__(1744)
const { STATUS_CODES } = __nccwpck_require__(3685)
const GET_OR_HEAD = ['GET', 'HEAD']

/** @type {import('buffer').resolveObjectURL} */
let resolveObjectURL
let ReadableStream = globalThis.ReadableStream

class Fetch extends EE {
  constructor (dispatcher) {
    super()

    this.dispatcher = dispatcher
    this.connection = null
    this.dump = false
    this.state = 'ongoing'
    // 2 terminated listeners get added per request,
    // but only 1 gets removed. If there are 20 redirects,
    // 21 listeners will be added.
    // See https://github.com/nodejs/undici/issues/1711
    // TODO (fix): Find and fix root cause for leaked listener.
    this.setMaxListeners(21)
  }

  terminate (reason) {
    if (this.state !== 'ongoing') {
      return
    }

    this.state = 'terminated'
    this.connection?.destroy(reason)
    this.emit('terminated', reason)
  }

  // https://fetch.spec.whatwg.org/#fetch-controller-abort
  abort (error) {
    if (this.state !== 'ongoing') {
      return
    }

    // 1. Set controller’s state to "aborted".
    this.state = 'aborted'

    // 2. Let fallbackError be an "AbortError" DOMException.
    // 3. Set error to fallbackError if it is not given.
    if (!error) {
      error = new DOMException('The operation was aborted.', 'AbortError')
    }

    // 4. Let serializedError be StructuredSerialize(error).
    //    If that threw an exception, catch it, and let
    //    serializedError be StructuredSerialize(fallbackError).

    // 5. Set controller’s serialized abort reason to serializedError.
    this.serializedAbortReason = error

    this.connection?.destroy(error)
    this.emit('terminated', error)
  }
}

// https://fetch.spec.whatwg.org/#fetch-method
function fetch (input, init = {}) {
  webidl.argumentLengthCheck(arguments, 1, { header: 'globalThis.fetch' })

  // 1. Let p be a new promise.
  const p = createDeferredPromise()

  // 2. Let requestObject be the result of invoking the initial value of
  // Request as constructor with input and init as arguments. If this throws
  // an exception, reject p with it and return p.
  let requestObject

  try {
    requestObject = new Request(input, init)
  } catch (e) {
    p.reject(e)
    return p.promise
  }

  // 3. Let request be requestObject’s request.
  const request = requestObject[kState]

  // 4. If requestObject’s signal’s aborted flag is set, then:
  if (requestObject.signal.aborted) {
    // 1. Abort the fetch() call with p, request, null, and
    //    requestObject’s signal’s abort reason.
    abortFetch(p, request, null, requestObject.signal.reason)

    // 2. Return p.
    return p.promise
  }

  // 5. Let globalObject be request’s client’s global object.
  const globalObject = request.client.globalObject

  // 6. If globalObject is a ServiceWorkerGlobalScope object, then set
  // request’s service-workers mode to "none".
  if (globalObject?.constructor?.name === 'ServiceWorkerGlobalScope') {
    request.serviceWorkers = 'none'
  }

  // 7. Let responseObject be null.
  let responseObject = null

  // 8. Let relevantRealm be this’s relevant Realm.
  const relevantRealm = null

  // 9. Let locallyAborted be false.
  let locallyAborted = false

  // 10. Let controller be null.
  let controller = null

  // 11. Add the following abort steps to requestObject’s signal:
  addAbortListener(
    requestObject.signal,
    () => {
      // 1. Set locallyAborted to true.
      locallyAborted = true

      // 2. Assert: controller is non-null.
      assert(controller != null)

      // 3. Abort controller with requestObject’s signal’s abort reason.
      controller.abort(requestObject.signal.reason)

      // 4. Abort the fetch() call with p, request, responseObject,
      //    and requestObject’s signal’s abort reason.
      abortFetch(p, request, responseObject, requestObject.signal.reason)
    }
  )

  // 12. Let handleFetchDone given response response be to finalize and
  // report timing with response, globalObject, and "fetch".
  const handleFetchDone = (response) =>
    finalizeAndReportTiming(response, 'fetch')

  // 13. Set controller to the result of calling fetch given request,
  // with processResponseEndOfBody set to handleFetchDone, and processResponse
  // given response being these substeps:

  const processResponse = (response) => {
    // 1. If locallyAborted is true, terminate these substeps.
    if (locallyAborted) {
      return Promise.resolve()
    }

    // 2. If response’s aborted flag is set, then:
    if (response.aborted) {
      // 1. Let deserializedError be the result of deserialize a serialized
      //    abort reason given controller’s serialized abort reason and
      //    relevantRealm.

      // 2. Abort the fetch() call with p, request, responseObject, and
      //    deserializedError.

      abortFetch(p, request, responseObject, controller.serializedAbortReason)
      return Promise.resolve()
    }

    // 3. If response is a network error, then reject p with a TypeError
    // and terminate these substeps.
    if (response.type === 'error') {
      p.reject(
        Object.assign(new TypeError('fetch failed'), { cause: response.error })
      )
      return Promise.resolve()
    }

    // 4. Set responseObject to the result of creating a Response object,
    // given response, "immutable", and relevantRealm.
    responseObject = new Response()
    responseObject[kState] = response
    responseObject[kRealm] = relevantRealm
    responseObject[kHeaders][kHeadersList] = response.headersList
    responseObject[kHeaders][kGuard] = 'immutable'
    responseObject[kHeaders][kRealm] = relevantRealm

    // 5. Resolve p with responseObject.
    p.resolve(responseObject)
  }

  controller = fetching({
    request,
    processResponseEndOfBody: handleFetchDone,
    processResponse,
    dispatcher: init.dispatcher ?? getGlobalDispatcher() // undici
  })

  // 14. Return p.
  return p.promise
}

// https://fetch.spec.whatwg.org/#finalize-and-report-timing
function finalizeAndReportTiming (response, initiatorType = 'other') {
  // 1. If response is an aborted network error, then return.
  if (response.type === 'error' && response.aborted) {
    return
  }

  // 2. If response’s URL list is null or empty, then return.
  if (!response.urlList?.length) {
    return
  }

  // 3. Let originalURL be response’s URL list[0].
  const originalURL = response.urlList[0]

  // 4. Let timingInfo be response’s timing info.
  let timingInfo = response.timingInfo

  // 5. Let cacheState be response’s cache state.
  let cacheState = response.cacheState

  // 6. If originalURL’s scheme is not an HTTP(S) scheme, then return.
  if (!urlIsHttpHttpsScheme(originalURL)) {
    return
  }

  // 7. If timingInfo is null, then return.
  if (timingInfo === null) {
    return
  }

  // 8. If response’s timing allow passed flag is not set, then:
  if (!response.timingAllowPassed) {
    //  1. Set timingInfo to a the result of creating an opaque timing info for timingInfo.
    timingInfo = createOpaqueTimingInfo({
      startTime: timingInfo.startTime
    })

    //  2. Set cacheState to the empty string.
    cacheState = ''
  }

  // 9. Set timingInfo’s end time to the coarsened shared current time
  // given global’s relevant settings object’s cross-origin isolated
  // capability.
  // TODO: given global’s relevant settings object’s cross-origin isolated
  // capability?
  timingInfo.endTime = coarsenedSharedCurrentTime()

  // 10. Set response’s timing info to timingInfo.
  response.timingInfo = timingInfo

  // 11. Mark resource timing for timingInfo, originalURL, initiatorType,
  // global, and cacheState.
  markResourceTiming(
    timingInfo,
    originalURL,
    initiatorType,
    globalThis,
    cacheState
  )
}

// https://w3c.github.io/resource-timing/#dfn-mark-resource-timing
function markResourceTiming (timingInfo, originalURL, initiatorType, globalThis, cacheState) {
  if (nodeMajor > 18 || (nodeMajor === 18 && nodeMinor >= 2)) {
    performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis, cacheState)
  }
}

// https://fetch.spec.whatwg.org/#abort-fetch
function abortFetch (p, request, responseObject, error) {
  // Note: AbortSignal.reason was added in node v17.2.0
  // which would give us an undefined error to reject with.
  // Remove this once node v16 is no longer supported.
  if (!error) {
    error = new DOMException('The operation was aborted.', 'AbortError')
  }

  // 1. Reject promise with error.
  p.reject(error)

  // 2. If request’s body is not null and is readable, then cancel request’s
  // body with error.
  if (request.body != null && isReadable(request.body?.stream)) {
    request.body.stream.cancel(error).catch((err) => {
      if (err.code === 'ERR_INVALID_STATE') {
        // Node bug?
        return
      }
      throw err
    })
  }

  // 3. If responseObject is null, then return.
  if (responseObject == null) {
    return
  }

  // 4. Let response be responseObject’s response.
  const response = responseObject[kState]

  // 5. If response’s body is not null and is readable, then error response’s
  // body with error.
  if (response.body != null && isReadable(response.body?.stream)) {
    response.body.stream.cancel(error).catch((err) => {
      if (err.code === 'ERR_INVALID_STATE') {
        // Node bug?
        return
      }
      throw err
    })
  }
}

// https://fetch.spec.whatwg.org/#fetching
function fetching ({
  request,
  processRequestBodyChunkLength,
  processRequestEndOfBody,
  processResponse,
  processResponseEndOfBody,
  processResponseConsumeBody,
  useParallelQueue = false,
  dispatcher // undici
}) {
  // 1. Let taskDestination be null.
  let taskDestination = null

  // 2. Let crossOriginIsolatedCapability be false.
  let crossOriginIsolatedCapability = false

  // 3. If request’s client is non-null, then:
  if (request.client != null) {
    // 1. Set taskDestination to request’s client’s global object.
    taskDestination = request.client.globalObject

    // 2. Set crossOriginIsolatedCapability to request’s client’s cross-origin
    // isolated capability.
    crossOriginIsolatedCapability =
      request.client.crossOriginIsolatedCapability
  }

  // 4. If useParallelQueue is true, then set taskDestination to the result of
  // starting a new parallel queue.
  // TODO

  // 5. Let timingInfo be a new fetch timing info whose start time and
  // post-redirect start time are the coarsened shared current time given
  // crossOriginIsolatedCapability.
  const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability)
  const timingInfo = createOpaqueTimingInfo({
    startTime: currenTime
  })

  // 6. Let fetchParams be a new fetch params whose
  // request is request,
  // timing info is timingInfo,
  // process request body chunk length is processRequestBodyChunkLength,
  // process request end-of-body is processRequestEndOfBody,
  // process response is processResponse,
  // process response consume body is processResponseConsumeBody,
  // process response end-of-body is processResponseEndOfBody,
  // task destination is taskDestination,
  // and cross-origin isolated capability is crossOriginIsolatedCapability.
  const fetchParams = {
    controller: new Fetch(dispatcher),
    request,
    timingInfo,
    processRequestBodyChunkLength,
    processRequestEndOfBody,
    processResponse,
    processResponseConsumeBody,
    processResponseEndOfBody,
    taskDestination,
    crossOriginIsolatedCapability
  }

  // 7. If request’s body is a byte sequence, then set request’s body to
  //    request’s body as a body.
  // NOTE: Since fetching is only called from fetch, body should already be
  // extracted.
  assert(!request.body || request.body.stream)

  // 8. If request’s window is "client", then set request’s window to request’s
  // client, if request’s client’s global object is a Window object; otherwise
  // "no-window".
  if (request.window === 'client') {
    // TODO: What if request.client is null?
    request.window =
      request.client?.globalObject?.constructor?.name === 'Window'
        ? request.client
        : 'no-window'
  }

  // 9. If request’s origin is "client", then set request’s origin to request’s
  // client’s origin.
  if (request.origin === 'client') {
    // TODO: What if request.client is null?
    request.origin = request.client?.origin
  }

  // 10. If all of the following conditions are true:
  // TODO

  // 11. If request’s policy container is "client", then:
  if (request.policyContainer === 'client') {
    // 1. If request’s client is non-null, then set request’s policy
    // container to a clone of request’s client’s policy container. [HTML]
    if (request.client != null) {
      request.policyContainer = clonePolicyContainer(
        request.client.policyContainer
      )
    } else {
      // 2. Otherwise, set request’s policy container to a new policy
      // container.
      request.policyContainer = makePolicyContainer()
    }
  }

  // 12. If request’s header list does not contain `Accept`, then:
  if (!request.headersList.contains('accept')) {
    // 1. Let value be `*/*`.
    const value = '*/*'

    // 2. A user agent should set value to the first matching statement, if
    // any, switching on request’s destination:
    // "document"
    // "frame"
    // "iframe"
    // `text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`
    // "image"
    // `image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5`
    // "style"
    // `text/css,*/*;q=0.1`
    // TODO

    // 3. Append `Accept`/value to request’s header list.
    request.headersList.append('accept', value)
  }

  // 13. If request’s header list does not contain `Accept-Language`, then
  // user agents should append `Accept-Language`/an appropriate value to
  // request’s header list.
  if (!request.headersList.contains('accept-language')) {
    request.headersList.append('accept-language', '*')
  }

  // 14. If request’s priority is null, then use request’s initiator and
  // destination appropriately in setting request’s priority to a
  // user-agent-defined object.
  if (request.priority === null) {
    // TODO
  }

  // 15. If request is a subresource request, then:
  if (subresourceSet.has(request.destination)) {
    // TODO
  }

  // 16. Run main fetch given fetchParams.
  mainFetch(fetchParams)
    .catch(err => {
      fetchParams.controller.terminate(err)
    })

  // 17. Return fetchParam's controller
  return fetchParams.controller
}

// https://fetch.spec.whatwg.org/#concept-main-fetch
async function mainFetch (fetchParams, recursive = false) {
  // 1. Let request be fetchParams’s request.
  const request = fetchParams.request

  // 2. Let response be null.
  let response = null

  // 3. If request’s local-URLs-only flag is set and request’s current URL is
  // not local, then set response to a network error.
  if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {
    response = makeNetworkError('local URLs only')
  }

  // 4. Run report Content Security Policy violations for request.
  // TODO

  // 5. Upgrade request to a potentially trustworthy URL, if appropriate.
  tryUpgradeRequestToAPotentiallyTrustworthyURL(request)

  // 6. If should request be blocked due to a bad port, should fetching request
  // be blocked as mixed content, or should request be blocked by Content
  // Security Policy returns blocked, then set response to a network error.
  if (requestBadPort(request) === 'blocked') {
    response = makeNetworkError('bad port')
  }
  // TODO: should fetching request be blocked as mixed content?
  // TODO: should request be blocked by Content Security Policy?

  // 7. If request’s referrer policy is the empty string, then set request’s
  // referrer policy to request’s policy container’s referrer policy.
  if (request.referrerPolicy === '') {
    request.referrerPolicy = request.policyContainer.referrerPolicy
  }

  // 8. If request’s referrer is not "no-referrer", then set request’s
  // referrer to the result of invoking determine request’s referrer.
  if (request.referrer !== 'no-referrer') {
    request.referrer = determineRequestsReferrer(request)
  }

  // 9. Set request’s current URL’s scheme to "https" if all of the following
  // conditions are true:
  // - request’s current URL’s scheme is "http"
  // - request’s current URL’s host is a domain
  // - Matching request’s current URL’s host per Known HSTS Host Domain Name
  //   Matching results in either a superdomain match with an asserted
  //   includeSubDomains directive or a congruent match (with or without an
  //   asserted includeSubDomains directive). [HSTS]
  // TODO

  // 10. If recursive is false, then run the remaining steps in parallel.
  // TODO

  // 11. If response is null, then set response to the result of running
  // the steps corresponding to the first matching statement:
  if (response === null) {
    response = await (async () => {
      const currentURL = requestCurrentURL(request)

      if (
        // - request’s current URL’s origin is same origin with request’s origin,
        //   and request’s response tainting is "basic"
        (sameOrigin(currentURL, request.url) && request.responseTainting === 'basic') ||
        // request’s current URL’s scheme is "data"
        (currentURL.protocol === 'data:') ||
        // - request’s mode is "navigate" or "websocket"
        (request.mode === 'navigate' || request.mode === 'websocket')
      ) {
        // 1. Set request’s response tainting to "basic".
        request.responseTainting = 'basic'

        // 2. Return the result of running scheme fetch given fetchParams.
        return await schemeFetch(fetchParams)
      }

      // request’s mode is "same-origin"
      if (request.mode === 'same-origin') {
        // 1. Return a network error.
        return makeNetworkError('request mode cannot be "same-origin"')
      }

      // request’s mode is "no-cors"
      if (request.mode === 'no-cors') {
        // 1. If request’s redirect mode is not "follow", then return a network
        // error.
        if (request.redirect !== 'follow') {
          return makeNetworkError(
            'redirect mode cannot be "follow" for "no-cors" request'
          )
        }

        // 2. Set request’s response tainting to "opaque".
        request.responseTainting = 'opaque'

        // 3. Return the result of running scheme fetch given fetchParams.
        return await schemeFetch(fetchParams)
      }

      // request’s current URL’s scheme is not an HTTP(S) scheme
      if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {
        // Return a network error.
        return makeNetworkError('URL scheme must be a HTTP(S) scheme')
      }

      // - request’s use-CORS-preflight flag is set
      // - request’s unsafe-request flag is set and either request’s method is
      //   not a CORS-safelisted method or CORS-unsafe request-header names with
      //   request’s header list is not empty
      //    1. Set request’s response tainting to "cors".
      //    2. Let corsWithPreflightResponse be the result of running HTTP fetch
      //    given fetchParams and true.
      //    3. If corsWithPreflightResponse is a network error, then clear cache
      //    entries using request.
      //    4. Return corsWithPreflightResponse.
      // TODO

      // Otherwise
      //    1. Set request’s response tainting to "cors".
      request.responseTainting = 'cors'

      //    2. Return the result of running HTTP fetch given fetchParams.
      return await httpFetch(fetchParams)
    })()
  }

  // 12. If recursive is true, then return response.
  if (recursive) {
    return response
  }

  // 13. If response is not a network error and response is not a filtered
  // response, then:
  if (response.status !== 0 && !response.internalResponse) {
    // If request’s response tainting is "cors", then:
    if (request.responseTainting === 'cors') {
      // 1. Let headerNames be the result of extracting header list values
      // given `Access-Control-Expose-Headers` and response’s header list.
      // TODO
      // 2. If request’s credentials mode is not "include" and headerNames
      // contains `*`, then set response’s CORS-exposed header-name list to
      // all unique header names in response’s header list.
      // TODO
      // 3. Otherwise, if headerNames is not null or failure, then set
      // response’s CORS-exposed header-name list to headerNames.
      // TODO
    }

    // Set response to the following filtered response with response as its
    // internal response, depending on request’s response tainting:
    if (request.responseTainting === 'basic') {
      response = filterResponse(response, 'basic')
    } else if (request.responseTainting === 'cors') {
      response = filterResponse(response, 'cors')
    } else if (request.responseTainting === 'opaque') {
      response = filterResponse(response, 'opaque')
    } else {
      assert(false)
    }
  }

  // 14. Let internalResponse be response, if response is a network error,
  // and response’s internal response otherwise.
  let internalResponse =
    response.status === 0 ? response : response.internalResponse

  // 15. If internalResponse’s URL list is empty, then set it to a clone of
  // request’s URL list.
  if (internalResponse.urlList.length === 0) {
    internalResponse.urlList.push(...request.urlList)
  }

  // 16. If request’s timing allow failed flag is unset, then set
  // internalResponse’s timing allow passed flag.
  if (!request.timingAllowFailed) {
    response.timingAllowPassed = true
  }

  // 17. If response is not a network error and any of the following returns
  // blocked
  // - should internalResponse to request be blocked as mixed content
  // - should internalResponse to request be blocked by Content Security Policy
  // - should internalResponse to request be blocked due to its MIME type
  // - should internalResponse to request be blocked due to nosniff
  // TODO

  // 18. If response’s type is "opaque", internalResponse’s status is 206,
  // internalResponse’s range-requested flag is set, and request’s header
  // list does not contain `Range`, then set response and internalResponse
  // to a network error.
  if (
    response.type === 'opaque' &&
    internalResponse.status === 206 &&
    internalResponse.rangeRequested &&
    !request.headers.contains('range')
  ) {
    response = internalResponse = makeNetworkError()
  }

  // 19. If response is not a network error and either request’s method is
  // `HEAD` or `CONNECT`, or internalResponse’s status is a null body status,
  // set internalResponse’s body to null and disregard any enqueuing toward
  // it (if any).
  if (
    response.status !== 0 &&
    (request.method === 'HEAD' ||
      request.method === 'CONNECT' ||
      nullBodyStatus.includes(internalResponse.status))
  ) {
    internalResponse.body = null
    fetchParams.controller.dump = true
  }

  // 20. If request’s integrity metadata is not the empty string, then:
  if (request.integrity) {
    // 1. Let processBodyError be this step: run fetch finale given fetchParams
    // and a network error.
    const processBodyError = (reason) =>
      fetchFinale(fetchParams, makeNetworkError(reason))

    // 2. If request’s response tainting is "opaque", or response’s body is null,
    // then run processBodyError and abort these steps.
    if (request.responseTainting === 'opaque' || response.body == null) {
      processBodyError(response.error)
      return
    }

    // 3. Let processBody given bytes be these steps:
    const processBody = (bytes) => {
      // 1. If bytes do not match request’s integrity metadata,
      // then run processBodyError and abort these steps. [SRI]
      if (!bytesMatch(bytes, request.integrity)) {
        processBodyError('integrity mismatch')
        return
      }

      // 2. Set response’s body to bytes as a body.
      response.body = safelyExtractBody(bytes)[0]

      // 3. Run fetch finale given fetchParams and response.
      fetchFinale(fetchParams, response)
    }

    // 4. Fully read response’s body given processBody and processBodyError.
    await fullyReadBody(response.body, processBody, processBodyError)
  } else {
    // 21. Otherwise, run fetch finale given fetchParams and response.
    fetchFinale(fetchParams, response)
  }
}

// https://fetch.spec.whatwg.org/#concept-scheme-fetch
// given a fetch params fetchParams
function schemeFetch (fetchParams) {
  // Note: since the connection is destroyed on redirect, which sets fetchParams to a
  // cancelled state, we do not want this condition to trigger *unless* there have been
  // no redirects. See https://github.com/nodejs/undici/issues/1776
  // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.
  if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {
    return Promise.resolve(makeAppropriateNetworkError(fetchParams))
  }

  // 2. Let request be fetchParams’s request.
  const { request } = fetchParams

  const { protocol: scheme } = requestCurrentURL(request)

  // 3. Switch on request’s current URL’s scheme and run the associated steps:
  switch (scheme) {
    case 'about:': {
      // If request’s current URL’s path is the string "blank", then return a new response
      // whose status message is `OK`, header list is « (`Content-Type`, `text/html;charset=utf-8`) »,
      // and body is the empty byte sequence as a body.

      // Otherwise, return a network error.
      return Promise.resolve(makeNetworkError('about scheme is not supported'))
    }
    case 'blob:': {
      if (!resolveObjectURL) {
        resolveObjectURL = (__nccwpck_require__(4300).resolveObjectURL)
      }

      // 1. Let blobURLEntry be request’s current URL’s blob URL entry.
      const blobURLEntry = requestCurrentURL(request)

      // https://github.com/web-platform-tests/wpt/blob/7b0ebaccc62b566a1965396e5be7bb2bc06f841f/FileAPI/url/resources/fetch-tests.js#L52-L56
      // Buffer.resolveObjectURL does not ignore URL queries.
      if (blobURLEntry.search.length !== 0) {
        return Promise.resolve(makeNetworkError('NetworkError when attempting to fetch resource.'))
      }

      const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString())

      // 2. If request’s method is not `GET`, blobURLEntry is null, or blobURLEntry’s
      //    object is not a Blob object, then return a network error.
      if (request.method !== 'GET' || !isBlobLike(blobURLEntryObject)) {
        return Promise.resolve(makeNetworkError('invalid method'))
      }

      // 3. Let bodyWithType be the result of safely extracting blobURLEntry’s object.
      const bodyWithType = safelyExtractBody(blobURLEntryObject)

      // 4. Let body be bodyWithType’s body.
      const body = bodyWithType[0]

      // 5. Let length be body’s length, serialized and isomorphic encoded.
      const length = isomorphicEncode(`${body.length}`)

      // 6. Let type be bodyWithType’s type if it is non-null; otherwise the empty byte sequence.
      const type = bodyWithType[1] ?? ''

      // 7. Return a new response whose status message is `OK`, header list is
      //    « (`Content-Length`, length), (`Content-Type`, type) », and body is body.
      const response = makeResponse({
        statusText: 'OK',
        headersList: [
          ['content-length', { name: 'Content-Length', value: length }],
          ['content-type', { name: 'Content-Type', value: type }]
        ]
      })

      response.body = body

      return Promise.resolve(response)
    }
    case 'data:': {
      // 1. Let dataURLStruct be the result of running the
      //    data: URL processor on request’s current URL.
      const currentURL = requestCurrentURL(request)
      const dataURLStruct = dataURLProcessor(currentURL)

      // 2. If dataURLStruct is failure, then return a
      //    network error.
      if (dataURLStruct === 'failure') {
        return Promise.resolve(makeNetworkError('failed to fetch the data URL'))
      }

      // 3. Let mimeType be dataURLStruct’s MIME type, serialized.
      const mimeType = serializeAMimeType(dataURLStruct.mimeType)

      // 4. Return a response whose status message is `OK`,
      //    header list is « (`Content-Type`, mimeType) »,
      //    and body is dataURLStruct’s body as a body.
      return Promise.resolve(makeResponse({
        statusText: 'OK',
        headersList: [
          ['content-type', { name: 'Content-Type', value: mimeType }]
        ],
        body: safelyExtractBody(dataURLStruct.body)[0]
      }))
    }
    case 'file:': {
      // For now, unfortunate as it is, file URLs are left as an exercise for the reader.
      // When in doubt, return a network error.
      return Promise.resolve(makeNetworkError('not implemented... yet...'))
    }
    case 'http:':
    case 'https:': {
      // Return the result of running HTTP fetch given fetchParams.

      return httpFetch(fetchParams)
        .catch((err) => makeNetworkError(err))
    }
    default: {
      return Promise.resolve(makeNetworkError('unknown scheme'))
    }
  }
}

// https://fetch.spec.whatwg.org/#finalize-response
function finalizeResponse (fetchParams, response) {
  // 1. Set fetchParams’s request’s done flag.
  fetchParams.request.done = true

  // 2, If fetchParams’s process response done is not null, then queue a fetch
  // task to run fetchParams’s process response done given response, with
  // fetchParams’s task destination.
  if (fetchParams.processResponseDone != null) {
    queueMicrotask(() => fetchParams.processResponseDone(response))
  }
}

// https://fetch.spec.whatwg.org/#fetch-finale
function fetchFinale (fetchParams, response) {
  // 1. If response is a network error, then:
  if (response.type === 'error') {
    // 1. Set response’s URL list to « fetchParams’s request’s URL list[0] ».
    response.urlList = [fetchParams.request.urlList[0]]

    // 2. Set response’s timing info to the result of creating an opaque timing
    // info for fetchParams’s timing info.
    response.timingInfo = createOpaqueTimingInfo({
      startTime: fetchParams.timingInfo.startTime
    })
  }

  // 2. Let processResponseEndOfBody be the following steps:
  const processResponseEndOfBody = () => {
    // 1. Set fetchParams’s request’s done flag.
    fetchParams.request.done = true

    // If fetchParams’s process response end-of-body is not null,
    // then queue a fetch task to run fetchParams’s process response
    // end-of-body given response with fetchParams’s task destination.
    if (fetchParams.processResponseEndOfBody != null) {
      queueMicrotask(() => fetchParams.processResponseEndOfBody(response))
    }
  }

  // 3. If fetchParams’s process response is non-null, then queue a fetch task
  // to run fetchParams’s process response given response, with fetchParams’s
  // task destination.
  if (fetchParams.processResponse != null) {
    queueMicrotask(() => fetchParams.processResponse(response))
  }

  // 4. If response’s body is null, then run processResponseEndOfBody.
  if (response.body == null) {
    processResponseEndOfBody()
  } else {
  // 5. Otherwise:

    // 1. Let transformStream be a new a TransformStream.

    // 2. Let identityTransformAlgorithm be an algorithm which, given chunk,
    // enqueues chunk in transformStream.
    const identityTransformAlgorithm = (chunk, controller) => {
      controller.enqueue(chunk)
    }

    // 3. Set up transformStream with transformAlgorithm set to identityTransformAlgorithm
    // and flushAlgorithm set to processResponseEndOfBody.
    const transformStream = new TransformStream({
      start () {},
      transform: identityTransformAlgorithm,
      flush: processResponseEndOfBody
    }, {
      size () {
        return 1
      }
    }, {
      size () {
        return 1
      }
    })

    // 4. Set response’s body to the result of piping response’s body through transformStream.
    response.body = { stream: response.body.stream.pipeThrough(transformStream) }
  }

  // 6. If fetchParams’s process response consume body is non-null, then:
  if (fetchParams.processResponseConsumeBody != null) {
    // 1. Let processBody given nullOrBytes be this step: run fetchParams’s
    // process response consume body given response and nullOrBytes.
    const processBody = (nullOrBytes) => fetchParams.processResponseConsumeBody(response, nullOrBytes)

    // 2. Let processBodyError be this step: run fetchParams’s process
    // response consume body given response and failure.
    const processBodyError = (failure) => fetchParams.processResponseConsumeBody(response, failure)

    // 3. If response’s body is null, then queue a fetch task to run processBody
    // given null, with fetchParams’s task destination.
    if (response.body == null) {
      queueMicrotask(() => processBody(null))
    } else {
      // 4. Otherwise, fully read response’s body given processBody, processBodyError,
      // and fetchParams’s task destination.
      return fullyReadBody(response.body, processBody, processBodyError)
    }
    return Promise.resolve()
  }
}

// https://fetch.spec.whatwg.org/#http-fetch
async function httpFetch (fetchParams) {
  // 1. Let request be fetchParams’s request.
  const request = fetchParams.request

  // 2. Let response be null.
  let response = null

  // 3. Let actualResponse be null.
  let actualResponse = null

  // 4. Let timingInfo be fetchParams’s timing info.
  const timingInfo = fetchParams.timingInfo

  // 5. If request’s service-workers mode is "all", then:
  if (request.serviceWorkers === 'all') {
    // TODO
  }

  // 6. If response is null, then:
  if (response === null) {
    // 1. If makeCORSPreflight is true and one of these conditions is true:
    // TODO

    // 2. If request’s redirect mode is "follow", then set request’s
    // service-workers mode to "none".
    if (request.redirect === 'follow') {
      request.serviceWorkers = 'none'
    }

    // 3. Set response and actualResponse to the result of running
    // HTTP-network-or-cache fetch given fetchParams.
    actualResponse = response = await httpNetworkOrCacheFetch(fetchParams)

    // 4. If request’s response tainting is "cors" and a CORS check
    // for request and response returns failure, then return a network error.
    if (
      request.responseTainting === 'cors' &&
      corsCheck(request, response) === 'failure'
    ) {
      return makeNetworkError('cors failure')
    }

    // 5. If the TAO check for request and response returns failure, then set
    // request’s timing allow failed flag.
    if (TAOCheck(request, response) === 'failure') {
      request.timingAllowFailed = true
    }
  }

  // 7. If either request’s response tainting or response’s type
  // is "opaque", and the cross-origin resource policy check with
  // request’s origin, request’s client, request’s destination,
  // and actualResponse returns blocked, then return a network error.
  if (
    (request.responseTainting === 'opaque' || response.type === 'opaque') &&
    crossOriginResourcePolicyCheck(
      request.origin,
      request.client,
      request.destination,
      actualResponse
    ) === 'blocked'
  ) {
    return makeNetworkError('blocked')
  }

  // 8. If actualResponse’s status is a redirect status, then:
  if (redirectStatusSet.has(actualResponse.status)) {
    // 1. If actualResponse’s status is not 303, request’s body is not null,
    // and the connection uses HTTP/2, then user agents may, and are even
    // encouraged to, transmit an RST_STREAM frame.
    // See, https://github.com/whatwg/fetch/issues/1288
    if (request.redirect !== 'manual') {
      fetchParams.controller.connection.destroy()
    }

    // 2. Switch on request’s redirect mode:
    if (request.redirect === 'error') {
      // Set response to a network error.
      response = makeNetworkError('unexpected redirect')
    } else if (request.redirect === 'manual') {
      // Set response to an opaque-redirect filtered response whose internal
      // response is actualResponse.
      // NOTE(spec): On the web this would return an `opaqueredirect` response,
      // but that doesn't make sense server side.
      // See https://github.com/nodejs/undici/issues/1193.
      response = actualResponse
    } else if (request.redirect === 'follow') {
      // Set response to the result of running HTTP-redirect fetch given
      // fetchParams and response.
      response = await httpRedirectFetch(fetchParams, response)
    } else {
      assert(false)
    }
  }

  // 9. Set response’s timing info to timingInfo.
  response.timingInfo = timingInfo

  // 10. Return response.
  return response
}

// https://fetch.spec.whatwg.org/#http-redirect-fetch
function httpRedirectFetch (fetchParams, response) {
  // 1. Let request be fetchParams’s request.
  const request = fetchParams.request

  // 2. Let actualResponse be response, if response is not a filtered response,
  // and response’s internal response otherwise.
  const actualResponse = response.internalResponse
    ? response.internalResponse
    : response

  // 3. Let locationURL be actualResponse’s location URL given request’s current
  // URL’s fragment.
  let locationURL

  try {
    locationURL = responseLocationURL(
      actualResponse,
      requestCurrentURL(request).hash
    )

    // 4. If locationURL is null, then return response.
    if (locationURL == null) {
      return response
    }
  } catch (err) {
    // 5. If locationURL is failure, then return a network error.
    return Promise.resolve(makeNetworkError(err))
  }

  // 6. If locationURL’s scheme is not an HTTP(S) scheme, then return a network
  // error.
  if (!urlIsHttpHttpsScheme(locationURL)) {
    return Promise.resolve(makeNetworkError('URL scheme must be a HTTP(S) scheme'))
  }

  // 7. If request’s redirect count is 20, then return a network error.
  if (request.redirectCount === 20) {
    return Promise.resolve(makeNetworkError('redirect count exceeded'))
  }

  // 8. Increase request’s redirect count by 1.
  request.redirectCount += 1

  // 9. If request’s mode is "cors", locationURL includes credentials, and
  // request’s origin is not same origin with locationURL’s origin, then return
  //  a network error.
  if (
    request.mode === 'cors' &&
    (locationURL.username || locationURL.password) &&
    !sameOrigin(request, locationURL)
  ) {
    return Promise.resolve(makeNetworkError('cross origin not allowed for request mode "cors"'))
  }

  // 10. If request’s response tainting is "cors" and locationURL includes
  // credentials, then return a network error.
  if (
    request.responseTainting === 'cors' &&
    (locationURL.username || locationURL.password)
  ) {
    return Promise.resolve(makeNetworkError(
      'URL cannot contain credentials for request mode "cors"'
    ))
  }

  // 11. If actualResponse’s status is not 303, request’s body is non-null,
  // and request’s body’s source is null, then return a network error.
  if (
    actualResponse.status !== 303 &&
    request.body != null &&
    request.body.source == null
  ) {
    return Promise.resolve(makeNetworkError())
  }

  // 12. If one of the following is true
  // - actualResponse’s status is 301 or 302 and request’s method is `POST`
  // - actualResponse’s status is 303 and request’s method is not `GET` or `HEAD`
  if (
    ([301, 302].includes(actualResponse.status) && request.method === 'POST') ||
    (actualResponse.status === 303 &&
      !GET_OR_HEAD.includes(request.method))
  ) {
    // then:
    // 1. Set request’s method to `GET` and request’s body to null.
    request.method = 'GET'
    request.body = null

    // 2. For each headerName of request-body-header name, delete headerName from
    // request’s header list.
    for (const headerName of requestBodyHeader) {
      request.headersList.delete(headerName)
    }
  }

  // 13. If request’s current URL’s origin is not same origin with locationURL’s
  //     origin, then for each headerName of CORS non-wildcard request-header name,
  //     delete headerName from request’s header list.
  if (!sameOrigin(requestCurrentURL(request), locationURL)) {
    // https://fetch.spec.whatwg.org/#cors-non-wildcard-request-header-name
    request.headersList.delete('authorization')

    // https://fetch.spec.whatwg.org/#authentication-entries
    request.headersList.delete('proxy-authorization', true)

    // "Cookie" and "Host" are forbidden request-headers, which undici doesn't implement.
    request.headersList.delete('cookie')
    request.headersList.delete('host')
  }

  // 14. If request’s body is non-null, then set request’s body to the first return
  // value of safely extracting request’s body’s source.
  if (request.body != null) {
    assert(request.body.source != null)
    request.body = safelyExtractBody(request.body.source)[0]
  }

  // 15. Let timingInfo be fetchParams’s timing info.
  const timingInfo = fetchParams.timingInfo

  // 16. Set timingInfo’s redirect end time and post-redirect start time to the
  // coarsened shared current time given fetchParams’s cross-origin isolated
  // capability.
  timingInfo.redirectEndTime = timingInfo.postRedirectStartTime =
    coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability)

  // 17. If timingInfo’s redirect start time is 0, then set timingInfo’s
  //  redirect start time to timingInfo’s start time.
  if (timingInfo.redirectStartTime === 0) {
    timingInfo.redirectStartTime = timingInfo.startTime
  }

  // 18. Append locationURL to request’s URL list.
  request.urlList.push(locationURL)

  // 19. Invoke set request’s referrer policy on redirect on request and
  // actualResponse.
  setRequestReferrerPolicyOnRedirect(request, actualResponse)

  // 20. Return the result of running main fetch given fetchParams and true.
  return mainFetch(fetchParams, true)
}

// https://fetch.spec.whatwg.org/#http-network-or-cache-fetch
async function httpNetworkOrCacheFetch (
  fetchParams,
  isAuthenticationFetch = false,
  isNewConnectionFetch = false
) {
  // 1. Let request be fetchParams’s request.
  const request = fetchParams.request

  // 2. Let httpFetchParams be null.
  let httpFetchParams = null

  // 3. Let httpRequest be null.
  let httpRequest = null

  // 4. Let response be null.
  let response = null

  // 5. Let storedResponse be null.
  // TODO: cache

  // 6. Let httpCache be null.
  const httpCache = null

  // 7. Let the revalidatingFlag be unset.
  const revalidatingFlag = false

  // 8. Run these steps, but abort when the ongoing fetch is terminated:

  //    1. If request’s window is "no-window" and request’s redirect mode is
  //    "error", then set httpFetchParams to fetchParams and httpRequest to
  //    request.
  if (request.window === 'no-window' && request.redirect === 'error') {
    httpFetchParams = fetchParams
    httpRequest = request
  } else {
    // Otherwise:

    // 1. Set httpRequest to a clone of request.
    httpRequest = makeRequest(request)

    // 2. Set httpFetchParams to a copy of fetchParams.
    httpFetchParams = { ...fetchParams }

    // 3. Set httpFetchParams’s request to httpRequest.
    httpFetchParams.request = httpRequest
  }

  //    3. Let includeCredentials be true if one of
  const includeCredentials =
    request.credentials === 'include' ||
    (request.credentials === 'same-origin' &&
      request.responseTainting === 'basic')

  //    4. Let contentLength be httpRequest’s body’s length, if httpRequest’s
  //    body is non-null; otherwise null.
  const contentLength = httpRequest.body ? httpRequest.body.length : null

  //    5. Let contentLengthHeaderValue be null.
  let contentLengthHeaderValue = null

  //    6. If httpRequest’s body is null and httpRequest’s method is `POST` or
  //    `PUT`, then set contentLengthHeaderValue to `0`.
  if (
    httpRequest.body == null &&
    ['POST', 'PUT'].includes(httpRequest.method)
  ) {
    contentLengthHeaderValue = '0'
  }

  //    7. If contentLength is non-null, then set contentLengthHeaderValue to
  //    contentLength, serialized and isomorphic encoded.
  if (contentLength != null) {
    contentLengthHeaderValue = isomorphicEncode(`${contentLength}`)
  }

  //    8. If contentLengthHeaderValue is non-null, then append
  //    `Content-Length`/contentLengthHeaderValue to httpRequest’s header
  //    list.
  if (contentLengthHeaderValue != null) {
    httpRequest.headersList.append('content-length', contentLengthHeaderValue)
  }

  //    9. If contentLengthHeaderValue is non-null, then append (`Content-Length`,
  //    contentLengthHeaderValue) to httpRequest’s header list.

  //    10. If contentLength is non-null and httpRequest’s keepalive is true,
  //    then:
  if (contentLength != null && httpRequest.keepalive) {
    // NOTE: keepalive is a noop outside of browser context.
  }

  //    11. If httpRequest’s referrer is a URL, then append
  //    `Referer`/httpRequest’s referrer, serialized and isomorphic encoded,
  //     to httpRequest’s header list.
  if (httpRequest.referrer instanceof URL) {
    httpRequest.headersList.append('referer', isomorphicEncode(httpRequest.referrer.href))
  }

  //    12. Append a request `Origin` header for httpRequest.
  appendRequestOriginHeader(httpRequest)

  //    13. Append the Fetch metadata headers for httpRequest. [FETCH-METADATA]
  appendFetchMetadata(httpRequest)

  //    14. If httpRequest’s header list does not contain `User-Agent`, then
  //    user agents should append `User-Agent`/default `User-Agent` value to
  //    httpRequest’s header list.
  if (!httpRequest.headersList.contains('user-agent')) {
    httpRequest.headersList.append('user-agent', typeof esbuildDetection === 'undefined' ? 'undici' : 'node')
  }

  //    15. If httpRequest’s cache mode is "default" and httpRequest’s header
  //    list contains `If-Modified-Since`, `If-None-Match`,
  //    `If-Unmodified-Since`, `If-Match`, or `If-Range`, then set
  //    httpRequest’s cache mode to "no-store".
  if (
    httpRequest.cache === 'default' &&
    (httpRequest.headersList.contains('if-modified-since') ||
      httpRequest.headersList.contains('if-none-match') ||
      httpRequest.headersList.contains('if-unmodified-since') ||
      httpRequest.headersList.contains('if-match') ||
      httpRequest.headersList.contains('if-range'))
  ) {
    httpRequest.cache = 'no-store'
  }

  //    16. If httpRequest’s cache mode is "no-cache", httpRequest’s prevent
  //    no-cache cache-control header modification flag is unset, and
  //    httpRequest’s header list does not contain `Cache-Control`, then append
  //    `Cache-Control`/`max-age=0` to httpRequest’s header list.
  if (
    httpRequest.cache === 'no-cache' &&
    !httpRequest.preventNoCacheCacheControlHeaderModification &&
    !httpRequest.headersList.contains('cache-control')
  ) {
    httpRequest.headersList.append('cache-control', 'max-age=0')
  }

  //    17. If httpRequest’s cache mode is "no-store" or "reload", then:
  if (httpRequest.cache === 'no-store' || httpRequest.cache === 'reload') {
    // 1. If httpRequest’s header list does not contain `Pragma`, then append
    // `Pragma`/`no-cache` to httpRequest’s header list.
    if (!httpRequest.headersList.contains('pragma')) {
      httpRequest.headersList.append('pragma', 'no-cache')
    }

    // 2. If httpRequest’s header list does not contain `Cache-Control`,
    // then append `Cache-Control`/`no-cache` to httpRequest’s header list.
    if (!httpRequest.headersList.contains('cache-control')) {
      httpRequest.headersList.append('cache-control', 'no-cache')
    }
  }

  //    18. If httpRequest’s header list contains `Range`, then append
  //    `Accept-Encoding`/`identity` to httpRequest’s header list.
  if (httpRequest.headersList.contains('range')) {
    httpRequest.headersList.append('accept-encoding', 'identity')
  }

  //    19. Modify httpRequest’s header list per HTTP. Do not append a given
  //    header if httpRequest’s header list contains that header’s name.
  //    TODO: https://github.com/whatwg/fetch/issues/1285#issuecomment-896560129
  if (!httpRequest.headersList.contains('accept-encoding')) {
    if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {
      httpRequest.headersList.append('accept-encoding', 'br, gzip, deflate')
    } else {
      httpRequest.headersList.append('accept-encoding', 'gzip, deflate')
    }
  }

  httpRequest.headersList.delete('host')

  //    20. If includeCredentials is true, then:
  if (includeCredentials) {
    // 1. If the user agent is not configured to block cookies for httpRequest
    // (see section 7 of [COOKIES]), then:
    // TODO: credentials
    // 2. If httpRequest’s header list does not contain `Authorization`, then:
    // TODO: credentials
  }

  //    21. If there’s a proxy-authentication entry, use it as appropriate.
  //    TODO: proxy-authentication

  //    22. Set httpCache to the result of determining the HTTP cache
  //    partition, given httpRequest.
  //    TODO: cache

  //    23. If httpCache is null, then set httpRequest’s cache mode to
  //    "no-store".
  if (httpCache == null) {
    httpRequest.cache = 'no-store'
  }

  //    24. If httpRequest’s cache mode is neither "no-store" nor "reload",
  //    then:
  if (httpRequest.mode !== 'no-store' && httpRequest.mode !== 'reload') {
    // TODO: cache
  }

  // 9. If aborted, then return the appropriate network error for fetchParams.
  // TODO

  // 10. If response is null, then:
  if (response == null) {
    // 1. If httpRequest’s cache mode is "only-if-cached", then return a
    // network error.
    if (httpRequest.mode === 'only-if-cached') {
      return makeNetworkError('only if cached')
    }

    // 2. Let forwardResponse be the result of running HTTP-network fetch
    // given httpFetchParams, includeCredentials, and isNewConnectionFetch.
    const forwardResponse = await httpNetworkFetch(
      httpFetchParams,
      includeCredentials,
      isNewConnectionFetch
    )

    // 3. If httpRequest’s method is unsafe and forwardResponse’s status is
    // in the range 200 to 399, inclusive, invalidate appropriate stored
    // responses in httpCache, as per the "Invalidation" chapter of HTTP
    // Caching, and set storedResponse to null. [HTTP-CACHING]
    if (
      !safeMethodsSet.has(httpRequest.method) &&
      forwardResponse.status >= 200 &&
      forwardResponse.status <= 399
    ) {
      // TODO: cache
    }

    // 4. If the revalidatingFlag is set and forwardResponse’s status is 304,
    // then:
    if (revalidatingFlag && forwardResponse.status === 304) {
      // TODO: cache
    }

    // 5. If response is null, then:
    if (response == null) {
      // 1. Set response to forwardResponse.
      response = forwardResponse

      // 2. Store httpRequest and forwardResponse in httpCache, as per the
      // "Storing Responses in Caches" chapter of HTTP Caching. [HTTP-CACHING]
      // TODO: cache
    }
  }

  // 11. Set response’s URL list to a clone of httpRequest’s URL list.
  response.urlList = [...httpRequest.urlList]

  // 12. If httpRequest’s header list contains `Range`, then set response’s
  // range-requested flag.
  if (httpRequest.headersList.contains('range')) {
    response.rangeRequested = true
  }

  // 13. Set response’s request-includes-credentials to includeCredentials.
  response.requestIncludesCredentials = includeCredentials

  // 14. If response’s status is 401, httpRequest’s response tainting is not
  // "cors", includeCredentials is true, and request’s window is an environment
  // settings object, then:
  // TODO

  // 15. If response’s status is 407, then:
  if (response.status === 407) {
    // 1. If request’s window is "no-window", then return a network error.
    if (request.window === 'no-window') {
      return makeNetworkError()
    }

    // 2. ???

    // 3. If fetchParams is canceled, then return the appropriate network error for fetchParams.
    if (isCancelled(fetchParams)) {
      return makeAppropriateNetworkError(fetchParams)
    }

    // 4. Prompt the end user as appropriate in request’s window and store
    // the result as a proxy-authentication entry. [HTTP-AUTH]
    // TODO: Invoke some kind of callback?

    // 5. Set response to the result of running HTTP-network-or-cache fetch given
    // fetchParams.
    // TODO
    return makeNetworkError('proxy authentication required')
  }

  // 16. If all of the following are true
  if (
    // response’s status is 421
    response.status === 421 &&
    // isNewConnectionFetch is false
    !isNewConnectionFetch &&
    // request’s body is null, or request’s body is non-null and request’s body’s source is non-null
    (request.body == null || request.body.source != null)
  ) {
    // then:

    // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.
    if (isCancelled(fetchParams)) {
      return makeAppropriateNetworkError(fetchParams)
    }

    // 2. Set response to the result of running HTTP-network-or-cache
    // fetch given fetchParams, isAuthenticationFetch, and true.

    // TODO (spec): The spec doesn't specify this but we need to cancel
    // the active response before we can start a new one.
    // https://github.com/whatwg/fetch/issues/1293
    fetchParams.controller.connection.destroy()

    response = await httpNetworkOrCacheFetch(
      fetchParams,
      isAuthenticationFetch,
      true
    )
  }

  // 17. If isAuthenticationFetch is true, then create an authentication entry
  if (isAuthenticationFetch) {
    // TODO
  }

  // 18. Return response.
  return response
}

// https://fetch.spec.whatwg.org/#http-network-fetch
async function httpNetworkFetch (
  fetchParams,
  includeCredentials = false,
  forceNewConnection = false
) {
  assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed)

  fetchParams.controller.connection = {
    abort: null,
    destroyed: false,
    destroy (err) {
      if (!this.destroyed) {
        this.destroyed = true
        this.abort?.(err ?? new DOMException('The operation was aborted.', 'AbortError'))
      }
    }
  }

  // 1. Let request be fetchParams’s request.
  const request = fetchParams.request

  // 2. Let response be null.
  let response = null

  // 3. Let timingInfo be fetchParams’s timing info.
  const timingInfo = fetchParams.timingInfo

  // 4. Let httpCache be the result of determining the HTTP cache partition,
  // given request.
  // TODO: cache
  const httpCache = null

  // 5. If httpCache is null, then set request’s cache mode to "no-store".
  if (httpCache == null) {
    request.cache = 'no-store'
  }

  // 6. Let networkPartitionKey be the result of determining the network
  // partition key given request.
  // TODO

  // 7. Let newConnection be "yes" if forceNewConnection is true; otherwise
  // "no".
  const newConnection = forceNewConnection ? 'yes' : 'no' // eslint-disable-line no-unused-vars

  // 8. Switch on request’s mode:
  if (request.mode === 'websocket') {
    // Let connection be the result of obtaining a WebSocket connection,
    // given request’s current URL.
    // TODO
  } else {
    // Let connection be the result of obtaining a connection, given
    // networkPartitionKey, request’s current URL’s origin,
    // includeCredentials, and forceNewConnection.
    // TODO
  }

  // 9. Run these steps, but abort when the ongoing fetch is terminated:

  //    1. If connection is failure, then return a network error.

  //    2. Set timingInfo’s final connection timing info to the result of
  //    calling clamp and coarsen connection timing info with connection’s
  //    timing info, timingInfo’s post-redirect start time, and fetchParams’s
  //    cross-origin isolated capability.

  //    3. If connection is not an HTTP/2 connection, request’s body is non-null,
  //    and request’s body’s source is null, then append (`Transfer-Encoding`,
  //    `chunked`) to request’s header list.

  //    4. Set timingInfo’s final network-request start time to the coarsened
  //    shared current time given fetchParams’s cross-origin isolated
  //    capability.

  //    5. Set response to the result of making an HTTP request over connection
  //    using request with the following caveats:

  //        - Follow the relevant requirements from HTTP. [HTTP] [HTTP-SEMANTICS]
  //        [HTTP-COND] [HTTP-CACHING] [HTTP-AUTH]

  //        - If request’s body is non-null, and request’s body’s source is null,
  //        then the user agent may have a buffer of up to 64 kibibytes and store
  //        a part of request’s body in that buffer. If the user agent reads from
  //        request’s body beyond that buffer’s size and the user agent needs to
  //        resend request, then instead return a network error.

  //        - Set timingInfo’s final network-response start time to the coarsened
  //        shared current time given fetchParams’s cross-origin isolated capability,
  //        immediately after the user agent’s HTTP parser receives the first byte
  //        of the response (e.g., frame header bytes for HTTP/2 or response status
  //        line for HTTP/1.x).

  //        - Wait until all the headers are transmitted.

  //        - Any responses whose status is in the range 100 to 199, inclusive,
  //        and is not 101, are to be ignored, except for the purposes of setting
  //        timingInfo’s final network-response start time above.

  //    - If request’s header list contains `Transfer-Encoding`/`chunked` and
  //    response is transferred via HTTP/1.0 or older, then return a network
  //    error.

  //    - If the HTTP request results in a TLS client certificate dialog, then:

  //        1. If request’s window is an environment settings object, make the
  //        dialog available in request’s window.

  //        2. Otherwise, return a network error.

  // To transmit request’s body body, run these steps:
  let requestBody = null
  // 1. If body is null and fetchParams’s process request end-of-body is
  // non-null, then queue a fetch task given fetchParams’s process request
  // end-of-body and fetchParams’s task destination.
  if (request.body == null && fetchParams.processRequestEndOfBody) {
    queueMicrotask(() => fetchParams.processRequestEndOfBody())
  } else if (request.body != null) {
    // 2. Otherwise, if body is non-null:

    //    1. Let processBodyChunk given bytes be these steps:
    const processBodyChunk = async function * (bytes) {
      // 1. If the ongoing fetch is terminated, then abort these steps.
      if (isCancelled(fetchParams)) {
        return
      }

      // 2. Run this step in parallel: transmit bytes.
      yield bytes

      // 3. If fetchParams’s process request body is non-null, then run
      // fetchParams’s process request body given bytes’s length.
      fetchParams.processRequestBodyChunkLength?.(bytes.byteLength)
    }

    // 2. Let processEndOfBody be these steps:
    const processEndOfBody = () => {
      // 1. If fetchParams is canceled, then abort these steps.
      if (isCancelled(fetchParams)) {
        return
      }

      // 2. If fetchParams’s process request end-of-body is non-null,
      // then run fetchParams’s process request end-of-body.
      if (fetchParams.processRequestEndOfBody) {
        fetchParams.processRequestEndOfBody()
      }
    }

    // 3. Let processBodyError given e be these steps:
    const processBodyError = (e) => {
      // 1. If fetchParams is canceled, then abort these steps.
      if (isCancelled(fetchParams)) {
        return
      }

      // 2. If e is an "AbortError" DOMException, then abort fetchParams’s controller.
      if (e.name === 'AbortError') {
        fetchParams.controller.abort()
      } else {
        fetchParams.controller.terminate(e)
      }
    }

    // 4. Incrementally read request’s body given processBodyChunk, processEndOfBody,
    // processBodyError, and fetchParams’s task destination.
    requestBody = (async function * () {
      try {
        for await (const bytes of request.body.stream) {
          yield * processBodyChunk(bytes)
        }
        processEndOfBody()
      } catch (err) {
        processBodyError(err)
      }
    })()
  }

  try {
    // socket is only provided for websockets
    const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody })

    if (socket) {
      response = makeResponse({ status, statusText, headersList, socket })
    } else {
      const iterator = body[Symbol.asyncIterator]()
      fetchParams.controller.next = () => iterator.next()

      response = makeResponse({ status, statusText, headersList })
    }
  } catch (err) {
    // 10. If aborted, then:
    if (err.name === 'AbortError') {
      // 1. If connection uses HTTP/2, then transmit an RST_STREAM frame.
      fetchParams.controller.connection.destroy()

      // 2. Return the appropriate network error for fetchParams.
      return makeAppropriateNetworkError(fetchParams, err)
    }

    return makeNetworkError(err)
  }

  // 11. Let pullAlgorithm be an action that resumes the ongoing fetch
  // if it is suspended.
  const pullAlgorithm = () => {
    fetchParams.controller.resume()
  }

  // 12. Let cancelAlgorithm be an algorithm that aborts fetchParams’s
  // controller with reason, given reason.
  const cancelAlgorithm = (reason) => {
    fetchParams.controller.abort(reason)
  }

  // 13. Let highWaterMark be a non-negative, non-NaN number, chosen by
  // the user agent.
  // TODO

  // 14. Let sizeAlgorithm be an algorithm that accepts a chunk object
  // and returns a non-negative, non-NaN, non-infinite number, chosen by the user agent.
  // TODO

  // 15. Let stream be a new ReadableStream.
  // 16. Set up stream with pullAlgorithm set to pullAlgorithm,
  // cancelAlgorithm set to cancelAlgorithm, highWaterMark set to
  // highWaterMark, and sizeAlgorithm set to sizeAlgorithm.
  if (!ReadableStream) {
    ReadableStream = (__nccwpck_require__(5356).ReadableStream)
  }

  const stream = new ReadableStream(
    {
      async start (controller) {
        fetchParams.controller.controller = controller
      },
      async pull (controller) {
        await pullAlgorithm(controller)
      },
      async cancel (reason) {
        await cancelAlgorithm(reason)
      }
    },
    {
      highWaterMark: 0,
      size () {
        return 1
      }
    }
  )

  // 17. Run these steps, but abort when the ongoing fetch is terminated:

  //    1. Set response’s body to a new body whose stream is stream.
  response.body = { stream }

  //    2. If response is not a network error and request’s cache mode is
  //    not "no-store", then update response in httpCache for request.
  //    TODO

  //    3. If includeCredentials is true and the user agent is not configured
  //    to block cookies for request (see section 7 of [COOKIES]), then run the
  //    "set-cookie-string" parsing algorithm (see section 5.2 of [COOKIES]) on
  //    the value of each header whose name is a byte-case-insensitive match for
  //    `Set-Cookie` in response’s header list, if any, and request’s current URL.
  //    TODO

  // 18. If aborted, then:
  // TODO

  // 19. Run these steps in parallel:

  //    1. Run these steps, but abort when fetchParams is canceled:
  fetchParams.controller.on('terminated', onAborted)
  fetchParams.controller.resume = async () => {
    // 1. While true
    while (true) {
      // 1-3. See onData...

      // 4. Set bytes to the result of handling content codings given
      // codings and bytes.
      let bytes
      let isFailure
      try {
        const { done, value } = await fetchParams.controller.next()

        if (isAborted(fetchParams)) {
          break
        }

        bytes = done ? undefined : value
      } catch (err) {
        if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {
          // zlib doesn't like empty streams.
          bytes = undefined
        } else {
          bytes = err

          // err may be propagated from the result of calling readablestream.cancel,
          // which might not be an error. https://github.com/nodejs/undici/issues/2009
          isFailure = true
        }
      }

      if (bytes === undefined) {
        // 2. Otherwise, if the bytes transmission for response’s message
        // body is done normally and stream is readable, then close
        // stream, finalize response for fetchParams and response, and
        // abort these in-parallel steps.
        readableStreamClose(fetchParams.controller.controller)

        finalizeResponse(fetchParams, response)

        return
      }

      // 5. Increase timingInfo’s decoded body size by bytes’s length.
      timingInfo.decodedBodySize += bytes?.byteLength ?? 0

      // 6. If bytes is failure, then terminate fetchParams’s controller.
      if (isFailure) {
        fetchParams.controller.terminate(bytes)
        return
      }

      // 7. Enqueue a Uint8Array wrapping an ArrayBuffer containing bytes
      // into stream.
      fetchParams.controller.controller.enqueue(new Uint8Array(bytes))

      // 8. If stream is errored, then terminate the ongoing fetch.
      if (isErrored(stream)) {
        fetchParams.controller.terminate()
        return
      }

      // 9. If stream doesn’t need more data ask the user agent to suspend
      // the ongoing fetch.
      if (!fetchParams.controller.controller.desiredSize) {
        return
      }
    }
  }

  //    2. If aborted, then:
  function onAborted (reason) {
    // 2. If fetchParams is aborted, then:
    if (isAborted(fetchParams)) {
      // 1. Set response’s aborted flag.
      response.aborted = true

      // 2. If stream is readable, then error stream with the result of
      //    deserialize a serialized abort reason given fetchParams’s
      //    controller’s serialized abort reason and an
      //    implementation-defined realm.
      if (isReadable(stream)) {
        fetchParams.controller.controller.error(
          fetchParams.controller.serializedAbortReason
        )
      }
    } else {
      // 3. Otherwise, if stream is readable, error stream with a TypeError.
      if (isReadable(stream)) {
        fetchParams.controller.controller.error(new TypeError('terminated', {
          cause: isErrorLike(reason) ? reason : undefined
        }))
      }
    }

    // 4. If connection uses HTTP/2, then transmit an RST_STREAM frame.
    // 5. Otherwise, the user agent should close connection unless it would be bad for performance to do so.
    fetchParams.controller.connection.destroy()
  }

  // 20. Return response.
  return response

  async function dispatch ({ body }) {
    const url = requestCurrentURL(request)
    /** @type {import('../..').Agent} */
    const agent = fetchParams.controller.dispatcher

    return new Promise((resolve, reject) => agent.dispatch(
      {
        path: url.pathname + url.search,
        origin: url.origin,
        method: request.method,
        body: fetchParams.controller.dispatcher.isMockActive ? request.body && (request.body.source || request.body.stream) : body,
        headers: request.headersList.entries,
        maxRedirections: 0,
        upgrade: request.mode === 'websocket' ? 'websocket' : undefined
      },
      {
        body: null,
        abort: null,

        onConnect (abort) {
          // TODO (fix): Do we need connection here?
          const { connection } = fetchParams.controller

          if (connection.destroyed) {
            abort(new DOMException('The operation was aborted.', 'AbortError'))
          } else {
            fetchParams.controller.on('terminated', abort)
            this.abort = connection.abort = abort
          }
        },

        onHeaders (status, headersList, resume, statusText) {
          if (status < 200) {
            return
          }

          let codings = []
          let location = ''

          const headers = new Headers()

          // For H2, the headers are a plain JS object
          // We distinguish between them and iterate accordingly
          if (Array.isArray(headersList)) {
            for (let n = 0; n < headersList.length; n += 2) {
              const key = headersList[n + 0].toString('latin1')
              const val = headersList[n + 1].toString('latin1')
              if (key.toLowerCase() === 'content-encoding') {
                // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1
                // "All content-coding values are case-insensitive..."
                codings = val.toLowerCase().split(',').map((x) => x.trim())
              } else if (key.toLowerCase() === 'location') {
                location = val
              }

              headers[kHeadersList].append(key, val)
            }
          } else {
            const keys = Object.keys(headersList)
            for (const key of keys) {
              const val = headersList[key]
              if (key.toLowerCase() === 'content-encoding') {
                // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1
                // "All content-coding values are case-insensitive..."
                codings = val.toLowerCase().split(',').map((x) => x.trim()).reverse()
              } else if (key.toLowerCase() === 'location') {
                location = val
              }

              headers[kHeadersList].append(key, val)
            }
          }

          this.body = new Readable({ read: resume })

          const decoders = []

          const willFollow = request.redirect === 'follow' &&
            location &&
            redirectStatusSet.has(status)

          // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding
          if (request.method !== 'HEAD' && request.method !== 'CONNECT' && !nullBodyStatus.includes(status) && !willFollow) {
            for (const coding of codings) {
              // https://www.rfc-editor.org/rfc/rfc9112.html#section-7.2
              if (coding === 'x-gzip' || coding === 'gzip') {
                decoders.push(zlib.createGunzip({
                  // Be less strict when decoding compressed responses, since sometimes
                  // servers send slightly invalid responses that are still accepted
                  // by common browsers.
                  // Always using Z_SYNC_FLUSH is what cURL does.
                  flush: zlib.constants.Z_SYNC_FLUSH,
                  finishFlush: zlib.constants.Z_SYNC_FLUSH
                }))
              } else if (coding === 'deflate') {
                decoders.push(zlib.createInflate())
              } else if (coding === 'br') {
                decoders.push(zlib.createBrotliDecompress())
              } else {
                decoders.length = 0
                break
              }
            }
          }

          resolve({
            status,
            statusText,
            headersList: headers[kHeadersList],
            body: decoders.length
              ? pipeline(this.body, ...decoders, () => { })
              : this.body.on('error', () => {})
          })

          return true
        },

        onData (chunk) {
          if (fetchParams.controller.dump) {
            return
          }

          // 1. If one or more bytes have been transmitted from response’s
          // message body, then:

          //  1. Let bytes be the transmitted bytes.
          const bytes = chunk

          //  2. Let codings be the result of extracting header list values
          //  given `Content-Encoding` and response’s header list.
          //  See pullAlgorithm.

          //  3. Increase timingInfo’s encoded body size by bytes’s length.
          timingInfo.encodedBodySize += bytes.byteLength

          //  4. See pullAlgorithm...

          return this.body.push(bytes)
        },

        onComplete () {
          if (this.abort) {
            fetchParams.controller.off('terminated', this.abort)
          }

          fetchParams.controller.ended = true

          this.body.push(null)
        },

        onError (error) {
          if (this.abort) {
            fetchParams.controller.off('terminated', this.abort)
          }

          this.body?.destroy(error)

          fetchParams.controller.terminate(error)

          reject(error)
        },

        onUpgrade (status, headersList, socket) {
          if (status !== 101) {
            return
          }

          const headers = new Headers()

          for (let n = 0; n < headersList.length; n += 2) {
            const key = headersList[n + 0].toString('latin1')
            const val = headersList[n + 1].toString('latin1')

            headers[kHeadersList].append(key, val)
          }

          resolve({
            status,
            statusText: STATUS_CODES[status],
            headersList: headers[kHeadersList],
            socket
          })

          return true
        }
      }
    ))
  }
}

module.exports = {
  fetch,
  Fetch,
  fetching,
  finalizeAndReportTiming
}


/***/ }),

/***/ 8359:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
/* globals AbortController */



const { extractBody, mixinBody, cloneBody } = __nccwpck_require__(1472)
const { Headers, fill: fillHeaders, HeadersList } = __nccwpck_require__(554)
const { FinalizationRegistry } = __nccwpck_require__(6436)()
const util = __nccwpck_require__(3983)
const {
  isValidHTTPToken,
  sameOrigin,
  normalizeMethod,
  makePolicyContainer,
  normalizeMethodRecord
} = __nccwpck_require__(2538)
const {
  forbiddenMethodsSet,
  corsSafeListedMethodsSet,
  referrerPolicy,
  requestRedirect,
  requestMode,
  requestCredentials,
  requestCache,
  requestDuplex
} = __nccwpck_require__(1037)
const { kEnumerableProperty } = util
const { kHeaders, kSignal, kState, kGuard, kRealm } = __nccwpck_require__(5861)
const { webidl } = __nccwpck_require__(1744)
const { getGlobalOrigin } = __nccwpck_require__(1246)
const { URLSerializer } = __nccwpck_require__(685)
const { kHeadersList, kConstruct } = __nccwpck_require__(2785)
const assert = __nccwpck_require__(9491)
const { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = __nccwpck_require__(2361)

let TransformStream = globalThis.TransformStream

const kAbortController = Symbol('abortController')

const requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {
  signal.removeEventListener('abort', abort)
})

// https://fetch.spec.whatwg.org/#request-class
class Request {
  // https://fetch.spec.whatwg.org/#dom-request
  constructor (input, init = {}) {
    if (input === kConstruct) {
      return
    }

    webidl.argumentLengthCheck(arguments, 1, { header: 'Request constructor' })

    input = webidl.converters.RequestInfo(input)
    init = webidl.converters.RequestInit(init)

    // https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object
    this[kRealm] = {
      settingsObject: {
        baseUrl: getGlobalOrigin(),
        get origin () {
          return this.baseUrl?.origin
        },
        policyContainer: makePolicyContainer()
      }
    }

    // 1. Let request be null.
    let request = null

    // 2. Let fallbackMode be null.
    let fallbackMode = null

    // 3. Let baseURL be this’s relevant settings object’s API base URL.
    const baseUrl = this[kRealm].settingsObject.baseUrl

    // 4. Let signal be null.
    let signal = null

    // 5. If input is a string, then:
    if (typeof input === 'string') {
      // 1. Let parsedURL be the result of parsing input with baseURL.
      // 2. If parsedURL is failure, then throw a TypeError.
      let parsedURL
      try {
        parsedURL = new URL(input, baseUrl)
      } catch (err) {
        throw new TypeError('Failed to parse URL from ' + input, { cause: err })
      }

      // 3. If parsedURL includes credentials, then throw a TypeError.
      if (parsedURL.username || parsedURL.password) {
        throw new TypeError(
          'Request cannot be constructed from a URL that includes credentials: ' +
            input
        )
      }

      // 4. Set request to a new request whose URL is parsedURL.
      request = makeRequest({ urlList: [parsedURL] })

      // 5. Set fallbackMode to "cors".
      fallbackMode = 'cors'
    } else {
      // 6. Otherwise:

      // 7. Assert: input is a Request object.
      assert(input instanceof Request)

      // 8. Set request to input’s request.
      request = input[kState]

      // 9. Set signal to input’s signal.
      signal = input[kSignal]
    }

    // 7. Let origin be this’s relevant settings object’s origin.
    const origin = this[kRealm].settingsObject.origin

    // 8. Let window be "client".
    let window = 'client'

    // 9. If request’s window is an environment settings object and its origin
    // is same origin with origin, then set window to request’s window.
    if (
      request.window?.constructor?.name === 'EnvironmentSettingsObject' &&
      sameOrigin(request.window, origin)
    ) {
      window = request.window
    }

    // 10. If init["window"] exists and is non-null, then throw a TypeError.
    if (init.window != null) {
      throw new TypeError(`'window' option '${window}' must be null`)
    }

    // 11. If init["window"] exists, then set window to "no-window".
    if ('window' in init) {
      window = 'no-window'
    }

    // 12. Set request to a new request with the following properties:
    request = makeRequest({
      // URL request’s URL.
      // undici implementation note: this is set as the first item in request's urlList in makeRequest
      // method request’s method.
      method: request.method,
      // header list A copy of request’s header list.
      // undici implementation note: headersList is cloned in makeRequest
      headersList: request.headersList,
      // unsafe-request flag Set.
      unsafeRequest: request.unsafeRequest,
      // client This’s relevant settings object.
      client: this[kRealm].settingsObject,
      // window window.
      window,
      // priority request’s priority.
      priority: request.priority,
      // origin request’s origin. The propagation of the origin is only significant for navigation requests
      // being handled by a service worker. In this scenario a request can have an origin that is different
      // from the current client.
      origin: request.origin,
      // referrer request’s referrer.
      referrer: request.referrer,
      // referrer policy request’s referrer policy.
      referrerPolicy: request.referrerPolicy,
      // mode request’s mode.
      mode: request.mode,
      // credentials mode request’s credentials mode.
      credentials: request.credentials,
      // cache mode request’s cache mode.
      cache: request.cache,
      // redirect mode request’s redirect mode.
      redirect: request.redirect,
      // integrity metadata request’s integrity metadata.
      integrity: request.integrity,
      // keepalive request’s keepalive.
      keepalive: request.keepalive,
      // reload-navigation flag request’s reload-navigation flag.
      reloadNavigation: request.reloadNavigation,
      // history-navigation flag request’s history-navigation flag.
      historyNavigation: request.historyNavigation,
      // URL list A clone of request’s URL list.
      urlList: [...request.urlList]
    })

    const initHasKey = Object.keys(init).length !== 0

    // 13. If init is not empty, then:
    if (initHasKey) {
      // 1. If request’s mode is "navigate", then set it to "same-origin".
      if (request.mode === 'navigate') {
        request.mode = 'same-origin'
      }

      // 2. Unset request’s reload-navigation flag.
      request.reloadNavigation = false

      // 3. Unset request’s history-navigation flag.
      request.historyNavigation = false

      // 4. Set request’s origin to "client".
      request.origin = 'client'

      // 5. Set request’s referrer to "client"
      request.referrer = 'client'

      // 6. Set request’s referrer policy to the empty string.
      request.referrerPolicy = ''

      // 7. Set request’s URL to request’s current URL.
      request.url = request.urlList[request.urlList.length - 1]

      // 8. Set request’s URL list to « request’s URL ».
      request.urlList = [request.url]
    }

    // 14. If init["referrer"] exists, then:
    if (init.referrer !== undefined) {
      // 1. Let referrer be init["referrer"].
      const referrer = init.referrer

      // 2. If referrer is the empty string, then set request’s referrer to "no-referrer".
      if (referrer === '') {
        request.referrer = 'no-referrer'
      } else {
        // 1. Let parsedReferrer be the result of parsing referrer with
        // baseURL.
        // 2. If parsedReferrer is failure, then throw a TypeError.
        let parsedReferrer
        try {
          parsedReferrer = new URL(referrer, baseUrl)
        } catch (err) {
          throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, { cause: err })
        }

        // 3. If one of the following is true
        // - parsedReferrer’s scheme is "about" and path is the string "client"
        // - parsedReferrer’s origin is not same origin with origin
        // then set request’s referrer to "client".
        if (
          (parsedReferrer.protocol === 'about:' && parsedReferrer.hostname === 'client') ||
          (origin && !sameOrigin(parsedReferrer, this[kRealm].settingsObject.baseUrl))
        ) {
          request.referrer = 'client'
        } else {
          // 4. Otherwise, set request’s referrer to parsedReferrer.
          request.referrer = parsedReferrer
        }
      }
    }

    // 15. If init["referrerPolicy"] exists, then set request’s referrer policy
    // to it.
    if (init.referrerPolicy !== undefined) {
      request.referrerPolicy = init.referrerPolicy
    }

    // 16. Let mode be init["mode"] if it exists, and fallbackMode otherwise.
    let mode
    if (init.mode !== undefined) {
      mode = init.mode
    } else {
      mode = fallbackMode
    }

    // 17. If mode is "navigate", then throw a TypeError.
    if (mode === 'navigate') {
      throw webidl.errors.exception({
        header: 'Request constructor',
        message: 'invalid request mode navigate.'
      })
    }

    // 18. If mode is non-null, set request’s mode to mode.
    if (mode != null) {
      request.mode = mode
    }

    // 19. If init["credentials"] exists, then set request’s credentials mode
    // to it.
    if (init.credentials !== undefined) {
      request.credentials = init.credentials
    }

    // 18. If init["cache"] exists, then set request’s cache mode to it.
    if (init.cache !== undefined) {
      request.cache = init.cache
    }

    // 21. If request’s cache mode is "only-if-cached" and request’s mode is
    // not "same-origin", then throw a TypeError.
    if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {
      throw new TypeError(
        "'only-if-cached' can be set only with 'same-origin' mode"
      )
    }

    // 22. If init["redirect"] exists, then set request’s redirect mode to it.
    if (init.redirect !== undefined) {
      request.redirect = init.redirect
    }

    // 23. If init["integrity"] exists, then set request’s integrity metadata to it.
    if (init.integrity != null) {
      request.integrity = String(init.integrity)
    }

    // 24. If init["keepalive"] exists, then set request’s keepalive to it.
    if (init.keepalive !== undefined) {
      request.keepalive = Boolean(init.keepalive)
    }

    // 25. If init["method"] exists, then:
    if (init.method !== undefined) {
      // 1. Let method be init["method"].
      let method = init.method

      // 2. If method is not a method or method is a forbidden method, then
      // throw a TypeError.
      if (!isValidHTTPToken(method)) {
        throw new TypeError(`'${method}' is not a valid HTTP method.`)
      }

      if (forbiddenMethodsSet.has(method.toUpperCase())) {
        throw new TypeError(`'${method}' HTTP method is unsupported.`)
      }

      // 3. Normalize method.
      method = normalizeMethodRecord[method] ?? normalizeMethod(method)

      // 4. Set request’s method to method.
      request.method = method
    }

    // 26. If init["signal"] exists, then set signal to it.
    if (init.signal !== undefined) {
      signal = init.signal
    }

    // 27. Set this’s request to request.
    this[kState] = request

    // 28. Set this’s signal to a new AbortSignal object with this’s relevant
    // Realm.
    // TODO: could this be simplified with AbortSignal.any
    // (https://dom.spec.whatwg.org/#dom-abortsignal-any)
    const ac = new AbortController()
    this[kSignal] = ac.signal
    this[kSignal][kRealm] = this[kRealm]

    // 29. If signal is not null, then make this’s signal follow signal.
    if (signal != null) {
      if (
        !signal ||
        typeof signal.aborted !== 'boolean' ||
        typeof signal.addEventListener !== 'function'
      ) {
        throw new TypeError(
          "Failed to construct 'Request': member signal is not of type AbortSignal."
        )
      }

      if (signal.aborted) {
        ac.abort(signal.reason)
      } else {
        // Keep a strong ref to ac while request object
        // is alive. This is needed to prevent AbortController
        // from being prematurely garbage collected.
        // See, https://github.com/nodejs/undici/issues/1926.
        this[kAbortController] = ac

        const acRef = new WeakRef(ac)
        const abort = function () {
          const ac = acRef.deref()
          if (ac !== undefined) {
            ac.abort(this.reason)
          }
        }

        // Third-party AbortControllers may not work with these.
        // See, https://github.com/nodejs/undici/pull/1910#issuecomment-1464495619.
        try {
          // If the max amount of listeners is equal to the default, increase it
          // This is only available in node >= v19.9.0
          if (typeof getMaxListeners === 'function' && getMaxListeners(signal) === defaultMaxListeners) {
            setMaxListeners(100, signal)
          } else if (getEventListeners(signal, 'abort').length >= defaultMaxListeners) {
            setMaxListeners(100, signal)
          }
        } catch {}

        util.addAbortListener(signal, abort)
        requestFinalizer.register(ac, { signal, abort })
      }
    }

    // 30. Set this’s headers to a new Headers object with this’s relevant
    // Realm, whose header list is request’s header list and guard is
    // "request".
    this[kHeaders] = new Headers(kConstruct)
    this[kHeaders][kHeadersList] = request.headersList
    this[kHeaders][kGuard] = 'request'
    this[kHeaders][kRealm] = this[kRealm]

    // 31. If this’s request’s mode is "no-cors", then:
    if (mode === 'no-cors') {
      // 1. If this’s request’s method is not a CORS-safelisted method,
      // then throw a TypeError.
      if (!corsSafeListedMethodsSet.has(request.method)) {
        throw new TypeError(
          `'${request.method} is unsupported in no-cors mode.`
        )
      }

      // 2. Set this’s headers’s guard to "request-no-cors".
      this[kHeaders][kGuard] = 'request-no-cors'
    }

    // 32. If init is not empty, then:
    if (initHasKey) {
      /** @type {HeadersList} */
      const headersList = this[kHeaders][kHeadersList]
      // 1. Let headers be a copy of this’s headers and its associated header
      // list.
      // 2. If init["headers"] exists, then set headers to init["headers"].
      const headers = init.headers !== undefined ? init.headers : new HeadersList(headersList)

      // 3. Empty this’s headers’s header list.
      headersList.clear()

      // 4. If headers is a Headers object, then for each header in its header
      // list, append header’s name/header’s value to this’s headers.
      if (headers instanceof HeadersList) {
        for (const [key, val] of headers) {
          headersList.append(key, val)
        }
        // Note: Copy the `set-cookie` meta-data.
        headersList.cookies = headers.cookies
      } else {
        // 5. Otherwise, fill this’s headers with headers.
        fillHeaders(this[kHeaders], headers)
      }
    }

    // 33. Let inputBody be input’s request’s body if input is a Request
    // object; otherwise null.
    const inputBody = input instanceof Request ? input[kState].body : null

    // 34. If either init["body"] exists and is non-null or inputBody is
    // non-null, and request’s method is `GET` or `HEAD`, then throw a
    // TypeError.
    if (
      (init.body != null || inputBody != null) &&
      (request.method === 'GET' || request.method === 'HEAD')
    ) {
      throw new TypeError('Request with GET/HEAD method cannot have body.')
    }

    // 35. Let initBody be null.
    let initBody = null

    // 36. If init["body"] exists and is non-null, then:
    if (init.body != null) {
      // 1. Let Content-Type be null.
      // 2. Set initBody and Content-Type to the result of extracting
      // init["body"], with keepalive set to request’s keepalive.
      const [extractedBody, contentType] = extractBody(
        init.body,
        request.keepalive
      )
      initBody = extractedBody

      // 3, If Content-Type is non-null and this’s headers’s header list does
      // not contain `Content-Type`, then append `Content-Type`/Content-Type to
      // this’s headers.
      if (contentType && !this[kHeaders][kHeadersList].contains('content-type')) {
        this[kHeaders].append('content-type', contentType)
      }
    }

    // 37. Let inputOrInitBody be initBody if it is non-null; otherwise
    // inputBody.
    const inputOrInitBody = initBody ?? inputBody

    // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is
    // null, then:
    if (inputOrInitBody != null && inputOrInitBody.source == null) {
      // 1. If initBody is non-null and init["duplex"] does not exist,
      //    then throw a TypeError.
      if (initBody != null && init.duplex == null) {
        throw new TypeError('RequestInit: duplex option is required when sending a body.')
      }

      // 2. If this’s request’s mode is neither "same-origin" nor "cors",
      // then throw a TypeError.
      if (request.mode !== 'same-origin' && request.mode !== 'cors') {
        throw new TypeError(
          'If request is made from ReadableStream, mode should be "same-origin" or "cors"'
        )
      }

      // 3. Set this’s request’s use-CORS-preflight flag.
      request.useCORSPreflightFlag = true
    }

    // 39. Let finalBody be inputOrInitBody.
    let finalBody = inputOrInitBody

    // 40. If initBody is null and inputBody is non-null, then:
    if (initBody == null && inputBody != null) {
      // 1. If input is unusable, then throw a TypeError.
      if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {
        throw new TypeError(
          'Cannot construct a Request with a Request object that has already been used.'
        )
      }

      // 2. Set finalBody to the result of creating a proxy for inputBody.
      if (!TransformStream) {
        TransformStream = (__nccwpck_require__(5356).TransformStream)
      }

      // https://streams.spec.whatwg.org/#readablestream-create-a-proxy
      const identityTransform = new TransformStream()
      inputBody.stream.pipeThrough(identityTransform)
      finalBody = {
        source: inputBody.source,
        length: inputBody.length,
        stream: identityTransform.readable
      }
    }

    // 41. Set this’s request’s body to finalBody.
    this[kState].body = finalBody
  }

  // Returns request’s HTTP method, which is "GET" by default.
  get method () {
    webidl.brandCheck(this, Request)

    // The method getter steps are to return this’s request’s method.
    return this[kState].method
  }

  // Returns the URL of request as a string.
  get url () {
    webidl.brandCheck(this, Request)

    // The url getter steps are to return this’s request’s URL, serialized.
    return URLSerializer(this[kState].url)
  }

  // Returns a Headers object consisting of the headers associated with request.
  // Note that headers added in the network layer by the user agent will not
  // be accounted for in this object, e.g., the "Host" header.
  get headers () {
    webidl.brandCheck(this, Request)

    // The headers getter steps are to return this’s headers.
    return this[kHeaders]
  }

  // Returns the kind of resource requested by request, e.g., "document"
  // or "script".
  get destination () {
    webidl.brandCheck(this, Request)

    // The destination getter are to return this’s request’s destination.
    return this[kState].destination
  }

  // Returns the referrer of request. Its value can be a same-origin URL if
  // explicitly set in init, the empty string to indicate no referrer, and
  // "about:client" when defaulting to the global’s default. This is used
  // during fetching to determine the value of the `Referer` header of the
  // request being made.
  get referrer () {
    webidl.brandCheck(this, Request)

    // 1. If this’s request’s referrer is "no-referrer", then return the
    // empty string.
    if (this[kState].referrer === 'no-referrer') {
      return ''
    }

    // 2. If this’s request’s referrer is "client", then return
    // "about:client".
    if (this[kState].referrer === 'client') {
      return 'about:client'
    }

    // Return this’s request’s referrer, serialized.
    return this[kState].referrer.toString()
  }

  // Returns the referrer policy associated with request.
  // This is used during fetching to compute the value of the request’s
  // referrer.
  get referrerPolicy () {
    webidl.brandCheck(this, Request)

    // The referrerPolicy getter steps are to return this’s request’s referrer policy.
    return this[kState].referrerPolicy
  }

  // Returns the mode associated with request, which is a string indicating
  // whether the request will use CORS, or will be restricted to same-origin
  // URLs.
  get mode () {
    webidl.brandCheck(this, Request)

    // The mode getter steps are to return this’s request’s mode.
    return this[kState].mode
  }

  // Returns the credentials mode associated with request,
  // which is a string indicating whether credentials will be sent with the
  // request always, never, or only when sent to a same-origin URL.
  get credentials () {
    // The credentials getter steps are to return this’s request’s credentials mode.
    return this[kState].credentials
  }

  // Returns the cache mode associated with request,
  // which is a string indicating how the request will
  // interact with the browser’s cache when fetching.
  get cache () {
    webidl.brandCheck(this, Request)

    // The cache getter steps are to return this’s request’s cache mode.
    return this[kState].cache
  }

  // Returns the redirect mode associated with request,
  // which is a string indicating how redirects for the
  // request will be handled during fetching. A request
  // will follow redirects by default.
  get redirect () {
    webidl.brandCheck(this, Request)

    // The redirect getter steps are to return this’s request’s redirect mode.
    return this[kState].redirect
  }

  // Returns request’s subresource integrity metadata, which is a
  // cryptographic hash of the resource being fetched. Its value
  // consists of multiple hashes separated by whitespace. [SRI]
  get integrity () {
    webidl.brandCheck(this, Request)

    // The integrity getter steps are to return this’s request’s integrity
    // metadata.
    return this[kState].integrity
  }

  // Returns a boolean indicating whether or not request can outlive the
  // global in which it was created.
  get keepalive () {
    webidl.brandCheck(this, Request)

    // The keepalive getter steps are to return this’s request’s keepalive.
    return this[kState].keepalive
  }

  // Returns a boolean indicating whether or not request is for a reload
  // navigation.
  get isReloadNavigation () {
    webidl.brandCheck(this, Request)

    // The isReloadNavigation getter steps are to return true if this’s
    // request’s reload-navigation flag is set; otherwise false.
    return this[kState].reloadNavigation
  }

  // Returns a boolean indicating whether or not request is for a history
  // navigation (a.k.a. back-foward navigation).
  get isHistoryNavigation () {
    webidl.brandCheck(this, Request)

    // The isHistoryNavigation getter steps are to return true if this’s request’s
    // history-navigation flag is set; otherwise false.
    return this[kState].historyNavigation
  }

  // Returns the signal associated with request, which is an AbortSignal
  // object indicating whether or not request has been aborted, and its
  // abort event handler.
  get signal () {
    webidl.brandCheck(this, Request)

    // The signal getter steps are to return this’s signal.
    return this[kSignal]
  }

  get body () {
    webidl.brandCheck(this, Request)

    return this[kState].body ? this[kState].body.stream : null
  }

  get bodyUsed () {
    webidl.brandCheck(this, Request)

    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)
  }

  get duplex () {
    webidl.brandCheck(this, Request)

    return 'half'
  }

  // Returns a clone of request.
  clone () {
    webidl.brandCheck(this, Request)

    // 1. If this is unusable, then throw a TypeError.
    if (this.bodyUsed || this.body?.locked) {
      throw new TypeError('unusable')
    }

    // 2. Let clonedRequest be the result of cloning this’s request.
    const clonedRequest = cloneRequest(this[kState])

    // 3. Let clonedRequestObject be the result of creating a Request object,
    // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.
    const clonedRequestObject = new Request(kConstruct)
    clonedRequestObject[kState] = clonedRequest
    clonedRequestObject[kRealm] = this[kRealm]
    clonedRequestObject[kHeaders] = new Headers(kConstruct)
    clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList
    clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard]
    clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm]

    // 4. Make clonedRequestObject’s signal follow this’s signal.
    const ac = new AbortController()
    if (this.signal.aborted) {
      ac.abort(this.signal.reason)
    } else {
      util.addAbortListener(
        this.signal,
        () => {
          ac.abort(this.signal.reason)
        }
      )
    }
    clonedRequestObject[kSignal] = ac.signal

    // 4. Return clonedRequestObject.
    return clonedRequestObject
  }
}

mixinBody(Request)

function makeRequest (init) {
  // https://fetch.spec.whatwg.org/#requests
  const request = {
    method: 'GET',
    localURLsOnly: false,
    unsafeRequest: false,
    body: null,
    client: null,
    reservedClient: null,
    replacesClientId: '',
    window: 'client',
    keepalive: false,
    serviceWorkers: 'all',
    initiator: '',
    destination: '',
    priority: null,
    origin: 'client',
    policyContainer: 'client',
    referrer: 'client',
    referrerPolicy: '',
    mode: 'no-cors',
    useCORSPreflightFlag: false,
    credentials: 'same-origin',
    useCredentials: false,
    cache: 'default',
    redirect: 'follow',
    integrity: '',
    cryptoGraphicsNonceMetadata: '',
    parserMetadata: '',
    reloadNavigation: false,
    historyNavigation: false,
    userActivation: false,
    taintedOrigin: false,
    redirectCount: 0,
    responseTainting: 'basic',
    preventNoCacheCacheControlHeaderModification: false,
    done: false,
    timingAllowFailed: false,
    ...init,
    headersList: init.headersList
      ? new HeadersList(init.headersList)
      : new HeadersList()
  }
  request.url = request.urlList[0]
  return request
}

// https://fetch.spec.whatwg.org/#concept-request-clone
function cloneRequest (request) {
  // To clone a request request, run these steps:

  // 1. Let newRequest be a copy of request, except for its body.
  const newRequest = makeRequest({ ...request, body: null })

  // 2. If request’s body is non-null, set newRequest’s body to the
  // result of cloning request’s body.
  if (request.body != null) {
    newRequest.body = cloneBody(request.body)
  }

  // 3. Return newRequest.
  return newRequest
}

Object.defineProperties(Request.prototype, {
  method: kEnumerableProperty,
  url: kEnumerableProperty,
  headers: kEnumerableProperty,
  redirect: kEnumerableProperty,
  clone: kEnumerableProperty,
  signal: kEnumerableProperty,
  duplex: kEnumerableProperty,
  destination: kEnumerableProperty,
  body: kEnumerableProperty,
  bodyUsed: kEnumerableProperty,
  isHistoryNavigation: kEnumerableProperty,
  isReloadNavigation: kEnumerableProperty,
  keepalive: kEnumerableProperty,
  integrity: kEnumerableProperty,
  cache: kEnumerableProperty,
  credentials: kEnumerableProperty,
  attribute: kEnumerableProperty,
  referrerPolicy: kEnumerableProperty,
  referrer: kEnumerableProperty,
  mode: kEnumerableProperty,
  [Symbol.toStringTag]: {
    value: 'Request',
    configurable: true
  }
})

webidl.converters.Request = webidl.interfaceConverter(
  Request
)

// https://fetch.spec.whatwg.org/#requestinfo
webidl.converters.RequestInfo = function (V) {
  if (typeof V === 'string') {
    return webidl.converters.USVString(V)
  }

  if (V instanceof Request) {
    return webidl.converters.Request(V)
  }

  return webidl.converters.USVString(V)
}

webidl.converters.AbortSignal = webidl.interfaceConverter(
  AbortSignal
)

// https://fetch.spec.whatwg.org/#requestinit
webidl.converters.RequestInit = webidl.dictionaryConverter([
  {
    key: 'method',
    converter: webidl.converters.ByteString
  },
  {
    key: 'headers',
    converter: webidl.converters.HeadersInit
  },
  {
    key: 'body',
    converter: webidl.nullableConverter(
      webidl.converters.BodyInit
    )
  },
  {
    key: 'referrer',
    converter: webidl.converters.USVString
  },
  {
    key: 'referrerPolicy',
    converter: webidl.converters.DOMString,
    // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy
    allowedValues: referrerPolicy
  },
  {
    key: 'mode',
    converter: webidl.converters.DOMString,
    // https://fetch.spec.whatwg.org/#concept-request-mode
    allowedValues: requestMode
  },
  {
    key: 'credentials',
    converter: webidl.converters.DOMString,
    // https://fetch.spec.whatwg.org/#requestcredentials
    allowedValues: requestCredentials
  },
  {
    key: 'cache',
    converter: webidl.converters.DOMString,
    // https://fetch.spec.whatwg.org/#requestcache
    allowedValues: requestCache
  },
  {
    key: 'redirect',
    converter: webidl.converters.DOMString,
    // https://fetch.spec.whatwg.org/#requestredirect
    allowedValues: requestRedirect
  },
  {
    key: 'integrity',
    converter: webidl.converters.DOMString
  },
  {
    key: 'keepalive',
    converter: webidl.converters.boolean
  },
  {
    key: 'signal',
    converter: webidl.nullableConverter(
      (signal) => webidl.converters.AbortSignal(
        signal,
        { strict: false }
      )
    )
  },
  {
    key: 'window',
    converter: webidl.converters.any
  },
  {
    key: 'duplex',
    converter: webidl.converters.DOMString,
    allowedValues: requestDuplex
  }
])

module.exports = { Request, makeRequest }


/***/ }),

/***/ 7823:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { Headers, HeadersList, fill } = __nccwpck_require__(554)
const { extractBody, cloneBody, mixinBody } = __nccwpck_require__(1472)
const util = __nccwpck_require__(3983)
const { kEnumerableProperty } = util
const {
  isValidReasonPhrase,
  isCancelled,
  isAborted,
  isBlobLike,
  serializeJavascriptValueToJSONString,
  isErrorLike,
  isomorphicEncode
} = __nccwpck_require__(2538)
const {
  redirectStatusSet,
  nullBodyStatus,
  DOMException
} = __nccwpck_require__(1037)
const { kState, kHeaders, kGuard, kRealm } = __nccwpck_require__(5861)
const { webidl } = __nccwpck_require__(1744)
const { FormData } = __nccwpck_require__(2015)
const { getGlobalOrigin } = __nccwpck_require__(1246)
const { URLSerializer } = __nccwpck_require__(685)
const { kHeadersList, kConstruct } = __nccwpck_require__(2785)
const assert = __nccwpck_require__(9491)
const { types } = __nccwpck_require__(3837)

const ReadableStream = globalThis.ReadableStream || (__nccwpck_require__(5356).ReadableStream)
const textEncoder = new TextEncoder('utf-8')

// https://fetch.spec.whatwg.org/#response-class
class Response {
  // Creates network error Response.
  static error () {
    // TODO
    const relevantRealm = { settingsObject: {} }

    // The static error() method steps are to return the result of creating a
    // Response object, given a new network error, "immutable", and this’s
    // relevant Realm.
    const responseObject = new Response()
    responseObject[kState] = makeNetworkError()
    responseObject[kRealm] = relevantRealm
    responseObject[kHeaders][kHeadersList] = responseObject[kState].headersList
    responseObject[kHeaders][kGuard] = 'immutable'
    responseObject[kHeaders][kRealm] = relevantRealm
    return responseObject
  }

  // https://fetch.spec.whatwg.org/#dom-response-json
  static json (data, init = {}) {
    webidl.argumentLengthCheck(arguments, 1, { header: 'Response.json' })

    if (init !== null) {
      init = webidl.converters.ResponseInit(init)
    }

    // 1. Let bytes the result of running serialize a JavaScript value to JSON bytes on data.
    const bytes = textEncoder.encode(
      serializeJavascriptValueToJSONString(data)
    )

    // 2. Let body be the result of extracting bytes.
    const body = extractBody(bytes)

    // 3. Let responseObject be the result of creating a Response object, given a new response,
    //    "response", and this’s relevant Realm.
    const relevantRealm = { settingsObject: {} }
    const responseObject = new Response()
    responseObject[kRealm] = relevantRealm
    responseObject[kHeaders][kGuard] = 'response'
    responseObject[kHeaders][kRealm] = relevantRealm

    // 4. Perform initialize a response given responseObject, init, and (body, "application/json").
    initializeResponse(responseObject, init, { body: body[0], type: 'application/json' })

    // 5. Return responseObject.
    return responseObject
  }

  // Creates a redirect Response that redirects to url with status status.
  static redirect (url, status = 302) {
    const relevantRealm = { settingsObject: {} }

    webidl.argumentLengthCheck(arguments, 1, { header: 'Response.redirect' })

    url = webidl.converters.USVString(url)
    status = webidl.converters['unsigned short'](status)

    // 1. Let parsedURL be the result of parsing url with current settings
    // object’s API base URL.
    // 2. If parsedURL is failure, then throw a TypeError.
    // TODO: base-URL?
    let parsedURL
    try {
      parsedURL = new URL(url, getGlobalOrigin())
    } catch (err) {
      throw Object.assign(new TypeError('Failed to parse URL from ' + url), {
        cause: err
      })
    }

    // 3. If status is not a redirect status, then throw a RangeError.
    if (!redirectStatusSet.has(status)) {
      throw new RangeError('Invalid status code ' + status)
    }

    // 4. Let responseObject be the result of creating a Response object,
    // given a new response, "immutable", and this’s relevant Realm.
    const responseObject = new Response()
    responseObject[kRealm] = relevantRealm
    responseObject[kHeaders][kGuard] = 'immutable'
    responseObject[kHeaders][kRealm] = relevantRealm

    // 5. Set responseObject’s response’s status to status.
    responseObject[kState].status = status

    // 6. Let value be parsedURL, serialized and isomorphic encoded.
    const value = isomorphicEncode(URLSerializer(parsedURL))

    // 7. Append `Location`/value to responseObject’s response’s header list.
    responseObject[kState].headersList.append('location', value)

    // 8. Return responseObject.
    return responseObject
  }

  // https://fetch.spec.whatwg.org/#dom-response
  constructor (body = null, init = {}) {
    if (body !== null) {
      body = webidl.converters.BodyInit(body)
    }

    init = webidl.converters.ResponseInit(init)

    // TODO
    this[kRealm] = { settingsObject: {} }

    // 1. Set this’s response to a new response.
    this[kState] = makeResponse({})

    // 2. Set this’s headers to a new Headers object with this’s relevant
    // Realm, whose header list is this’s response’s header list and guard
    // is "response".
    this[kHeaders] = new Headers(kConstruct)
    this[kHeaders][kGuard] = 'response'
    this[kHeaders][kHeadersList] = this[kState].headersList
    this[kHeaders][kRealm] = this[kRealm]

    // 3. Let bodyWithType be null.
    let bodyWithType = null

    // 4. If body is non-null, then set bodyWithType to the result of extracting body.
    if (body != null) {
      const [extractedBody, type] = extractBody(body)
      bodyWithType = { body: extractedBody, type }
    }

    // 5. Perform initialize a response given this, init, and bodyWithType.
    initializeResponse(this, init, bodyWithType)
  }

  // Returns response’s type, e.g., "cors".
  get type () {
    webidl.brandCheck(this, Response)

    // The type getter steps are to return this’s response’s type.
    return this[kState].type
  }

  // Returns response’s URL, if it has one; otherwise the empty string.
  get url () {
    webidl.brandCheck(this, Response)

    const urlList = this[kState].urlList

    // The url getter steps are to return the empty string if this’s
    // response’s URL is null; otherwise this’s response’s URL,
    // serialized with exclude fragment set to true.
    const url = urlList[urlList.length - 1] ?? null

    if (url === null) {
      return ''
    }

    return URLSerializer(url, true)
  }

  // Returns whether response was obtained through a redirect.
  get redirected () {
    webidl.brandCheck(this, Response)

    // The redirected getter steps are to return true if this’s response’s URL
    // list has more than one item; otherwise false.
    return this[kState].urlList.length > 1
  }

  // Returns response’s status.
  get status () {
    webidl.brandCheck(this, Response)

    // The status getter steps are to return this’s response’s status.
    return this[kState].status
  }

  // Returns whether response’s status is an ok status.
  get ok () {
    webidl.brandCheck(this, Response)

    // The ok getter steps are to return true if this’s response’s status is an
    // ok status; otherwise false.
    return this[kState].status >= 200 && this[kState].status <= 299
  }

  // Returns response’s status message.
  get statusText () {
    webidl.brandCheck(this, Response)

    // The statusText getter steps are to return this’s response’s status
    // message.
    return this[kState].statusText
  }

  // Returns response’s headers as Headers.
  get headers () {
    webidl.brandCheck(this, Response)

    // The headers getter steps are to return this’s headers.
    return this[kHeaders]
  }

  get body () {
    webidl.brandCheck(this, Response)

    return this[kState].body ? this[kState].body.stream : null
  }

  get bodyUsed () {
    webidl.brandCheck(this, Response)

    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)
  }

  // Returns a clone of response.
  clone () {
    webidl.brandCheck(this, Response)

    // 1. If this is unusable, then throw a TypeError.
    if (this.bodyUsed || (this.body && this.body.locked)) {
      throw webidl.errors.exception({
        header: 'Response.clone',
        message: 'Body has already been consumed.'
      })
    }

    // 2. Let clonedResponse be the result of cloning this’s response.
    const clonedResponse = cloneResponse(this[kState])

    // 3. Return the result of creating a Response object, given
    // clonedResponse, this’s headers’s guard, and this’s relevant Realm.
    const clonedResponseObject = new Response()
    clonedResponseObject[kState] = clonedResponse
    clonedResponseObject[kRealm] = this[kRealm]
    clonedResponseObject[kHeaders][kHeadersList] = clonedResponse.headersList
    clonedResponseObject[kHeaders][kGuard] = this[kHeaders][kGuard]
    clonedResponseObject[kHeaders][kRealm] = this[kHeaders][kRealm]

    return clonedResponseObject
  }
}

mixinBody(Response)

Object.defineProperties(Response.prototype, {
  type: kEnumerableProperty,
  url: kEnumerableProperty,
  status: kEnumerableProperty,
  ok: kEnumerableProperty,
  redirected: kEnumerableProperty,
  statusText: kEnumerableProperty,
  headers: kEnumerableProperty,
  clone: kEnumerableProperty,
  body: kEnumerableProperty,
  bodyUsed: kEnumerableProperty,
  [Symbol.toStringTag]: {
    value: 'Response',
    configurable: true
  }
})

Object.defineProperties(Response, {
  json: kEnumerableProperty,
  redirect: kEnumerableProperty,
  error: kEnumerableProperty
})

// https://fetch.spec.whatwg.org/#concept-response-clone
function cloneResponse (response) {
  // To clone a response response, run these steps:

  // 1. If response is a filtered response, then return a new identical
  // filtered response whose internal response is a clone of response’s
  // internal response.
  if (response.internalResponse) {
    return filterResponse(
      cloneResponse(response.internalResponse),
      response.type
    )
  }

  // 2. Let newResponse be a copy of response, except for its body.
  const newResponse = makeResponse({ ...response, body: null })

  // 3. If response’s body is non-null, then set newResponse’s body to the
  // result of cloning response’s body.
  if (response.body != null) {
    newResponse.body = cloneBody(response.body)
  }

  // 4. Return newResponse.
  return newResponse
}

function makeResponse (init) {
  return {
    aborted: false,
    rangeRequested: false,
    timingAllowPassed: false,
    requestIncludesCredentials: false,
    type: 'default',
    status: 200,
    timingInfo: null,
    cacheState: '',
    statusText: '',
    ...init,
    headersList: init.headersList
      ? new HeadersList(init.headersList)
      : new HeadersList(),
    urlList: init.urlList ? [...init.urlList] : []
  }
}

function makeNetworkError (reason) {
  const isError = isErrorLike(reason)
  return makeResponse({
    type: 'error',
    status: 0,
    error: isError
      ? reason
      : new Error(reason ? String(reason) : reason),
    aborted: reason && reason.name === 'AbortError'
  })
}

function makeFilteredResponse (response, state) {
  state = {
    internalResponse: response,
    ...state
  }

  return new Proxy(response, {
    get (target, p) {
      return p in state ? state[p] : target[p]
    },
    set (target, p, value) {
      assert(!(p in state))
      target[p] = value
      return true
    }
  })
}

// https://fetch.spec.whatwg.org/#concept-filtered-response
function filterResponse (response, type) {
  // Set response to the following filtered response with response as its
  // internal response, depending on request’s response tainting:
  if (type === 'basic') {
    // A basic filtered response is a filtered response whose type is "basic"
    // and header list excludes any headers in internal response’s header list
    // whose name is a forbidden response-header name.

    // Note: undici does not implement forbidden response-header names
    return makeFilteredResponse(response, {
      type: 'basic',
      headersList: response.headersList
    })
  } else if (type === 'cors') {
    // A CORS filtered response is a filtered response whose type is "cors"
    // and header list excludes any headers in internal response’s header
    // list whose name is not a CORS-safelisted response-header name, given
    // internal response’s CORS-exposed header-name list.

    // Note: undici does not implement CORS-safelisted response-header names
    return makeFilteredResponse(response, {
      type: 'cors',
      headersList: response.headersList
    })
  } else if (type === 'opaque') {
    // An opaque filtered response is a filtered response whose type is
    // "opaque", URL list is the empty list, status is 0, status message
    // is the empty byte sequence, header list is empty, and body is null.

    return makeFilteredResponse(response, {
      type: 'opaque',
      urlList: Object.freeze([]),
      status: 0,
      statusText: '',
      body: null
    })
  } else if (type === 'opaqueredirect') {
    // An opaque-redirect filtered response is a filtered response whose type
    // is "opaqueredirect", status is 0, status message is the empty byte
    // sequence, header list is empty, and body is null.

    return makeFilteredResponse(response, {
      type: 'opaqueredirect',
      status: 0,
      statusText: '',
      headersList: [],
      body: null
    })
  } else {
    assert(false)
  }
}

// https://fetch.spec.whatwg.org/#appropriate-network-error
function makeAppropriateNetworkError (fetchParams, err = null) {
  // 1. Assert: fetchParams is canceled.
  assert(isCancelled(fetchParams))

  // 2. Return an aborted network error if fetchParams is aborted;
  // otherwise return a network error.
  return isAborted(fetchParams)
    ? makeNetworkError(Object.assign(new DOMException('The operation was aborted.', 'AbortError'), { cause: err }))
    : makeNetworkError(Object.assign(new DOMException('Request was cancelled.'), { cause: err }))
}

// https://whatpr.org/fetch/1392.html#initialize-a-response
function initializeResponse (response, init, body) {
  // 1. If init["status"] is not in the range 200 to 599, inclusive, then
  //    throw a RangeError.
  if (init.status !== null && (init.status < 200 || init.status > 599)) {
    throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.')
  }

  // 2. If init["statusText"] does not match the reason-phrase token production,
  //    then throw a TypeError.
  if ('statusText' in init && init.statusText != null) {
    // See, https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.2:
    //   reason-phrase  = *( HTAB / SP / VCHAR / obs-text )
    if (!isValidReasonPhrase(String(init.statusText))) {
      throw new TypeError('Invalid statusText')
    }
  }

  // 3. Set response’s response’s status to init["status"].
  if ('status' in init && init.status != null) {
    response[kState].status = init.status
  }

  // 4. Set response’s response’s status message to init["statusText"].
  if ('statusText' in init && init.statusText != null) {
    response[kState].statusText = init.statusText
  }

  // 5. If init["headers"] exists, then fill response’s headers with init["headers"].
  if ('headers' in init && init.headers != null) {
    fill(response[kHeaders], init.headers)
  }

  // 6. If body was given, then:
  if (body) {
    // 1. If response's status is a null body status, then throw a TypeError.
    if (nullBodyStatus.includes(response.status)) {
      throw webidl.errors.exception({
        header: 'Response constructor',
        message: 'Invalid response status code ' + response.status
      })
    }

    // 2. Set response's body to body's body.
    response[kState].body = body.body

    // 3. If body's type is non-null and response's header list does not contain
    //    `Content-Type`, then append (`Content-Type`, body's type) to response's header list.
    if (body.type != null && !response[kState].headersList.contains('Content-Type')) {
      response[kState].headersList.append('content-type', body.type)
    }
  }
}

webidl.converters.ReadableStream = webidl.interfaceConverter(
  ReadableStream
)

webidl.converters.FormData = webidl.interfaceConverter(
  FormData
)

webidl.converters.URLSearchParams = webidl.interfaceConverter(
  URLSearchParams
)

// https://fetch.spec.whatwg.org/#typedefdef-xmlhttprequestbodyinit
webidl.converters.XMLHttpRequestBodyInit = function (V) {
  if (typeof V === 'string') {
    return webidl.converters.USVString(V)
  }

  if (isBlobLike(V)) {
    return webidl.converters.Blob(V, { strict: false })
  }

  if (types.isArrayBuffer(V) || types.isTypedArray(V) || types.isDataView(V)) {
    return webidl.converters.BufferSource(V)
  }

  if (util.isFormDataLike(V)) {
    return webidl.converters.FormData(V, { strict: false })
  }

  if (V instanceof URLSearchParams) {
    return webidl.converters.URLSearchParams(V)
  }

  return webidl.converters.DOMString(V)
}

// https://fetch.spec.whatwg.org/#bodyinit
webidl.converters.BodyInit = function (V) {
  if (V instanceof ReadableStream) {
    return webidl.converters.ReadableStream(V)
  }

  // Note: the spec doesn't include async iterables,
  // this is an undici extension.
  if (V?.[Symbol.asyncIterator]) {
    return V
  }

  return webidl.converters.XMLHttpRequestBodyInit(V)
}

webidl.converters.ResponseInit = webidl.dictionaryConverter([
  {
    key: 'status',
    converter: webidl.converters['unsigned short'],
    defaultValue: 200
  },
  {
    key: 'statusText',
    converter: webidl.converters.ByteString,
    defaultValue: ''
  },
  {
    key: 'headers',
    converter: webidl.converters.HeadersInit
  }
])

module.exports = {
  makeNetworkError,
  makeResponse,
  makeAppropriateNetworkError,
  filterResponse,
  Response,
  cloneResponse
}


/***/ }),

/***/ 5861:
/***/ ((module) => {

"use strict";


module.exports = {
  kUrl: Symbol('url'),
  kHeaders: Symbol('headers'),
  kSignal: Symbol('signal'),
  kState: Symbol('state'),
  kGuard: Symbol('guard'),
  kRealm: Symbol('realm')
}


/***/ }),

/***/ 2538:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { redirectStatusSet, referrerPolicySet: referrerPolicyTokens, badPortsSet } = __nccwpck_require__(1037)
const { getGlobalOrigin } = __nccwpck_require__(1246)
const { performance } = __nccwpck_require__(4074)
const { isBlobLike, toUSVString, ReadableStreamFrom } = __nccwpck_require__(3983)
const assert = __nccwpck_require__(9491)
const { isUint8Array } = __nccwpck_require__(9830)

let supportedHashes = []

// https://nodejs.org/api/crypto.html#determining-if-crypto-support-is-unavailable
/** @type {import('crypto')|undefined} */
let crypto

try {
  crypto = __nccwpck_require__(6113)
  const possibleRelevantHashes = ['sha256', 'sha384', 'sha512']
  supportedHashes = crypto.getHashes().filter((hash) => possibleRelevantHashes.includes(hash))
/* c8 ignore next 3 */
} catch {
}

function responseURL (response) {
  // https://fetch.spec.whatwg.org/#responses
  // A response has an associated URL. It is a pointer to the last URL
  // in response’s URL list and null if response’s URL list is empty.
  const urlList = response.urlList
  const length = urlList.length
  return length === 0 ? null : urlList[length - 1].toString()
}

// https://fetch.spec.whatwg.org/#concept-response-location-url
function responseLocationURL (response, requestFragment) {
  // 1. If response’s status is not a redirect status, then return null.
  if (!redirectStatusSet.has(response.status)) {
    return null
  }

  // 2. Let location be the result of extracting header list values given
  // `Location` and response’s header list.
  let location = response.headersList.get('location')

  // 3. If location is a header value, then set location to the result of
  //    parsing location with response’s URL.
  if (location !== null && isValidHeaderValue(location)) {
    location = new URL(location, responseURL(response))
  }

  // 4. If location is a URL whose fragment is null, then set location’s
  // fragment to requestFragment.
  if (location && !location.hash) {
    location.hash = requestFragment
  }

  // 5. Return location.
  return location
}

/** @returns {URL} */
function requestCurrentURL (request) {
  return request.urlList[request.urlList.length - 1]
}

function requestBadPort (request) {
  // 1. Let url be request’s current URL.
  const url = requestCurrentURL(request)

  // 2. If url’s scheme is an HTTP(S) scheme and url’s port is a bad port,
  // then return blocked.
  if (urlIsHttpHttpsScheme(url) && badPortsSet.has(url.port)) {
    return 'blocked'
  }

  // 3. Return allowed.
  return 'allowed'
}

function isErrorLike (object) {
  return object instanceof Error || (
    object?.constructor?.name === 'Error' ||
    object?.constructor?.name === 'DOMException'
  )
}

// Check whether |statusText| is a ByteString and
// matches the Reason-Phrase token production.
// RFC 2616: https://tools.ietf.org/html/rfc2616
// RFC 7230: https://tools.ietf.org/html/rfc7230
// "reason-phrase = *( HTAB / SP / VCHAR / obs-text )"
// https://github.com/chromium/chromium/blob/94.0.4604.1/third_party/blink/renderer/core/fetch/response.cc#L116
function isValidReasonPhrase (statusText) {
  for (let i = 0; i < statusText.length; ++i) {
    const c = statusText.charCodeAt(i)
    if (
      !(
        (
          c === 0x09 || // HTAB
          (c >= 0x20 && c <= 0x7e) || // SP / VCHAR
          (c >= 0x80 && c <= 0xff)
        ) // obs-text
      )
    ) {
      return false
    }
  }
  return true
}

/**
 * @see https://tools.ietf.org/html/rfc7230#section-3.2.6
 * @param {number} c
 */
function isTokenCharCode (c) {
  switch (c) {
    case 0x22:
    case 0x28:
    case 0x29:
    case 0x2c:
    case 0x2f:
    case 0x3a:
    case 0x3b:
    case 0x3c:
    case 0x3d:
    case 0x3e:
    case 0x3f:
    case 0x40:
    case 0x5b:
    case 0x5c:
    case 0x5d:
    case 0x7b:
    case 0x7d:
      // DQUOTE and "(),/:;<=>?@[\]{}"
      return false
    default:
      // VCHAR %x21-7E
      return c >= 0x21 && c <= 0x7e
  }
}

/**
 * @param {string} characters
 */
function isValidHTTPToken (characters) {
  if (characters.length === 0) {
    return false
  }
  for (let i = 0; i < characters.length; ++i) {
    if (!isTokenCharCode(characters.charCodeAt(i))) {
      return false
    }
  }
  return true
}

/**
 * @see https://fetch.spec.whatwg.org/#header-name
 * @param {string} potentialValue
 */
function isValidHeaderName (potentialValue) {
  return isValidHTTPToken(potentialValue)
}

/**
 * @see https://fetch.spec.whatwg.org/#header-value
 * @param {string} potentialValue
 */
function isValidHeaderValue (potentialValue) {
  // - Has no leading or trailing HTTP tab or space bytes.
  // - Contains no 0x00 (NUL) or HTTP newline bytes.
  if (
    potentialValue.startsWith('\t') ||
    potentialValue.startsWith(' ') ||
    potentialValue.endsWith('\t') ||
    potentialValue.endsWith(' ')
  ) {
    return false
  }

  if (
    potentialValue.includes('\0') ||
    potentialValue.includes('\r') ||
    potentialValue.includes('\n')
  ) {
    return false
  }

  return true
}

// https://w3c.github.io/webappsec-referrer-policy/#set-requests-referrer-policy-on-redirect
function setRequestReferrerPolicyOnRedirect (request, actualResponse) {
  //  Given a request request and a response actualResponse, this algorithm
  //  updates request’s referrer policy according to the Referrer-Policy
  //  header (if any) in actualResponse.

  // 1. Let policy be the result of executing § 8.1 Parse a referrer policy
  // from a Referrer-Policy header on actualResponse.

  // 8.1 Parse a referrer policy from a Referrer-Policy header
  // 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy` and response’s header list.
  const { headersList } = actualResponse
  // 2. Let policy be the empty string.
  // 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty string, then set policy to token.
  // 4. Return policy.
  const policyHeader = (headersList.get('referrer-policy') ?? '').split(',')

  // Note: As the referrer-policy can contain multiple policies
  // separated by comma, we need to loop through all of them
  // and pick the first valid one.
  // Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy#specify_a_fallback_policy
  let policy = ''
  if (policyHeader.length > 0) {
    // The right-most policy takes precedence.
    // The left-most policy is the fallback.
    for (let i = policyHeader.length; i !== 0; i--) {
      const token = policyHeader[i - 1].trim()
      if (referrerPolicyTokens.has(token)) {
        policy = token
        break
      }
    }
  }

  // 2. If policy is not the empty string, then set request’s referrer policy to policy.
  if (policy !== '') {
    request.referrerPolicy = policy
  }
}

// https://fetch.spec.whatwg.org/#cross-origin-resource-policy-check
function crossOriginResourcePolicyCheck () {
  // TODO
  return 'allowed'
}

// https://fetch.spec.whatwg.org/#concept-cors-check
function corsCheck () {
  // TODO
  return 'success'
}

// https://fetch.spec.whatwg.org/#concept-tao-check
function TAOCheck () {
  // TODO
  return 'success'
}

function appendFetchMetadata (httpRequest) {
  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-dest-header
  //  TODO

  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-mode-header

  //  1. Assert: r’s url is a potentially trustworthy URL.
  //  TODO

  //  2. Let header be a Structured Header whose value is a token.
  let header = null

  //  3. Set header’s value to r’s mode.
  header = httpRequest.mode

  //  4. Set a structured field value `Sec-Fetch-Mode`/header in r’s header list.
  httpRequest.headersList.set('sec-fetch-mode', header)

  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-site-header
  //  TODO

  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-user-header
  //  TODO
}

// https://fetch.spec.whatwg.org/#append-a-request-origin-header
function appendRequestOriginHeader (request) {
  // 1. Let serializedOrigin be the result of byte-serializing a request origin with request.
  let serializedOrigin = request.origin

  // 2. If request’s response tainting is "cors" or request’s mode is "websocket", then append (`Origin`, serializedOrigin) to request’s header list.
  if (request.responseTainting === 'cors' || request.mode === 'websocket') {
    if (serializedOrigin) {
      request.headersList.append('origin', serializedOrigin)
    }

  // 3. Otherwise, if request’s method is neither `GET` nor `HEAD`, then:
  } else if (request.method !== 'GET' && request.method !== 'HEAD') {
    // 1. Switch on request’s referrer policy:
    switch (request.referrerPolicy) {
      case 'no-referrer':
        // Set serializedOrigin to `null`.
        serializedOrigin = null
        break
      case 'no-referrer-when-downgrade':
      case 'strict-origin':
      case 'strict-origin-when-cross-origin':
        // If request’s origin is a tuple origin, its scheme is "https", and request’s current URL’s scheme is not "https", then set serializedOrigin to `null`.
        if (request.origin && urlHasHttpsScheme(request.origin) && !urlHasHttpsScheme(requestCurrentURL(request))) {
          serializedOrigin = null
        }
        break
      case 'same-origin':
        // If request’s origin is not same origin with request’s current URL’s origin, then set serializedOrigin to `null`.
        if (!sameOrigin(request, requestCurrentURL(request))) {
          serializedOrigin = null
        }
        break
      default:
        // Do nothing.
    }

    if (serializedOrigin) {
      // 2. Append (`Origin`, serializedOrigin) to request’s header list.
      request.headersList.append('origin', serializedOrigin)
    }
  }
}

function coarsenedSharedCurrentTime (crossOriginIsolatedCapability) {
  // TODO
  return performance.now()
}

// https://fetch.spec.whatwg.org/#create-an-opaque-timing-info
function createOpaqueTimingInfo (timingInfo) {
  return {
    startTime: timingInfo.startTime ?? 0,
    redirectStartTime: 0,
    redirectEndTime: 0,
    postRedirectStartTime: timingInfo.startTime ?? 0,
    finalServiceWorkerStartTime: 0,
    finalNetworkResponseStartTime: 0,
    finalNetworkRequestStartTime: 0,
    endTime: 0,
    encodedBodySize: 0,
    decodedBodySize: 0,
    finalConnectionTimingInfo: null
  }
}

// https://html.spec.whatwg.org/multipage/origin.html#policy-container
function makePolicyContainer () {
  // Note: the fetch spec doesn't make use of embedder policy or CSP list
  return {
    referrerPolicy: 'strict-origin-when-cross-origin'
  }
}

// https://html.spec.whatwg.org/multipage/origin.html#clone-a-policy-container
function clonePolicyContainer (policyContainer) {
  return {
    referrerPolicy: policyContainer.referrerPolicy
  }
}

// https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer
function determineRequestsReferrer (request) {
  // 1. Let policy be request's referrer policy.
  const policy = request.referrerPolicy

  // Note: policy cannot (shouldn't) be null or an empty string.
  assert(policy)

  // 2. Let environment be request’s client.

  let referrerSource = null

  // 3. Switch on request’s referrer:
  if (request.referrer === 'client') {
    // Note: node isn't a browser and doesn't implement document/iframes,
    // so we bypass this step and replace it with our own.

    const globalOrigin = getGlobalOrigin()

    if (!globalOrigin || globalOrigin.origin === 'null') {
      return 'no-referrer'
    }

    // note: we need to clone it as it's mutated
    referrerSource = new URL(globalOrigin)
  } else if (request.referrer instanceof URL) {
    // Let referrerSource be request’s referrer.
    referrerSource = request.referrer
  }

  // 4. Let request’s referrerURL be the result of stripping referrerSource for
  //    use as a referrer.
  let referrerURL = stripURLForReferrer(referrerSource)

  // 5. Let referrerOrigin be the result of stripping referrerSource for use as
  //    a referrer, with the origin-only flag set to true.
  const referrerOrigin = stripURLForReferrer(referrerSource, true)

  // 6. If the result of serializing referrerURL is a string whose length is
  //    greater than 4096, set referrerURL to referrerOrigin.
  if (referrerURL.toString().length > 4096) {
    referrerURL = referrerOrigin
  }

  const areSameOrigin = sameOrigin(request, referrerURL)
  const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) &&
    !isURLPotentiallyTrustworthy(request.url)

  // 8. Execute the switch statements corresponding to the value of policy:
  switch (policy) {
    case 'origin': return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true)
    case 'unsafe-url': return referrerURL
    case 'same-origin':
      return areSameOrigin ? referrerOrigin : 'no-referrer'
    case 'origin-when-cross-origin':
      return areSameOrigin ? referrerURL : referrerOrigin
    case 'strict-origin-when-cross-origin': {
      const currentURL = requestCurrentURL(request)

      // 1. If the origin of referrerURL and the origin of request’s current
      //    URL are the same, then return referrerURL.
      if (sameOrigin(referrerURL, currentURL)) {
        return referrerURL
      }

      // 2. If referrerURL is a potentially trustworthy URL and request’s
      //    current URL is not a potentially trustworthy URL, then return no
      //    referrer.
      if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {
        return 'no-referrer'
      }

      // 3. Return referrerOrigin.
      return referrerOrigin
    }
    case 'strict-origin': // eslint-disable-line
      /**
         * 1. If referrerURL is a potentially trustworthy URL and
         * request’s current URL is not a potentially trustworthy URL,
         * then return no referrer.
         * 2. Return referrerOrigin
        */
    case 'no-referrer-when-downgrade': // eslint-disable-line
      /**
       * 1. If referrerURL is a potentially trustworthy URL and
       * request’s current URL is not a potentially trustworthy URL,
       * then return no referrer.
       * 2. Return referrerOrigin
      */

    default: // eslint-disable-line
      return isNonPotentiallyTrustWorthy ? 'no-referrer' : referrerOrigin
  }
}

/**
 * @see https://w3c.github.io/webappsec-referrer-policy/#strip-url
 * @param {URL} url
 * @param {boolean|undefined} originOnly
 */
function stripURLForReferrer (url, originOnly) {
  // 1. Assert: url is a URL.
  assert(url instanceof URL)

  // 2. If url’s scheme is a local scheme, then return no referrer.
  if (url.protocol === 'file:' || url.protocol === 'about:' || url.protocol === 'blank:') {
    return 'no-referrer'
  }

  // 3. Set url’s username to the empty string.
  url.username = ''

  // 4. Set url’s password to the empty string.
  url.password = ''

  // 5. Set url’s fragment to null.
  url.hash = ''

  // 6. If the origin-only flag is true, then:
  if (originOnly) {
    // 1. Set url’s path to « the empty string ».
    url.pathname = ''

    // 2. Set url’s query to null.
    url.search = ''
  }

  // 7. Return url.
  return url
}

function isURLPotentiallyTrustworthy (url) {
  if (!(url instanceof URL)) {
    return false
  }

  // If child of about, return true
  if (url.href === 'about:blank' || url.href === 'about:srcdoc') {
    return true
  }

  // If scheme is data, return true
  if (url.protocol === 'data:') return true

  // If file, return true
  if (url.protocol === 'file:') return true

  return isOriginPotentiallyTrustworthy(url.origin)

  function isOriginPotentiallyTrustworthy (origin) {
    // If origin is explicitly null, return false
    if (origin == null || origin === 'null') return false

    const originAsURL = new URL(origin)

    // If secure, return true
    if (originAsURL.protocol === 'https:' || originAsURL.protocol === 'wss:') {
      return true
    }

    // If localhost or variants, return true
    if (/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(originAsURL.hostname) ||
     (originAsURL.hostname === 'localhost' || originAsURL.hostname.includes('localhost.')) ||
     (originAsURL.hostname.endsWith('.localhost'))) {
      return true
    }

    // If any other, return false
    return false
  }
}

/**
 * @see https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist
 * @param {Uint8Array} bytes
 * @param {string} metadataList
 */
function bytesMatch (bytes, metadataList) {
  // If node is not built with OpenSSL support, we cannot check
  // a request's integrity, so allow it by default (the spec will
  // allow requests if an invalid hash is given, as precedence).
  /* istanbul ignore if: only if node is built with --without-ssl */
  if (crypto === undefined) {
    return true
  }

  // 1. Let parsedMetadata be the result of parsing metadataList.
  const parsedMetadata = parseMetadata(metadataList)

  // 2. If parsedMetadata is no metadata, return true.
  if (parsedMetadata === 'no metadata') {
    return true
  }

  // 3. If response is not eligible for integrity validation, return false.
  // TODO

  // 4. If parsedMetadata is the empty set, return true.
  if (parsedMetadata.length === 0) {
    return true
  }

  // 5. Let metadata be the result of getting the strongest
  //    metadata from parsedMetadata.
  const strongest = getStrongestMetadata(parsedMetadata)
  const metadata = filterMetadataListByAlgorithm(parsedMetadata, strongest)

  // 6. For each item in metadata:
  for (const item of metadata) {
    // 1. Let algorithm be the alg component of item.
    const algorithm = item.algo

    // 2. Let expectedValue be the val component of item.
    const expectedValue = item.hash

    // See https://github.com/web-platform-tests/wpt/commit/e4c5cc7a5e48093220528dfdd1c4012dc3837a0e
    // "be liberal with padding". This is annoying, and it's not even in the spec.

    // 3. Let actualValue be the result of applying algorithm to bytes.
    let actualValue = crypto.createHash(algorithm).update(bytes).digest('base64')

    if (actualValue[actualValue.length - 1] === '=') {
      if (actualValue[actualValue.length - 2] === '=') {
        actualValue = actualValue.slice(0, -2)
      } else {
        actualValue = actualValue.slice(0, -1)
      }
    }

    // 4. If actualValue is a case-sensitive match for expectedValue,
    //    return true.
    if (compareBase64Mixed(actualValue, expectedValue)) {
      return true
    }
  }

  // 7. Return false.
  return false
}

// https://w3c.github.io/webappsec-subresource-integrity/#grammardef-hash-with-options
// https://www.w3.org/TR/CSP2/#source-list-syntax
// https://www.rfc-editor.org/rfc/rfc5234#appendix-B.1
const parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i

/**
 * @see https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata
 * @param {string} metadata
 */
function parseMetadata (metadata) {
  // 1. Let result be the empty set.
  /** @type {{ algo: string, hash: string }[]} */
  const result = []

  // 2. Let empty be equal to true.
  let empty = true

  // 3. For each token returned by splitting metadata on spaces:
  for (const token of metadata.split(' ')) {
    // 1. Set empty to false.
    empty = false

    // 2. Parse token as a hash-with-options.
    const parsedToken = parseHashWithOptions.exec(token)

    // 3. If token does not parse, continue to the next token.
    if (
      parsedToken === null ||
      parsedToken.groups === undefined ||
      parsedToken.groups.algo === undefined
    ) {
      // Note: Chromium blocks the request at this point, but Firefox
      // gives a warning that an invalid integrity was given. The
      // correct behavior is to ignore these, and subsequently not
      // check the integrity of the resource.
      continue
    }

    // 4. Let algorithm be the hash-algo component of token.
    const algorithm = parsedToken.groups.algo.toLowerCase()

    // 5. If algorithm is a hash function recognized by the user
    //    agent, add the parsed token to result.
    if (supportedHashes.includes(algorithm)) {
      result.push(parsedToken.groups)
    }
  }

  // 4. Return no metadata if empty is true, otherwise return result.
  if (empty === true) {
    return 'no metadata'
  }

  return result
}

/**
 * @param {{ algo: 'sha256' | 'sha384' | 'sha512' }[]} metadataList
 */
function getStrongestMetadata (metadataList) {
  // Let algorithm be the algo component of the first item in metadataList.
  // Can be sha256
  let algorithm = metadataList[0].algo
  // If the algorithm is sha512, then it is the strongest
  // and we can return immediately
  if (algorithm[3] === '5') {
    return algorithm
  }

  for (let i = 1; i < metadataList.length; ++i) {
    const metadata = metadataList[i]
    // If the algorithm is sha512, then it is the strongest
    // and we can break the loop immediately
    if (metadata.algo[3] === '5') {
      algorithm = 'sha512'
      break
    // If the algorithm is sha384, then a potential sha256 or sha384 is ignored
    } else if (algorithm[3] === '3') {
      continue
    // algorithm is sha256, check if algorithm is sha384 and if so, set it as
    // the strongest
    } else if (metadata.algo[3] === '3') {
      algorithm = 'sha384'
    }
  }
  return algorithm
}

function filterMetadataListByAlgorithm (metadataList, algorithm) {
  if (metadataList.length === 1) {
    return metadataList
  }

  let pos = 0
  for (let i = 0; i < metadataList.length; ++i) {
    if (metadataList[i].algo === algorithm) {
      metadataList[pos++] = metadataList[i]
    }
  }

  metadataList.length = pos

  return metadataList
}

/**
 * Compares two base64 strings, allowing for base64url
 * in the second string.
 *
* @param {string} actualValue always base64
 * @param {string} expectedValue base64 or base64url
 * @returns {boolean}
 */
function compareBase64Mixed (actualValue, expectedValue) {
  if (actualValue.length !== expectedValue.length) {
    return false
  }
  for (let i = 0; i < actualValue.length; ++i) {
    if (actualValue[i] !== expectedValue[i]) {
      if (
        (actualValue[i] === '+' && expectedValue[i] === '-') ||
        (actualValue[i] === '/' && expectedValue[i] === '_')
      ) {
        continue
      }
      return false
    }
  }

  return true
}

// https://w3c.github.io/webappsec-upgrade-insecure-requests/#upgrade-request
function tryUpgradeRequestToAPotentiallyTrustworthyURL (request) {
  // TODO
}

/**
 * @link {https://html.spec.whatwg.org/multipage/origin.html#same-origin}
 * @param {URL} A
 * @param {URL} B
 */
function sameOrigin (A, B) {
  // 1. If A and B are the same opaque origin, then return true.
  if (A.origin === B.origin && A.origin === 'null') {
    return true
  }

  // 2. If A and B are both tuple origins and their schemes,
  //    hosts, and port are identical, then return true.
  if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {
    return true
  }

  // 3. Return false.
  return false
}

function createDeferredPromise () {
  let res
  let rej
  const promise = new Promise((resolve, reject) => {
    res = resolve
    rej = reject
  })

  return { promise, resolve: res, reject: rej }
}

function isAborted (fetchParams) {
  return fetchParams.controller.state === 'aborted'
}

function isCancelled (fetchParams) {
  return fetchParams.controller.state === 'aborted' ||
    fetchParams.controller.state === 'terminated'
}

const normalizeMethodRecord = {
  delete: 'DELETE',
  DELETE: 'DELETE',
  get: 'GET',
  GET: 'GET',
  head: 'HEAD',
  HEAD: 'HEAD',
  options: 'OPTIONS',
  OPTIONS: 'OPTIONS',
  post: 'POST',
  POST: 'POST',
  put: 'PUT',
  PUT: 'PUT'
}

// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.
Object.setPrototypeOf(normalizeMethodRecord, null)

/**
 * @see https://fetch.spec.whatwg.org/#concept-method-normalize
 * @param {string} method
 */
function normalizeMethod (method) {
  return normalizeMethodRecord[method.toLowerCase()] ?? method
}

// https://infra.spec.whatwg.org/#serialize-a-javascript-value-to-a-json-string
function serializeJavascriptValueToJSONString (value) {
  // 1. Let result be ? Call(%JSON.stringify%, undefined, « value »).
  const result = JSON.stringify(value)

  // 2. If result is undefined, then throw a TypeError.
  if (result === undefined) {
    throw new TypeError('Value is not JSON serializable')
  }

  // 3. Assert: result is a string.
  assert(typeof result === 'string')

  // 4. Return result.
  return result
}

// https://tc39.es/ecma262/#sec-%25iteratorprototype%25-object
const esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()))

/**
 * @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object
 * @param {() => unknown[]} iterator
 * @param {string} name name of the instance
 * @param {'key'|'value'|'key+value'} kind
 */
function makeIterator (iterator, name, kind) {
  const object = {
    index: 0,
    kind,
    target: iterator
  }

  const i = {
    next () {
      // 1. Let interface be the interface for which the iterator prototype object exists.

      // 2. Let thisValue be the this value.

      // 3. Let object be ? ToObject(thisValue).

      // 4. If object is a platform object, then perform a security
      //    check, passing:

      // 5. If object is not a default iterator object for interface,
      //    then throw a TypeError.
      if (Object.getPrototypeOf(this) !== i) {
        throw new TypeError(
          `'next' called on an object that does not implement interface ${name} Iterator.`
        )
      }

      // 6. Let index be object’s index.
      // 7. Let kind be object’s kind.
      // 8. Let values be object’s target's value pairs to iterate over.
      const { index, kind, target } = object
      const values = target()

      // 9. Let len be the length of values.
      const len = values.length

      // 10. If index is greater than or equal to len, then return
      //     CreateIterResultObject(undefined, true).
      if (index >= len) {
        return { value: undefined, done: true }
      }

      // 11. Let pair be the entry in values at index index.
      const pair = values[index]

      // 12. Set object’s index to index + 1.
      object.index = index + 1

      // 13. Return the iterator result for pair and kind.
      return iteratorResult(pair, kind)
    },
    // The class string of an iterator prototype object for a given interface is the
    // result of concatenating the identifier of the interface and the string " Iterator".
    [Symbol.toStringTag]: `${name} Iterator`
  }

  // The [[Prototype]] internal slot of an iterator prototype object must be %IteratorPrototype%.
  Object.setPrototypeOf(i, esIteratorPrototype)
  // esIteratorPrototype needs to be the prototype of i
  // which is the prototype of an empty object. Yes, it's confusing.
  return Object.setPrototypeOf({}, i)
}

// https://webidl.spec.whatwg.org/#iterator-result
function iteratorResult (pair, kind) {
  let result

  // 1. Let result be a value determined by the value of kind:
  switch (kind) {
    case 'key': {
      // 1. Let idlKey be pair’s key.
      // 2. Let key be the result of converting idlKey to an
      //    ECMAScript value.
      // 3. result is key.
      result = pair[0]
      break
    }
    case 'value': {
      // 1. Let idlValue be pair’s value.
      // 2. Let value be the result of converting idlValue to
      //    an ECMAScript value.
      // 3. result is value.
      result = pair[1]
      break
    }
    case 'key+value': {
      // 1. Let idlKey be pair’s key.
      // 2. Let idlValue be pair’s value.
      // 3. Let key be the result of converting idlKey to an
      //    ECMAScript value.
      // 4. Let value be the result of converting idlValue to
      //    an ECMAScript value.
      // 5. Let array be ! ArrayCreate(2).
      // 6. Call ! CreateDataProperty(array, "0", key).
      // 7. Call ! CreateDataProperty(array, "1", value).
      // 8. result is array.
      result = pair
      break
    }
  }

  // 2. Return CreateIterResultObject(result, false).
  return { value: result, done: false }
}

/**
 * @see https://fetch.spec.whatwg.org/#body-fully-read
 */
async function fullyReadBody (body, processBody, processBodyError) {
  // 1. If taskDestination is null, then set taskDestination to
  //    the result of starting a new parallel queue.

  // 2. Let successSteps given a byte sequence bytes be to queue a
  //    fetch task to run processBody given bytes, with taskDestination.
  const successSteps = processBody

  // 3. Let errorSteps be to queue a fetch task to run processBodyError,
  //    with taskDestination.
  const errorSteps = processBodyError

  // 4. Let reader be the result of getting a reader for body’s stream.
  //    If that threw an exception, then run errorSteps with that
  //    exception and return.
  let reader

  try {
    reader = body.stream.getReader()
  } catch (e) {
    errorSteps(e)
    return
  }

  // 5. Read all bytes from reader, given successSteps and errorSteps.
  try {
    const result = await readAllBytes(reader)
    successSteps(result)
  } catch (e) {
    errorSteps(e)
  }
}

/** @type {ReadableStream} */
let ReadableStream = globalThis.ReadableStream

function isReadableStreamLike (stream) {
  if (!ReadableStream) {
    ReadableStream = (__nccwpck_require__(5356).ReadableStream)
  }

  return stream instanceof ReadableStream || (
    stream[Symbol.toStringTag] === 'ReadableStream' &&
    typeof stream.tee === 'function'
  )
}

const MAXIMUM_ARGUMENT_LENGTH = 65535

/**
 * @see https://infra.spec.whatwg.org/#isomorphic-decode
 * @param {number[]|Uint8Array} input
 */
function isomorphicDecode (input) {
  // 1. To isomorphic decode a byte sequence input, return a string whose code point
  //    length is equal to input’s length and whose code points have the same values
  //    as the values of input’s bytes, in the same order.

  if (input.length < MAXIMUM_ARGUMENT_LENGTH) {
    return String.fromCharCode(...input)
  }

  return input.reduce((previous, current) => previous + String.fromCharCode(current), '')
}

/**
 * @param {ReadableStreamController<Uint8Array>} controller
 */
function readableStreamClose (controller) {
  try {
    controller.close()
  } catch (err) {
    // TODO: add comment explaining why this error occurs.
    if (!err.message.includes('Controller is already closed')) {
      throw err
    }
  }
}

/**
 * @see https://infra.spec.whatwg.org/#isomorphic-encode
 * @param {string} input
 */
function isomorphicEncode (input) {
  // 1. Assert: input contains no code points greater than U+00FF.
  for (let i = 0; i < input.length; i++) {
    assert(input.charCodeAt(i) <= 0xFF)
  }

  // 2. Return a byte sequence whose length is equal to input’s code
  //    point length and whose bytes have the same values as the
  //    values of input’s code points, in the same order
  return input
}

/**
 * @see https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes
 * @see https://streams.spec.whatwg.org/#read-loop
 * @param {ReadableStreamDefaultReader} reader
 */
async function readAllBytes (reader) {
  const bytes = []
  let byteLength = 0

  while (true) {
    const { done, value: chunk } = await reader.read()

    if (done) {
      // 1. Call successSteps with bytes.
      return Buffer.concat(bytes, byteLength)
    }

    // 1. If chunk is not a Uint8Array object, call failureSteps
    //    with a TypeError and abort these steps.
    if (!isUint8Array(chunk)) {
      throw new TypeError('Received non-Uint8Array chunk')
    }

    // 2. Append the bytes represented by chunk to bytes.
    bytes.push(chunk)
    byteLength += chunk.length

    // 3. Read-loop given reader, bytes, successSteps, and failureSteps.
  }
}

/**
 * @see https://fetch.spec.whatwg.org/#is-local
 * @param {URL} url
 */
function urlIsLocal (url) {
  assert('protocol' in url) // ensure it's a url object

  const protocol = url.protocol

  return protocol === 'about:' || protocol === 'blob:' || protocol === 'data:'
}

/**
 * @param {string|URL} url
 */
function urlHasHttpsScheme (url) {
  if (typeof url === 'string') {
    return url.startsWith('https:')
  }

  return url.protocol === 'https:'
}

/**
 * @see https://fetch.spec.whatwg.org/#http-scheme
 * @param {URL} url
 */
function urlIsHttpHttpsScheme (url) {
  assert('protocol' in url) // ensure it's a url object

  const protocol = url.protocol

  return protocol === 'http:' || protocol === 'https:'
}

/**
 * Fetch supports node >= 16.8.0, but Object.hasOwn was added in v16.9.0.
 */
const hasOwn = Object.hasOwn || ((dict, key) => Object.prototype.hasOwnProperty.call(dict, key))

module.exports = {
  isAborted,
  isCancelled,
  createDeferredPromise,
  ReadableStreamFrom,
  toUSVString,
  tryUpgradeRequestToAPotentiallyTrustworthyURL,
  coarsenedSharedCurrentTime,
  determineRequestsReferrer,
  makePolicyContainer,
  clonePolicyContainer,
  appendFetchMetadata,
  appendRequestOriginHeader,
  TAOCheck,
  corsCheck,
  crossOriginResourcePolicyCheck,
  createOpaqueTimingInfo,
  setRequestReferrerPolicyOnRedirect,
  isValidHTTPToken,
  requestBadPort,
  requestCurrentURL,
  responseURL,
  responseLocationURL,
  isBlobLike,
  isURLPotentiallyTrustworthy,
  isValidReasonPhrase,
  sameOrigin,
  normalizeMethod,
  serializeJavascriptValueToJSONString,
  makeIterator,
  isValidHeaderName,
  isValidHeaderValue,
  hasOwn,
  isErrorLike,
  fullyReadBody,
  bytesMatch,
  isReadableStreamLike,
  readableStreamClose,
  isomorphicEncode,
  isomorphicDecode,
  urlIsLocal,
  urlHasHttpsScheme,
  urlIsHttpHttpsScheme,
  readAllBytes,
  normalizeMethodRecord,
  parseMetadata
}


/***/ }),

/***/ 1744:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { types } = __nccwpck_require__(3837)
const { hasOwn, toUSVString } = __nccwpck_require__(2538)

/** @type {import('../../types/webidl').Webidl} */
const webidl = {}
webidl.converters = {}
webidl.util = {}
webidl.errors = {}

webidl.errors.exception = function (message) {
  return new TypeError(`${message.header}: ${message.message}`)
}

webidl.errors.conversionFailed = function (context) {
  const plural = context.types.length === 1 ? '' : ' one of'
  const message =
    `${context.argument} could not be converted to` +
    `${plural}: ${context.types.join(', ')}.`

  return webidl.errors.exception({
    header: context.prefix,
    message
  })
}

webidl.errors.invalidArgument = function (context) {
  return webidl.errors.exception({
    header: context.prefix,
    message: `"${context.value}" is an invalid ${context.type}.`
  })
}

// https://webidl.spec.whatwg.org/#implements
webidl.brandCheck = function (V, I, opts = undefined) {
  if (opts?.strict !== false && !(V instanceof I)) {
    throw new TypeError('Illegal invocation')
  } else {
    return V?.[Symbol.toStringTag] === I.prototype[Symbol.toStringTag]
  }
}

webidl.argumentLengthCheck = function ({ length }, min, ctx) {
  if (length < min) {
    throw webidl.errors.exception({
      message: `${min} argument${min !== 1 ? 's' : ''} required, ` +
               `but${length ? ' only' : ''} ${length} found.`,
      ...ctx
    })
  }
}

webidl.illegalConstructor = function () {
  throw webidl.errors.exception({
    header: 'TypeError',
    message: 'Illegal constructor'
  })
}

// https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values
webidl.util.Type = function (V) {
  switch (typeof V) {
    case 'undefined': return 'Undefined'
    case 'boolean': return 'Boolean'
    case 'string': return 'String'
    case 'symbol': return 'Symbol'
    case 'number': return 'Number'
    case 'bigint': return 'BigInt'
    case 'function':
    case 'object': {
      if (V === null) {
        return 'Null'
      }

      return 'Object'
    }
  }
}

// https://webidl.spec.whatwg.org/#abstract-opdef-converttoint
webidl.util.ConvertToInt = function (V, bitLength, signedness, opts = {}) {
  let upperBound
  let lowerBound

  // 1. If bitLength is 64, then:
  if (bitLength === 64) {
    // 1. Let upperBound be 2^53 − 1.
    upperBound = Math.pow(2, 53) - 1

    // 2. If signedness is "unsigned", then let lowerBound be 0.
    if (signedness === 'unsigned') {
      lowerBound = 0
    } else {
      // 3. Otherwise let lowerBound be −2^53 + 1.
      lowerBound = Math.pow(-2, 53) + 1
    }
  } else if (signedness === 'unsigned') {
    // 2. Otherwise, if signedness is "unsigned", then:

    // 1. Let lowerBound be 0.
    lowerBound = 0

    // 2. Let upperBound be 2^bitLength − 1.
    upperBound = Math.pow(2, bitLength) - 1
  } else {
    // 3. Otherwise:

    // 1. Let lowerBound be -2^bitLength − 1.
    lowerBound = Math.pow(-2, bitLength) - 1

    // 2. Let upperBound be 2^bitLength − 1 − 1.
    upperBound = Math.pow(2, bitLength - 1) - 1
  }

  // 4. Let x be ? ToNumber(V).
  let x = Number(V)

  // 5. If x is −0, then set x to +0.
  if (x === 0) {
    x = 0
  }

  // 6. If the conversion is to an IDL type associated
  //    with the [EnforceRange] extended attribute, then:
  if (opts.enforceRange === true) {
    // 1. If x is NaN, +∞, or −∞, then throw a TypeError.
    if (
      Number.isNaN(x) ||
      x === Number.POSITIVE_INFINITY ||
      x === Number.NEGATIVE_INFINITY
    ) {
      throw webidl.errors.exception({
        header: 'Integer conversion',
        message: `Could not convert ${V} to an integer.`
      })
    }

    // 2. Set x to IntegerPart(x).
    x = webidl.util.IntegerPart(x)

    // 3. If x < lowerBound or x > upperBound, then
    //    throw a TypeError.
    if (x < lowerBound || x > upperBound) {
      throw webidl.errors.exception({
        header: 'Integer conversion',
        message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`
      })
    }

    // 4. Return x.
    return x
  }

  // 7. If x is not NaN and the conversion is to an IDL
  //    type associated with the [Clamp] extended
  //    attribute, then:
  if (!Number.isNaN(x) && opts.clamp === true) {
    // 1. Set x to min(max(x, lowerBound), upperBound).
    x = Math.min(Math.max(x, lowerBound), upperBound)

    // 2. Round x to the nearest integer, choosing the
    //    even integer if it lies halfway between two,
    //    and choosing +0 rather than −0.
    if (Math.floor(x) % 2 === 0) {
      x = Math.floor(x)
    } else {
      x = Math.ceil(x)
    }

    // 3. Return x.
    return x
  }

  // 8. If x is NaN, +0, +∞, or −∞, then return +0.
  if (
    Number.isNaN(x) ||
    (x === 0 && Object.is(0, x)) ||
    x === Number.POSITIVE_INFINITY ||
    x === Number.NEGATIVE_INFINITY
  ) {
    return 0
  }

  // 9. Set x to IntegerPart(x).
  x = webidl.util.IntegerPart(x)

  // 10. Set x to x modulo 2^bitLength.
  x = x % Math.pow(2, bitLength)

  // 11. If signedness is "signed" and x ≥ 2^bitLength − 1,
  //    then return x − 2^bitLength.
  if (signedness === 'signed' && x >= Math.pow(2, bitLength) - 1) {
    return x - Math.pow(2, bitLength)
  }

  // 12. Otherwise, return x.
  return x
}

// https://webidl.spec.whatwg.org/#abstract-opdef-integerpart
webidl.util.IntegerPart = function (n) {
  // 1. Let r be floor(abs(n)).
  const r = Math.floor(Math.abs(n))

  // 2. If n < 0, then return -1 × r.
  if (n < 0) {
    return -1 * r
  }

  // 3. Otherwise, return r.
  return r
}

// https://webidl.spec.whatwg.org/#es-sequence
webidl.sequenceConverter = function (converter) {
  return (V) => {
    // 1. If Type(V) is not Object, throw a TypeError.
    if (webidl.util.Type(V) !== 'Object') {
      throw webidl.errors.exception({
        header: 'Sequence',
        message: `Value of type ${webidl.util.Type(V)} is not an Object.`
      })
    }

    // 2. Let method be ? GetMethod(V, @@iterator).
    /** @type {Generator} */
    const method = V?.[Symbol.iterator]?.()
    const seq = []

    // 3. If method is undefined, throw a TypeError.
    if (
      method === undefined ||
      typeof method.next !== 'function'
    ) {
      throw webidl.errors.exception({
        header: 'Sequence',
        message: 'Object is not an iterator.'
      })
    }

    // https://webidl.spec.whatwg.org/#create-sequence-from-iterable
    while (true) {
      const { done, value } = method.next()

      if (done) {
        break
      }

      seq.push(converter(value))
    }

    return seq
  }
}

// https://webidl.spec.whatwg.org/#es-to-record
webidl.recordConverter = function (keyConverter, valueConverter) {
  return (O) => {
    // 1. If Type(O) is not Object, throw a TypeError.
    if (webidl.util.Type(O) !== 'Object') {
      throw webidl.errors.exception({
        header: 'Record',
        message: `Value of type ${webidl.util.Type(O)} is not an Object.`
      })
    }

    // 2. Let result be a new empty instance of record<K, V>.
    const result = {}

    if (!types.isProxy(O)) {
      // Object.keys only returns enumerable properties
      const keys = Object.keys(O)

      for (const key of keys) {
        // 1. Let typedKey be key converted to an IDL value of type K.
        const typedKey = keyConverter(key)

        // 2. Let value be ? Get(O, key).
        // 3. Let typedValue be value converted to an IDL value of type V.
        const typedValue = valueConverter(O[key])

        // 4. Set result[typedKey] to typedValue.
        result[typedKey] = typedValue
      }

      // 5. Return result.
      return result
    }

    // 3. Let keys be ? O.[[OwnPropertyKeys]]().
    const keys = Reflect.ownKeys(O)

    // 4. For each key of keys.
    for (const key of keys) {
      // 1. Let desc be ? O.[[GetOwnProperty]](key).
      const desc = Reflect.getOwnPropertyDescriptor(O, key)

      // 2. If desc is not undefined and desc.[[Enumerable]] is true:
      if (desc?.enumerable) {
        // 1. Let typedKey be key converted to an IDL value of type K.
        const typedKey = keyConverter(key)

        // 2. Let value be ? Get(O, key).
        // 3. Let typedValue be value converted to an IDL value of type V.
        const typedValue = valueConverter(O[key])

        // 4. Set result[typedKey] to typedValue.
        result[typedKey] = typedValue
      }
    }

    // 5. Return result.
    return result
  }
}

webidl.interfaceConverter = function (i) {
  return (V, opts = {}) => {
    if (opts.strict !== false && !(V instanceof i)) {
      throw webidl.errors.exception({
        header: i.name,
        message: `Expected ${V} to be an instance of ${i.name}.`
      })
    }

    return V
  }
}

webidl.dictionaryConverter = function (converters) {
  return (dictionary) => {
    const type = webidl.util.Type(dictionary)
    const dict = {}

    if (type === 'Null' || type === 'Undefined') {
      return dict
    } else if (type !== 'Object') {
      throw webidl.errors.exception({
        header: 'Dictionary',
        message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
      })
    }

    for (const options of converters) {
      const { key, defaultValue, required, converter } = options

      if (required === true) {
        if (!hasOwn(dictionary, key)) {
          throw webidl.errors.exception({
            header: 'Dictionary',
            message: `Missing required key "${key}".`
          })
        }
      }

      let value = dictionary[key]
      const hasDefault = hasOwn(options, 'defaultValue')

      // Only use defaultValue if value is undefined and
      // a defaultValue options was provided.
      if (hasDefault && value !== null) {
        value = value ?? defaultValue
      }

      // A key can be optional and have no default value.
      // When this happens, do not perform a conversion,
      // and do not assign the key a value.
      if (required || hasDefault || value !== undefined) {
        value = converter(value)

        if (
          options.allowedValues &&
          !options.allowedValues.includes(value)
        ) {
          throw webidl.errors.exception({
            header: 'Dictionary',
            message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(', ')}.`
          })
        }

        dict[key] = value
      }
    }

    return dict
  }
}

webidl.nullableConverter = function (converter) {
  return (V) => {
    if (V === null) {
      return V
    }

    return converter(V)
  }
}

// https://webidl.spec.whatwg.org/#es-DOMString
webidl.converters.DOMString = function (V, opts = {}) {
  // 1. If V is null and the conversion is to an IDL type
  //    associated with the [LegacyNullToEmptyString]
  //    extended attribute, then return the DOMString value
  //    that represents the empty string.
  if (V === null && opts.legacyNullToEmptyString) {
    return ''
  }

  // 2. Let x be ? ToString(V).
  if (typeof V === 'symbol') {
    throw new TypeError('Could not convert argument of type symbol to string.')
  }

  // 3. Return the IDL DOMString value that represents the
  //    same sequence of code units as the one the
  //    ECMAScript String value x represents.
  return String(V)
}

// https://webidl.spec.whatwg.org/#es-ByteString
webidl.converters.ByteString = function (V) {
  // 1. Let x be ? ToString(V).
  // Note: DOMString converter perform ? ToString(V)
  const x = webidl.converters.DOMString(V)

  // 2. If the value of any element of x is greater than
  //    255, then throw a TypeError.
  for (let index = 0; index < x.length; index++) {
    if (x.charCodeAt(index) > 255) {
      throw new TypeError(
        'Cannot convert argument to a ByteString because the character at ' +
        `index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`
      )
    }
  }

  // 3. Return an IDL ByteString value whose length is the
  //    length of x, and where the value of each element is
  //    the value of the corresponding element of x.
  return x
}

// https://webidl.spec.whatwg.org/#es-USVString
webidl.converters.USVString = toUSVString

// https://webidl.spec.whatwg.org/#es-boolean
webidl.converters.boolean = function (V) {
  // 1. Let x be the result of computing ToBoolean(V).
  const x = Boolean(V)

  // 2. Return the IDL boolean value that is the one that represents
  //    the same truth value as the ECMAScript Boolean value x.
  return x
}

// https://webidl.spec.whatwg.org/#es-any
webidl.converters.any = function (V) {
  return V
}

// https://webidl.spec.whatwg.org/#es-long-long
webidl.converters['long long'] = function (V) {
  // 1. Let x be ? ConvertToInt(V, 64, "signed").
  const x = webidl.util.ConvertToInt(V, 64, 'signed')

  // 2. Return the IDL long long value that represents
  //    the same numeric value as x.
  return x
}

// https://webidl.spec.whatwg.org/#es-unsigned-long-long
webidl.converters['unsigned long long'] = function (V) {
  // 1. Let x be ? ConvertToInt(V, 64, "unsigned").
  const x = webidl.util.ConvertToInt(V, 64, 'unsigned')

  // 2. Return the IDL unsigned long long value that
  //    represents the same numeric value as x.
  return x
}

// https://webidl.spec.whatwg.org/#es-unsigned-long
webidl.converters['unsigned long'] = function (V) {
  // 1. Let x be ? ConvertToInt(V, 32, "unsigned").
  const x = webidl.util.ConvertToInt(V, 32, 'unsigned')

  // 2. Return the IDL unsigned long value that
  //    represents the same numeric value as x.
  return x
}

// https://webidl.spec.whatwg.org/#es-unsigned-short
webidl.converters['unsigned short'] = function (V, opts) {
  // 1. Let x be ? ConvertToInt(V, 16, "unsigned").
  const x = webidl.util.ConvertToInt(V, 16, 'unsigned', opts)

  // 2. Return the IDL unsigned short value that represents
  //    the same numeric value as x.
  return x
}

// https://webidl.spec.whatwg.org/#idl-ArrayBuffer
webidl.converters.ArrayBuffer = function (V, opts = {}) {
  // 1. If Type(V) is not Object, or V does not have an
  //    [[ArrayBufferData]] internal slot, then throw a
  //    TypeError.
  // see: https://tc39.es/ecma262/#sec-properties-of-the-arraybuffer-instances
  // see: https://tc39.es/ecma262/#sec-properties-of-the-sharedarraybuffer-instances
  if (
    webidl.util.Type(V) !== 'Object' ||
    !types.isAnyArrayBuffer(V)
  ) {
    throw webidl.errors.conversionFailed({
      prefix: `${V}`,
      argument: `${V}`,
      types: ['ArrayBuffer']
    })
  }

  // 2. If the conversion is not to an IDL type associated
  //    with the [AllowShared] extended attribute, and
  //    IsSharedArrayBuffer(V) is true, then throw a
  //    TypeError.
  if (opts.allowShared === false && types.isSharedArrayBuffer(V)) {
    throw webidl.errors.exception({
      header: 'ArrayBuffer',
      message: 'SharedArrayBuffer is not allowed.'
    })
  }

  // 3. If the conversion is not to an IDL type associated
  //    with the [AllowResizable] extended attribute, and
  //    IsResizableArrayBuffer(V) is true, then throw a
  //    TypeError.
  // Note: resizable ArrayBuffers are currently a proposal.

  // 4. Return the IDL ArrayBuffer value that is a
  //    reference to the same object as V.
  return V
}

webidl.converters.TypedArray = function (V, T, opts = {}) {
  // 1. Let T be the IDL type V is being converted to.

  // 2. If Type(V) is not Object, or V does not have a
  //    [[TypedArrayName]] internal slot with a value
  //    equal to T’s name, then throw a TypeError.
  if (
    webidl.util.Type(V) !== 'Object' ||
    !types.isTypedArray(V) ||
    V.constructor.name !== T.name
  ) {
    throw webidl.errors.conversionFailed({
      prefix: `${T.name}`,
      argument: `${V}`,
      types: [T.name]
    })
  }

  // 3. If the conversion is not to an IDL type associated
  //    with the [AllowShared] extended attribute, and
  //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is
  //    true, then throw a TypeError.
  if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
    throw webidl.errors.exception({
      header: 'ArrayBuffer',
      message: 'SharedArrayBuffer is not allowed.'
    })
  }

  // 4. If the conversion is not to an IDL type associated
  //    with the [AllowResizable] extended attribute, and
  //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is
  //    true, then throw a TypeError.
  // Note: resizable array buffers are currently a proposal

  // 5. Return the IDL value of type T that is a reference
  //    to the same object as V.
  return V
}

webidl.converters.DataView = function (V, opts = {}) {
  // 1. If Type(V) is not Object, or V does not have a
  //    [[DataView]] internal slot, then throw a TypeError.
  if (webidl.util.Type(V) !== 'Object' || !types.isDataView(V)) {
    throw webidl.errors.exception({
      header: 'DataView',
      message: 'Object is not a DataView.'
    })
  }

  // 2. If the conversion is not to an IDL type associated
  //    with the [AllowShared] extended attribute, and
  //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is true,
  //    then throw a TypeError.
  if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
    throw webidl.errors.exception({
      header: 'ArrayBuffer',
      message: 'SharedArrayBuffer is not allowed.'
    })
  }

  // 3. If the conversion is not to an IDL type associated
  //    with the [AllowResizable] extended attribute, and
  //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is
  //    true, then throw a TypeError.
  // Note: resizable ArrayBuffers are currently a proposal

  // 4. Return the IDL DataView value that is a reference
  //    to the same object as V.
  return V
}

// https://webidl.spec.whatwg.org/#BufferSource
webidl.converters.BufferSource = function (V, opts = {}) {
  if (types.isAnyArrayBuffer(V)) {
    return webidl.converters.ArrayBuffer(V, opts)
  }

  if (types.isTypedArray(V)) {
    return webidl.converters.TypedArray(V, V.constructor)
  }

  if (types.isDataView(V)) {
    return webidl.converters.DataView(V, opts)
  }

  throw new TypeError(`Could not convert ${V} to a BufferSource.`)
}

webidl.converters['sequence<ByteString>'] = webidl.sequenceConverter(
  webidl.converters.ByteString
)

webidl.converters['sequence<sequence<ByteString>>'] = webidl.sequenceConverter(
  webidl.converters['sequence<ByteString>']
)

webidl.converters['record<ByteString, ByteString>'] = webidl.recordConverter(
  webidl.converters.ByteString,
  webidl.converters.ByteString
)

module.exports = {
  webidl
}


/***/ }),

/***/ 4854:
/***/ ((module) => {

"use strict";


/**
 * @see https://encoding.spec.whatwg.org/#concept-encoding-get
 * @param {string|undefined} label
 */
function getEncoding (label) {
  if (!label) {
    return 'failure'
  }

  // 1. Remove any leading and trailing ASCII whitespace from label.
  // 2. If label is an ASCII case-insensitive match for any of the
  //    labels listed in the table below, then return the
  //    corresponding encoding; otherwise return failure.
  switch (label.trim().toLowerCase()) {
    case 'unicode-1-1-utf-8':
    case 'unicode11utf8':
    case 'unicode20utf8':
    case 'utf-8':
    case 'utf8':
    case 'x-unicode20utf8':
      return 'UTF-8'
    case '866':
    case 'cp866':
    case 'csibm866':
    case 'ibm866':
      return 'IBM866'
    case 'csisolatin2':
    case 'iso-8859-2':
    case 'iso-ir-101':
    case 'iso8859-2':
    case 'iso88592':
    case 'iso_8859-2':
    case 'iso_8859-2:1987':
    case 'l2':
    case 'latin2':
      return 'ISO-8859-2'
    case 'csisolatin3':
    case 'iso-8859-3':
    case 'iso-ir-109':
    case 'iso8859-3':
    case 'iso88593':
    case 'iso_8859-3':
    case 'iso_8859-3:1988':
    case 'l3':
    case 'latin3':
      return 'ISO-8859-3'
    case 'csisolatin4':
    case 'iso-8859-4':
    case 'iso-ir-110':
    case 'iso8859-4':
    case 'iso88594':
    case 'iso_8859-4':
    case 'iso_8859-4:1988':
    case 'l4':
    case 'latin4':
      return 'ISO-8859-4'
    case 'csisolatincyrillic':
    case 'cyrillic':
    case 'iso-8859-5':
    case 'iso-ir-144':
    case 'iso8859-5':
    case 'iso88595':
    case 'iso_8859-5':
    case 'iso_8859-5:1988':
      return 'ISO-8859-5'
    case 'arabic':
    case 'asmo-708':
    case 'csiso88596e':
    case 'csiso88596i':
    case 'csisolatinarabic':
    case 'ecma-114':
    case 'iso-8859-6':
    case 'iso-8859-6-e':
    case 'iso-8859-6-i':
    case 'iso-ir-127':
    case 'iso8859-6':
    case 'iso88596':
    case 'iso_8859-6':
    case 'iso_8859-6:1987':
      return 'ISO-8859-6'
    case 'csisolatingreek':
    case 'ecma-118':
    case 'elot_928':
    case 'greek':
    case 'greek8':
    case 'iso-8859-7':
    case 'iso-ir-126':
    case 'iso8859-7':
    case 'iso88597':
    case 'iso_8859-7':
    case 'iso_8859-7:1987':
    case 'sun_eu_greek':
      return 'ISO-8859-7'
    case 'csiso88598e':
    case 'csisolatinhebrew':
    case 'hebrew':
    case 'iso-8859-8':
    case 'iso-8859-8-e':
    case 'iso-ir-138':
    case 'iso8859-8':
    case 'iso88598':
    case 'iso_8859-8':
    case 'iso_8859-8:1988':
    case 'visual':
      return 'ISO-8859-8'
    case 'csiso88598i':
    case 'iso-8859-8-i':
    case 'logical':
      return 'ISO-8859-8-I'
    case 'csisolatin6':
    case 'iso-8859-10':
    case 'iso-ir-157':
    case 'iso8859-10':
    case 'iso885910':
    case 'l6':
    case 'latin6':
      return 'ISO-8859-10'
    case 'iso-8859-13':
    case 'iso8859-13':
    case 'iso885913':
      return 'ISO-8859-13'
    case 'iso-8859-14':
    case 'iso8859-14':
    case 'iso885914':
      return 'ISO-8859-14'
    case 'csisolatin9':
    case 'iso-8859-15':
    case 'iso8859-15':
    case 'iso885915':
    case 'iso_8859-15':
    case 'l9':
      return 'ISO-8859-15'
    case 'iso-8859-16':
      return 'ISO-8859-16'
    case 'cskoi8r':
    case 'koi':
    case 'koi8':
    case 'koi8-r':
    case 'koi8_r':
      return 'KOI8-R'
    case 'koi8-ru':
    case 'koi8-u':
      return 'KOI8-U'
    case 'csmacintosh':
    case 'mac':
    case 'macintosh':
    case 'x-mac-roman':
      return 'macintosh'
    case 'iso-8859-11':
    case 'iso8859-11':
    case 'iso885911':
    case 'tis-620':
    case 'windows-874':
      return 'windows-874'
    case 'cp1250':
    case 'windows-1250':
    case 'x-cp1250':
      return 'windows-1250'
    case 'cp1251':
    case 'windows-1251':
    case 'x-cp1251':
      return 'windows-1251'
    case 'ansi_x3.4-1968':
    case 'ascii':
    case 'cp1252':
    case 'cp819':
    case 'csisolatin1':
    case 'ibm819':
    case 'iso-8859-1':
    case 'iso-ir-100':
    case 'iso8859-1':
    case 'iso88591':
    case 'iso_8859-1':
    case 'iso_8859-1:1987':
    case 'l1':
    case 'latin1':
    case 'us-ascii':
    case 'windows-1252':
    case 'x-cp1252':
      return 'windows-1252'
    case 'cp1253':
    case 'windows-1253':
    case 'x-cp1253':
      return 'windows-1253'
    case 'cp1254':
    case 'csisolatin5':
    case 'iso-8859-9':
    case 'iso-ir-148':
    case 'iso8859-9':
    case 'iso88599':
    case 'iso_8859-9':
    case 'iso_8859-9:1989':
    case 'l5':
    case 'latin5':
    case 'windows-1254':
    case 'x-cp1254':
      return 'windows-1254'
    case 'cp1255':
    case 'windows-1255':
    case 'x-cp1255':
      return 'windows-1255'
    case 'cp1256':
    case 'windows-1256':
    case 'x-cp1256':
      return 'windows-1256'
    case 'cp1257':
    case 'windows-1257':
    case 'x-cp1257':
      return 'windows-1257'
    case 'cp1258':
    case 'windows-1258':
    case 'x-cp1258':
      return 'windows-1258'
    case 'x-mac-cyrillic':
    case 'x-mac-ukrainian':
      return 'x-mac-cyrillic'
    case 'chinese':
    case 'csgb2312':
    case 'csiso58gb231280':
    case 'gb2312':
    case 'gb_2312':
    case 'gb_2312-80':
    case 'gbk':
    case 'iso-ir-58':
    case 'x-gbk':
      return 'GBK'
    case 'gb18030':
      return 'gb18030'
    case 'big5':
    case 'big5-hkscs':
    case 'cn-big5':
    case 'csbig5':
    case 'x-x-big5':
      return 'Big5'
    case 'cseucpkdfmtjapanese':
    case 'euc-jp':
    case 'x-euc-jp':
      return 'EUC-JP'
    case 'csiso2022jp':
    case 'iso-2022-jp':
      return 'ISO-2022-JP'
    case 'csshiftjis':
    case 'ms932':
    case 'ms_kanji':
    case 'shift-jis':
    case 'shift_jis':
    case 'sjis':
    case 'windows-31j':
    case 'x-sjis':
      return 'Shift_JIS'
    case 'cseuckr':
    case 'csksc56011987':
    case 'euc-kr':
    case 'iso-ir-149':
    case 'korean':
    case 'ks_c_5601-1987':
    case 'ks_c_5601-1989':
    case 'ksc5601':
    case 'ksc_5601':
    case 'windows-949':
      return 'EUC-KR'
    case 'csiso2022kr':
    case 'hz-gb-2312':
    case 'iso-2022-cn':
    case 'iso-2022-cn-ext':
    case 'iso-2022-kr':
    case 'replacement':
      return 'replacement'
    case 'unicodefffe':
    case 'utf-16be':
      return 'UTF-16BE'
    case 'csunicode':
    case 'iso-10646-ucs-2':
    case 'ucs-2':
    case 'unicode':
    case 'unicodefeff':
    case 'utf-16':
    case 'utf-16le':
      return 'UTF-16LE'
    case 'x-user-defined':
      return 'x-user-defined'
    default: return 'failure'
  }
}

module.exports = {
  getEncoding
}


/***/ }),

/***/ 1446:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const {
  staticPropertyDescriptors,
  readOperation,
  fireAProgressEvent
} = __nccwpck_require__(7530)
const {
  kState,
  kError,
  kResult,
  kEvents,
  kAborted
} = __nccwpck_require__(9054)
const { webidl } = __nccwpck_require__(1744)
const { kEnumerableProperty } = __nccwpck_require__(3983)

class FileReader extends EventTarget {
  constructor () {
    super()

    this[kState] = 'empty'
    this[kResult] = null
    this[kError] = null
    this[kEvents] = {
      loadend: null,
      error: null,
      abort: null,
      load: null,
      progress: null,
      loadstart: null
    }
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer
   * @param {import('buffer').Blob} blob
   */
  readAsArrayBuffer (blob) {
    webidl.brandCheck(this, FileReader)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsArrayBuffer' })

    blob = webidl.converters.Blob(blob, { strict: false })

    // The readAsArrayBuffer(blob) method, when invoked,
    // must initiate a read operation for blob with ArrayBuffer.
    readOperation(this, blob, 'ArrayBuffer')
  }

  /**
   * @see https://w3c.github.io/FileAPI/#readAsBinaryString
   * @param {import('buffer').Blob} blob
   */
  readAsBinaryString (blob) {
    webidl.brandCheck(this, FileReader)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsBinaryString' })

    blob = webidl.converters.Blob(blob, { strict: false })

    // The readAsBinaryString(blob) method, when invoked,
    // must initiate a read operation for blob with BinaryString.
    readOperation(this, blob, 'BinaryString')
  }

  /**
   * @see https://w3c.github.io/FileAPI/#readAsDataText
   * @param {import('buffer').Blob} blob
   * @param {string?} encoding
   */
  readAsText (blob, encoding = undefined) {
    webidl.brandCheck(this, FileReader)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsText' })

    blob = webidl.converters.Blob(blob, { strict: false })

    if (encoding !== undefined) {
      encoding = webidl.converters.DOMString(encoding)
    }

    // The readAsText(blob, encoding) method, when invoked,
    // must initiate a read operation for blob with Text and encoding.
    readOperation(this, blob, 'Text', encoding)
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL
   * @param {import('buffer').Blob} blob
   */
  readAsDataURL (blob) {
    webidl.brandCheck(this, FileReader)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsDataURL' })

    blob = webidl.converters.Blob(blob, { strict: false })

    // The readAsDataURL(blob) method, when invoked, must
    // initiate a read operation for blob with DataURL.
    readOperation(this, blob, 'DataURL')
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dfn-abort
   */
  abort () {
    // 1. If this's state is "empty" or if this's state is
    //    "done" set this's result to null and terminate
    //    this algorithm.
    if (this[kState] === 'empty' || this[kState] === 'done') {
      this[kResult] = null
      return
    }

    // 2. If this's state is "loading" set this's state to
    //    "done" and set this's result to null.
    if (this[kState] === 'loading') {
      this[kState] = 'done'
      this[kResult] = null
    }

    // 3. If there are any tasks from this on the file reading
    //    task source in an affiliated task queue, then remove
    //    those tasks from that task queue.
    this[kAborted] = true

    // 4. Terminate the algorithm for the read method being processed.
    // TODO

    // 5. Fire a progress event called abort at this.
    fireAProgressEvent('abort', this)

    // 6. If this's state is not "loading", fire a progress
    //    event called loadend at this.
    if (this[kState] !== 'loading') {
      fireAProgressEvent('loadend', this)
    }
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate
   */
  get readyState () {
    webidl.brandCheck(this, FileReader)

    switch (this[kState]) {
      case 'empty': return this.EMPTY
      case 'loading': return this.LOADING
      case 'done': return this.DONE
    }
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dom-filereader-result
   */
  get result () {
    webidl.brandCheck(this, FileReader)

    // The result attribute’s getter, when invoked, must return
    // this's result.
    return this[kResult]
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dom-filereader-error
   */
  get error () {
    webidl.brandCheck(this, FileReader)

    // The error attribute’s getter, when invoked, must return
    // this's error.
    return this[kError]
  }

  get onloadend () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].loadend
  }

  set onloadend (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].loadend) {
      this.removeEventListener('loadend', this[kEvents].loadend)
    }

    if (typeof fn === 'function') {
      this[kEvents].loadend = fn
      this.addEventListener('loadend', fn)
    } else {
      this[kEvents].loadend = null
    }
  }

  get onerror () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].error
  }

  set onerror (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].error) {
      this.removeEventListener('error', this[kEvents].error)
    }

    if (typeof fn === 'function') {
      this[kEvents].error = fn
      this.addEventListener('error', fn)
    } else {
      this[kEvents].error = null
    }
  }

  get onloadstart () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].loadstart
  }

  set onloadstart (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].loadstart) {
      this.removeEventListener('loadstart', this[kEvents].loadstart)
    }

    if (typeof fn === 'function') {
      this[kEvents].loadstart = fn
      this.addEventListener('loadstart', fn)
    } else {
      this[kEvents].loadstart = null
    }
  }

  get onprogress () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].progress
  }

  set onprogress (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].progress) {
      this.removeEventListener('progress', this[kEvents].progress)
    }

    if (typeof fn === 'function') {
      this[kEvents].progress = fn
      this.addEventListener('progress', fn)
    } else {
      this[kEvents].progress = null
    }
  }

  get onload () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].load
  }

  set onload (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].load) {
      this.removeEventListener('load', this[kEvents].load)
    }

    if (typeof fn === 'function') {
      this[kEvents].load = fn
      this.addEventListener('load', fn)
    } else {
      this[kEvents].load = null
    }
  }

  get onabort () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].abort
  }

  set onabort (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].abort) {
      this.removeEventListener('abort', this[kEvents].abort)
    }

    if (typeof fn === 'function') {
      this[kEvents].abort = fn
      this.addEventListener('abort', fn)
    } else {
      this[kEvents].abort = null
    }
  }
}

// https://w3c.github.io/FileAPI/#dom-filereader-empty
FileReader.EMPTY = FileReader.prototype.EMPTY = 0
// https://w3c.github.io/FileAPI/#dom-filereader-loading
FileReader.LOADING = FileReader.prototype.LOADING = 1
// https://w3c.github.io/FileAPI/#dom-filereader-done
FileReader.DONE = FileReader.prototype.DONE = 2

Object.defineProperties(FileReader.prototype, {
  EMPTY: staticPropertyDescriptors,
  LOADING: staticPropertyDescriptors,
  DONE: staticPropertyDescriptors,
  readAsArrayBuffer: kEnumerableProperty,
  readAsBinaryString: kEnumerableProperty,
  readAsText: kEnumerableProperty,
  readAsDataURL: kEnumerableProperty,
  abort: kEnumerableProperty,
  readyState: kEnumerableProperty,
  result: kEnumerableProperty,
  error: kEnumerableProperty,
  onloadstart: kEnumerableProperty,
  onprogress: kEnumerableProperty,
  onload: kEnumerableProperty,
  onabort: kEnumerableProperty,
  onerror: kEnumerableProperty,
  onloadend: kEnumerableProperty,
  [Symbol.toStringTag]: {
    value: 'FileReader',
    writable: false,
    enumerable: false,
    configurable: true
  }
})

Object.defineProperties(FileReader, {
  EMPTY: staticPropertyDescriptors,
  LOADING: staticPropertyDescriptors,
  DONE: staticPropertyDescriptors
})

module.exports = {
  FileReader
}


/***/ }),

/***/ 5504:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { webidl } = __nccwpck_require__(1744)

const kState = Symbol('ProgressEvent state')

/**
 * @see https://xhr.spec.whatwg.org/#progressevent
 */
class ProgressEvent extends Event {
  constructor (type, eventInitDict = {}) {
    type = webidl.converters.DOMString(type)
    eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {})

    super(type, eventInitDict)

    this[kState] = {
      lengthComputable: eventInitDict.lengthComputable,
      loaded: eventInitDict.loaded,
      total: eventInitDict.total
    }
  }

  get lengthComputable () {
    webidl.brandCheck(this, ProgressEvent)

    return this[kState].lengthComputable
  }

  get loaded () {
    webidl.brandCheck(this, ProgressEvent)

    return this[kState].loaded
  }

  get total () {
    webidl.brandCheck(this, ProgressEvent)

    return this[kState].total
  }
}

webidl.converters.ProgressEventInit = webidl.dictionaryConverter([
  {
    key: 'lengthComputable',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'loaded',
    converter: webidl.converters['unsigned long long'],
    defaultValue: 0
  },
  {
    key: 'total',
    converter: webidl.converters['unsigned long long'],
    defaultValue: 0
  },
  {
    key: 'bubbles',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'cancelable',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'composed',
    converter: webidl.converters.boolean,
    defaultValue: false
  }
])

module.exports = {
  ProgressEvent
}


/***/ }),

/***/ 9054:
/***/ ((module) => {

"use strict";


module.exports = {
  kState: Symbol('FileReader state'),
  kResult: Symbol('FileReader result'),
  kError: Symbol('FileReader error'),
  kLastProgressEventFired: Symbol('FileReader last progress event fired timestamp'),
  kEvents: Symbol('FileReader events'),
  kAborted: Symbol('FileReader aborted')
}


/***/ }),

/***/ 7530:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const {
  kState,
  kError,
  kResult,
  kAborted,
  kLastProgressEventFired
} = __nccwpck_require__(9054)
const { ProgressEvent } = __nccwpck_require__(5504)
const { getEncoding } = __nccwpck_require__(4854)
const { DOMException } = __nccwpck_require__(1037)
const { serializeAMimeType, parseMIMEType } = __nccwpck_require__(685)
const { types } = __nccwpck_require__(3837)
const { StringDecoder } = __nccwpck_require__(1576)
const { btoa } = __nccwpck_require__(4300)

/** @type {PropertyDescriptor} */
const staticPropertyDescriptors = {
  enumerable: true,
  writable: false,
  configurable: false
}

/**
 * @see https://w3c.github.io/FileAPI/#readOperation
 * @param {import('./filereader').FileReader} fr
 * @param {import('buffer').Blob} blob
 * @param {string} type
 * @param {string?} encodingName
 */
function readOperation (fr, blob, type, encodingName) {
  // 1. If fr’s state is "loading", throw an InvalidStateError
  //    DOMException.
  if (fr[kState] === 'loading') {
    throw new DOMException('Invalid state', 'InvalidStateError')
  }

  // 2. Set fr’s state to "loading".
  fr[kState] = 'loading'

  // 3. Set fr’s result to null.
  fr[kResult] = null

  // 4. Set fr’s error to null.
  fr[kError] = null

  // 5. Let stream be the result of calling get stream on blob.
  /** @type {import('stream/web').ReadableStream} */
  const stream = blob.stream()

  // 6. Let reader be the result of getting a reader from stream.
  const reader = stream.getReader()

  // 7. Let bytes be an empty byte sequence.
  /** @type {Uint8Array[]} */
  const bytes = []

  // 8. Let chunkPromise be the result of reading a chunk from
  //    stream with reader.
  let chunkPromise = reader.read()

  // 9. Let isFirstChunk be true.
  let isFirstChunk = true

  // 10. In parallel, while true:
  // Note: "In parallel" just means non-blocking
  // Note 2: readOperation itself cannot be async as double
  // reading the body would then reject the promise, instead
  // of throwing an error.
  ;(async () => {
    while (!fr[kAborted]) {
      // 1. Wait for chunkPromise to be fulfilled or rejected.
      try {
        const { done, value } = await chunkPromise

        // 2. If chunkPromise is fulfilled, and isFirstChunk is
        //    true, queue a task to fire a progress event called
        //    loadstart at fr.
        if (isFirstChunk && !fr[kAborted]) {
          queueMicrotask(() => {
            fireAProgressEvent('loadstart', fr)
          })
        }

        // 3. Set isFirstChunk to false.
        isFirstChunk = false

        // 4. If chunkPromise is fulfilled with an object whose
        //    done property is false and whose value property is
        //    a Uint8Array object, run these steps:
        if (!done && types.isUint8Array(value)) {
          // 1. Let bs be the byte sequence represented by the
          //    Uint8Array object.

          // 2. Append bs to bytes.
          bytes.push(value)

          // 3. If roughly 50ms have passed since these steps
          //    were last invoked, queue a task to fire a
          //    progress event called progress at fr.
          if (
            (
              fr[kLastProgressEventFired] === undefined ||
              Date.now() - fr[kLastProgressEventFired] >= 50
            ) &&
            !fr[kAborted]
          ) {
            fr[kLastProgressEventFired] = Date.now()
            queueMicrotask(() => {
              fireAProgressEvent('progress', fr)
            })
          }

          // 4. Set chunkPromise to the result of reading a
          //    chunk from stream with reader.
          chunkPromise = reader.read()
        } else if (done) {
          // 5. Otherwise, if chunkPromise is fulfilled with an
          //    object whose done property is true, queue a task
          //    to run the following steps and abort this algorithm:
          queueMicrotask(() => {
            // 1. Set fr’s state to "done".
            fr[kState] = 'done'

            // 2. Let result be the result of package data given
            //    bytes, type, blob’s type, and encodingName.
            try {
              const result = packageData(bytes, type, blob.type, encodingName)

              // 4. Else:

              if (fr[kAborted]) {
                return
              }

              // 1. Set fr’s result to result.
              fr[kResult] = result

              // 2. Fire a progress event called load at the fr.
              fireAProgressEvent('load', fr)
            } catch (error) {
              // 3. If package data threw an exception error:

              // 1. Set fr’s error to error.
              fr[kError] = error

              // 2. Fire a progress event called error at fr.
              fireAProgressEvent('error', fr)
            }

            // 5. If fr’s state is not "loading", fire a progress
            //    event called loadend at the fr.
            if (fr[kState] !== 'loading') {
              fireAProgressEvent('loadend', fr)
            }
          })

          break
        }
      } catch (error) {
        if (fr[kAborted]) {
          return
        }

        // 6. Otherwise, if chunkPromise is rejected with an
        //    error error, queue a task to run the following
        //    steps and abort this algorithm:
        queueMicrotask(() => {
          // 1. Set fr’s state to "done".
          fr[kState] = 'done'

          // 2. Set fr’s error to error.
          fr[kError] = error

          // 3. Fire a progress event called error at fr.
          fireAProgressEvent('error', fr)

          // 4. If fr’s state is not "loading", fire a progress
          //    event called loadend at fr.
          if (fr[kState] !== 'loading') {
            fireAProgressEvent('loadend', fr)
          }
        })

        break
      }
    }
  })()
}

/**
 * @see https://w3c.github.io/FileAPI/#fire-a-progress-event
 * @see https://dom.spec.whatwg.org/#concept-event-fire
 * @param {string} e The name of the event
 * @param {import('./filereader').FileReader} reader
 */
function fireAProgressEvent (e, reader) {
  // The progress event e does not bubble. e.bubbles must be false
  // The progress event e is NOT cancelable. e.cancelable must be false
  const event = new ProgressEvent(e, {
    bubbles: false,
    cancelable: false
  })

  reader.dispatchEvent(event)
}

/**
 * @see https://w3c.github.io/FileAPI/#blob-package-data
 * @param {Uint8Array[]} bytes
 * @param {string} type
 * @param {string?} mimeType
 * @param {string?} encodingName
 */
function packageData (bytes, type, mimeType, encodingName) {
  // 1. A Blob has an associated package data algorithm, given
  //    bytes, a type, a optional mimeType, and a optional
  //    encodingName, which switches on type and runs the
  //    associated steps:

  switch (type) {
    case 'DataURL': {
      // 1. Return bytes as a DataURL [RFC2397] subject to
      //    the considerations below:
      //  * Use mimeType as part of the Data URL if it is
      //    available in keeping with the Data URL
      //    specification [RFC2397].
      //  * If mimeType is not available return a Data URL
      //    without a media-type. [RFC2397].

      // https://datatracker.ietf.org/doc/html/rfc2397#section-3
      // dataurl    := "data:" [ mediatype ] [ ";base64" ] "," data
      // mediatype  := [ type "/" subtype ] *( ";" parameter )
      // data       := *urlchar
      // parameter  := attribute "=" value
      let dataURL = 'data:'

      const parsed = parseMIMEType(mimeType || 'application/octet-stream')

      if (parsed !== 'failure') {
        dataURL += serializeAMimeType(parsed)
      }

      dataURL += ';base64,'

      const decoder = new StringDecoder('latin1')

      for (const chunk of bytes) {
        dataURL += btoa(decoder.write(chunk))
      }

      dataURL += btoa(decoder.end())

      return dataURL
    }
    case 'Text': {
      // 1. Let encoding be failure
      let encoding = 'failure'

      // 2. If the encodingName is present, set encoding to the
      //    result of getting an encoding from encodingName.
      if (encodingName) {
        encoding = getEncoding(encodingName)
      }

      // 3. If encoding is failure, and mimeType is present:
      if (encoding === 'failure' && mimeType) {
        // 1. Let type be the result of parse a MIME type
        //    given mimeType.
        const type = parseMIMEType(mimeType)

        // 2. If type is not failure, set encoding to the result
        //    of getting an encoding from type’s parameters["charset"].
        if (type !== 'failure') {
          encoding = getEncoding(type.parameters.get('charset'))
        }
      }

      // 4. If encoding is failure, then set encoding to UTF-8.
      if (encoding === 'failure') {
        encoding = 'UTF-8'
      }

      // 5. Decode bytes using fallback encoding encoding, and
      //    return the result.
      return decode(bytes, encoding)
    }
    case 'ArrayBuffer': {
      // Return a new ArrayBuffer whose contents are bytes.
      const sequence = combineByteSequences(bytes)

      return sequence.buffer
    }
    case 'BinaryString': {
      // Return bytes as a binary string, in which every byte
      //  is represented by a code unit of equal value [0..255].
      let binaryString = ''

      const decoder = new StringDecoder('latin1')

      for (const chunk of bytes) {
        binaryString += decoder.write(chunk)
      }

      binaryString += decoder.end()

      return binaryString
    }
  }
}

/**
 * @see https://encoding.spec.whatwg.org/#decode
 * @param {Uint8Array[]} ioQueue
 * @param {string} encoding
 */
function decode (ioQueue, encoding) {
  const bytes = combineByteSequences(ioQueue)

  // 1. Let BOMEncoding be the result of BOM sniffing ioQueue.
  const BOMEncoding = BOMSniffing(bytes)

  let slice = 0

  // 2. If BOMEncoding is non-null:
  if (BOMEncoding !== null) {
    // 1. Set encoding to BOMEncoding.
    encoding = BOMEncoding

    // 2. Read three bytes from ioQueue, if BOMEncoding is
    //    UTF-8; otherwise read two bytes.
    //    (Do nothing with those bytes.)
    slice = BOMEncoding === 'UTF-8' ? 3 : 2
  }

  // 3. Process a queue with an instance of encoding’s
  //    decoder, ioQueue, output, and "replacement".

  // 4. Return output.

  const sliced = bytes.slice(slice)
  return new TextDecoder(encoding).decode(sliced)
}

/**
 * @see https://encoding.spec.whatwg.org/#bom-sniff
 * @param {Uint8Array} ioQueue
 */
function BOMSniffing (ioQueue) {
  // 1. Let BOM be the result of peeking 3 bytes from ioQueue,
  //    converted to a byte sequence.
  const [a, b, c] = ioQueue

  // 2. For each of the rows in the table below, starting with
  //    the first one and going down, if BOM starts with the
  //    bytes given in the first column, then return the
  //    encoding given in the cell in the second column of that
  //    row. Otherwise, return null.
  if (a === 0xEF && b === 0xBB && c === 0xBF) {
    return 'UTF-8'
  } else if (a === 0xFE && b === 0xFF) {
    return 'UTF-16BE'
  } else if (a === 0xFF && b === 0xFE) {
    return 'UTF-16LE'
  }

  return null
}

/**
 * @param {Uint8Array[]} sequences
 */
function combineByteSequences (sequences) {
  const size = sequences.reduce((a, b) => {
    return a + b.byteLength
  }, 0)

  let offset = 0

  return sequences.reduce((a, b) => {
    a.set(b, offset)
    offset += b.byteLength
    return a
  }, new Uint8Array(size))
}

module.exports = {
  staticPropertyDescriptors,
  readOperation,
  fireAProgressEvent
}


/***/ }),

/***/ 1892:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


// We include a version number for the Dispatcher API. In case of breaking changes,
// this version number must be increased to avoid conflicts.
const globalDispatcher = Symbol.for('undici.globalDispatcher.1')
const { InvalidArgumentError } = __nccwpck_require__(8045)
const Agent = __nccwpck_require__(7890)

if (getGlobalDispatcher() === undefined) {
  setGlobalDispatcher(new Agent())
}

function setGlobalDispatcher (agent) {
  if (!agent || typeof agent.dispatch !== 'function') {
    throw new InvalidArgumentError('Argument agent must implement Agent')
  }
  Object.defineProperty(globalThis, globalDispatcher, {
    value: agent,
    writable: true,
    enumerable: false,
    configurable: false
  })
}

function getGlobalDispatcher () {
  return globalThis[globalDispatcher]
}

module.exports = {
  setGlobalDispatcher,
  getGlobalDispatcher
}


/***/ }),

/***/ 6930:
/***/ ((module) => {

"use strict";


module.exports = class DecoratorHandler {
  constructor (handler) {
    this.handler = handler
  }

  onConnect (...args) {
    return this.handler.onConnect(...args)
  }

  onError (...args) {
    return this.handler.onError(...args)
  }

  onUpgrade (...args) {
    return this.handler.onUpgrade(...args)
  }

  onHeaders (...args) {
    return this.handler.onHeaders(...args)
  }

  onData (...args) {
    return this.handler.onData(...args)
  }

  onComplete (...args) {
    return this.handler.onComplete(...args)
  }

  onBodySent (...args) {
    return this.handler.onBodySent(...args)
  }
}


/***/ }),

/***/ 2860:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const util = __nccwpck_require__(3983)
const { kBodyUsed } = __nccwpck_require__(2785)
const assert = __nccwpck_require__(9491)
const { InvalidArgumentError } = __nccwpck_require__(8045)
const EE = __nccwpck_require__(2361)

const redirectableStatusCodes = [300, 301, 302, 303, 307, 308]

const kBody = Symbol('body')

class BodyAsyncIterable {
  constructor (body) {
    this[kBody] = body
    this[kBodyUsed] = false
  }

  async * [Symbol.asyncIterator] () {
    assert(!this[kBodyUsed], 'disturbed')
    this[kBodyUsed] = true
    yield * this[kBody]
  }
}

class RedirectHandler {
  constructor (dispatch, maxRedirections, opts, handler) {
    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
      throw new InvalidArgumentError('maxRedirections must be a positive number')
    }

    util.validateHandler(handler, opts.method, opts.upgrade)

    this.dispatch = dispatch
    this.location = null
    this.abort = null
    this.opts = { ...opts, maxRedirections: 0 } // opts must be a copy
    this.maxRedirections = maxRedirections
    this.handler = handler
    this.history = []

    if (util.isStream(this.opts.body)) {
      // TODO (fix): Provide some way for the user to cache the file to e.g. /tmp
      // so that it can be dispatched again?
      // TODO (fix): Do we need 100-expect support to provide a way to do this properly?
      if (util.bodyLength(this.opts.body) === 0) {
        this.opts.body
          .on('data', function () {
            assert(false)
          })
      }

      if (typeof this.opts.body.readableDidRead !== 'boolean') {
        this.opts.body[kBodyUsed] = false
        EE.prototype.on.call(this.opts.body, 'data', function () {
          this[kBodyUsed] = true
        })
      }
    } else if (this.opts.body && typeof this.opts.body.pipeTo === 'function') {
      // TODO (fix): We can't access ReadableStream internal state
      // to determine whether or not it has been disturbed. This is just
      // a workaround.
      this.opts.body = new BodyAsyncIterable(this.opts.body)
    } else if (
      this.opts.body &&
      typeof this.opts.body !== 'string' &&
      !ArrayBuffer.isView(this.opts.body) &&
      util.isIterable(this.opts.body)
    ) {
      // TODO: Should we allow re-using iterable if !this.opts.idempotent
      // or through some other flag?
      this.opts.body = new BodyAsyncIterable(this.opts.body)
    }
  }

  onConnect (abort) {
    this.abort = abort
    this.handler.onConnect(abort, { history: this.history })
  }

  onUpgrade (statusCode, headers, socket) {
    this.handler.onUpgrade(statusCode, headers, socket)
  }

  onError (error) {
    this.handler.onError(error)
  }

  onHeaders (statusCode, headers, resume, statusText) {
    this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body)
      ? null
      : parseLocation(statusCode, headers)

    if (this.opts.origin) {
      this.history.push(new URL(this.opts.path, this.opts.origin))
    }

    if (!this.location) {
      return this.handler.onHeaders(statusCode, headers, resume, statusText)
    }

    const { origin, pathname, search } = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)))
    const path = search ? `${pathname}${search}` : pathname

    // Remove headers referring to the original URL.
    // By default it is Host only, unless it's a 303 (see below), which removes also all Content-* headers.
    // https://tools.ietf.org/html/rfc7231#section-6.4
    this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin)
    this.opts.path = path
    this.opts.origin = origin
    this.opts.maxRedirections = 0
    this.opts.query = null

    // https://tools.ietf.org/html/rfc7231#section-6.4.4
    // In case of HTTP 303, always replace method to be either HEAD or GET
    if (statusCode === 303 && this.opts.method !== 'HEAD') {
      this.opts.method = 'GET'
      this.opts.body = null
    }
  }

  onData (chunk) {
    if (this.location) {
      /*
        https://tools.ietf.org/html/rfc7231#section-6.4

        TLDR: undici always ignores 3xx response bodies.

        Redirection is used to serve the requested resource from another URL, so it is assumes that
        no body is generated (and thus can be ignored). Even though generating a body is not prohibited.

        For status 301, 302, 303, 307 and 308 (the latter from RFC 7238), the specs mention that the body usually
        (which means it's optional and not mandated) contain just an hyperlink to the value of
        the Location response header, so the body can be ignored safely.

        For status 300, which is "Multiple Choices", the spec mentions both generating a Location
        response header AND a response body with the other possible location to follow.
        Since the spec explicitily chooses not to specify a format for such body and leave it to
        servers and browsers implementors, we ignore the body as there is no specified way to eventually parse it.
      */
    } else {
      return this.handler.onData(chunk)
    }
  }

  onComplete (trailers) {
    if (this.location) {
      /*
        https://tools.ietf.org/html/rfc7231#section-6.4

        TLDR: undici always ignores 3xx response trailers as they are not expected in case of redirections
        and neither are useful if present.

        See comment on onData method above for more detailed informations.
      */

      this.location = null
      this.abort = null

      this.dispatch(this.opts, this)
    } else {
      this.handler.onComplete(trailers)
    }
  }

  onBodySent (chunk) {
    if (this.handler.onBodySent) {
      this.handler.onBodySent(chunk)
    }
  }
}

function parseLocation (statusCode, headers) {
  if (redirectableStatusCodes.indexOf(statusCode) === -1) {
    return null
  }

  for (let i = 0; i < headers.length; i += 2) {
    if (headers[i].toString().toLowerCase() === 'location') {
      return headers[i + 1]
    }
  }
}

// https://tools.ietf.org/html/rfc7231#section-6.4.4
function shouldRemoveHeader (header, removeContent, unknownOrigin) {
  if (header.length === 4) {
    return util.headerNameToString(header) === 'host'
  }
  if (removeContent && util.headerNameToString(header).startsWith('content-')) {
    return true
  }
  if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {
    const name = util.headerNameToString(header)
    return name === 'authorization' || name === 'cookie' || name === 'proxy-authorization'
  }
  return false
}

// https://tools.ietf.org/html/rfc7231#section-6.4
function cleanRequestHeaders (headers, removeContent, unknownOrigin) {
  const ret = []
  if (Array.isArray(headers)) {
    for (let i = 0; i < headers.length; i += 2) {
      if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {
        ret.push(headers[i], headers[i + 1])
      }
    }
  } else if (headers && typeof headers === 'object') {
    for (const key of Object.keys(headers)) {
      if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {
        ret.push(key, headers[key])
      }
    }
  } else {
    assert(headers == null, 'headers must be an object or an array')
  }
  return ret
}

module.exports = RedirectHandler


/***/ }),

/***/ 2286:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const assert = __nccwpck_require__(9491)

const { kRetryHandlerDefaultRetry } = __nccwpck_require__(2785)
const { RequestRetryError } = __nccwpck_require__(8045)
const { isDisturbed, parseHeaders, parseRangeHeader } = __nccwpck_require__(3983)

function calculateRetryAfterHeader (retryAfter) {
  const current = Date.now()
  const diff = new Date(retryAfter).getTime() - current

  return diff
}

class RetryHandler {
  constructor (opts, handlers) {
    const { retryOptions, ...dispatchOpts } = opts
    const {
      // Retry scoped
      retry: retryFn,
      maxRetries,
      maxTimeout,
      minTimeout,
      timeoutFactor,
      // Response scoped
      methods,
      errorCodes,
      retryAfter,
      statusCodes
    } = retryOptions ?? {}

    this.dispatch = handlers.dispatch
    this.handler = handlers.handler
    this.opts = dispatchOpts
    this.abort = null
    this.aborted = false
    this.retryOpts = {
      retry: retryFn ?? RetryHandler[kRetryHandlerDefaultRetry],
      retryAfter: retryAfter ?? true,
      maxTimeout: maxTimeout ?? 30 * 1000, // 30s,
      timeout: minTimeout ?? 500, // .5s
      timeoutFactor: timeoutFactor ?? 2,
      maxRetries: maxRetries ?? 5,
      // What errors we should retry
      methods: methods ?? ['GET', 'HEAD', 'OPTIONS', 'PUT', 'DELETE', 'TRACE'],
      // Indicates which errors to retry
      statusCodes: statusCodes ?? [500, 502, 503, 504, 429],
      // List of errors to retry
      errorCodes: errorCodes ?? [
        'ECONNRESET',
        'ECONNREFUSED',
        'ENOTFOUND',
        'ENETDOWN',
        'ENETUNREACH',
        'EHOSTDOWN',
        'EHOSTUNREACH',
        'EPIPE'
      ]
    }

    this.retryCount = 0
    this.start = 0
    this.end = null
    this.etag = null
    this.resume = null

    // Handle possible onConnect duplication
    this.handler.onConnect(reason => {
      this.aborted = true
      if (this.abort) {
        this.abort(reason)
      } else {
        this.reason = reason
      }
    })
  }

  onRequestSent () {
    if (this.handler.onRequestSent) {
      this.handler.onRequestSent()
    }
  }

  onUpgrade (statusCode, headers, socket) {
    if (this.handler.onUpgrade) {
      this.handler.onUpgrade(statusCode, headers, socket)
    }
  }

  onConnect (abort) {
    if (this.aborted) {
      abort(this.reason)
    } else {
      this.abort = abort
    }
  }

  onBodySent (chunk) {
    if (this.handler.onBodySent) return this.handler.onBodySent(chunk)
  }

  static [kRetryHandlerDefaultRetry] (err, { state, opts }, cb) {
    const { statusCode, code, headers } = err
    const { method, retryOptions } = opts
    const {
      maxRetries,
      timeout,
      maxTimeout,
      timeoutFactor,
      statusCodes,
      errorCodes,
      methods
    } = retryOptions
    let { counter, currentTimeout } = state

    currentTimeout =
      currentTimeout != null && currentTimeout > 0 ? currentTimeout : timeout

    // Any code that is not a Undici's originated and allowed to retry
    if (
      code &&
      code !== 'UND_ERR_REQ_RETRY' &&
      code !== 'UND_ERR_SOCKET' &&
      !errorCodes.includes(code)
    ) {
      cb(err)
      return
    }

    // If a set of method are provided and the current method is not in the list
    if (Array.isArray(methods) && !methods.includes(method)) {
      cb(err)
      return
    }

    // If a set of status code are provided and the current status code is not in the list
    if (
      statusCode != null &&
      Array.isArray(statusCodes) &&
      !statusCodes.includes(statusCode)
    ) {
      cb(err)
      return
    }

    // If we reached the max number of retries
    if (counter > maxRetries) {
      cb(err)
      return
    }

    let retryAfterHeader = headers != null && headers['retry-after']
    if (retryAfterHeader) {
      retryAfterHeader = Number(retryAfterHeader)
      retryAfterHeader = isNaN(retryAfterHeader)
        ? calculateRetryAfterHeader(retryAfterHeader)
        : retryAfterHeader * 1e3 // Retry-After is in seconds
    }

    const retryTimeout =
      retryAfterHeader > 0
        ? Math.min(retryAfterHeader, maxTimeout)
        : Math.min(currentTimeout * timeoutFactor ** counter, maxTimeout)

    state.currentTimeout = retryTimeout

    setTimeout(() => cb(null), retryTimeout)
  }

  onHeaders (statusCode, rawHeaders, resume, statusMessage) {
    const headers = parseHeaders(rawHeaders)

    this.retryCount += 1

    if (statusCode >= 300) {
      this.abort(
        new RequestRetryError('Request failed', statusCode, {
          headers,
          count: this.retryCount
        })
      )
      return false
    }

    // Checkpoint for resume from where we left it
    if (this.resume != null) {
      this.resume = null

      if (statusCode !== 206) {
        return true
      }

      const contentRange = parseRangeHeader(headers['content-range'])
      // If no content range
      if (!contentRange) {
        this.abort(
          new RequestRetryError('Content-Range mismatch', statusCode, {
            headers,
            count: this.retryCount
          })
        )
        return false
      }

      // Let's start with a weak etag check
      if (this.etag != null && this.etag !== headers.etag) {
        this.abort(
          new RequestRetryError('ETag mismatch', statusCode, {
            headers,
            count: this.retryCount
          })
        )
        return false
      }

      const { start, size, end = size } = contentRange

      assert(this.start === start, 'content-range mismatch')
      assert(this.end == null || this.end === end, 'content-range mismatch')

      this.resume = resume
      return true
    }

    if (this.end == null) {
      if (statusCode === 206) {
        // First time we receive 206
        const range = parseRangeHeader(headers['content-range'])

        if (range == null) {
          return this.handler.onHeaders(
            statusCode,
            rawHeaders,
            resume,
            statusMessage
          )
        }

        const { start, size, end = size } = range

        assert(
          start != null && Number.isFinite(start) && this.start !== start,
          'content-range mismatch'
        )
        assert(Number.isFinite(start))
        assert(
          end != null && Number.isFinite(end) && this.end !== end,
          'invalid content-length'
        )

        this.start = start
        this.end = end
      }

      // We make our best to checkpoint the body for further range headers
      if (this.end == null) {
        const contentLength = headers['content-length']
        this.end = contentLength != null ? Number(contentLength) : null
      }

      assert(Number.isFinite(this.start))
      assert(
        this.end == null || Number.isFinite(this.end),
        'invalid content-length'
      )

      this.resume = resume
      this.etag = headers.etag != null ? headers.etag : null

      return this.handler.onHeaders(
        statusCode,
        rawHeaders,
        resume,
        statusMessage
      )
    }

    const err = new RequestRetryError('Request failed', statusCode, {
      headers,
      count: this.retryCount
    })

    this.abort(err)

    return false
  }

  onData (chunk) {
    this.start += chunk.length

    return this.handler.onData(chunk)
  }

  onComplete (rawTrailers) {
    this.retryCount = 0
    return this.handler.onComplete(rawTrailers)
  }

  onError (err) {
    if (this.aborted || isDisturbed(this.opts.body)) {
      return this.handler.onError(err)
    }

    this.retryOpts.retry(
      err,
      {
        state: { counter: this.retryCount++, currentTimeout: this.retryAfter },
        opts: { retryOptions: this.retryOpts, ...this.opts }
      },
      onRetry.bind(this)
    )

    function onRetry (err) {
      if (err != null || this.aborted || isDisturbed(this.opts.body)) {
        return this.handler.onError(err)
      }

      if (this.start !== 0) {
        this.opts = {
          ...this.opts,
          headers: {
            ...this.opts.headers,
            range: `bytes=${this.start}-${this.end ?? ''}`
          }
        }
      }

      try {
        this.dispatch(this.opts, this)
      } catch (err) {
        this.handler.onError(err)
      }
    }
  }
}

module.exports = RetryHandler


/***/ }),

/***/ 8861:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const RedirectHandler = __nccwpck_require__(2860)

function createRedirectInterceptor ({ maxRedirections: defaultMaxRedirections }) {
  return (dispatch) => {
    return function Intercept (opts, handler) {
      const { maxRedirections = defaultMaxRedirections } = opts

      if (!maxRedirections) {
        return dispatch(opts, handler)
      }

      const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler)
      opts = { ...opts, maxRedirections: 0 } // Stop sub dispatcher from also redirecting.
      return dispatch(opts, redirectHandler)
    }
  }
}

module.exports = createRedirectInterceptor


/***/ }),

/***/ 953:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SPECIAL_HEADERS = exports.HEADER_STATE = exports.MINOR = exports.MAJOR = exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS = exports.TOKEN = exports.STRICT_TOKEN = exports.HEX = exports.URL_CHAR = exports.STRICT_URL_CHAR = exports.USERINFO_CHARS = exports.MARK = exports.ALPHANUM = exports.NUM = exports.HEX_MAP = exports.NUM_MAP = exports.ALPHA = exports.FINISH = exports.H_METHOD_MAP = exports.METHOD_MAP = exports.METHODS_RTSP = exports.METHODS_ICE = exports.METHODS_HTTP = exports.METHODS = exports.LENIENT_FLAGS = exports.FLAGS = exports.TYPE = exports.ERROR = void 0;
const utils_1 = __nccwpck_require__(1891);
// C headers
var ERROR;
(function (ERROR) {
    ERROR[ERROR["OK"] = 0] = "OK";
    ERROR[ERROR["INTERNAL"] = 1] = "INTERNAL";
    ERROR[ERROR["STRICT"] = 2] = "STRICT";
    ERROR[ERROR["LF_EXPECTED"] = 3] = "LF_EXPECTED";
    ERROR[ERROR["UNEXPECTED_CONTENT_LENGTH"] = 4] = "UNEXPECTED_CONTENT_LENGTH";
    ERROR[ERROR["CLOSED_CONNECTION"] = 5] = "CLOSED_CONNECTION";
    ERROR[ERROR["INVALID_METHOD"] = 6] = "INVALID_METHOD";
    ERROR[ERROR["INVALID_URL"] = 7] = "INVALID_URL";
    ERROR[ERROR["INVALID_CONSTANT"] = 8] = "INVALID_CONSTANT";
    ERROR[ERROR["INVALID_VERSION"] = 9] = "INVALID_VERSION";
    ERROR[ERROR["INVALID_HEADER_TOKEN"] = 10] = "INVALID_HEADER_TOKEN";
    ERROR[ERROR["INVALID_CONTENT_LENGTH"] = 11] = "INVALID_CONTENT_LENGTH";
    ERROR[ERROR["INVALID_CHUNK_SIZE"] = 12] = "INVALID_CHUNK_SIZE";
    ERROR[ERROR["INVALID_STATUS"] = 13] = "INVALID_STATUS";
    ERROR[ERROR["INVALID_EOF_STATE"] = 14] = "INVALID_EOF_STATE";
    ERROR[ERROR["INVALID_TRANSFER_ENCODING"] = 15] = "INVALID_TRANSFER_ENCODING";
    ERROR[ERROR["CB_MESSAGE_BEGIN"] = 16] = "CB_MESSAGE_BEGIN";
    ERROR[ERROR["CB_HEADERS_COMPLETE"] = 17] = "CB_HEADERS_COMPLETE";
    ERROR[ERROR["CB_MESSAGE_COMPLETE"] = 18] = "CB_MESSAGE_COMPLETE";
    ERROR[ERROR["CB_CHUNK_HEADER"] = 19] = "CB_CHUNK_HEADER";
    ERROR[ERROR["CB_CHUNK_COMPLETE"] = 20] = "CB_CHUNK_COMPLETE";
    ERROR[ERROR["PAUSED"] = 21] = "PAUSED";
    ERROR[ERROR["PAUSED_UPGRADE"] = 22] = "PAUSED_UPGRADE";
    ERROR[ERROR["PAUSED_H2_UPGRADE"] = 23] = "PAUSED_H2_UPGRADE";
    ERROR[ERROR["USER"] = 24] = "USER";
})(ERROR = exports.ERROR || (exports.ERROR = {}));
var TYPE;
(function (TYPE) {
    TYPE[TYPE["BOTH"] = 0] = "BOTH";
    TYPE[TYPE["REQUEST"] = 1] = "REQUEST";
    TYPE[TYPE["RESPONSE"] = 2] = "RESPONSE";
})(TYPE = exports.TYPE || (exports.TYPE = {}));
var FLAGS;
(function (FLAGS) {
    FLAGS[FLAGS["CONNECTION_KEEP_ALIVE"] = 1] = "CONNECTION_KEEP_ALIVE";
    FLAGS[FLAGS["CONNECTION_CLOSE"] = 2] = "CONNECTION_CLOSE";
    FLAGS[FLAGS["CONNECTION_UPGRADE"] = 4] = "CONNECTION_UPGRADE";
    FLAGS[FLAGS["CHUNKED"] = 8] = "CHUNKED";
    FLAGS[FLAGS["UPGRADE"] = 16] = "UPGRADE";
    FLAGS[FLAGS["CONTENT_LENGTH"] = 32] = "CONTENT_LENGTH";
    FLAGS[FLAGS["SKIPBODY"] = 64] = "SKIPBODY";
    FLAGS[FLAGS["TRAILING"] = 128] = "TRAILING";
    // 1 << 8 is unused
    FLAGS[FLAGS["TRANSFER_ENCODING"] = 512] = "TRANSFER_ENCODING";
})(FLAGS = exports.FLAGS || (exports.FLAGS = {}));
var LENIENT_FLAGS;
(function (LENIENT_FLAGS) {
    LENIENT_FLAGS[LENIENT_FLAGS["HEADERS"] = 1] = "HEADERS";
    LENIENT_FLAGS[LENIENT_FLAGS["CHUNKED_LENGTH"] = 2] = "CHUNKED_LENGTH";
    LENIENT_FLAGS[LENIENT_FLAGS["KEEP_ALIVE"] = 4] = "KEEP_ALIVE";
})(LENIENT_FLAGS = exports.LENIENT_FLAGS || (exports.LENIENT_FLAGS = {}));
var METHODS;
(function (METHODS) {
    METHODS[METHODS["DELETE"] = 0] = "DELETE";
    METHODS[METHODS["GET"] = 1] = "GET";
    METHODS[METHODS["HEAD"] = 2] = "HEAD";
    METHODS[METHODS["POST"] = 3] = "POST";
    METHODS[METHODS["PUT"] = 4] = "PUT";
    /* pathological */
    METHODS[METHODS["CONNECT"] = 5] = "CONNECT";
    METHODS[METHODS["OPTIONS"] = 6] = "OPTIONS";
    METHODS[METHODS["TRACE"] = 7] = "TRACE";
    /* WebDAV */
    METHODS[METHODS["COPY"] = 8] = "COPY";
    METHODS[METHODS["LOCK"] = 9] = "LOCK";
    METHODS[METHODS["MKCOL"] = 10] = "MKCOL";
    METHODS[METHODS["MOVE"] = 11] = "MOVE";
    METHODS[METHODS["PROPFIND"] = 12] = "PROPFIND";
    METHODS[METHODS["PROPPATCH"] = 13] = "PROPPATCH";
    METHODS[METHODS["SEARCH"] = 14] = "SEARCH";
    METHODS[METHODS["UNLOCK"] = 15] = "UNLOCK";
    METHODS[METHODS["BIND"] = 16] = "BIND";
    METHODS[METHODS["REBIND"] = 17] = "REBIND";
    METHODS[METHODS["UNBIND"] = 18] = "UNBIND";
    METHODS[METHODS["ACL"] = 19] = "ACL";
    /* subversion */
    METHODS[METHODS["REPORT"] = 20] = "REPORT";
    METHODS[METHODS["MKACTIVITY"] = 21] = "MKACTIVITY";
    METHODS[METHODS["CHECKOUT"] = 22] = "CHECKOUT";
    METHODS[METHODS["MERGE"] = 23] = "MERGE";
    /* upnp */
    METHODS[METHODS["M-SEARCH"] = 24] = "M-SEARCH";
    METHODS[METHODS["NOTIFY"] = 25] = "NOTIFY";
    METHODS[METHODS["SUBSCRIBE"] = 26] = "SUBSCRIBE";
    METHODS[METHODS["UNSUBSCRIBE"] = 27] = "UNSUBSCRIBE";
    /* RFC-5789 */
    METHODS[METHODS["PATCH"] = 28] = "PATCH";
    METHODS[METHODS["PURGE"] = 29] = "PURGE";
    /* CalDAV */
    METHODS[METHODS["MKCALENDAR"] = 30] = "MKCALENDAR";
    /* RFC-2068, section 19.6.1.2 */
    METHODS[METHODS["LINK"] = 31] = "LINK";
    METHODS[METHODS["UNLINK"] = 32] = "UNLINK";
    /* icecast */
    METHODS[METHODS["SOURCE"] = 33] = "SOURCE";
    /* RFC-7540, section 11.6 */
    METHODS[METHODS["PRI"] = 34] = "PRI";
    /* RFC-2326 RTSP */
    METHODS[METHODS["DESCRIBE"] = 35] = "DESCRIBE";
    METHODS[METHODS["ANNOUNCE"] = 36] = "ANNOUNCE";
    METHODS[METHODS["SETUP"] = 37] = "SETUP";
    METHODS[METHODS["PLAY"] = 38] = "PLAY";
    METHODS[METHODS["PAUSE"] = 39] = "PAUSE";
    METHODS[METHODS["TEARDOWN"] = 40] = "TEARDOWN";
    METHODS[METHODS["GET_PARAMETER"] = 41] = "GET_PARAMETER";
    METHODS[METHODS["SET_PARAMETER"] = 42] = "SET_PARAMETER";
    METHODS[METHODS["REDIRECT"] = 43] = "REDIRECT";
    METHODS[METHODS["RECORD"] = 44] = "RECORD";
    /* RAOP */
    METHODS[METHODS["FLUSH"] = 45] = "FLUSH";
})(METHODS = exports.METHODS || (exports.METHODS = {}));
exports.METHODS_HTTP = [
    METHODS.DELETE,
    METHODS.GET,
    METHODS.HEAD,
    METHODS.POST,
    METHODS.PUT,
    METHODS.CONNECT,
    METHODS.OPTIONS,
    METHODS.TRACE,
    METHODS.COPY,
    METHODS.LOCK,
    METHODS.MKCOL,
    METHODS.MOVE,
    METHODS.PROPFIND,
    METHODS.PROPPATCH,
    METHODS.SEARCH,
    METHODS.UNLOCK,
    METHODS.BIND,
    METHODS.REBIND,
    METHODS.UNBIND,
    METHODS.ACL,
    METHODS.REPORT,
    METHODS.MKACTIVITY,
    METHODS.CHECKOUT,
    METHODS.MERGE,
    METHODS['M-SEARCH'],
    METHODS.NOTIFY,
    METHODS.SUBSCRIBE,
    METHODS.UNSUBSCRIBE,
    METHODS.PATCH,
    METHODS.PURGE,
    METHODS.MKCALENDAR,
    METHODS.LINK,
    METHODS.UNLINK,
    METHODS.PRI,
    // TODO(indutny): should we allow it with HTTP?
    METHODS.SOURCE,
];
exports.METHODS_ICE = [
    METHODS.SOURCE,
];
exports.METHODS_RTSP = [
    METHODS.OPTIONS,
    METHODS.DESCRIBE,
    METHODS.ANNOUNCE,
    METHODS.SETUP,
    METHODS.PLAY,
    METHODS.PAUSE,
    METHODS.TEARDOWN,
    METHODS.GET_PARAMETER,
    METHODS.SET_PARAMETER,
    METHODS.REDIRECT,
    METHODS.RECORD,
    METHODS.FLUSH,
    // For AirPlay
    METHODS.GET,
    METHODS.POST,
];
exports.METHOD_MAP = utils_1.enumToMap(METHODS);
exports.H_METHOD_MAP = {};
Object.keys(exports.METHOD_MAP).forEach((key) => {
    if (/^H/.test(key)) {
        exports.H_METHOD_MAP[key] = exports.METHOD_MAP[key];
    }
});
var FINISH;
(function (FINISH) {
    FINISH[FINISH["SAFE"] = 0] = "SAFE";
    FINISH[FINISH["SAFE_WITH_CB"] = 1] = "SAFE_WITH_CB";
    FINISH[FINISH["UNSAFE"] = 2] = "UNSAFE";
})(FINISH = exports.FINISH || (exports.FINISH = {}));
exports.ALPHA = [];
for (let i = 'A'.charCodeAt(0); i <= 'Z'.charCodeAt(0); i++) {
    // Upper case
    exports.ALPHA.push(String.fromCharCode(i));
    // Lower case
    exports.ALPHA.push(String.fromCharCode(i + 0x20));
}
exports.NUM_MAP = {
    0: 0, 1: 1, 2: 2, 3: 3, 4: 4,
    5: 5, 6: 6, 7: 7, 8: 8, 9: 9,
};
exports.HEX_MAP = {
    0: 0, 1: 1, 2: 2, 3: 3, 4: 4,
    5: 5, 6: 6, 7: 7, 8: 8, 9: 9,
    A: 0XA, B: 0XB, C: 0XC, D: 0XD, E: 0XE, F: 0XF,
    a: 0xa, b: 0xb, c: 0xc, d: 0xd, e: 0xe, f: 0xf,
};
exports.NUM = [
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
];
exports.ALPHANUM = exports.ALPHA.concat(exports.NUM);
exports.MARK = ['-', '_', '.', '!', '~', '*', '\'', '(', ')'];
exports.USERINFO_CHARS = exports.ALPHANUM
    .concat(exports.MARK)
    .concat(['%', ';', ':', '&', '=', '+', '$', ',']);
// TODO(indutny): use RFC
exports.STRICT_URL_CHAR = [
    '!', '"', '$', '%', '&', '\'',
    '(', ')', '*', '+', ',', '-', '.', '/',
    ':', ';', '<', '=', '>',
    '@', '[', '\\', ']', '^', '_',
    '`',
    '{', '|', '}', '~',
].concat(exports.ALPHANUM);
exports.URL_CHAR = exports.STRICT_URL_CHAR
    .concat(['\t', '\f']);
// All characters with 0x80 bit set to 1
for (let i = 0x80; i <= 0xff; i++) {
    exports.URL_CHAR.push(i);
}
exports.HEX = exports.NUM.concat(['a', 'b', 'c', 'd', 'e', 'f', 'A', 'B', 'C', 'D', 'E', 'F']);
/* Tokens as defined by rfc 2616. Also lowercases them.
 *        token       = 1*<any CHAR except CTLs or separators>
 *     separators     = "(" | ")" | "<" | ">" | "@"
 *                    | "," | ";" | ":" | "\" | <">
 *                    | "/" | "[" | "]" | "?" | "="
 *                    | "{" | "}" | SP | HT
 */
exports.STRICT_TOKEN = [
    '!', '#', '$', '%', '&', '\'',
    '*', '+', '-', '.',
    '^', '_', '`',
    '|', '~',
].concat(exports.ALPHANUM);
exports.TOKEN = exports.STRICT_TOKEN.concat([' ']);
/*
 * Verify that a char is a valid visible (printable) US-ASCII
 * character or %x80-FF
 */
exports.HEADER_CHARS = ['\t'];
for (let i = 32; i <= 255; i++) {
    if (i !== 127) {
        exports.HEADER_CHARS.push(i);
    }
}
// ',' = \x44
exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter((c) => c !== 44);
exports.MAJOR = exports.NUM_MAP;
exports.MINOR = exports.MAJOR;
var HEADER_STATE;
(function (HEADER_STATE) {
    HEADER_STATE[HEADER_STATE["GENERAL"] = 0] = "GENERAL";
    HEADER_STATE[HEADER_STATE["CONNECTION"] = 1] = "CONNECTION";
    HEADER_STATE[HEADER_STATE["CONTENT_LENGTH"] = 2] = "CONTENT_LENGTH";
    HEADER_STATE[HEADER_STATE["TRANSFER_ENCODING"] = 3] = "TRANSFER_ENCODING";
    HEADER_STATE[HEADER_STATE["UPGRADE"] = 4] = "UPGRADE";
    HEADER_STATE[HEADER_STATE["CONNECTION_KEEP_ALIVE"] = 5] = "CONNECTION_KEEP_ALIVE";
    HEADER_STATE[HEADER_STATE["CONNECTION_CLOSE"] = 6] = "CONNECTION_CLOSE";
    HEADER_STATE[HEADER_STATE["CONNECTION_UPGRADE"] = 7] = "CONNECTION_UPGRADE";
    HEADER_STATE[HEADER_STATE["TRANSFER_ENCODING_CHUNKED"] = 8] = "TRANSFER_ENCODING_CHUNKED";
})(HEADER_STATE = exports.HEADER_STATE || (exports.HEADER_STATE = {}));
exports.SPECIAL_HEADERS = {
    'connection': HEADER_STATE.CONNECTION,
    'content-length': HEADER_STATE.CONTENT_LENGTH,
    'proxy-connection': HEADER_STATE.CONNECTION,
    'transfer-encoding': HEADER_STATE.TRANSFER_ENCODING,
    'upgrade': HEADER_STATE.UPGRADE,
};
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ 1145:
/***/ ((module) => {

module.exports = ''


/***/ }),

/***/ 5627:
/***/ ((module) => {

module.exports = ''


/***/ }),

/***/ 1891:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.enumToMap = void 0;
function enumToMap(obj) {
    const res = {};
    Object.keys(obj).forEach((key) => {
        const value = obj[key];
        if (typeof value === 'number') {
            res[key] = value;
        }
    });
    return res;
}
exports.enumToMap = enumToMap;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 6771:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { kClients } = __nccwpck_require__(2785)
const Agent = __nccwpck_require__(7890)
const {
  kAgent,
  kMockAgentSet,
  kMockAgentGet,
  kDispatches,
  kIsMockActive,
  kNetConnect,
  kGetNetConnect,
  kOptions,
  kFactory
} = __nccwpck_require__(4347)
const MockClient = __nccwpck_require__(8687)
const MockPool = __nccwpck_require__(6193)
const { matchValue, buildMockOptions } = __nccwpck_require__(9323)
const { InvalidArgumentError, UndiciError } = __nccwpck_require__(8045)
const Dispatcher = __nccwpck_require__(412)
const Pluralizer = __nccwpck_require__(8891)
const PendingInterceptorsFormatter = __nccwpck_require__(6823)

class FakeWeakRef {
  constructor (value) {
    this.value = value
  }

  deref () {
    return this.value
  }
}

class MockAgent extends Dispatcher {
  constructor (opts) {
    super(opts)

    this[kNetConnect] = true
    this[kIsMockActive] = true

    // Instantiate Agent and encapsulate
    if ((opts && opts.agent && typeof opts.agent.dispatch !== 'function')) {
      throw new InvalidArgumentError('Argument opts.agent must implement Agent')
    }
    const agent = opts && opts.agent ? opts.agent : new Agent(opts)
    this[kAgent] = agent

    this[kClients] = agent[kClients]
    this[kOptions] = buildMockOptions(opts)
  }

  get (origin) {
    let dispatcher = this[kMockAgentGet](origin)

    if (!dispatcher) {
      dispatcher = this[kFactory](origin)
      this[kMockAgentSet](origin, dispatcher)
    }
    return dispatcher
  }

  dispatch (opts, handler) {
    // Call MockAgent.get to perform additional setup before dispatching as normal
    this.get(opts.origin)
    return this[kAgent].dispatch(opts, handler)
  }

  async close () {
    await this[kAgent].close()
    this[kClients].clear()
  }

  deactivate () {
    this[kIsMockActive] = false
  }

  activate () {
    this[kIsMockActive] = true
  }

  enableNetConnect (matcher) {
    if (typeof matcher === 'string' || typeof matcher === 'function' || matcher instanceof RegExp) {
      if (Array.isArray(this[kNetConnect])) {
        this[kNetConnect].push(matcher)
      } else {
        this[kNetConnect] = [matcher]
      }
    } else if (typeof matcher === 'undefined') {
      this[kNetConnect] = true
    } else {
      throw new InvalidArgumentError('Unsupported matcher. Must be one of String|Function|RegExp.')
    }
  }

  disableNetConnect () {
    this[kNetConnect] = false
  }

  // This is required to bypass issues caused by using global symbols - see:
  // https://github.com/nodejs/undici/issues/1447
  get isMockActive () {
    return this[kIsMockActive]
  }

  [kMockAgentSet] (origin, dispatcher) {
    this[kClients].set(origin, new FakeWeakRef(dispatcher))
  }

  [kFactory] (origin) {
    const mockOptions = Object.assign({ agent: this }, this[kOptions])
    return this[kOptions] && this[kOptions].connections === 1
      ? new MockClient(origin, mockOptions)
      : new MockPool(origin, mockOptions)
  }

  [kMockAgentGet] (origin) {
    // First check if we can immediately find it
    const ref = this[kClients].get(origin)
    if (ref) {
      return ref.deref()
    }

    // If the origin is not a string create a dummy parent pool and return to user
    if (typeof origin !== 'string') {
      const dispatcher = this[kFactory]('http://localhost:9999')
      this[kMockAgentSet](origin, dispatcher)
      return dispatcher
    }

    // If we match, create a pool and assign the same dispatches
    for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {
      const nonExplicitDispatcher = nonExplicitRef.deref()
      if (nonExplicitDispatcher && typeof keyMatcher !== 'string' && matchValue(keyMatcher, origin)) {
        const dispatcher = this[kFactory](origin)
        this[kMockAgentSet](origin, dispatcher)
        dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches]
        return dispatcher
      }
    }
  }

  [kGetNetConnect] () {
    return this[kNetConnect]
  }

  pendingInterceptors () {
    const mockAgentClients = this[kClients]

    return Array.from(mockAgentClients.entries())
      .flatMap(([origin, scope]) => scope.deref()[kDispatches].map(dispatch => ({ ...dispatch, origin })))
      .filter(({ pending }) => pending)
  }

  assertNoPendingInterceptors ({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {
    const pending = this.pendingInterceptors()

    if (pending.length === 0) {
      return
    }

    const pluralizer = new Pluralizer('interceptor', 'interceptors').pluralize(pending.length)

    throw new UndiciError(`
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending)}
`.trim())
  }
}

module.exports = MockAgent


/***/ }),

/***/ 8687:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { promisify } = __nccwpck_require__(3837)
const Client = __nccwpck_require__(3598)
const { buildMockDispatch } = __nccwpck_require__(9323)
const {
  kDispatches,
  kMockAgent,
  kClose,
  kOriginalClose,
  kOrigin,
  kOriginalDispatch,
  kConnected
} = __nccwpck_require__(4347)
const { MockInterceptor } = __nccwpck_require__(410)
const Symbols = __nccwpck_require__(2785)
const { InvalidArgumentError } = __nccwpck_require__(8045)

/**
 * MockClient provides an API that extends the Client to influence the mockDispatches.
 */
class MockClient extends Client {
  constructor (origin, opts) {
    super(origin, opts)

    if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {
      throw new InvalidArgumentError('Argument opts.agent must implement Agent')
    }

    this[kMockAgent] = opts.agent
    this[kOrigin] = origin
    this[kDispatches] = []
    this[kConnected] = 1
    this[kOriginalDispatch] = this.dispatch
    this[kOriginalClose] = this.close.bind(this)

    this.dispatch = buildMockDispatch.call(this)
    this.close = this[kClose]
  }

  get [Symbols.kConnected] () {
    return this[kConnected]
  }

  /**
   * Sets up the base interceptor for mocking replies from undici.
   */
  intercept (opts) {
    return new MockInterceptor(opts, this[kDispatches])
  }

  async [kClose] () {
    await promisify(this[kOriginalClose])()
    this[kConnected] = 0
    this[kMockAgent][Symbols.kClients].delete(this[kOrigin])
  }
}

module.exports = MockClient


/***/ }),

/***/ 888:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { UndiciError } = __nccwpck_require__(8045)

class MockNotMatchedError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, MockNotMatchedError)
    this.name = 'MockNotMatchedError'
    this.message = message || 'The request does not match any registered mock dispatches'
    this.code = 'UND_MOCK_ERR_MOCK_NOT_MATCHED'
  }
}

module.exports = {
  MockNotMatchedError
}


/***/ }),

/***/ 410:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { getResponseData, buildKey, addMockDispatch } = __nccwpck_require__(9323)
const {
  kDispatches,
  kDispatchKey,
  kDefaultHeaders,
  kDefaultTrailers,
  kContentLength,
  kMockDispatch
} = __nccwpck_require__(4347)
const { InvalidArgumentError } = __nccwpck_require__(8045)
const { buildURL } = __nccwpck_require__(3983)

/**
 * Defines the scope API for an interceptor reply
 */
class MockScope {
  constructor (mockDispatch) {
    this[kMockDispatch] = mockDispatch
  }

  /**
   * Delay a reply by a set amount in ms.
   */
  delay (waitInMs) {
    if (typeof waitInMs !== 'number' || !Number.isInteger(waitInMs) || waitInMs <= 0) {
      throw new InvalidArgumentError('waitInMs must be a valid integer > 0')
    }

    this[kMockDispatch].delay = waitInMs
    return this
  }

  /**
   * For a defined reply, never mark as consumed.
   */
  persist () {
    this[kMockDispatch].persist = true
    return this
  }

  /**
   * Allow one to define a reply for a set amount of matching requests.
   */
  times (repeatTimes) {
    if (typeof repeatTimes !== 'number' || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {
      throw new InvalidArgumentError('repeatTimes must be a valid integer > 0')
    }

    this[kMockDispatch].times = repeatTimes
    return this
  }
}

/**
 * Defines an interceptor for a Mock
 */
class MockInterceptor {
  constructor (opts, mockDispatches) {
    if (typeof opts !== 'object') {
      throw new InvalidArgumentError('opts must be an object')
    }
    if (typeof opts.path === 'undefined') {
      throw new InvalidArgumentError('opts.path must be defined')
    }
    if (typeof opts.method === 'undefined') {
      opts.method = 'GET'
    }
    // See https://github.com/nodejs/undici/issues/1245
    // As per RFC 3986, clients are not supposed to send URI
    // fragments to servers when they retrieve a document,
    if (typeof opts.path === 'string') {
      if (opts.query) {
        opts.path = buildURL(opts.path, opts.query)
      } else {
        // Matches https://github.com/nodejs/undici/blob/main/lib/fetch/index.js#L1811
        const parsedURL = new URL(opts.path, 'data://')
        opts.path = parsedURL.pathname + parsedURL.search
      }
    }
    if (typeof opts.method === 'string') {
      opts.method = opts.method.toUpperCase()
    }

    this[kDispatchKey] = buildKey(opts)
    this[kDispatches] = mockDispatches
    this[kDefaultHeaders] = {}
    this[kDefaultTrailers] = {}
    this[kContentLength] = false
  }

  createMockScopeDispatchData (statusCode, data, responseOptions = {}) {
    const responseData = getResponseData(data)
    const contentLength = this[kContentLength] ? { 'content-length': responseData.length } : {}
    const headers = { ...this[kDefaultHeaders], ...contentLength, ...responseOptions.headers }
    const trailers = { ...this[kDefaultTrailers], ...responseOptions.trailers }

    return { statusCode, data, headers, trailers }
  }

  validateReplyParameters (statusCode, data, responseOptions) {
    if (typeof statusCode === 'undefined') {
      throw new InvalidArgumentError('statusCode must be defined')
    }
    if (typeof data === 'undefined') {
      throw new InvalidArgumentError('data must be defined')
    }
    if (typeof responseOptions !== 'object') {
      throw new InvalidArgumentError('responseOptions must be an object')
    }
  }

  /**
   * Mock an undici request with a defined reply.
   */
  reply (replyData) {
    // Values of reply aren't available right now as they
    // can only be available when the reply callback is invoked.
    if (typeof replyData === 'function') {
      // We'll first wrap the provided callback in another function,
      // this function will properly resolve the data from the callback
      // when invoked.
      const wrappedDefaultsCallback = (opts) => {
        // Our reply options callback contains the parameter for statusCode, data and options.
        const resolvedData = replyData(opts)

        // Check if it is in the right format
        if (typeof resolvedData !== 'object') {
          throw new InvalidArgumentError('reply options callback must return an object')
        }

        const { statusCode, data = '', responseOptions = {} } = resolvedData
        this.validateReplyParameters(statusCode, data, responseOptions)
        // Since the values can be obtained immediately we return them
        // from this higher order function that will be resolved later.
        return {
          ...this.createMockScopeDispatchData(statusCode, data, responseOptions)
        }
      }

      // Add usual dispatch data, but this time set the data parameter to function that will eventually provide data.
      const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback)
      return new MockScope(newMockDispatch)
    }

    // We can have either one or three parameters, if we get here,
    // we should have 1-3 parameters. So we spread the arguments of
    // this function to obtain the parameters, since replyData will always
    // just be the statusCode.
    const [statusCode, data = '', responseOptions = {}] = [...arguments]
    this.validateReplyParameters(statusCode, data, responseOptions)

    // Send in-already provided data like usual
    const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions)
    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData)
    return new MockScope(newMockDispatch)
  }

  /**
   * Mock an undici request with a defined error.
   */
  replyWithError (error) {
    if (typeof error === 'undefined') {
      throw new InvalidArgumentError('error must be defined')
    }

    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], { error })
    return new MockScope(newMockDispatch)
  }

  /**
   * Set default reply headers on the interceptor for subsequent replies
   */
  defaultReplyHeaders (headers) {
    if (typeof headers === 'undefined') {
      throw new InvalidArgumentError('headers must be defined')
    }

    this[kDefaultHeaders] = headers
    return this
  }

  /**
   * Set default reply trailers on the interceptor for subsequent replies
   */
  defaultReplyTrailers (trailers) {
    if (typeof trailers === 'undefined') {
      throw new InvalidArgumentError('trailers must be defined')
    }

    this[kDefaultTrailers] = trailers
    return this
  }

  /**
   * Set reply content length header for replies on the interceptor
   */
  replyContentLength () {
    this[kContentLength] = true
    return this
  }
}

module.exports.MockInterceptor = MockInterceptor
module.exports.MockScope = MockScope


/***/ }),

/***/ 6193:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { promisify } = __nccwpck_require__(3837)
const Pool = __nccwpck_require__(4634)
const { buildMockDispatch } = __nccwpck_require__(9323)
const {
  kDispatches,
  kMockAgent,
  kClose,
  kOriginalClose,
  kOrigin,
  kOriginalDispatch,
  kConnected
} = __nccwpck_require__(4347)
const { MockInterceptor } = __nccwpck_require__(410)
const Symbols = __nccwpck_require__(2785)
const { InvalidArgumentError } = __nccwpck_require__(8045)

/**
 * MockPool provides an API that extends the Pool to influence the mockDispatches.
 */
class MockPool extends Pool {
  constructor (origin, opts) {
    super(origin, opts)

    if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {
      throw new InvalidArgumentError('Argument opts.agent must implement Agent')
    }

    this[kMockAgent] = opts.agent
    this[kOrigin] = origin
    this[kDispatches] = []
    this[kConnected] = 1
    this[kOriginalDispatch] = this.dispatch
    this[kOriginalClose] = this.close.bind(this)

    this.dispatch = buildMockDispatch.call(this)
    this.close = this[kClose]
  }

  get [Symbols.kConnected] () {
    return this[kConnected]
  }

  /**
   * Sets up the base interceptor for mocking replies from undici.
   */
  intercept (opts) {
    return new MockInterceptor(opts, this[kDispatches])
  }

  async [kClose] () {
    await promisify(this[kOriginalClose])()
    this[kConnected] = 0
    this[kMockAgent][Symbols.kClients].delete(this[kOrigin])
  }
}

module.exports = MockPool


/***/ }),

/***/ 4347:
/***/ ((module) => {

"use strict";


module.exports = {
  kAgent: Symbol('agent'),
  kOptions: Symbol('options'),
  kFactory: Symbol('factory'),
  kDispatches: Symbol('dispatches'),
  kDispatchKey: Symbol('dispatch key'),
  kDefaultHeaders: Symbol('default headers'),
  kDefaultTrailers: Symbol('default trailers'),
  kContentLength: Symbol('content length'),
  kMockAgent: Symbol('mock agent'),
  kMockAgentSet: Symbol('mock agent set'),
  kMockAgentGet: Symbol('mock agent get'),
  kMockDispatch: Symbol('mock dispatch'),
  kClose: Symbol('close'),
  kOriginalClose: Symbol('original agent close'),
  kOrigin: Symbol('origin'),
  kIsMockActive: Symbol('is mock active'),
  kNetConnect: Symbol('net connect'),
  kGetNetConnect: Symbol('get net connect'),
  kConnected: Symbol('connected')
}


/***/ }),

/***/ 9323:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { MockNotMatchedError } = __nccwpck_require__(888)
const {
  kDispatches,
  kMockAgent,
  kOriginalDispatch,
  kOrigin,
  kGetNetConnect
} = __nccwpck_require__(4347)
const { buildURL, nop } = __nccwpck_require__(3983)
const { STATUS_CODES } = __nccwpck_require__(3685)
const {
  types: {
    isPromise
  }
} = __nccwpck_require__(3837)

function matchValue (match, value) {
  if (typeof match === 'string') {
    return match === value
  }
  if (match instanceof RegExp) {
    return match.test(value)
  }
  if (typeof match === 'function') {
    return match(value) === true
  }
  return false
}

function lowerCaseEntries (headers) {
  return Object.fromEntries(
    Object.entries(headers).map(([headerName, headerValue]) => {
      return [headerName.toLocaleLowerCase(), headerValue]
    })
  )
}

/**
 * @param {import('../../index').Headers|string[]|Record<string, string>} headers
 * @param {string} key
 */
function getHeaderByName (headers, key) {
  if (Array.isArray(headers)) {
    for (let i = 0; i < headers.length; i += 2) {
      if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) {
        return headers[i + 1]
      }
    }

    return undefined
  } else if (typeof headers.get === 'function') {
    return headers.get(key)
  } else {
    return lowerCaseEntries(headers)[key.toLocaleLowerCase()]
  }
}

/** @param {string[]} headers */
function buildHeadersFromArray (headers) { // fetch HeadersList
  const clone = headers.slice()
  const entries = []
  for (let index = 0; index < clone.length; index += 2) {
    entries.push([clone[index], clone[index + 1]])
  }
  return Object.fromEntries(entries)
}

function matchHeaders (mockDispatch, headers) {
  if (typeof mockDispatch.headers === 'function') {
    if (Array.isArray(headers)) { // fetch HeadersList
      headers = buildHeadersFromArray(headers)
    }
    return mockDispatch.headers(headers ? lowerCaseEntries(headers) : {})
  }
  if (typeof mockDispatch.headers === 'undefined') {
    return true
  }
  if (typeof headers !== 'object' || typeof mockDispatch.headers !== 'object') {
    return false
  }

  for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch.headers)) {
    const headerValue = getHeaderByName(headers, matchHeaderName)

    if (!matchValue(matchHeaderValue, headerValue)) {
      return false
    }
  }
  return true
}

function safeUrl (path) {
  if (typeof path !== 'string') {
    return path
  }

  const pathSegments = path.split('?')

  if (pathSegments.length !== 2) {
    return path
  }

  const qp = new URLSearchParams(pathSegments.pop())
  qp.sort()
  return [...pathSegments, qp.toString()].join('?')
}

function matchKey (mockDispatch, { path, method, body, headers }) {
  const pathMatch = matchValue(mockDispatch.path, path)
  const methodMatch = matchValue(mockDispatch.method, method)
  const bodyMatch = typeof mockDispatch.body !== 'undefined' ? matchValue(mockDispatch.body, body) : true
  const headersMatch = matchHeaders(mockDispatch, headers)
  return pathMatch && methodMatch && bodyMatch && headersMatch
}

function getResponseData (data) {
  if (Buffer.isBuffer(data)) {
    return data
  } else if (typeof data === 'object') {
    return JSON.stringify(data)
  } else {
    return data.toString()
  }
}

function getMockDispatch (mockDispatches, key) {
  const basePath = key.query ? buildURL(key.path, key.query) : key.path
  const resolvedPath = typeof basePath === 'string' ? safeUrl(basePath) : basePath

  // Match path
  let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path }) => matchValue(safeUrl(path), resolvedPath))
  if (matchedMockDispatches.length === 0) {
    throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`)
  }

  // Match method
  matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue(method, key.method))
  if (matchedMockDispatches.length === 0) {
    throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}'`)
  }

  // Match body
  matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== 'undefined' ? matchValue(body, key.body) : true)
  if (matchedMockDispatches.length === 0) {
    throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}'`)
  }

  // Match headers
  matchedMockDispatches = matchedMockDispatches.filter((mockDispatch) => matchHeaders(mockDispatch, key.headers))
  if (matchedMockDispatches.length === 0) {
    throw new MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key.headers === 'object' ? JSON.stringify(key.headers) : key.headers}'`)
  }

  return matchedMockDispatches[0]
}

function addMockDispatch (mockDispatches, key, data) {
  const baseData = { timesInvoked: 0, times: 1, persist: false, consumed: false }
  const replyData = typeof data === 'function' ? { callback: data } : { ...data }
  const newMockDispatch = { ...baseData, ...key, pending: true, data: { error: null, ...replyData } }
  mockDispatches.push(newMockDispatch)
  return newMockDispatch
}

function deleteMockDispatch (mockDispatches, key) {
  const index = mockDispatches.findIndex(dispatch => {
    if (!dispatch.consumed) {
      return false
    }
    return matchKey(dispatch, key)
  })
  if (index !== -1) {
    mockDispatches.splice(index, 1)
  }
}

function buildKey (opts) {
  const { path, method, body, headers, query } = opts
  return {
    path,
    method,
    body,
    headers,
    query
  }
}

function generateKeyValues (data) {
  return Object.entries(data).reduce((keyValuePairs, [key, value]) => [
    ...keyValuePairs,
    Buffer.from(`${key}`),
    Array.isArray(value) ? value.map(x => Buffer.from(`${x}`)) : Buffer.from(`${value}`)
  ], [])
}

/**
 * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
 * @param {number} statusCode
 */
function getStatusText (statusCode) {
  return STATUS_CODES[statusCode] || 'unknown'
}

async function getResponse (body) {
  const buffers = []
  for await (const data of body) {
    buffers.push(data)
  }
  return Buffer.concat(buffers).toString('utf8')
}

/**
 * Mock dispatch function used to simulate undici dispatches
 */
function mockDispatch (opts, handler) {
  // Get mock dispatch from built key
  const key = buildKey(opts)
  const mockDispatch = getMockDispatch(this[kDispatches], key)

  mockDispatch.timesInvoked++

  // Here's where we resolve a callback if a callback is present for the dispatch data.
  if (mockDispatch.data.callback) {
    mockDispatch.data = { ...mockDispatch.data, ...mockDispatch.data.callback(opts) }
  }

  // Parse mockDispatch data
  const { data: { statusCode, data, headers, trailers, error }, delay, persist } = mockDispatch
  const { timesInvoked, times } = mockDispatch

  // If it's used up and not persistent, mark as consumed
  mockDispatch.consumed = !persist && timesInvoked >= times
  mockDispatch.pending = timesInvoked < times

  // If specified, trigger dispatch error
  if (error !== null) {
    deleteMockDispatch(this[kDispatches], key)
    handler.onError(error)
    return true
  }

  // Handle the request with a delay if necessary
  if (typeof delay === 'number' && delay > 0) {
    setTimeout(() => {
      handleReply(this[kDispatches])
    }, delay)
  } else {
    handleReply(this[kDispatches])
  }

  function handleReply (mockDispatches, _data = data) {
    // fetch's HeadersList is a 1D string array
    const optsHeaders = Array.isArray(opts.headers)
      ? buildHeadersFromArray(opts.headers)
      : opts.headers
    const body = typeof _data === 'function'
      ? _data({ ...opts, headers: optsHeaders })
      : _data

    // util.types.isPromise is likely needed for jest.
    if (isPromise(body)) {
      // If handleReply is asynchronous, throwing an error
      // in the callback will reject the promise, rather than
      // synchronously throw the error, which breaks some tests.
      // Rather, we wait for the callback to resolve if it is a
      // promise, and then re-run handleReply with the new body.
      body.then((newData) => handleReply(mockDispatches, newData))
      return
    }

    const responseData = getResponseData(body)
    const responseHeaders = generateKeyValues(headers)
    const responseTrailers = generateKeyValues(trailers)

    handler.abort = nop
    handler.onHeaders(statusCode, responseHeaders, resume, getStatusText(statusCode))
    handler.onData(Buffer.from(responseData))
    handler.onComplete(responseTrailers)
    deleteMockDispatch(mockDispatches, key)
  }

  function resume () {}

  return true
}

function buildMockDispatch () {
  const agent = this[kMockAgent]
  const origin = this[kOrigin]
  const originalDispatch = this[kOriginalDispatch]

  return function dispatch (opts, handler) {
    if (agent.isMockActive) {
      try {
        mockDispatch.call(this, opts, handler)
      } catch (error) {
        if (error instanceof MockNotMatchedError) {
          const netConnect = agent[kGetNetConnect]()
          if (netConnect === false) {
            throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`)
          }
          if (checkNetConnect(netConnect, origin)) {
            originalDispatch.call(this, opts, handler)
          } else {
            throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`)
          }
        } else {
          throw error
        }
      }
    } else {
      originalDispatch.call(this, opts, handler)
    }
  }
}

function checkNetConnect (netConnect, origin) {
  const url = new URL(origin)
  if (netConnect === true) {
    return true
  } else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue(matcher, url.host))) {
    return true
  }
  return false
}

function buildMockOptions (opts) {
  if (opts) {
    const { agent, ...mockOptions } = opts
    return mockOptions
  }
}

module.exports = {
  getResponseData,
  getMockDispatch,
  addMockDispatch,
  deleteMockDispatch,
  buildKey,
  generateKeyValues,
  matchValue,
  getResponse,
  getStatusText,
  mockDispatch,
  buildMockDispatch,
  checkNetConnect,
  buildMockOptions,
  getHeaderByName
}


/***/ }),

/***/ 6823:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { Transform } = __nccwpck_require__(2781)
const { Console } = __nccwpck_require__(6206)

/**
 * Gets the output of `console.table(…)` as a string.
 */
module.exports = class PendingInterceptorsFormatter {
  constructor ({ disableColors } = {}) {
    this.transform = new Transform({
      transform (chunk, _enc, cb) {
        cb(null, chunk)
      }
    })

    this.logger = new Console({
      stdout: this.transform,
      inspectOptions: {
        colors: !disableColors && !process.env.CI
      }
    })
  }

  format (pendingInterceptors) {
    const withPrettyHeaders = pendingInterceptors.map(
      ({ method, path, data: { statusCode }, persist, times, timesInvoked, origin }) => ({
        Method: method,
        Origin: origin,
        Path: path,
        'Status code': statusCode,
        Persistent: persist ? '✅' : '❌',
        Invocations: timesInvoked,
        Remaining: persist ? Infinity : times - timesInvoked
      }))

    this.logger.table(withPrettyHeaders)
    return this.transform.read().toString()
  }
}


/***/ }),

/***/ 8891:
/***/ ((module) => {

"use strict";


const singulars = {
  pronoun: 'it',
  is: 'is',
  was: 'was',
  this: 'this'
}

const plurals = {
  pronoun: 'they',
  is: 'are',
  was: 'were',
  this: 'these'
}

module.exports = class Pluralizer {
  constructor (singular, plural) {
    this.singular = singular
    this.plural = plural
  }

  pluralize (count) {
    const one = count === 1
    const keys = one ? singulars : plurals
    const noun = one ? this.singular : this.plural
    return { ...keys, count, noun }
  }
}


/***/ }),

/***/ 8266:
/***/ ((module) => {

"use strict";
/* eslint-disable */



// Extracted from node/lib/internal/fixed_queue.js

// Currently optimal queue size, tested on V8 6.0 - 6.6. Must be power of two.
const kSize = 2048;
const kMask = kSize - 1;

// The FixedQueue is implemented as a singly-linked list of fixed-size
// circular buffers. It looks something like this:
//
//  head                                                       tail
//    |                                                          |
//    v                                                          v
// +-----------+ <-----\       +-----------+ <------\         +-----------+
// |  [null]   |        \----- |   next    |         \------- |   next    |
// +-----------+               +-----------+                  +-----------+
// |   item    | <-- bottom    |   item    | <-- bottom       |  [empty]  |
// |   item    |               |   item    |                  |  [empty]  |
// |   item    |               |   item    |                  |  [empty]  |
// |   item    |               |   item    |                  |  [empty]  |
// |   item    |               |   item    |       bottom --> |   item    |
// |   item    |               |   item    |                  |   item    |
// |    ...    |               |    ...    |                  |    ...    |
// |   item    |               |   item    |                  |   item    |
// |   item    |               |   item    |                  |   item    |
// |  [empty]  | <-- top       |   item    |                  |   item    |
// |  [empty]  |               |   item    |                  |   item    |
// |  [empty]  |               |  [empty]  | <-- top  top --> |  [empty]  |
// +-----------+               +-----------+                  +-----------+
//
// Or, if there is only one circular buffer, it looks something
// like either of these:
//
//  head   tail                                 head   tail
//    |     |                                     |     |
//    v     v                                     v     v
// +-----------+                               +-----------+
// |  [null]   |                               |  [null]   |
// +-----------+                               +-----------+
// |  [empty]  |                               |   item    |
// |  [empty]  |                               |   item    |
// |   item    | <-- bottom            top --> |  [empty]  |
// |   item    |                               |  [empty]  |
// |  [empty]  | <-- top            bottom --> |   item    |
// |  [empty]  |                               |   item    |
// +-----------+                               +-----------+
//
// Adding a value means moving `top` forward by one, removing means
// moving `bottom` forward by one. After reaching the end, the queue
// wraps around.
//
// When `top === bottom` the current queue is empty and when
// `top + 1 === bottom` it's full. This wastes a single space of storage
// but allows much quicker checks.

class FixedCircularBuffer {
  constructor() {
    this.bottom = 0;
    this.top = 0;
    this.list = new Array(kSize);
    this.next = null;
  }

  isEmpty() {
    return this.top === this.bottom;
  }

  isFull() {
    return ((this.top + 1) & kMask) === this.bottom;
  }

  push(data) {
    this.list[this.top] = data;
    this.top = (this.top + 1) & kMask;
  }

  shift() {
    const nextItem = this.list[this.bottom];
    if (nextItem === undefined)
      return null;
    this.list[this.bottom] = undefined;
    this.bottom = (this.bottom + 1) & kMask;
    return nextItem;
  }
}

module.exports = class FixedQueue {
  constructor() {
    this.head = this.tail = new FixedCircularBuffer();
  }

  isEmpty() {
    return this.head.isEmpty();
  }

  push(data) {
    if (this.head.isFull()) {
      // Head is full: Creates a new queue, sets the old queue's `.next` to it,
      // and sets it as the new main queue.
      this.head = this.head.next = new FixedCircularBuffer();
    }
    this.head.push(data);
  }

  shift() {
    const tail = this.tail;
    const next = tail.shift();
    if (tail.isEmpty() && tail.next !== null) {
      // If there is another queue, it forms the new tail.
      this.tail = tail.next;
    }
    return next;
  }
};


/***/ }),

/***/ 3198:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const DispatcherBase = __nccwpck_require__(4839)
const FixedQueue = __nccwpck_require__(8266)
const { kConnected, kSize, kRunning, kPending, kQueued, kBusy, kFree, kUrl, kClose, kDestroy, kDispatch } = __nccwpck_require__(2785)
const PoolStats = __nccwpck_require__(9689)

const kClients = Symbol('clients')
const kNeedDrain = Symbol('needDrain')
const kQueue = Symbol('queue')
const kClosedResolve = Symbol('closed resolve')
const kOnDrain = Symbol('onDrain')
const kOnConnect = Symbol('onConnect')
const kOnDisconnect = Symbol('onDisconnect')
const kOnConnectionError = Symbol('onConnectionError')
const kGetDispatcher = Symbol('get dispatcher')
const kAddClient = Symbol('add client')
const kRemoveClient = Symbol('remove client')
const kStats = Symbol('stats')

class PoolBase extends DispatcherBase {
  constructor () {
    super()

    this[kQueue] = new FixedQueue()
    this[kClients] = []
    this[kQueued] = 0

    const pool = this

    this[kOnDrain] = function onDrain (origin, targets) {
      const queue = pool[kQueue]

      let needDrain = false

      while (!needDrain) {
        const item = queue.shift()
        if (!item) {
          break
        }
        pool[kQueued]--
        needDrain = !this.dispatch(item.opts, item.handler)
      }

      this[kNeedDrain] = needDrain

      if (!this[kNeedDrain] && pool[kNeedDrain]) {
        pool[kNeedDrain] = false
        pool.emit('drain', origin, [pool, ...targets])
      }

      if (pool[kClosedResolve] && queue.isEmpty()) {
        Promise
          .all(pool[kClients].map(c => c.close()))
          .then(pool[kClosedResolve])
      }
    }

    this[kOnConnect] = (origin, targets) => {
      pool.emit('connect', origin, [pool, ...targets])
    }

    this[kOnDisconnect] = (origin, targets, err) => {
      pool.emit('disconnect', origin, [pool, ...targets], err)
    }

    this[kOnConnectionError] = (origin, targets, err) => {
      pool.emit('connectionError', origin, [pool, ...targets], err)
    }

    this[kStats] = new PoolStats(this)
  }

  get [kBusy] () {
    return this[kNeedDrain]
  }

  get [kConnected] () {
    return this[kClients].filter(client => client[kConnected]).length
  }

  get [kFree] () {
    return this[kClients].filter(client => client[kConnected] && !client[kNeedDrain]).length
  }

  get [kPending] () {
    let ret = this[kQueued]
    for (const { [kPending]: pending } of this[kClients]) {
      ret += pending
    }
    return ret
  }

  get [kRunning] () {
    let ret = 0
    for (const { [kRunning]: running } of this[kClients]) {
      ret += running
    }
    return ret
  }

  get [kSize] () {
    let ret = this[kQueued]
    for (const { [kSize]: size } of this[kClients]) {
      ret += size
    }
    return ret
  }

  get stats () {
    return this[kStats]
  }

  async [kClose] () {
    if (this[kQueue].isEmpty()) {
      return Promise.all(this[kClients].map(c => c.close()))
    } else {
      return new Promise((resolve) => {
        this[kClosedResolve] = resolve
      })
    }
  }

  async [kDestroy] (err) {
    while (true) {
      const item = this[kQueue].shift()
      if (!item) {
        break
      }
      item.handler.onError(err)
    }

    return Promise.all(this[kClients].map(c => c.destroy(err)))
  }

  [kDispatch] (opts, handler) {
    const dispatcher = this[kGetDispatcher]()

    if (!dispatcher) {
      this[kNeedDrain] = true
      this[kQueue].push({ opts, handler })
      this[kQueued]++
    } else if (!dispatcher.dispatch(opts, handler)) {
      dispatcher[kNeedDrain] = true
      this[kNeedDrain] = !this[kGetDispatcher]()
    }

    return !this[kNeedDrain]
  }

  [kAddClient] (client) {
    client
      .on('drain', this[kOnDrain])
      .on('connect', this[kOnConnect])
      .on('disconnect', this[kOnDisconnect])
      .on('connectionError', this[kOnConnectionError])

    this[kClients].push(client)

    if (this[kNeedDrain]) {
      process.nextTick(() => {
        if (this[kNeedDrain]) {
          this[kOnDrain](client[kUrl], [this, client])
        }
      })
    }

    return this
  }

  [kRemoveClient] (client) {
    client.close(() => {
      const idx = this[kClients].indexOf(client)
      if (idx !== -1) {
        this[kClients].splice(idx, 1)
      }
    })

    this[kNeedDrain] = this[kClients].some(dispatcher => (
      !dispatcher[kNeedDrain] &&
      dispatcher.closed !== true &&
      dispatcher.destroyed !== true
    ))
  }
}

module.exports = {
  PoolBase,
  kClients,
  kNeedDrain,
  kAddClient,
  kRemoveClient,
  kGetDispatcher
}


/***/ }),

/***/ 9689:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const { kFree, kConnected, kPending, kQueued, kRunning, kSize } = __nccwpck_require__(2785)
const kPool = Symbol('pool')

class PoolStats {
  constructor (pool) {
    this[kPool] = pool
  }

  get connected () {
    return this[kPool][kConnected]
  }

  get free () {
    return this[kPool][kFree]
  }

  get pending () {
    return this[kPool][kPending]
  }

  get queued () {
    return this[kPool][kQueued]
  }

  get running () {
    return this[kPool][kRunning]
  }

  get size () {
    return this[kPool][kSize]
  }
}

module.exports = PoolStats


/***/ }),

/***/ 4634:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const {
  PoolBase,
  kClients,
  kNeedDrain,
  kAddClient,
  kGetDispatcher
} = __nccwpck_require__(3198)
const Client = __nccwpck_require__(3598)
const {
  InvalidArgumentError
} = __nccwpck_require__(8045)
const util = __nccwpck_require__(3983)
const { kUrl, kInterceptors } = __nccwpck_require__(2785)
const buildConnector = __nccwpck_require__(2067)

const kOptions = Symbol('options')
const kConnections = Symbol('connections')
const kFactory = Symbol('factory')

function defaultFactory (origin, opts) {
  return new Client(origin, opts)
}

class Pool extends PoolBase {
  constructor (origin, {
    connections,
    factory = defaultFactory,
    connect,
    connectTimeout,
    tls,
    maxCachedSessions,
    socketPath,
    autoSelectFamily,
    autoSelectFamilyAttemptTimeout,
    allowH2,
    ...options
  } = {}) {
    super()

    if (connections != null && (!Number.isFinite(connections) || connections < 0)) {
      throw new InvalidArgumentError('invalid connections')
    }

    if (typeof factory !== 'function') {
      throw new InvalidArgumentError('factory must be a function.')
    }

    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {
      throw new InvalidArgumentError('connect must be a function or an object')
    }

    if (typeof connect !== 'function') {
      connect = buildConnector({
        ...tls,
        maxCachedSessions,
        allowH2,
        socketPath,
        timeout: connectTimeout,
        ...(util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined),
        ...connect
      })
    }

    this[kInterceptors] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool)
      ? options.interceptors.Pool
      : []
    this[kConnections] = connections || null
    this[kUrl] = util.parseOrigin(origin)
    this[kOptions] = { ...util.deepClone(options), connect, allowH2 }
    this[kOptions].interceptors = options.interceptors
      ? { ...options.interceptors }
      : undefined
    this[kFactory] = factory
  }

  [kGetDispatcher] () {
    let dispatcher = this[kClients].find(dispatcher => !dispatcher[kNeedDrain])

    if (dispatcher) {
      return dispatcher
    }

    if (!this[kConnections] || this[kClients].length < this[kConnections]) {
      dispatcher = this[kFactory](this[kUrl], this[kOptions])
      this[kAddClient](dispatcher)
    }

    return dispatcher
  }
}

module.exports = Pool


/***/ }),

/***/ 7858:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { kProxy, kClose, kDestroy, kInterceptors } = __nccwpck_require__(2785)
const { URL } = __nccwpck_require__(7310)
const Agent = __nccwpck_require__(7890)
const Pool = __nccwpck_require__(4634)
const DispatcherBase = __nccwpck_require__(4839)
const { InvalidArgumentError, RequestAbortedError } = __nccwpck_require__(8045)
const buildConnector = __nccwpck_require__(2067)

const kAgent = Symbol('proxy agent')
const kClient = Symbol('proxy client')
const kProxyHeaders = Symbol('proxy headers')
const kRequestTls = Symbol('request tls settings')
const kProxyTls = Symbol('proxy tls settings')
const kConnectEndpoint = Symbol('connect endpoint function')

function defaultProtocolPort (protocol) {
  return protocol === 'https:' ? 443 : 80
}

function buildProxyOptions (opts) {
  if (typeof opts === 'string') {
    opts = { uri: opts }
  }

  if (!opts || !opts.uri) {
    throw new InvalidArgumentError('Proxy opts.uri is mandatory')
  }

  return {
    uri: opts.uri,
    protocol: opts.protocol || 'https'
  }
}

function defaultFactory (origin, opts) {
  return new Pool(origin, opts)
}

class ProxyAgent extends DispatcherBase {
  constructor (opts) {
    super(opts)
    this[kProxy] = buildProxyOptions(opts)
    this[kAgent] = new Agent(opts)
    this[kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent)
      ? opts.interceptors.ProxyAgent
      : []

    if (typeof opts === 'string') {
      opts = { uri: opts }
    }

    if (!opts || !opts.uri) {
      throw new InvalidArgumentError('Proxy opts.uri is mandatory')
    }

    const { clientFactory = defaultFactory } = opts

    if (typeof clientFactory !== 'function') {
      throw new InvalidArgumentError('Proxy opts.clientFactory must be a function.')
    }

    this[kRequestTls] = opts.requestTls
    this[kProxyTls] = opts.proxyTls
    this[kProxyHeaders] = opts.headers || {}

    const resolvedUrl = new URL(opts.uri)
    const { origin, port, host, username, password } = resolvedUrl

    if (opts.auth && opts.token) {
      throw new InvalidArgumentError('opts.auth cannot be used in combination with opts.token')
    } else if (opts.auth) {
      /* @deprecated in favour of opts.token */
      this[kProxyHeaders]['proxy-authorization'] = `Basic ${opts.auth}`
    } else if (opts.token) {
      this[kProxyHeaders]['proxy-authorization'] = opts.token
    } else if (username && password) {
      this[kProxyHeaders]['proxy-authorization'] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString('base64')}`
    }

    const connect = buildConnector({ ...opts.proxyTls })
    this[kConnectEndpoint] = buildConnector({ ...opts.requestTls })
    this[kClient] = clientFactory(resolvedUrl, { connect })
    this[kAgent] = new Agent({
      ...opts,
      connect: async (opts, callback) => {
        let requestedHost = opts.host
        if (!opts.port) {
          requestedHost += `:${defaultProtocolPort(opts.protocol)}`
        }
        try {
          const { socket, statusCode } = await this[kClient].connect({
            origin,
            port,
            path: requestedHost,
            signal: opts.signal,
            headers: {
              ...this[kProxyHeaders],
              host
            }
          })
          if (statusCode !== 200) {
            socket.on('error', () => {}).destroy()
            callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`))
          }
          if (opts.protocol !== 'https:') {
            callback(null, socket)
            return
          }
          let servername
          if (this[kRequestTls]) {
            servername = this[kRequestTls].servername
          } else {
            servername = opts.servername
          }
          this[kConnectEndpoint]({ ...opts, servername, httpSocket: socket }, callback)
        } catch (err) {
          callback(err)
        }
      }
    })
  }

  dispatch (opts, handler) {
    const { host } = new URL(opts.origin)
    const headers = buildHeaders(opts.headers)
    throwIfProxyAuthIsSent(headers)
    return this[kAgent].dispatch(
      {
        ...opts,
        headers: {
          ...headers,
          host
        }
      },
      handler
    )
  }

  async [kClose] () {
    await this[kAgent].close()
    await this[kClient].close()
  }

  async [kDestroy] () {
    await this[kAgent].destroy()
    await this[kClient].destroy()
  }
}

/**
 * @param {string[] | Record<string, string>} headers
 * @returns {Record<string, string>}
 */
function buildHeaders (headers) {
  // When using undici.fetch, the headers list is stored
  // as an array.
  if (Array.isArray(headers)) {
    /** @type {Record<string, string>} */
    const headersPair = {}

    for (let i = 0; i < headers.length; i += 2) {
      headersPair[headers[i]] = headers[i + 1]
    }

    return headersPair
  }

  return headers
}

/**
 * @param {Record<string, string>} headers
 *
 * Previous versions of ProxyAgent suggests the Proxy-Authorization in request headers
 * Nevertheless, it was changed and to avoid a security vulnerability by end users
 * this check was created.
 * It should be removed in the next major version for performance reasons
 */
function throwIfProxyAuthIsSent (headers) {
  const existProxyAuth = headers && Object.keys(headers)
    .find((key) => key.toLowerCase() === 'proxy-authorization')
  if (existProxyAuth) {
    throw new InvalidArgumentError('Proxy-Authorization should be sent in ProxyAgent constructor')
  }
}

module.exports = ProxyAgent


/***/ }),

/***/ 9459:
/***/ ((module) => {

"use strict";


let fastNow = Date.now()
let fastNowTimeout

const fastTimers = []

function onTimeout () {
  fastNow = Date.now()

  let len = fastTimers.length
  let idx = 0
  while (idx < len) {
    const timer = fastTimers[idx]

    if (timer.state === 0) {
      timer.state = fastNow + timer.delay
    } else if (timer.state > 0 && fastNow >= timer.state) {
      timer.state = -1
      timer.callback(timer.opaque)
    }

    if (timer.state === -1) {
      timer.state = -2
      if (idx !== len - 1) {
        fastTimers[idx] = fastTimers.pop()
      } else {
        fastTimers.pop()
      }
      len -= 1
    } else {
      idx += 1
    }
  }

  if (fastTimers.length > 0) {
    refreshTimeout()
  }
}

function refreshTimeout () {
  if (fastNowTimeout && fastNowTimeout.refresh) {
    fastNowTimeout.refresh()
  } else {
    clearTimeout(fastNowTimeout)
    fastNowTimeout = setTimeout(onTimeout, 1e3)
    if (fastNowTimeout.unref) {
      fastNowTimeout.unref()
    }
  }
}

class Timeout {
  constructor (callback, delay, opaque) {
    this.callback = callback
    this.delay = delay
    this.opaque = opaque

    //  -2 not in timer list
    //  -1 in timer list but inactive
    //   0 in timer list waiting for time
    // > 0 in timer list waiting for time to expire
    this.state = -2

    this.refresh()
  }

  refresh () {
    if (this.state === -2) {
      fastTimers.push(this)
      if (!fastNowTimeout || fastTimers.length === 1) {
        refreshTimeout()
      }
    }

    this.state = 0
  }

  clear () {
    this.state = -1
  }
}

module.exports = {
  setTimeout (callback, delay, opaque) {
    return delay < 1e3
      ? setTimeout(callback, delay, opaque)
      : new Timeout(callback, delay, opaque)
  },
  clearTimeout (timeout) {
    if (timeout instanceof Timeout) {
      timeout.clear()
    } else {
      clearTimeout(timeout)
    }
  }
}


/***/ }),

/***/ 5354:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const diagnosticsChannel = __nccwpck_require__(7643)
const { uid, states } = __nccwpck_require__(9188)
const {
  kReadyState,
  kSentClose,
  kByteParser,
  kReceivedClose
} = __nccwpck_require__(7578)
const { fireEvent, failWebsocketConnection } = __nccwpck_require__(5515)
const { CloseEvent } = __nccwpck_require__(2611)
const { makeRequest } = __nccwpck_require__(8359)
const { fetching } = __nccwpck_require__(4881)
const { Headers } = __nccwpck_require__(554)
const { getGlobalDispatcher } = __nccwpck_require__(1892)
const { kHeadersList } = __nccwpck_require__(2785)

const channels = {}
channels.open = diagnosticsChannel.channel('undici:websocket:open')
channels.close = diagnosticsChannel.channel('undici:websocket:close')
channels.socketError = diagnosticsChannel.channel('undici:websocket:socket_error')

/** @type {import('crypto')} */
let crypto
try {
  crypto = __nccwpck_require__(6113)
} catch {

}

/**
 * @see https://websockets.spec.whatwg.org/#concept-websocket-establish
 * @param {URL} url
 * @param {string|string[]} protocols
 * @param {import('./websocket').WebSocket} ws
 * @param {(response: any) => void} onEstablish
 * @param {Partial<import('../../types/websocket').WebSocketInit>} options
 */
function establishWebSocketConnection (url, protocols, ws, onEstablish, options) {
  // 1. Let requestURL be a copy of url, with its scheme set to "http", if url’s
  //    scheme is "ws", and to "https" otherwise.
  const requestURL = url

  requestURL.protocol = url.protocol === 'ws:' ? 'http:' : 'https:'

  // 2. Let request be a new request, whose URL is requestURL, client is client,
  //    service-workers mode is "none", referrer is "no-referrer", mode is
  //    "websocket", credentials mode is "include", cache mode is "no-store" ,
  //    and redirect mode is "error".
  const request = makeRequest({
    urlList: [requestURL],
    serviceWorkers: 'none',
    referrer: 'no-referrer',
    mode: 'websocket',
    credentials: 'include',
    cache: 'no-store',
    redirect: 'error'
  })

  // Note: undici extension, allow setting custom headers.
  if (options.headers) {
    const headersList = new Headers(options.headers)[kHeadersList]

    request.headersList = headersList
  }

  // 3. Append (`Upgrade`, `websocket`) to request’s header list.
  // 4. Append (`Connection`, `Upgrade`) to request’s header list.
  // Note: both of these are handled by undici currently.
  // https://github.com/nodejs/undici/blob/68c269c4144c446f3f1220951338daef4a6b5ec4/lib/client.js#L1397

  // 5. Let keyValue be a nonce consisting of a randomly selected
  //    16-byte value that has been forgiving-base64-encoded and
  //    isomorphic encoded.
  const keyValue = crypto.randomBytes(16).toString('base64')

  // 6. Append (`Sec-WebSocket-Key`, keyValue) to request’s
  //    header list.
  request.headersList.append('sec-websocket-key', keyValue)

  // 7. Append (`Sec-WebSocket-Version`, `13`) to request’s
  //    header list.
  request.headersList.append('sec-websocket-version', '13')

  // 8. For each protocol in protocols, combine
  //    (`Sec-WebSocket-Protocol`, protocol) in request’s header
  //    list.
  for (const protocol of protocols) {
    request.headersList.append('sec-websocket-protocol', protocol)
  }

  // 9. Let permessageDeflate be a user-agent defined
  //    "permessage-deflate" extension header value.
  // https://github.com/mozilla/gecko-dev/blob/ce78234f5e653a5d3916813ff990f053510227bc/netwerk/protocol/websocket/WebSocketChannel.cpp#L2673
  // TODO: enable once permessage-deflate is supported
  const permessageDeflate = '' // 'permessage-deflate; 15'

  // 10. Append (`Sec-WebSocket-Extensions`, permessageDeflate) to
  //     request’s header list.
  // request.headersList.append('sec-websocket-extensions', permessageDeflate)

  // 11. Fetch request with useParallelQueue set to true, and
  //     processResponse given response being these steps:
  const controller = fetching({
    request,
    useParallelQueue: true,
    dispatcher: options.dispatcher ?? getGlobalDispatcher(),
    processResponse (response) {
      // 1. If response is a network error or its status is not 101,
      //    fail the WebSocket connection.
      if (response.type === 'error' || response.status !== 101) {
        failWebsocketConnection(ws, 'Received network error or non-101 status code.')
        return
      }

      // 2. If protocols is not the empty list and extracting header
      //    list values given `Sec-WebSocket-Protocol` and response’s
      //    header list results in null, failure, or the empty byte
      //    sequence, then fail the WebSocket connection.
      if (protocols.length !== 0 && !response.headersList.get('Sec-WebSocket-Protocol')) {
        failWebsocketConnection(ws, 'Server did not respond with sent protocols.')
        return
      }

      // 3. Follow the requirements stated step 2 to step 6, inclusive,
      //    of the last set of steps in section 4.1 of The WebSocket
      //    Protocol to validate response. This either results in fail
      //    the WebSocket connection or the WebSocket connection is
      //    established.

      // 2. If the response lacks an |Upgrade| header field or the |Upgrade|
      //    header field contains a value that is not an ASCII case-
      //    insensitive match for the value "websocket", the client MUST
      //    _Fail the WebSocket Connection_.
      if (response.headersList.get('Upgrade')?.toLowerCase() !== 'websocket') {
        failWebsocketConnection(ws, 'Server did not set Upgrade header to "websocket".')
        return
      }

      // 3. If the response lacks a |Connection| header field or the
      //    |Connection| header field doesn't contain a token that is an
      //    ASCII case-insensitive match for the value "Upgrade", the client
      //    MUST _Fail the WebSocket Connection_.
      if (response.headersList.get('Connection')?.toLowerCase() !== 'upgrade') {
        failWebsocketConnection(ws, 'Server did not set Connection header to "upgrade".')
        return
      }

      // 4. If the response lacks a |Sec-WebSocket-Accept| header field or
      //    the |Sec-WebSocket-Accept| contains a value other than the
      //    base64-encoded SHA-1 of the concatenation of the |Sec-WebSocket-
      //    Key| (as a string, not base64-decoded) with the string "258EAFA5-
      //    E914-47DA-95CA-C5AB0DC85B11" but ignoring any leading and
      //    trailing whitespace, the client MUST _Fail the WebSocket
      //    Connection_.
      const secWSAccept = response.headersList.get('Sec-WebSocket-Accept')
      const digest = crypto.createHash('sha1').update(keyValue + uid).digest('base64')
      if (secWSAccept !== digest) {
        failWebsocketConnection(ws, 'Incorrect hash received in Sec-WebSocket-Accept header.')
        return
      }

      // 5. If the response includes a |Sec-WebSocket-Extensions| header
      //    field and this header field indicates the use of an extension
      //    that was not present in the client's handshake (the server has
      //    indicated an extension not requested by the client), the client
      //    MUST _Fail the WebSocket Connection_.  (The parsing of this
      //    header field to determine which extensions are requested is
      //    discussed in Section 9.1.)
      const secExtension = response.headersList.get('Sec-WebSocket-Extensions')

      if (secExtension !== null && secExtension !== permessageDeflate) {
        failWebsocketConnection(ws, 'Received different permessage-deflate than the one set.')
        return
      }

      // 6. If the response includes a |Sec-WebSocket-Protocol| header field
      //    and this header field indicates the use of a subprotocol that was
      //    not present in the client's handshake (the server has indicated a
      //    subprotocol not requested by the client), the client MUST _Fail
      //    the WebSocket Connection_.
      const secProtocol = response.headersList.get('Sec-WebSocket-Protocol')

      if (secProtocol !== null && secProtocol !== request.headersList.get('Sec-WebSocket-Protocol')) {
        failWebsocketConnection(ws, 'Protocol was not set in the opening handshake.')
        return
      }

      response.socket.on('data', onSocketData)
      response.socket.on('close', onSocketClose)
      response.socket.on('error', onSocketError)

      if (channels.open.hasSubscribers) {
        channels.open.publish({
          address: response.socket.address(),
          protocol: secProtocol,
          extensions: secExtension
        })
      }

      onEstablish(response)
    }
  })

  return controller
}

/**
 * @param {Buffer} chunk
 */
function onSocketData (chunk) {
  if (!this.ws[kByteParser].write(chunk)) {
    this.pause()
  }
}

/**
 * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
 * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.4
 */
function onSocketClose () {
  const { ws } = this

  // If the TCP connection was closed after the
  // WebSocket closing handshake was completed, the WebSocket connection
  // is said to have been closed _cleanly_.
  const wasClean = ws[kSentClose] && ws[kReceivedClose]

  let code = 1005
  let reason = ''

  const result = ws[kByteParser].closingInfo

  if (result) {
    code = result.code ?? 1005
    reason = result.reason
  } else if (!ws[kSentClose]) {
    // If _The WebSocket
    // Connection is Closed_ and no Close control frame was received by the
    // endpoint (such as could occur if the underlying transport connection
    // is lost), _The WebSocket Connection Close Code_ is considered to be
    // 1006.
    code = 1006
  }

  // 1. Change the ready state to CLOSED (3).
  ws[kReadyState] = states.CLOSED

  // 2. If the user agent was required to fail the WebSocket
  //    connection, or if the WebSocket connection was closed
  //    after being flagged as full, fire an event named error
  //    at the WebSocket object.
  // TODO

  // 3. Fire an event named close at the WebSocket object,
  //    using CloseEvent, with the wasClean attribute
  //    initialized to true if the connection closed cleanly
  //    and false otherwise, the code attribute initialized to
  //    the WebSocket connection close code, and the reason
  //    attribute initialized to the result of applying UTF-8
  //    decode without BOM to the WebSocket connection close
  //    reason.
  fireEvent('close', ws, CloseEvent, {
    wasClean, code, reason
  })

  if (channels.close.hasSubscribers) {
    channels.close.publish({
      websocket: ws,
      code,
      reason
    })
  }
}

function onSocketError (error) {
  const { ws } = this

  ws[kReadyState] = states.CLOSING

  if (channels.socketError.hasSubscribers) {
    channels.socketError.publish(error)
  }

  this.destroy()
}

module.exports = {
  establishWebSocketConnection
}


/***/ }),

/***/ 9188:
/***/ ((module) => {

"use strict";


// This is a Globally Unique Identifier unique used
// to validate that the endpoint accepts websocket
// connections.
// See https://www.rfc-editor.org/rfc/rfc6455.html#section-1.3
const uid = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11'

/** @type {PropertyDescriptor} */
const staticPropertyDescriptors = {
  enumerable: true,
  writable: false,
  configurable: false
}

const states = {
  CONNECTING: 0,
  OPEN: 1,
  CLOSING: 2,
  CLOSED: 3
}

const opcodes = {
  CONTINUATION: 0x0,
  TEXT: 0x1,
  BINARY: 0x2,
  CLOSE: 0x8,
  PING: 0x9,
  PONG: 0xA
}

const maxUnsigned16Bit = 2 ** 16 - 1 // 65535

const parserStates = {
  INFO: 0,
  PAYLOADLENGTH_16: 2,
  PAYLOADLENGTH_64: 3,
  READ_DATA: 4
}

const emptyBuffer = Buffer.allocUnsafe(0)

module.exports = {
  uid,
  staticPropertyDescriptors,
  states,
  opcodes,
  maxUnsigned16Bit,
  parserStates,
  emptyBuffer
}


/***/ }),

/***/ 2611:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { webidl } = __nccwpck_require__(1744)
const { kEnumerableProperty } = __nccwpck_require__(3983)
const { MessagePort } = __nccwpck_require__(1267)

/**
 * @see https://html.spec.whatwg.org/multipage/comms.html#messageevent
 */
class MessageEvent extends Event {
  #eventInit

  constructor (type, eventInitDict = {}) {
    webidl.argumentLengthCheck(arguments, 1, { header: 'MessageEvent constructor' })

    type = webidl.converters.DOMString(type)
    eventInitDict = webidl.converters.MessageEventInit(eventInitDict)

    super(type, eventInitDict)

    this.#eventInit = eventInitDict
  }

  get data () {
    webidl.brandCheck(this, MessageEvent)

    return this.#eventInit.data
  }

  get origin () {
    webidl.brandCheck(this, MessageEvent)

    return this.#eventInit.origin
  }

  get lastEventId () {
    webidl.brandCheck(this, MessageEvent)

    return this.#eventInit.lastEventId
  }

  get source () {
    webidl.brandCheck(this, MessageEvent)

    return this.#eventInit.source
  }

  get ports () {
    webidl.brandCheck(this, MessageEvent)

    if (!Object.isFrozen(this.#eventInit.ports)) {
      Object.freeze(this.#eventInit.ports)
    }

    return this.#eventInit.ports
  }

  initMessageEvent (
    type,
    bubbles = false,
    cancelable = false,
    data = null,
    origin = '',
    lastEventId = '',
    source = null,
    ports = []
  ) {
    webidl.brandCheck(this, MessageEvent)

    webidl.argumentLengthCheck(arguments, 1, { header: 'MessageEvent.initMessageEvent' })

    return new MessageEvent(type, {
      bubbles, cancelable, data, origin, lastEventId, source, ports
    })
  }
}

/**
 * @see https://websockets.spec.whatwg.org/#the-closeevent-interface
 */
class CloseEvent extends Event {
  #eventInit

  constructor (type, eventInitDict = {}) {
    webidl.argumentLengthCheck(arguments, 1, { header: 'CloseEvent constructor' })

    type = webidl.converters.DOMString(type)
    eventInitDict = webidl.converters.CloseEventInit(eventInitDict)

    super(type, eventInitDict)

    this.#eventInit = eventInitDict
  }

  get wasClean () {
    webidl.brandCheck(this, CloseEvent)

    return this.#eventInit.wasClean
  }

  get code () {
    webidl.brandCheck(this, CloseEvent)

    return this.#eventInit.code
  }

  get reason () {
    webidl.brandCheck(this, CloseEvent)

    return this.#eventInit.reason
  }
}

// https://html.spec.whatwg.org/multipage/webappapis.html#the-errorevent-interface
class ErrorEvent extends Event {
  #eventInit

  constructor (type, eventInitDict) {
    webidl.argumentLengthCheck(arguments, 1, { header: 'ErrorEvent constructor' })

    super(type, eventInitDict)

    type = webidl.converters.DOMString(type)
    eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {})

    this.#eventInit = eventInitDict
  }

  get message () {
    webidl.brandCheck(this, ErrorEvent)

    return this.#eventInit.message
  }

  get filename () {
    webidl.brandCheck(this, ErrorEvent)

    return this.#eventInit.filename
  }

  get lineno () {
    webidl.brandCheck(this, ErrorEvent)

    return this.#eventInit.lineno
  }

  get colno () {
    webidl.brandCheck(this, ErrorEvent)

    return this.#eventInit.colno
  }

  get error () {
    webidl.brandCheck(this, ErrorEvent)

    return this.#eventInit.error
  }
}

Object.defineProperties(MessageEvent.prototype, {
  [Symbol.toStringTag]: {
    value: 'MessageEvent',
    configurable: true
  },
  data: kEnumerableProperty,
  origin: kEnumerableProperty,
  lastEventId: kEnumerableProperty,
  source: kEnumerableProperty,
  ports: kEnumerableProperty,
  initMessageEvent: kEnumerableProperty
})

Object.defineProperties(CloseEvent.prototype, {
  [Symbol.toStringTag]: {
    value: 'CloseEvent',
    configurable: true
  },
  reason: kEnumerableProperty,
  code: kEnumerableProperty,
  wasClean: kEnumerableProperty
})

Object.defineProperties(ErrorEvent.prototype, {
  [Symbol.toStringTag]: {
    value: 'ErrorEvent',
    configurable: true
  },
  message: kEnumerableProperty,
  filename: kEnumerableProperty,
  lineno: kEnumerableProperty,
  colno: kEnumerableProperty,
  error: kEnumerableProperty
})

webidl.converters.MessagePort = webidl.interfaceConverter(MessagePort)

webidl.converters['sequence<MessagePort>'] = webidl.sequenceConverter(
  webidl.converters.MessagePort
)

const eventInit = [
  {
    key: 'bubbles',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'cancelable',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'composed',
    converter: webidl.converters.boolean,
    defaultValue: false
  }
]

webidl.converters.MessageEventInit = webidl.dictionaryConverter([
  ...eventInit,
  {
    key: 'data',
    converter: webidl.converters.any,
    defaultValue: null
  },
  {
    key: 'origin',
    converter: webidl.converters.USVString,
    defaultValue: ''
  },
  {
    key: 'lastEventId',
    converter: webidl.converters.DOMString,
    defaultValue: ''
  },
  {
    key: 'source',
    // Node doesn't implement WindowProxy or ServiceWorker, so the only
    // valid value for source is a MessagePort.
    converter: webidl.nullableConverter(webidl.converters.MessagePort),
    defaultValue: null
  },
  {
    key: 'ports',
    converter: webidl.converters['sequence<MessagePort>'],
    get defaultValue () {
      return []
    }
  }
])

webidl.converters.CloseEventInit = webidl.dictionaryConverter([
  ...eventInit,
  {
    key: 'wasClean',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'code',
    converter: webidl.converters['unsigned short'],
    defaultValue: 0
  },
  {
    key: 'reason',
    converter: webidl.converters.USVString,
    defaultValue: ''
  }
])

webidl.converters.ErrorEventInit = webidl.dictionaryConverter([
  ...eventInit,
  {
    key: 'message',
    converter: webidl.converters.DOMString,
    defaultValue: ''
  },
  {
    key: 'filename',
    converter: webidl.converters.USVString,
    defaultValue: ''
  },
  {
    key: 'lineno',
    converter: webidl.converters['unsigned long'],
    defaultValue: 0
  },
  {
    key: 'colno',
    converter: webidl.converters['unsigned long'],
    defaultValue: 0
  },
  {
    key: 'error',
    converter: webidl.converters.any
  }
])

module.exports = {
  MessageEvent,
  CloseEvent,
  ErrorEvent
}


/***/ }),

/***/ 5444:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { maxUnsigned16Bit } = __nccwpck_require__(9188)

/** @type {import('crypto')} */
let crypto
try {
  crypto = __nccwpck_require__(6113)
} catch {

}

class WebsocketFrameSend {
  /**
   * @param {Buffer|undefined} data
   */
  constructor (data) {
    this.frameData = data
    this.maskKey = crypto.randomBytes(4)
  }

  createFrame (opcode) {
    const bodyLength = this.frameData?.byteLength ?? 0

    /** @type {number} */
    let payloadLength = bodyLength // 0-125
    let offset = 6

    if (bodyLength > maxUnsigned16Bit) {
      offset += 8 // payload length is next 8 bytes
      payloadLength = 127
    } else if (bodyLength > 125) {
      offset += 2 // payload length is next 2 bytes
      payloadLength = 126
    }

    const buffer = Buffer.allocUnsafe(bodyLength + offset)

    // Clear first 2 bytes, everything else is overwritten
    buffer[0] = buffer[1] = 0
    buffer[0] |= 0x80 // FIN
    buffer[0] = (buffer[0] & 0xF0) + opcode // opcode

    /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */
    buffer[offset - 4] = this.maskKey[0]
    buffer[offset - 3] = this.maskKey[1]
    buffer[offset - 2] = this.maskKey[2]
    buffer[offset - 1] = this.maskKey[3]

    buffer[1] = payloadLength

    if (payloadLength === 126) {
      buffer.writeUInt16BE(bodyLength, 2)
    } else if (payloadLength === 127) {
      // Clear extended payload length
      buffer[2] = buffer[3] = 0
      buffer.writeUIntBE(bodyLength, 4, 6)
    }

    buffer[1] |= 0x80 // MASK

    // mask body
    for (let i = 0; i < bodyLength; i++) {
      buffer[offset + i] = this.frameData[i] ^ this.maskKey[i % 4]
    }

    return buffer
  }
}

module.exports = {
  WebsocketFrameSend
}


/***/ }),

/***/ 1688:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { Writable } = __nccwpck_require__(2781)
const diagnosticsChannel = __nccwpck_require__(7643)
const { parserStates, opcodes, states, emptyBuffer } = __nccwpck_require__(9188)
const { kReadyState, kSentClose, kResponse, kReceivedClose } = __nccwpck_require__(7578)
const { isValidStatusCode, failWebsocketConnection, websocketMessageReceived } = __nccwpck_require__(5515)
const { WebsocketFrameSend } = __nccwpck_require__(5444)

// This code was influenced by ws released under the MIT license.
// Copyright (c) 2011 Einar Otto Stangvik <einaros@gmail.com>
// Copyright (c) 2013 Arnout Kazemier and contributors
// Copyright (c) 2016 Luigi Pinca and contributors

const channels = {}
channels.ping = diagnosticsChannel.channel('undici:websocket:ping')
channels.pong = diagnosticsChannel.channel('undici:websocket:pong')

class ByteParser extends Writable {
  #buffers = []
  #byteOffset = 0

  #state = parserStates.INFO

  #info = {}
  #fragments = []

  constructor (ws) {
    super()

    this.ws = ws
  }

  /**
   * @param {Buffer} chunk
   * @param {() => void} callback
   */
  _write (chunk, _, callback) {
    this.#buffers.push(chunk)
    this.#byteOffset += chunk.length

    this.run(callback)
  }

  /**
   * Runs whenever a new chunk is received.
   * Callback is called whenever there are no more chunks buffering,
   * or not enough bytes are buffered to parse.
   */
  run (callback) {
    while (true) {
      if (this.#state === parserStates.INFO) {
        // If there aren't enough bytes to parse the payload length, etc.
        if (this.#byteOffset < 2) {
          return callback()
        }

        const buffer = this.consume(2)

        this.#info.fin = (buffer[0] & 0x80) !== 0
        this.#info.opcode = buffer[0] & 0x0F

        // If we receive a fragmented message, we use the type of the first
        // frame to parse the full message as binary/text, when it's terminated
        this.#info.originalOpcode ??= this.#info.opcode

        this.#info.fragmented = !this.#info.fin && this.#info.opcode !== opcodes.CONTINUATION

        if (this.#info.fragmented && this.#info.opcode !== opcodes.BINARY && this.#info.opcode !== opcodes.TEXT) {
          // Only text and binary frames can be fragmented
          failWebsocketConnection(this.ws, 'Invalid frame type was fragmented.')
          return
        }

        const payloadLength = buffer[1] & 0x7F

        if (payloadLength <= 125) {
          this.#info.payloadLength = payloadLength
          this.#state = parserStates.READ_DATA
        } else if (payloadLength === 126) {
          this.#state = parserStates.PAYLOADLENGTH_16
        } else if (payloadLength === 127) {
          this.#state = parserStates.PAYLOADLENGTH_64
        }

        if (this.#info.fragmented && payloadLength > 125) {
          // A fragmented frame can't be fragmented itself
          failWebsocketConnection(this.ws, 'Fragmented frame exceeded 125 bytes.')
          return
        } else if (
          (this.#info.opcode === opcodes.PING ||
            this.#info.opcode === opcodes.PONG ||
            this.#info.opcode === opcodes.CLOSE) &&
          payloadLength > 125
        ) {
          // Control frames can have a payload length of 125 bytes MAX
          failWebsocketConnection(this.ws, 'Payload length for control frame exceeded 125 bytes.')
          return
        } else if (this.#info.opcode === opcodes.CLOSE) {
          if (payloadLength === 1) {
            failWebsocketConnection(this.ws, 'Received close frame with a 1-byte body.')
            return
          }

          const body = this.consume(payloadLength)

          this.#info.closeInfo = this.parseCloseBody(false, body)

          if (!this.ws[kSentClose]) {
            // If an endpoint receives a Close frame and did not previously send a
            // Close frame, the endpoint MUST send a Close frame in response.  (When
            // sending a Close frame in response, the endpoint typically echos the
            // status code it received.)
            const body = Buffer.allocUnsafe(2)
            body.writeUInt16BE(this.#info.closeInfo.code, 0)
            const closeFrame = new WebsocketFrameSend(body)

            this.ws[kResponse].socket.write(
              closeFrame.createFrame(opcodes.CLOSE),
              (err) => {
                if (!err) {
                  this.ws[kSentClose] = true
                }
              }
            )
          }

          // Upon either sending or receiving a Close control frame, it is said
          // that _The WebSocket Closing Handshake is Started_ and that the
          // WebSocket connection is in the CLOSING state.
          this.ws[kReadyState] = states.CLOSING
          this.ws[kReceivedClose] = true

          this.end()

          return
        } else if (this.#info.opcode === opcodes.PING) {
          // Upon receipt of a Ping frame, an endpoint MUST send a Pong frame in
          // response, unless it already received a Close frame.
          // A Pong frame sent in response to a Ping frame must have identical
          // "Application data"

          const body = this.consume(payloadLength)

          if (!this.ws[kReceivedClose]) {
            const frame = new WebsocketFrameSend(body)

            this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG))

            if (channels.ping.hasSubscribers) {
              channels.ping.publish({
                payload: body
              })
            }
          }

          this.#state = parserStates.INFO

          if (this.#byteOffset > 0) {
            continue
          } else {
            callback()
            return
          }
        } else if (this.#info.opcode === opcodes.PONG) {
          // A Pong frame MAY be sent unsolicited.  This serves as a
          // unidirectional heartbeat.  A response to an unsolicited Pong frame is
          // not expected.

          const body = this.consume(payloadLength)

          if (channels.pong.hasSubscribers) {
            channels.pong.publish({
              payload: body
            })
          }

          if (this.#byteOffset > 0) {
            continue
          } else {
            callback()
            return
          }
        }
      } else if (this.#state === parserStates.PAYLOADLENGTH_16) {
        if (this.#byteOffset < 2) {
          return callback()
        }

        const buffer = this.consume(2)

        this.#info.payloadLength = buffer.readUInt16BE(0)
        this.#state = parserStates.READ_DATA
      } else if (this.#state === parserStates.PAYLOADLENGTH_64) {
        if (this.#byteOffset < 8) {
          return callback()
        }

        const buffer = this.consume(8)
        const upper = buffer.readUInt32BE(0)

        // 2^31 is the maxinimum bytes an arraybuffer can contain
        // on 32-bit systems. Although, on 64-bit systems, this is
        // 2^53-1 bytes.
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length
        // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/common/globals.h;drc=1946212ac0100668f14eb9e2843bdd846e510a1e;bpv=1;bpt=1;l=1275
        // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/js-array-buffer.h;l=34;drc=1946212ac0100668f14eb9e2843bdd846e510a1e
        if (upper > 2 ** 31 - 1) {
          failWebsocketConnection(this.ws, 'Received payload length > 2^31 bytes.')
          return
        }

        const lower = buffer.readUInt32BE(4)

        this.#info.payloadLength = (upper << 8) + lower
        this.#state = parserStates.READ_DATA
      } else if (this.#state === parserStates.READ_DATA) {
        if (this.#byteOffset < this.#info.payloadLength) {
          // If there is still more data in this chunk that needs to be read
          return callback()
        } else if (this.#byteOffset >= this.#info.payloadLength) {
          // If the server sent multiple frames in a single chunk

          const body = this.consume(this.#info.payloadLength)

          this.#fragments.push(body)

          // If the frame is unfragmented, or a fragmented frame was terminated,
          // a message was received
          if (!this.#info.fragmented || (this.#info.fin && this.#info.opcode === opcodes.CONTINUATION)) {
            const fullMessage = Buffer.concat(this.#fragments)

            websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage)

            this.#info = {}
            this.#fragments.length = 0
          }

          this.#state = parserStates.INFO
        }
      }

      if (this.#byteOffset > 0) {
        continue
      } else {
        callback()
        break
      }
    }
  }

  /**
   * Take n bytes from the buffered Buffers
   * @param {number} n
   * @returns {Buffer|null}
   */
  consume (n) {
    if (n > this.#byteOffset) {
      return null
    } else if (n === 0) {
      return emptyBuffer
    }

    if (this.#buffers[0].length === n) {
      this.#byteOffset -= this.#buffers[0].length
      return this.#buffers.shift()
    }

    const buffer = Buffer.allocUnsafe(n)
    let offset = 0

    while (offset !== n) {
      const next = this.#buffers[0]
      const { length } = next

      if (length + offset === n) {
        buffer.set(this.#buffers.shift(), offset)
        break
      } else if (length + offset > n) {
        buffer.set(next.subarray(0, n - offset), offset)
        this.#buffers[0] = next.subarray(n - offset)
        break
      } else {
        buffer.set(this.#buffers.shift(), offset)
        offset += next.length
      }
    }

    this.#byteOffset -= n

    return buffer
  }

  parseCloseBody (onlyCode, data) {
    // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.5
    /** @type {number|undefined} */
    let code

    if (data.length >= 2) {
      // _The WebSocket Connection Close Code_ is
      // defined as the status code (Section 7.4) contained in the first Close
      // control frame received by the application
      code = data.readUInt16BE(0)
    }

    if (onlyCode) {
      if (!isValidStatusCode(code)) {
        return null
      }

      return { code }
    }

    // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.6
    /** @type {Buffer} */
    let reason = data.subarray(2)

    // Remove BOM
    if (reason[0] === 0xEF && reason[1] === 0xBB && reason[2] === 0xBF) {
      reason = reason.subarray(3)
    }

    if (code !== undefined && !isValidStatusCode(code)) {
      return null
    }

    try {
      // TODO: optimize this
      reason = new TextDecoder('utf-8', { fatal: true }).decode(reason)
    } catch {
      return null
    }

    return { code, reason }
  }

  get closingInfo () {
    return this.#info.closeInfo
  }
}

module.exports = {
  ByteParser
}


/***/ }),

/***/ 7578:
/***/ ((module) => {

"use strict";


module.exports = {
  kWebSocketURL: Symbol('url'),
  kReadyState: Symbol('ready state'),
  kController: Symbol('controller'),
  kResponse: Symbol('response'),
  kBinaryType: Symbol('binary type'),
  kSentClose: Symbol('sent close'),
  kReceivedClose: Symbol('received close'),
  kByteParser: Symbol('byte parser')
}


/***/ }),

/***/ 5515:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { kReadyState, kController, kResponse, kBinaryType, kWebSocketURL } = __nccwpck_require__(7578)
const { states, opcodes } = __nccwpck_require__(9188)
const { MessageEvent, ErrorEvent } = __nccwpck_require__(2611)

/* globals Blob */

/**
 * @param {import('./websocket').WebSocket} ws
 */
function isEstablished (ws) {
  // If the server's response is validated as provided for above, it is
  // said that _The WebSocket Connection is Established_ and that the
  // WebSocket Connection is in the OPEN state.
  return ws[kReadyState] === states.OPEN
}

/**
 * @param {import('./websocket').WebSocket} ws
 */
function isClosing (ws) {
  // Upon either sending or receiving a Close control frame, it is said
  // that _The WebSocket Closing Handshake is Started_ and that the
  // WebSocket connection is in the CLOSING state.
  return ws[kReadyState] === states.CLOSING
}

/**
 * @param {import('./websocket').WebSocket} ws
 */
function isClosed (ws) {
  return ws[kReadyState] === states.CLOSED
}

/**
 * @see https://dom.spec.whatwg.org/#concept-event-fire
 * @param {string} e
 * @param {EventTarget} target
 * @param {EventInit | undefined} eventInitDict
 */
function fireEvent (e, target, eventConstructor = Event, eventInitDict) {
  // 1. If eventConstructor is not given, then let eventConstructor be Event.

  // 2. Let event be the result of creating an event given eventConstructor,
  //    in the relevant realm of target.
  // 3. Initialize event’s type attribute to e.
  const event = new eventConstructor(e, eventInitDict) // eslint-disable-line new-cap

  // 4. Initialize any other IDL attributes of event as described in the
  //    invocation of this algorithm.

  // 5. Return the result of dispatching event at target, with legacy target
  //    override flag set if set.
  target.dispatchEvent(event)
}

/**
 * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
 * @param {import('./websocket').WebSocket} ws
 * @param {number} type Opcode
 * @param {Buffer} data application data
 */
function websocketMessageReceived (ws, type, data) {
  // 1. If ready state is not OPEN (1), then return.
  if (ws[kReadyState] !== states.OPEN) {
    return
  }

  // 2. Let dataForEvent be determined by switching on type and binary type:
  let dataForEvent

  if (type === opcodes.TEXT) {
    // -> type indicates that the data is Text
    //      a new DOMString containing data
    try {
      dataForEvent = new TextDecoder('utf-8', { fatal: true }).decode(data)
    } catch {
      failWebsocketConnection(ws, 'Received invalid UTF-8 in text frame.')
      return
    }
  } else if (type === opcodes.BINARY) {
    if (ws[kBinaryType] === 'blob') {
      // -> type indicates that the data is Binary and binary type is "blob"
      //      a new Blob object, created in the relevant Realm of the WebSocket
      //      object, that represents data as its raw data
      dataForEvent = new Blob([data])
    } else {
      // -> type indicates that the data is Binary and binary type is "arraybuffer"
      //      a new ArrayBuffer object, created in the relevant Realm of the
      //      WebSocket object, whose contents are data
      dataForEvent = new Uint8Array(data).buffer
    }
  }

  // 3. Fire an event named message at the WebSocket object, using MessageEvent,
  //    with the origin attribute initialized to the serialization of the WebSocket
  //    object’s url's origin, and the data attribute initialized to dataForEvent.
  fireEvent('message', ws, MessageEvent, {
    origin: ws[kWebSocketURL].origin,
    data: dataForEvent
  })
}

/**
 * @see https://datatracker.ietf.org/doc/html/rfc6455
 * @see https://datatracker.ietf.org/doc/html/rfc2616
 * @see https://bugs.chromium.org/p/chromium/issues/detail?id=398407
 * @param {string} protocol
 */
function isValidSubprotocol (protocol) {
  // If present, this value indicates one
  // or more comma-separated subprotocol the client wishes to speak,
  // ordered by preference.  The elements that comprise this value
  // MUST be non-empty strings with characters in the range U+0021 to
  // U+007E not including separator characters as defined in
  // [RFC2616] and MUST all be unique strings.
  if (protocol.length === 0) {
    return false
  }

  for (const char of protocol) {
    const code = char.charCodeAt(0)

    if (
      code < 0x21 ||
      code > 0x7E ||
      char === '(' ||
      char === ')' ||
      char === '<' ||
      char === '>' ||
      char === '@' ||
      char === ',' ||
      char === ';' ||
      char === ':' ||
      char === '\\' ||
      char === '"' ||
      char === '/' ||
      char === '[' ||
      char === ']' ||
      char === '?' ||
      char === '=' ||
      char === '{' ||
      char === '}' ||
      code === 32 || // SP
      code === 9 // HT
    ) {
      return false
    }
  }

  return true
}

/**
 * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7-4
 * @param {number} code
 */
function isValidStatusCode (code) {
  if (code >= 1000 && code < 1015) {
    return (
      code !== 1004 && // reserved
      code !== 1005 && // "MUST NOT be set as a status code"
      code !== 1006 // "MUST NOT be set as a status code"
    )
  }

  return code >= 3000 && code <= 4999
}

/**
 * @param {import('./websocket').WebSocket} ws
 * @param {string|undefined} reason
 */
function failWebsocketConnection (ws, reason) {
  const { [kController]: controller, [kResponse]: response } = ws

  controller.abort()

  if (response?.socket && !response.socket.destroyed) {
    response.socket.destroy()
  }

  if (reason) {
    fireEvent('error', ws, ErrorEvent, {
      error: new Error(reason)
    })
  }
}

module.exports = {
  isEstablished,
  isClosing,
  isClosed,
  fireEvent,
  isValidSubprotocol,
  isValidStatusCode,
  failWebsocketConnection,
  websocketMessageReceived
}


/***/ }),

/***/ 4284:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { webidl } = __nccwpck_require__(1744)
const { DOMException } = __nccwpck_require__(1037)
const { URLSerializer } = __nccwpck_require__(685)
const { getGlobalOrigin } = __nccwpck_require__(1246)
const { staticPropertyDescriptors, states, opcodes, emptyBuffer } = __nccwpck_require__(9188)
const {
  kWebSocketURL,
  kReadyState,
  kController,
  kBinaryType,
  kResponse,
  kSentClose,
  kByteParser
} = __nccwpck_require__(7578)
const { isEstablished, isClosing, isValidSubprotocol, failWebsocketConnection, fireEvent } = __nccwpck_require__(5515)
const { establishWebSocketConnection } = __nccwpck_require__(5354)
const { WebsocketFrameSend } = __nccwpck_require__(5444)
const { ByteParser } = __nccwpck_require__(1688)
const { kEnumerableProperty, isBlobLike } = __nccwpck_require__(3983)
const { getGlobalDispatcher } = __nccwpck_require__(1892)
const { types } = __nccwpck_require__(3837)

let experimentalWarned = false

// https://websockets.spec.whatwg.org/#interface-definition
class WebSocket extends EventTarget {
  #events = {
    open: null,
    error: null,
    close: null,
    message: null
  }

  #bufferedAmount = 0
  #protocol = ''
  #extensions = ''

  /**
   * @param {string} url
   * @param {string|string[]} protocols
   */
  constructor (url, protocols = []) {
    super()

    webidl.argumentLengthCheck(arguments, 1, { header: 'WebSocket constructor' })

    if (!experimentalWarned) {
      experimentalWarned = true
      process.emitWarning('WebSockets are experimental, expect them to change at any time.', {
        code: 'UNDICI-WS'
      })
    }

    const options = webidl.converters['DOMString or sequence<DOMString> or WebSocketInit'](protocols)

    url = webidl.converters.USVString(url)
    protocols = options.protocols

    // 1. Let baseURL be this's relevant settings object's API base URL.
    const baseURL = getGlobalOrigin()

    // 1. Let urlRecord be the result of applying the URL parser to url with baseURL.
    let urlRecord

    try {
      urlRecord = new URL(url, baseURL)
    } catch (e) {
      // 3. If urlRecord is failure, then throw a "SyntaxError" DOMException.
      throw new DOMException(e, 'SyntaxError')
    }

    // 4. If urlRecord’s scheme is "http", then set urlRecord’s scheme to "ws".
    if (urlRecord.protocol === 'http:') {
      urlRecord.protocol = 'ws:'
    } else if (urlRecord.protocol === 'https:') {
      // 5. Otherwise, if urlRecord’s scheme is "https", set urlRecord’s scheme to "wss".
      urlRecord.protocol = 'wss:'
    }

    // 6. If urlRecord’s scheme is not "ws" or "wss", then throw a "SyntaxError" DOMException.
    if (urlRecord.protocol !== 'ws:' && urlRecord.protocol !== 'wss:') {
      throw new DOMException(
        `Expected a ws: or wss: protocol, got ${urlRecord.protocol}`,
        'SyntaxError'
      )
    }

    // 7. If urlRecord’s fragment is non-null, then throw a "SyntaxError"
    //    DOMException.
    if (urlRecord.hash || urlRecord.href.endsWith('#')) {
      throw new DOMException('Got fragment', 'SyntaxError')
    }

    // 8. If protocols is a string, set protocols to a sequence consisting
    //    of just that string.
    if (typeof protocols === 'string') {
      protocols = [protocols]
    }

    // 9. If any of the values in protocols occur more than once or otherwise
    //    fail to match the requirements for elements that comprise the value
    //    of `Sec-WebSocket-Protocol` fields as defined by The WebSocket
    //    protocol, then throw a "SyntaxError" DOMException.
    if (protocols.length !== new Set(protocols.map(p => p.toLowerCase())).size) {
      throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError')
    }

    if (protocols.length > 0 && !protocols.every(p => isValidSubprotocol(p))) {
      throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError')
    }

    // 10. Set this's url to urlRecord.
    this[kWebSocketURL] = new URL(urlRecord.href)

    // 11. Let client be this's relevant settings object.

    // 12. Run this step in parallel:

    //    1. Establish a WebSocket connection given urlRecord, protocols,
    //       and client.
    this[kController] = establishWebSocketConnection(
      urlRecord,
      protocols,
      this,
      (response) => this.#onConnectionEstablished(response),
      options
    )

    // Each WebSocket object has an associated ready state, which is a
    // number representing the state of the connection. Initially it must
    // be CONNECTING (0).
    this[kReadyState] = WebSocket.CONNECTING

    // The extensions attribute must initially return the empty string.

    // The protocol attribute must initially return the empty string.

    // Each WebSocket object has an associated binary type, which is a
    // BinaryType. Initially it must be "blob".
    this[kBinaryType] = 'blob'
  }

  /**
   * @see https://websockets.spec.whatwg.org/#dom-websocket-close
   * @param {number|undefined} code
   * @param {string|undefined} reason
   */
  close (code = undefined, reason = undefined) {
    webidl.brandCheck(this, WebSocket)

    if (code !== undefined) {
      code = webidl.converters['unsigned short'](code, { clamp: true })
    }

    if (reason !== undefined) {
      reason = webidl.converters.USVString(reason)
    }

    // 1. If code is present, but is neither an integer equal to 1000 nor an
    //    integer in the range 3000 to 4999, inclusive, throw an
    //    "InvalidAccessError" DOMException.
    if (code !== undefined) {
      if (code !== 1000 && (code < 3000 || code > 4999)) {
        throw new DOMException('invalid code', 'InvalidAccessError')
      }
    }

    let reasonByteLength = 0

    // 2. If reason is present, then run these substeps:
    if (reason !== undefined) {
      // 1. Let reasonBytes be the result of encoding reason.
      // 2. If reasonBytes is longer than 123 bytes, then throw a
      //    "SyntaxError" DOMException.
      reasonByteLength = Buffer.byteLength(reason)

      if (reasonByteLength > 123) {
        throw new DOMException(
          `Reason must be less than 123 bytes; received ${reasonByteLength}`,
          'SyntaxError'
        )
      }
    }

    // 3. Run the first matching steps from the following list:
    if (this[kReadyState] === WebSocket.CLOSING || this[kReadyState] === WebSocket.CLOSED) {
      // If this's ready state is CLOSING (2) or CLOSED (3)
      // Do nothing.
    } else if (!isEstablished(this)) {
      // If the WebSocket connection is not yet established
      // Fail the WebSocket connection and set this's ready state
      // to CLOSING (2).
      failWebsocketConnection(this, 'Connection was closed before it was established.')
      this[kReadyState] = WebSocket.CLOSING
    } else if (!isClosing(this)) {
      // If the WebSocket closing handshake has not yet been started
      // Start the WebSocket closing handshake and set this's ready
      // state to CLOSING (2).
      // - If neither code nor reason is present, the WebSocket Close
      //   message must not have a body.
      // - If code is present, then the status code to use in the
      //   WebSocket Close message must be the integer given by code.
      // - If reason is also present, then reasonBytes must be
      //   provided in the Close message after the status code.

      const frame = new WebsocketFrameSend()

      // If neither code nor reason is present, the WebSocket Close
      // message must not have a body.

      // If code is present, then the status code to use in the
      // WebSocket Close message must be the integer given by code.
      if (code !== undefined && reason === undefined) {
        frame.frameData = Buffer.allocUnsafe(2)
        frame.frameData.writeUInt16BE(code, 0)
      } else if (code !== undefined && reason !== undefined) {
        // If reason is also present, then reasonBytes must be
        // provided in the Close message after the status code.
        frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength)
        frame.frameData.writeUInt16BE(code, 0)
        // the body MAY contain UTF-8-encoded data with value /reason/
        frame.frameData.write(reason, 2, 'utf-8')
      } else {
        frame.frameData = emptyBuffer
      }

      /** @type {import('stream').Duplex} */
      const socket = this[kResponse].socket

      socket.write(frame.createFrame(opcodes.CLOSE), (err) => {
        if (!err) {
          this[kSentClose] = true
        }
      })

      // Upon either sending or receiving a Close control frame, it is said
      // that _The WebSocket Closing Handshake is Started_ and that the
      // WebSocket connection is in the CLOSING state.
      this[kReadyState] = states.CLOSING
    } else {
      // Otherwise
      // Set this's ready state to CLOSING (2).
      this[kReadyState] = WebSocket.CLOSING
    }
  }

  /**
   * @see https://websockets.spec.whatwg.org/#dom-websocket-send
   * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data
   */
  send (data) {
    webidl.brandCheck(this, WebSocket)

    webidl.argumentLengthCheck(arguments, 1, { header: 'WebSocket.send' })

    data = webidl.converters.WebSocketSendData(data)

    // 1. If this's ready state is CONNECTING, then throw an
    //    "InvalidStateError" DOMException.
    if (this[kReadyState] === WebSocket.CONNECTING) {
      throw new DOMException('Sent before connected.', 'InvalidStateError')
    }

    // 2. Run the appropriate set of steps from the following list:
    // https://datatracker.ietf.org/doc/html/rfc6455#section-6.1
    // https://datatracker.ietf.org/doc/html/rfc6455#section-5.2

    if (!isEstablished(this) || isClosing(this)) {
      return
    }

    /** @type {import('stream').Duplex} */
    const socket = this[kResponse].socket

    // If data is a string
    if (typeof data === 'string') {
      // If the WebSocket connection is established and the WebSocket
      // closing handshake has not yet started, then the user agent
      // must send a WebSocket Message comprised of the data argument
      // using a text frame opcode; if the data cannot be sent, e.g.
      // because it would need to be buffered but the buffer is full,
      // the user agent must flag the WebSocket as full and then close
      // the WebSocket connection. Any invocation of this method with a
      // string argument that does not throw an exception must increase
      // the bufferedAmount attribute by the number of bytes needed to
      // express the argument as UTF-8.

      const value = Buffer.from(data)
      const frame = new WebsocketFrameSend(value)
      const buffer = frame.createFrame(opcodes.TEXT)

      this.#bufferedAmount += value.byteLength
      socket.write(buffer, () => {
        this.#bufferedAmount -= value.byteLength
      })
    } else if (types.isArrayBuffer(data)) {
      // If the WebSocket connection is established, and the WebSocket
      // closing handshake has not yet started, then the user agent must
      // send a WebSocket Message comprised of data using a binary frame
      // opcode; if the data cannot be sent, e.g. because it would need
      // to be buffered but the buffer is full, the user agent must flag
      // the WebSocket as full and then close the WebSocket connection.
      // The data to be sent is the data stored in the buffer described
      // by the ArrayBuffer object. Any invocation of this method with an
      // ArrayBuffer argument that does not throw an exception must
      // increase the bufferedAmount attribute by the length of the
      // ArrayBuffer in bytes.

      const value = Buffer.from(data)
      const frame = new WebsocketFrameSend(value)
      const buffer = frame.createFrame(opcodes.BINARY)

      this.#bufferedAmount += value.byteLength
      socket.write(buffer, () => {
        this.#bufferedAmount -= value.byteLength
      })
    } else if (ArrayBuffer.isView(data)) {
      // If the WebSocket connection is established, and the WebSocket
      // closing handshake has not yet started, then the user agent must
      // send a WebSocket Message comprised of data using a binary frame
      // opcode; if the data cannot be sent, e.g. because it would need to
      // be buffered but the buffer is full, the user agent must flag the
      // WebSocket as full and then close the WebSocket connection. The
      // data to be sent is the data stored in the section of the buffer
      // described by the ArrayBuffer object that data references. Any
      // invocation of this method with this kind of argument that does
      // not throw an exception must increase the bufferedAmount attribute
      // by the length of data’s buffer in bytes.

      const ab = Buffer.from(data, data.byteOffset, data.byteLength)

      const frame = new WebsocketFrameSend(ab)
      const buffer = frame.createFrame(opcodes.BINARY)

      this.#bufferedAmount += ab.byteLength
      socket.write(buffer, () => {
        this.#bufferedAmount -= ab.byteLength
      })
    } else if (isBlobLike(data)) {
      // If the WebSocket connection is established, and the WebSocket
      // closing handshake has not yet started, then the user agent must
      // send a WebSocket Message comprised of data using a binary frame
      // opcode; if the data cannot be sent, e.g. because it would need to
      // be buffered but the buffer is full, the user agent must flag the
      // WebSocket as full and then close the WebSocket connection. The data
      // to be sent is the raw data represented by the Blob object. Any
      // invocation of this method with a Blob argument that does not throw
      // an exception must increase the bufferedAmount attribute by the size
      // of the Blob object’s raw data, in bytes.

      const frame = new WebsocketFrameSend()

      data.arrayBuffer().then((ab) => {
        const value = Buffer.from(ab)
        frame.frameData = value
        const buffer = frame.createFrame(opcodes.BINARY)

        this.#bufferedAmount += value.byteLength
        socket.write(buffer, () => {
          this.#bufferedAmount -= value.byteLength
        })
      })
    }
  }

  get readyState () {
    webidl.brandCheck(this, WebSocket)

    // The readyState getter steps are to return this's ready state.
    return this[kReadyState]
  }

  get bufferedAmount () {
    webidl.brandCheck(this, WebSocket)

    return this.#bufferedAmount
  }

  get url () {
    webidl.brandCheck(this, WebSocket)

    // The url getter steps are to return this's url, serialized.
    return URLSerializer(this[kWebSocketURL])
  }

  get extensions () {
    webidl.brandCheck(this, WebSocket)

    return this.#extensions
  }

  get protocol () {
    webidl.brandCheck(this, WebSocket)

    return this.#protocol
  }

  get onopen () {
    webidl.brandCheck(this, WebSocket)

    return this.#events.open
  }

  set onopen (fn) {
    webidl.brandCheck(this, WebSocket)

    if (this.#events.open) {
      this.removeEventListener('open', this.#events.open)
    }

    if (typeof fn === 'function') {
      this.#events.open = fn
      this.addEventListener('open', fn)
    } else {
      this.#events.open = null
    }
  }

  get onerror () {
    webidl.brandCheck(this, WebSocket)

    return this.#events.error
  }

  set onerror (fn) {
    webidl.brandCheck(this, WebSocket)

    if (this.#events.error) {
      this.removeEventListener('error', this.#events.error)
    }

    if (typeof fn === 'function') {
      this.#events.error = fn
      this.addEventListener('error', fn)
    } else {
      this.#events.error = null
    }
  }

  get onclose () {
    webidl.brandCheck(this, WebSocket)

    return this.#events.close
  }

  set onclose (fn) {
    webidl.brandCheck(this, WebSocket)

    if (this.#events.close) {
      this.removeEventListener('close', this.#events.close)
    }

    if (typeof fn === 'function') {
      this.#events.close = fn
      this.addEventListener('close', fn)
    } else {
      this.#events.close = null
    }
  }

  get onmessage () {
    webidl.brandCheck(this, WebSocket)

    return this.#events.message
  }

  set onmessage (fn) {
    webidl.brandCheck(this, WebSocket)

    if (this.#events.message) {
      this.removeEventListener('message', this.#events.message)
    }

    if (typeof fn === 'function') {
      this.#events.message = fn
      this.addEventListener('message', fn)
    } else {
      this.#events.message = null
    }
  }

  get binaryType () {
    webidl.brandCheck(this, WebSocket)

    return this[kBinaryType]
  }

  set binaryType (type) {
    webidl.brandCheck(this, WebSocket)

    if (type !== 'blob' && type !== 'arraybuffer') {
      this[kBinaryType] = 'blob'
    } else {
      this[kBinaryType] = type
    }
  }

  /**
   * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
   */
  #onConnectionEstablished (response) {
    // processResponse is called when the "response’s header list has been received and initialized."
    // once this happens, the connection is open
    this[kResponse] = response

    const parser = new ByteParser(this)
    parser.on('drain', function onParserDrain () {
      this.ws[kResponse].socket.resume()
    })

    response.socket.ws = this
    this[kByteParser] = parser

    // 1. Change the ready state to OPEN (1).
    this[kReadyState] = states.OPEN

    // 2. Change the extensions attribute’s value to the extensions in use, if
    //    it is not the null value.
    // https://datatracker.ietf.org/doc/html/rfc6455#section-9.1
    const extensions = response.headersList.get('sec-websocket-extensions')

    if (extensions !== null) {
      this.#extensions = extensions
    }

    // 3. Change the protocol attribute’s value to the subprotocol in use, if
    //    it is not the null value.
    // https://datatracker.ietf.org/doc/html/rfc6455#section-1.9
    const protocol = response.headersList.get('sec-websocket-protocol')

    if (protocol !== null) {
      this.#protocol = protocol
    }

    // 4. Fire an event named open at the WebSocket object.
    fireEvent('open', this)
  }
}

// https://websockets.spec.whatwg.org/#dom-websocket-connecting
WebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING
// https://websockets.spec.whatwg.org/#dom-websocket-open
WebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN
// https://websockets.spec.whatwg.org/#dom-websocket-closing
WebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING
// https://websockets.spec.whatwg.org/#dom-websocket-closed
WebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED

Object.defineProperties(WebSocket.prototype, {
  CONNECTING: staticPropertyDescriptors,
  OPEN: staticPropertyDescriptors,
  CLOSING: staticPropertyDescriptors,
  CLOSED: staticPropertyDescriptors,
  url: kEnumerableProperty,
  readyState: kEnumerableProperty,
  bufferedAmount: kEnumerableProperty,
  onopen: kEnumerableProperty,
  onerror: kEnumerableProperty,
  onclose: kEnumerableProperty,
  close: kEnumerableProperty,
  onmessage: kEnumerableProperty,
  binaryType: kEnumerableProperty,
  send: kEnumerableProperty,
  extensions: kEnumerableProperty,
  protocol: kEnumerableProperty,
  [Symbol.toStringTag]: {
    value: 'WebSocket',
    writable: false,
    enumerable: false,
    configurable: true
  }
})

Object.defineProperties(WebSocket, {
  CONNECTING: staticPropertyDescriptors,
  OPEN: staticPropertyDescriptors,
  CLOSING: staticPropertyDescriptors,
  CLOSED: staticPropertyDescriptors
})

webidl.converters['sequence<DOMString>'] = webidl.sequenceConverter(
  webidl.converters.DOMString
)

webidl.converters['DOMString or sequence<DOMString>'] = function (V) {
  if (webidl.util.Type(V) === 'Object' && Symbol.iterator in V) {
    return webidl.converters['sequence<DOMString>'](V)
  }

  return webidl.converters.DOMString(V)
}

// This implements the propsal made in https://github.com/whatwg/websockets/issues/42
webidl.converters.WebSocketInit = webidl.dictionaryConverter([
  {
    key: 'protocols',
    converter: webidl.converters['DOMString or sequence<DOMString>'],
    get defaultValue () {
      return []
    }
  },
  {
    key: 'dispatcher',
    converter: (V) => V,
    get defaultValue () {
      return getGlobalDispatcher()
    }
  },
  {
    key: 'headers',
    converter: webidl.nullableConverter(webidl.converters.HeadersInit)
  }
])

webidl.converters['DOMString or sequence<DOMString> or WebSocketInit'] = function (V) {
  if (webidl.util.Type(V) === 'Object' && !(Symbol.iterator in V)) {
    return webidl.converters.WebSocketInit(V)
  }

  return { protocols: webidl.converters['DOMString or sequence<DOMString>'](V) }
}

webidl.converters.WebSocketSendData = function (V) {
  if (webidl.util.Type(V) === 'Object') {
    if (isBlobLike(V)) {
      return webidl.converters.Blob(V, { strict: false })
    }

    if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
      return webidl.converters.BufferSource(V)
    }
  }

  return webidl.converters.USVString(V)
}

module.exports = {
  WebSocket
}


/***/ }),

/***/ 5030:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

function getUserAgent() {
  if (typeof navigator === "object" && "userAgent" in navigator) {
    return navigator.userAgent;
  }

  if (typeof process === "object" && process.version !== undefined) {
    return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
  }

  return "<environment undetectable>";
}

exports.getUserAgent = getUserAgent;
//# sourceMappingURL=index.js.map


/***/ }),

/***/ 5840:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "v1", ({
  enumerable: true,
  get: function () {
    return _v.default;
  }
}));
Object.defineProperty(exports, "v3", ({
  enumerable: true,
  get: function () {
    return _v2.default;
  }
}));
Object.defineProperty(exports, "v4", ({
  enumerable: true,
  get: function () {
    return _v3.default;
  }
}));
Object.defineProperty(exports, "v5", ({
  enumerable: true,
  get: function () {
    return _v4.default;
  }
}));
Object.defineProperty(exports, "NIL", ({
  enumerable: true,
  get: function () {
    return _nil.default;
  }
}));
Object.defineProperty(exports, "version", ({
  enumerable: true,
  get: function () {
    return _version.default;
  }
}));
Object.defineProperty(exports, "validate", ({
  enumerable: true,
  get: function () {
    return _validate.default;
  }
}));
Object.defineProperty(exports, "stringify", ({
  enumerable: true,
  get: function () {
    return _stringify.default;
  }
}));
Object.defineProperty(exports, "parse", ({
  enumerable: true,
  get: function () {
    return _parse.default;
  }
}));

var _v = _interopRequireDefault(__nccwpck_require__(8628));

var _v2 = _interopRequireDefault(__nccwpck_require__(6409));

var _v3 = _interopRequireDefault(__nccwpck_require__(5122));

var _v4 = _interopRequireDefault(__nccwpck_require__(9120));

var _nil = _interopRequireDefault(__nccwpck_require__(5332));

var _version = _interopRequireDefault(__nccwpck_require__(1595));

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

var _parse = _interopRequireDefault(__nccwpck_require__(2746));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),

/***/ 4569:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return _crypto.default.createHash('md5').update(bytes).digest();
}

var _default = md5;
exports["default"] = _default;

/***/ }),

/***/ 5332:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports["default"] = _default;

/***/ }),

/***/ 2746:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports["default"] = _default;

/***/ }),

/***/ 814:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports["default"] = _default;

/***/ }),

/***/ 807:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = rng;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate

let poolPtr = rnds8Pool.length;

function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    _crypto.default.randomFillSync(rnds8Pool);

    poolPtr = 0;
  }

  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}

/***/ }),

/***/ 5274:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return _crypto.default.createHash('sha1').update(bytes).digest();
}

var _default = sha1;
exports["default"] = _default;

/***/ }),

/***/ 8950:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports["default"] = _default;

/***/ }),

/***/ 8628:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__nccwpck_require__(807));

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.default)(b);
}

var _default = v1;
exports["default"] = _default;

/***/ }),

/***/ 6409:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__nccwpck_require__(5998));

var _md = _interopRequireDefault(__nccwpck_require__(4569));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports["default"] = _default;

/***/ }),

/***/ 5998:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = _default;
exports.URL = exports.DNS = void 0;

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

var _parse = _interopRequireDefault(__nccwpck_require__(2746));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function _default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.default)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

/***/ }),

/***/ 5122:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__nccwpck_require__(807));

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.default)(rnds);
}

var _default = v4;
exports["default"] = _default;

/***/ }),

/***/ 9120:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__nccwpck_require__(5998));

var _sha = _interopRequireDefault(__nccwpck_require__(5274));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports["default"] = _default;

/***/ }),

/***/ 6900:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _regex = _interopRequireDefault(__nccwpck_require__(814));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports["default"] = _default;

/***/ }),

/***/ 1595:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

var _default = version;
exports["default"] = _default;

/***/ }),

/***/ 2940:
/***/ ((module) => {

// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
module.exports = wrappy
function wrappy (fn, cb) {
  if (fn && cb) return wrappy(fn)(cb)

  if (typeof fn !== 'function')
    throw new TypeError('need wrapper function')

  Object.keys(fn).forEach(function (k) {
    wrapper[k] = fn[k]
  })

  return wrapper

  function wrapper() {
    var args = new Array(arguments.length)
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i]
    }
    var ret = fn.apply(this, args)
    var cb = args[args.length-1]
    if (typeof ret === 'function' && ret !== cb) {
      Object.keys(cb).forEach(function (k) {
        ret[k] = cb[k]
      })
    }
    return ret
  }
}


/***/ }),

/***/ 9491:
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ 852:
/***/ ((module) => {

"use strict";
module.exports = require("async_hooks");

/***/ }),

/***/ 4300:
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ 6206:
/***/ ((module) => {

"use strict";
module.exports = require("console");

/***/ }),

/***/ 6113:
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ 7643:
/***/ ((module) => {

"use strict";
module.exports = require("diagnostics_channel");

/***/ }),

/***/ 2361:
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ 7147:
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ 3685:
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ 5158:
/***/ ((module) => {

"use strict";
module.exports = require("http2");

/***/ }),

/***/ 5687:
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ 1808:
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ 5673:
/***/ ((module) => {

"use strict";
module.exports = require("node:events");

/***/ }),

/***/ 4492:
/***/ ((module) => {

"use strict";
module.exports = require("node:stream");

/***/ }),

/***/ 7261:
/***/ ((module) => {

"use strict";
module.exports = require("node:util");

/***/ }),

/***/ 2037:
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ 1017:
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ 4074:
/***/ ((module) => {

"use strict";
module.exports = require("perf_hooks");

/***/ }),

/***/ 3477:
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ 2781:
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ 5356:
/***/ ((module) => {

"use strict";
module.exports = require("stream/web");

/***/ }),

/***/ 1576:
/***/ ((module) => {

"use strict";
module.exports = require("string_decoder");

/***/ }),

/***/ 4404:
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ 7310:
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ 3837:
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ 9830:
/***/ ((module) => {

"use strict";
module.exports = require("util/types");

/***/ }),

/***/ 1267:
/***/ ((module) => {

"use strict";
module.exports = require("worker_threads");

/***/ }),

/***/ 9796:
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ 2960:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const WritableStream = (__nccwpck_require__(4492).Writable)
const inherits = (__nccwpck_require__(7261).inherits)

const StreamSearch = __nccwpck_require__(1142)

const PartStream = __nccwpck_require__(1620)
const HeaderParser = __nccwpck_require__(2032)

const DASH = 45
const B_ONEDASH = Buffer.from('-')
const B_CRLF = Buffer.from('\r\n')
const EMPTY_FN = function () {}

function Dicer (cfg) {
  if (!(this instanceof Dicer)) { return new Dicer(cfg) }
  WritableStream.call(this, cfg)

  if (!cfg || (!cfg.headerFirst && typeof cfg.boundary !== 'string')) { throw new TypeError('Boundary required') }

  if (typeof cfg.boundary === 'string') { this.setBoundary(cfg.boundary) } else { this._bparser = undefined }

  this._headerFirst = cfg.headerFirst

  this._dashes = 0
  this._parts = 0
  this._finished = false
  this._realFinish = false
  this._isPreamble = true
  this._justMatched = false
  this._firstWrite = true
  this._inHeader = true
  this._part = undefined
  this._cb = undefined
  this._ignoreData = false
  this._partOpts = { highWaterMark: cfg.partHwm }
  this._pause = false

  const self = this
  this._hparser = new HeaderParser(cfg)
  this._hparser.on('header', function (header) {
    self._inHeader = false
    self._part.emit('header', header)
  })
}
inherits(Dicer, WritableStream)

Dicer.prototype.emit = function (ev) {
  if (ev === 'finish' && !this._realFinish) {
    if (!this._finished) {
      const self = this
      process.nextTick(function () {
        self.emit('error', new Error('Unexpected end of multipart data'))
        if (self._part && !self._ignoreData) {
          const type = (self._isPreamble ? 'Preamble' : 'Part')
          self._part.emit('error', new Error(type + ' terminated early due to unexpected end of multipart data'))
          self._part.push(null)
          process.nextTick(function () {
            self._realFinish = true
            self.emit('finish')
            self._realFinish = false
          })
          return
        }
        self._realFinish = true
        self.emit('finish')
        self._realFinish = false
      })
    }
  } else { WritableStream.prototype.emit.apply(this, arguments) }
}

Dicer.prototype._write = function (data, encoding, cb) {
  // ignore unexpected data (e.g. extra trailer data after finished)
  if (!this._hparser && !this._bparser) { return cb() }

  if (this._headerFirst && this._isPreamble) {
    if (!this._part) {
      this._part = new PartStream(this._partOpts)
      if (this.listenerCount('preamble') !== 0) { this.emit('preamble', this._part) } else { this._ignore() }
    }
    const r = this._hparser.push(data)
    if (!this._inHeader && r !== undefined && r < data.length) { data = data.slice(r) } else { return cb() }
  }

  // allows for "easier" testing
  if (this._firstWrite) {
    this._bparser.push(B_CRLF)
    this._firstWrite = false
  }

  this._bparser.push(data)

  if (this._pause) { this._cb = cb } else { cb() }
}

Dicer.prototype.reset = function () {
  this._part = undefined
  this._bparser = undefined
  this._hparser = undefined
}

Dicer.prototype.setBoundary = function (boundary) {
  const self = this
  this._bparser = new StreamSearch('\r\n--' + boundary)
  this._bparser.on('info', function (isMatch, data, start, end) {
    self._oninfo(isMatch, data, start, end)
  })
}

Dicer.prototype._ignore = function () {
  if (this._part && !this._ignoreData) {
    this._ignoreData = true
    this._part.on('error', EMPTY_FN)
    // we must perform some kind of read on the stream even though we are
    // ignoring the data, otherwise node's Readable stream will not emit 'end'
    // after pushing null to the stream
    this._part.resume()
  }
}

Dicer.prototype._oninfo = function (isMatch, data, start, end) {
  let buf; const self = this; let i = 0; let r; let shouldWriteMore = true

  if (!this._part && this._justMatched && data) {
    while (this._dashes < 2 && (start + i) < end) {
      if (data[start + i] === DASH) {
        ++i
        ++this._dashes
      } else {
        if (this._dashes) { buf = B_ONEDASH }
        this._dashes = 0
        break
      }
    }
    if (this._dashes === 2) {
      if ((start + i) < end && this.listenerCount('trailer') !== 0) { this.emit('trailer', data.slice(start + i, end)) }
      this.reset()
      this._finished = true
      // no more parts will be added
      if (self._parts === 0) {
        self._realFinish = true
        self.emit('finish')
        self._realFinish = false
      }
    }
    if (this._dashes) { return }
  }
  if (this._justMatched) { this._justMatched = false }
  if (!this._part) {
    this._part = new PartStream(this._partOpts)
    this._part._read = function (n) {
      self._unpause()
    }
    if (this._isPreamble && this.listenerCount('preamble') !== 0) {
      this.emit('preamble', this._part)
    } else if (this._isPreamble !== true && this.listenerCount('part') !== 0) {
      this.emit('part', this._part)
    } else {
      this._ignore()
    }
    if (!this._isPreamble) { this._inHeader = true }
  }
  if (data && start < end && !this._ignoreData) {
    if (this._isPreamble || !this._inHeader) {
      if (buf) { shouldWriteMore = this._part.push(buf) }
      shouldWriteMore = this._part.push(data.slice(start, end))
      if (!shouldWriteMore) { this._pause = true }
    } else if (!this._isPreamble && this._inHeader) {
      if (buf) { this._hparser.push(buf) }
      r = this._hparser.push(data.slice(start, end))
      if (!this._inHeader && r !== undefined && r < end) { this._oninfo(false, data, start + r, end) }
    }
  }
  if (isMatch) {
    this._hparser.reset()
    if (this._isPreamble) { this._isPreamble = false } else {
      if (start !== end) {
        ++this._parts
        this._part.on('end', function () {
          if (--self._parts === 0) {
            if (self._finished) {
              self._realFinish = true
              self.emit('finish')
              self._realFinish = false
            } else {
              self._unpause()
            }
          }
        })
      }
    }
    this._part.push(null)
    this._part = undefined
    this._ignoreData = false
    this._justMatched = true
    this._dashes = 0
  }
}

Dicer.prototype._unpause = function () {
  if (!this._pause) { return }

  this._pause = false
  if (this._cb) {
    const cb = this._cb
    this._cb = undefined
    cb()
  }
}

module.exports = Dicer


/***/ }),

/***/ 2032:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const EventEmitter = (__nccwpck_require__(5673).EventEmitter)
const inherits = (__nccwpck_require__(7261).inherits)
const getLimit = __nccwpck_require__(1467)

const StreamSearch = __nccwpck_require__(1142)

const B_DCRLF = Buffer.from('\r\n\r\n')
const RE_CRLF = /\r\n/g
const RE_HDR = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/ // eslint-disable-line no-control-regex

function HeaderParser (cfg) {
  EventEmitter.call(this)

  cfg = cfg || {}
  const self = this
  this.nread = 0
  this.maxed = false
  this.npairs = 0
  this.maxHeaderPairs = getLimit(cfg, 'maxHeaderPairs', 2000)
  this.maxHeaderSize = getLimit(cfg, 'maxHeaderSize', 80 * 1024)
  this.buffer = ''
  this.header = {}
  this.finished = false
  this.ss = new StreamSearch(B_DCRLF)
  this.ss.on('info', function (isMatch, data, start, end) {
    if (data && !self.maxed) {
      if (self.nread + end - start >= self.maxHeaderSize) {
        end = self.maxHeaderSize - self.nread + start
        self.nread = self.maxHeaderSize
        self.maxed = true
      } else { self.nread += (end - start) }

      self.buffer += data.toString('binary', start, end)
    }
    if (isMatch) { self._finish() }
  })
}
inherits(HeaderParser, EventEmitter)

HeaderParser.prototype.push = function (data) {
  const r = this.ss.push(data)
  if (this.finished) { return r }
}

HeaderParser.prototype.reset = function () {
  this.finished = false
  this.buffer = ''
  this.header = {}
  this.ss.reset()
}

HeaderParser.prototype._finish = function () {
  if (this.buffer) { this._parseHeader() }
  this.ss.matches = this.ss.maxMatches
  const header = this.header
  this.header = {}
  this.buffer = ''
  this.finished = true
  this.nread = this.npairs = 0
  this.maxed = false
  this.emit('header', header)
}

HeaderParser.prototype._parseHeader = function () {
  if (this.npairs === this.maxHeaderPairs) { return }

  const lines = this.buffer.split(RE_CRLF)
  const len = lines.length
  let m, h

  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var
    if (lines[i].length === 0) { continue }
    if (lines[i][0] === '\t' || lines[i][0] === ' ') {
      // folded header content
      // RFC2822 says to just remove the CRLF and not the whitespace following
      // it, so we follow the RFC and include the leading whitespace ...
      if (h) {
        this.header[h][this.header[h].length - 1] += lines[i]
        continue
      }
    }

    const posColon = lines[i].indexOf(':')
    if (
      posColon === -1 ||
      posColon === 0
    ) {
      return
    }
    m = RE_HDR.exec(lines[i])
    h = m[1].toLowerCase()
    this.header[h] = this.header[h] || []
    this.header[h].push((m[2] || ''))
    if (++this.npairs === this.maxHeaderPairs) { break }
  }
}

module.exports = HeaderParser


/***/ }),

/***/ 1620:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const inherits = (__nccwpck_require__(7261).inherits)
const ReadableStream = (__nccwpck_require__(4492).Readable)

function PartStream (opts) {
  ReadableStream.call(this, opts)
}
inherits(PartStream, ReadableStream)

PartStream.prototype._read = function (n) {}

module.exports = PartStream


/***/ }),

/***/ 1142:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


/**
 * Copyright Brian White. All rights reserved.
 *
 * @see https://github.com/mscdex/streamsearch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * Based heavily on the Streaming Boyer-Moore-Horspool C++ implementation
 * by Hongli Lai at: https://github.com/FooBarWidget/boyer-moore-horspool
 */
const EventEmitter = (__nccwpck_require__(5673).EventEmitter)
const inherits = (__nccwpck_require__(7261).inherits)

function SBMH (needle) {
  if (typeof needle === 'string') {
    needle = Buffer.from(needle)
  }

  if (!Buffer.isBuffer(needle)) {
    throw new TypeError('The needle has to be a String or a Buffer.')
  }

  const needleLength = needle.length

  if (needleLength === 0) {
    throw new Error('The needle cannot be an empty String/Buffer.')
  }

  if (needleLength > 256) {
    throw new Error('The needle cannot have a length bigger than 256.')
  }

  this.maxMatches = Infinity
  this.matches = 0

  this._occ = new Array(256)
    .fill(needleLength) // Initialize occurrence table.
  this._lookbehind_size = 0
  this._needle = needle
  this._bufpos = 0

  this._lookbehind = Buffer.alloc(needleLength)

  // Populate occurrence table with analysis of the needle,
  // ignoring last letter.
  for (var i = 0; i < needleLength - 1; ++i) { // eslint-disable-line no-var
    this._occ[needle[i]] = needleLength - 1 - i
  }
}
inherits(SBMH, EventEmitter)

SBMH.prototype.reset = function () {
  this._lookbehind_size = 0
  this.matches = 0
  this._bufpos = 0
}

SBMH.prototype.push = function (chunk, pos) {
  if (!Buffer.isBuffer(chunk)) {
    chunk = Buffer.from(chunk, 'binary')
  }
  const chlen = chunk.length
  this._bufpos = pos || 0
  let r
  while (r !== chlen && this.matches < this.maxMatches) { r = this._sbmh_feed(chunk) }
  return r
}

SBMH.prototype._sbmh_feed = function (data) {
  const len = data.length
  const needle = this._needle
  const needleLength = needle.length
  const lastNeedleChar = needle[needleLength - 1]

  // Positive: points to a position in `data`
  //           pos == 3 points to data[3]
  // Negative: points to a position in the lookbehind buffer
  //           pos == -2 points to lookbehind[lookbehind_size - 2]
  let pos = -this._lookbehind_size
  let ch

  if (pos < 0) {
    // Lookbehind buffer is not empty. Perform Boyer-Moore-Horspool
    // search with character lookup code that considers both the
    // lookbehind buffer and the current round's haystack data.
    //
    // Loop until
    //   there is a match.
    // or until
    //   we've moved past the position that requires the
    //   lookbehind buffer. In this case we switch to the
    //   optimized loop.
    // or until
    //   the character to look at lies outside the haystack.
    while (pos < 0 && pos <= len - needleLength) {
      ch = this._sbmh_lookup_char(data, pos + needleLength - 1)

      if (
        ch === lastNeedleChar &&
        this._sbmh_memcmp(data, pos, needleLength - 1)
      ) {
        this._lookbehind_size = 0
        ++this.matches
        this.emit('info', true)

        return (this._bufpos = pos + needleLength)
      }
      pos += this._occ[ch]
    }

    // No match.

    if (pos < 0) {
      // There's too few data for Boyer-Moore-Horspool to run,
      // so let's use a different algorithm to skip as much as
      // we can.
      // Forward pos until
      //   the trailing part of lookbehind + data
      //   looks like the beginning of the needle
      // or until
      //   pos == 0
      while (pos < 0 && !this._sbmh_memcmp(data, pos, len - pos)) { ++pos }
    }

    if (pos >= 0) {
      // Discard lookbehind buffer.
      this.emit('info', false, this._lookbehind, 0, this._lookbehind_size)
      this._lookbehind_size = 0
    } else {
      // Cut off part of the lookbehind buffer that has
      // been processed and append the entire haystack
      // into it.
      const bytesToCutOff = this._lookbehind_size + pos
      if (bytesToCutOff > 0) {
        // The cut off data is guaranteed not to contain the needle.
        this.emit('info', false, this._lookbehind, 0, bytesToCutOff)
      }

      this._lookbehind.copy(this._lookbehind, 0, bytesToCutOff,
        this._lookbehind_size - bytesToCutOff)
      this._lookbehind_size -= bytesToCutOff

      data.copy(this._lookbehind, this._lookbehind_size)
      this._lookbehind_size += len

      this._bufpos = len
      return len
    }
  }

  pos += (pos >= 0) * this._bufpos

  // Lookbehind buffer is now empty. We only need to check if the
  // needle is in the haystack.
  if (data.indexOf(needle, pos) !== -1) {
    pos = data.indexOf(needle, pos)
    ++this.matches
    if (pos > 0) { this.emit('info', true, data, this._bufpos, pos) } else { this.emit('info', true) }

    return (this._bufpos = pos + needleLength)
  } else {
    pos = len - needleLength
  }

  // There was no match. If there's trailing haystack data that we cannot
  // match yet using the Boyer-Moore-Horspool algorithm (because the trailing
  // data is less than the needle size) then match using a modified
  // algorithm that starts matching from the beginning instead of the end.
  // Whatever trailing data is left after running this algorithm is added to
  // the lookbehind buffer.
  while (
    pos < len &&
    (
      data[pos] !== needle[0] ||
      (
        (Buffer.compare(
          data.subarray(pos, pos + len - pos),
          needle.subarray(0, len - pos)
        ) !== 0)
      )
    )
  ) {
    ++pos
  }
  if (pos < len) {
    data.copy(this._lookbehind, 0, pos, pos + (len - pos))
    this._lookbehind_size = len - pos
  }

  // Everything until pos is guaranteed not to contain needle data.
  if (pos > 0) { this.emit('info', false, data, this._bufpos, pos < len ? pos : len) }

  this._bufpos = len
  return len
}

SBMH.prototype._sbmh_lookup_char = function (data, pos) {
  return (pos < 0)
    ? this._lookbehind[this._lookbehind_size + pos]
    : data[pos]
}

SBMH.prototype._sbmh_memcmp = function (data, pos, len) {
  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var
    if (this._sbmh_lookup_char(data, pos + i) !== this._needle[i]) { return false }
  }
  return true
}

module.exports = SBMH


/***/ }),

/***/ 727:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const WritableStream = (__nccwpck_require__(4492).Writable)
const { inherits } = __nccwpck_require__(7261)
const Dicer = __nccwpck_require__(2960)

const MultipartParser = __nccwpck_require__(2183)
const UrlencodedParser = __nccwpck_require__(8306)
const parseParams = __nccwpck_require__(1854)

function Busboy (opts) {
  if (!(this instanceof Busboy)) { return new Busboy(opts) }

  if (typeof opts !== 'object') {
    throw new TypeError('Busboy expected an options-Object.')
  }
  if (typeof opts.headers !== 'object') {
    throw new TypeError('Busboy expected an options-Object with headers-attribute.')
  }
  if (typeof opts.headers['content-type'] !== 'string') {
    throw new TypeError('Missing Content-Type-header.')
  }

  const {
    headers,
    ...streamOptions
  } = opts

  this.opts = {
    autoDestroy: false,
    ...streamOptions
  }
  WritableStream.call(this, this.opts)

  this._done = false
  this._parser = this.getParserByHeaders(headers)
  this._finished = false
}
inherits(Busboy, WritableStream)

Busboy.prototype.emit = function (ev) {
  if (ev === 'finish') {
    if (!this._done) {
      this._parser?.end()
      return
    } else if (this._finished) {
      return
    }
    this._finished = true
  }
  WritableStream.prototype.emit.apply(this, arguments)
}

Busboy.prototype.getParserByHeaders = function (headers) {
  const parsed = parseParams(headers['content-type'])

  const cfg = {
    defCharset: this.opts.defCharset,
    fileHwm: this.opts.fileHwm,
    headers,
    highWaterMark: this.opts.highWaterMark,
    isPartAFile: this.opts.isPartAFile,
    limits: this.opts.limits,
    parsedConType: parsed,
    preservePath: this.opts.preservePath
  }

  if (MultipartParser.detect.test(parsed[0])) {
    return new MultipartParser(this, cfg)
  }
  if (UrlencodedParser.detect.test(parsed[0])) {
    return new UrlencodedParser(this, cfg)
  }
  throw new Error('Unsupported Content-Type.')
}

Busboy.prototype._write = function (chunk, encoding, cb) {
  this._parser.write(chunk, cb)
}

module.exports = Busboy
module.exports["default"] = Busboy
module.exports.Busboy = Busboy

module.exports.Dicer = Dicer


/***/ }),

/***/ 2183:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


// TODO:
//  * support 1 nested multipart level
//    (see second multipart example here:
//     http://www.w3.org/TR/html401/interact/forms.html#didx-multipartform-data)
//  * support limits.fieldNameSize
//     -- this will require modifications to utils.parseParams

const { Readable } = __nccwpck_require__(4492)
const { inherits } = __nccwpck_require__(7261)

const Dicer = __nccwpck_require__(2960)

const parseParams = __nccwpck_require__(1854)
const decodeText = __nccwpck_require__(4619)
const basename = __nccwpck_require__(8647)
const getLimit = __nccwpck_require__(1467)

const RE_BOUNDARY = /^boundary$/i
const RE_FIELD = /^form-data$/i
const RE_CHARSET = /^charset$/i
const RE_FILENAME = /^filename$/i
const RE_NAME = /^name$/i

Multipart.detect = /^multipart\/form-data/i
function Multipart (boy, cfg) {
  let i
  let len
  const self = this
  let boundary
  const limits = cfg.limits
  const isPartAFile = cfg.isPartAFile || ((fieldName, contentType, fileName) => (contentType === 'application/octet-stream' || fileName !== undefined))
  const parsedConType = cfg.parsedConType || []
  const defCharset = cfg.defCharset || 'utf8'
  const preservePath = cfg.preservePath
  const fileOpts = { highWaterMark: cfg.fileHwm }

  for (i = 0, len = parsedConType.length; i < len; ++i) {
    if (Array.isArray(parsedConType[i]) &&
      RE_BOUNDARY.test(parsedConType[i][0])) {
      boundary = parsedConType[i][1]
      break
    }
  }

  function checkFinished () {
    if (nends === 0 && finished && !boy._done) {
      finished = false
      self.end()
    }
  }

  if (typeof boundary !== 'string') { throw new Error('Multipart: Boundary not found') }

  const fieldSizeLimit = getLimit(limits, 'fieldSize', 1 * 1024 * 1024)
  const fileSizeLimit = getLimit(limits, 'fileSize', Infinity)
  const filesLimit = getLimit(limits, 'files', Infinity)
  const fieldsLimit = getLimit(limits, 'fields', Infinity)
  const partsLimit = getLimit(limits, 'parts', Infinity)
  const headerPairsLimit = getLimit(limits, 'headerPairs', 2000)
  const headerSizeLimit = getLimit(limits, 'headerSize', 80 * 1024)

  let nfiles = 0
  let nfields = 0
  let nends = 0
  let curFile
  let curField
  let finished = false

  this._needDrain = false
  this._pause = false
  this._cb = undefined
  this._nparts = 0
  this._boy = boy

  const parserCfg = {
    boundary,
    maxHeaderPairs: headerPairsLimit,
    maxHeaderSize: headerSizeLimit,
    partHwm: fileOpts.highWaterMark,
    highWaterMark: cfg.highWaterMark
  }

  this.parser = new Dicer(parserCfg)
  this.parser.on('drain', function () {
    self._needDrain = false
    if (self._cb && !self._pause) {
      const cb = self._cb
      self._cb = undefined
      cb()
    }
  }).on('part', function onPart (part) {
    if (++self._nparts > partsLimit) {
      self.parser.removeListener('part', onPart)
      self.parser.on('part', skipPart)
      boy.hitPartsLimit = true
      boy.emit('partsLimit')
      return skipPart(part)
    }

    // hack because streams2 _always_ doesn't emit 'end' until nextTick, so let
    // us emit 'end' early since we know the part has ended if we are already
    // seeing the next part
    if (curField) {
      const field = curField
      field.emit('end')
      field.removeAllListeners('end')
    }

    part.on('header', function (header) {
      let contype
      let fieldname
      let parsed
      let charset
      let encoding
      let filename
      let nsize = 0

      if (header['content-type']) {
        parsed = parseParams(header['content-type'][0])
        if (parsed[0]) {
          contype = parsed[0].toLowerCase()
          for (i = 0, len = parsed.length; i < len; ++i) {
            if (RE_CHARSET.test(parsed[i][0])) {
              charset = parsed[i][1].toLowerCase()
              break
            }
          }
        }
      }

      if (contype === undefined) { contype = 'text/plain' }
      if (charset === undefined) { charset = defCharset }

      if (header['content-disposition']) {
        parsed = parseParams(header['content-disposition'][0])
        if (!RE_FIELD.test(parsed[0])) { return skipPart(part) }
        for (i = 0, len = parsed.length; i < len; ++i) {
          if (RE_NAME.test(parsed[i][0])) {
            fieldname = parsed[i][1]
          } else if (RE_FILENAME.test(parsed[i][0])) {
            filename = parsed[i][1]
            if (!preservePath) { filename = basename(filename) }
          }
        }
      } else { return skipPart(part) }

      if (header['content-transfer-encoding']) { encoding = header['content-transfer-encoding'][0].toLowerCase() } else { encoding = '7bit' }

      let onData,
        onEnd

      if (isPartAFile(fieldname, contype, filename)) {
        // file/binary field
        if (nfiles === filesLimit) {
          if (!boy.hitFilesLimit) {
            boy.hitFilesLimit = true
            boy.emit('filesLimit')
          }
          return skipPart(part)
        }

        ++nfiles

        if (boy.listenerCount('file') === 0) {
          self.parser._ignore()
          return
        }

        ++nends
        const file = new FileStream(fileOpts)
        curFile = file
        file.on('end', function () {
          --nends
          self._pause = false
          checkFinished()
          if (self._cb && !self._needDrain) {
            const cb = self._cb
            self._cb = undefined
            cb()
          }
        })
        file._read = function (n) {
          if (!self._pause) { return }
          self._pause = false
          if (self._cb && !self._needDrain) {
            const cb = self._cb
            self._cb = undefined
            cb()
          }
        }
        boy.emit('file', fieldname, file, filename, encoding, contype)

        onData = function (data) {
          if ((nsize += data.length) > fileSizeLimit) {
            const extralen = fileSizeLimit - nsize + data.length
            if (extralen > 0) { file.push(data.slice(0, extralen)) }
            file.truncated = true
            file.bytesRead = fileSizeLimit
            part.removeAllListeners('data')
            file.emit('limit')
            return
          } else if (!file.push(data)) { self._pause = true }

          file.bytesRead = nsize
        }

        onEnd = function () {
          curFile = undefined
          file.push(null)
        }
      } else {
        // non-file field
        if (nfields === fieldsLimit) {
          if (!boy.hitFieldsLimit) {
            boy.hitFieldsLimit = true
            boy.emit('fieldsLimit')
          }
          return skipPart(part)
        }

        ++nfields
        ++nends
        let buffer = ''
        let truncated = false
        curField = part

        onData = function (data) {
          if ((nsize += data.length) > fieldSizeLimit) {
            const extralen = (fieldSizeLimit - (nsize - data.length))
            buffer += data.toString('binary', 0, extralen)
            truncated = true
            part.removeAllListeners('data')
          } else { buffer += data.toString('binary') }
        }

        onEnd = function () {
          curField = undefined
          if (buffer.length) { buffer = decodeText(buffer, 'binary', charset) }
          boy.emit('field', fieldname, buffer, false, truncated, encoding, contype)
          --nends
          checkFinished()
        }
      }

      /* As of node@2efe4ab761666 (v0.10.29+/v0.11.14+), busboy had become
         broken. Streams2/streams3 is a huge black box of confusion, but
         somehow overriding the sync state seems to fix things again (and still
         seems to work for previous node versions).
      */
      part._readableState.sync = false

      part.on('data', onData)
      part.on('end', onEnd)
    }).on('error', function (err) {
      if (curFile) { curFile.emit('error', err) }
    })
  }).on('error', function (err) {
    boy.emit('error', err)
  }).on('finish', function () {
    finished = true
    checkFinished()
  })
}

Multipart.prototype.write = function (chunk, cb) {
  const r = this.parser.write(chunk)
  if (r && !this._pause) {
    cb()
  } else {
    this._needDrain = !r
    this._cb = cb
  }
}

Multipart.prototype.end = function () {
  const self = this

  if (self.parser.writable) {
    self.parser.end()
  } else if (!self._boy._done) {
    process.nextTick(function () {
      self._boy._done = true
      self._boy.emit('finish')
    })
  }
}

function skipPart (part) {
  part.resume()
}

function FileStream (opts) {
  Readable.call(this, opts)

  this.bytesRead = 0

  this.truncated = false
}

inherits(FileStream, Readable)

FileStream.prototype._read = function (n) {}

module.exports = Multipart


/***/ }),

/***/ 8306:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const Decoder = __nccwpck_require__(7100)
const decodeText = __nccwpck_require__(4619)
const getLimit = __nccwpck_require__(1467)

const RE_CHARSET = /^charset$/i

UrlEncoded.detect = /^application\/x-www-form-urlencoded/i
function UrlEncoded (boy, cfg) {
  const limits = cfg.limits
  const parsedConType = cfg.parsedConType
  this.boy = boy

  this.fieldSizeLimit = getLimit(limits, 'fieldSize', 1 * 1024 * 1024)
  this.fieldNameSizeLimit = getLimit(limits, 'fieldNameSize', 100)
  this.fieldsLimit = getLimit(limits, 'fields', Infinity)

  let charset
  for (var i = 0, len = parsedConType.length; i < len; ++i) { // eslint-disable-line no-var
    if (Array.isArray(parsedConType[i]) &&
        RE_CHARSET.test(parsedConType[i][0])) {
      charset = parsedConType[i][1].toLowerCase()
      break
    }
  }

  if (charset === undefined) { charset = cfg.defCharset || 'utf8' }

  this.decoder = new Decoder()
  this.charset = charset
  this._fields = 0
  this._state = 'key'
  this._checkingBytes = true
  this._bytesKey = 0
  this._bytesVal = 0
  this._key = ''
  this._val = ''
  this._keyTrunc = false
  this._valTrunc = false
  this._hitLimit = false
}

UrlEncoded.prototype.write = function (data, cb) {
  if (this._fields === this.fieldsLimit) {
    if (!this.boy.hitFieldsLimit) {
      this.boy.hitFieldsLimit = true
      this.boy.emit('fieldsLimit')
    }
    return cb()
  }

  let idxeq; let idxamp; let i; let p = 0; const len = data.length

  while (p < len) {
    if (this._state === 'key') {
      idxeq = idxamp = undefined
      for (i = p; i < len; ++i) {
        if (!this._checkingBytes) { ++p }
        if (data[i] === 0x3D/* = */) {
          idxeq = i
          break
        } else if (data[i] === 0x26/* & */) {
          idxamp = i
          break
        }
        if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {
          this._hitLimit = true
          break
        } else if (this._checkingBytes) { ++this._bytesKey }
      }

      if (idxeq !== undefined) {
        // key with assignment
        if (idxeq > p) { this._key += this.decoder.write(data.toString('binary', p, idxeq)) }
        this._state = 'val'

        this._hitLimit = false
        this._checkingBytes = true
        this._val = ''
        this._bytesVal = 0
        this._valTrunc = false
        this.decoder.reset()

        p = idxeq + 1
      } else if (idxamp !== undefined) {
        // key with no assignment
        ++this._fields
        let key; const keyTrunc = this._keyTrunc
        if (idxamp > p) { key = (this._key += this.decoder.write(data.toString('binary', p, idxamp))) } else { key = this._key }

        this._hitLimit = false
        this._checkingBytes = true
        this._key = ''
        this._bytesKey = 0
        this._keyTrunc = false
        this.decoder.reset()

        if (key.length) {
          this.boy.emit('field', decodeText(key, 'binary', this.charset),
            '',
            keyTrunc,
            false)
        }

        p = idxamp + 1
        if (this._fields === this.fieldsLimit) { return cb() }
      } else if (this._hitLimit) {
        // we may not have hit the actual limit if there are encoded bytes...
        if (i > p) { this._key += this.decoder.write(data.toString('binary', p, i)) }
        p = i
        if ((this._bytesKey = this._key.length) === this.fieldNameSizeLimit) {
          // yep, we actually did hit the limit
          this._checkingBytes = false
          this._keyTrunc = true
        }
      } else {
        if (p < len) { this._key += this.decoder.write(data.toString('binary', p)) }
        p = len
      }
    } else {
      idxamp = undefined
      for (i = p; i < len; ++i) {
        if (!this._checkingBytes) { ++p }
        if (data[i] === 0x26/* & */) {
          idxamp = i
          break
        }
        if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {
          this._hitLimit = true
          break
        } else if (this._checkingBytes) { ++this._bytesVal }
      }

      if (idxamp !== undefined) {
        ++this._fields
        if (idxamp > p) { this._val += this.decoder.write(data.toString('binary', p, idxamp)) }
        this.boy.emit('field', decodeText(this._key, 'binary', this.charset),
          decodeText(this._val, 'binary', this.charset),
          this._keyTrunc,
          this._valTrunc)
        this._state = 'key'

        this._hitLimit = false
        this._checkingBytes = true
        this._key = ''
        this._bytesKey = 0
        this._keyTrunc = false
        this.decoder.reset()

        p = idxamp + 1
        if (this._fields === this.fieldsLimit) { return cb() }
      } else if (this._hitLimit) {
        // we may not have hit the actual limit if there are encoded bytes...
        if (i > p) { this._val += this.decoder.write(data.toString('binary', p, i)) }
        p = i
        if ((this._val === '' && this.fieldSizeLimit === 0) ||
            (this._bytesVal = this._val.length) === this.fieldSizeLimit) {
          // yep, we actually did hit the limit
          this._checkingBytes = false
          this._valTrunc = true
        }
      } else {
        if (p < len) { this._val += this.decoder.write(data.toString('binary', p)) }
        p = len
      }
    }
  }
  cb()
}

UrlEncoded.prototype.end = function () {
  if (this.boy._done) { return }

  if (this._state === 'key' && this._key.length > 0) {
    this.boy.emit('field', decodeText(this._key, 'binary', this.charset),
      '',
      this._keyTrunc,
      false)
  } else if (this._state === 'val') {
    this.boy.emit('field', decodeText(this._key, 'binary', this.charset),
      decodeText(this._val, 'binary', this.charset),
      this._keyTrunc,
      this._valTrunc)
  }
  this.boy._done = true
  this.boy.emit('finish')
}

module.exports = UrlEncoded


/***/ }),

/***/ 7100:
/***/ ((module) => {

"use strict";


const RE_PLUS = /\+/g

const HEX = [
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
]

function Decoder () {
  this.buffer = undefined
}
Decoder.prototype.write = function (str) {
  // Replace '+' with ' ' before decoding
  str = str.replace(RE_PLUS, ' ')
  let res = ''
  let i = 0; let p = 0; const len = str.length
  for (; i < len; ++i) {
    if (this.buffer !== undefined) {
      if (!HEX[str.charCodeAt(i)]) {
        res += '%' + this.buffer
        this.buffer = undefined
        --i // retry character
      } else {
        this.buffer += str[i]
        ++p
        if (this.buffer.length === 2) {
          res += String.fromCharCode(parseInt(this.buffer, 16))
          this.buffer = undefined
        }
      }
    } else if (str[i] === '%') {
      if (i > p) {
        res += str.substring(p, i)
        p = i
      }
      this.buffer = ''
      ++p
    }
  }
  if (p < len && this.buffer === undefined) { res += str.substring(p) }
  return res
}
Decoder.prototype.reset = function () {
  this.buffer = undefined
}

module.exports = Decoder


/***/ }),

/***/ 8647:
/***/ ((module) => {

"use strict";


module.exports = function basename (path) {
  if (typeof path !== 'string') { return '' }
  for (var i = path.length - 1; i >= 0; --i) { // eslint-disable-line no-var
    switch (path.charCodeAt(i)) {
      case 0x2F: // '/'
      case 0x5C: // '\'
        path = path.slice(i + 1)
        return (path === '..' || path === '.' ? '' : path)
    }
  }
  return (path === '..' || path === '.' ? '' : path)
}


/***/ }),

/***/ 4619:
/***/ (function(module) {

"use strict";


// Node has always utf-8
const utf8Decoder = new TextDecoder('utf-8')
const textDecoders = new Map([
  ['utf-8', utf8Decoder],
  ['utf8', utf8Decoder]
])

function getDecoder (charset) {
  let lc
  while (true) {
    switch (charset) {
      case 'utf-8':
      case 'utf8':
        return decoders.utf8
      case 'latin1':
      case 'ascii': // TODO: Make these a separate, strict decoder?
      case 'us-ascii':
      case 'iso-8859-1':
      case 'iso8859-1':
      case 'iso88591':
      case 'iso_8859-1':
      case 'windows-1252':
      case 'iso_8859-1:1987':
      case 'cp1252':
      case 'x-cp1252':
        return decoders.latin1
      case 'utf16le':
      case 'utf-16le':
      case 'ucs2':
      case 'ucs-2':
        return decoders.utf16le
      case 'base64':
        return decoders.base64
      default:
        if (lc === undefined) {
          lc = true
          charset = charset.toLowerCase()
          continue
        }
        return decoders.other.bind(charset)
    }
  }
}

const decoders = {
  utf8: (data, sourceEncoding) => {
    if (data.length === 0) {
      return ''
    }
    if (typeof data === 'string') {
      data = Buffer.from(data, sourceEncoding)
    }
    return data.utf8Slice(0, data.length)
  },

  latin1: (data, sourceEncoding) => {
    if (data.length === 0) {
      return ''
    }
    if (typeof data === 'string') {
      return data
    }
    return data.latin1Slice(0, data.length)
  },

  utf16le: (data, sourceEncoding) => {
    if (data.length === 0) {
      return ''
    }
    if (typeof data === 'string') {
      data = Buffer.from(data, sourceEncoding)
    }
    return data.ucs2Slice(0, data.length)
  },

  base64: (data, sourceEncoding) => {
    if (data.length === 0) {
      return ''
    }
    if (typeof data === 'string') {
      data = Buffer.from(data, sourceEncoding)
    }
    return data.base64Slice(0, data.length)
  },

  other: (data, sourceEncoding) => {
    if (data.length === 0) {
      return ''
    }
    if (typeof data === 'string') {
      data = Buffer.from(data, sourceEncoding)
    }

    if (textDecoders.has(this.toString())) {
      try {
        return textDecoders.get(this).decode(data)
      } catch {}
    }
    return typeof data === 'string'
      ? data
      : data.toString()
  }
}

function decodeText (text, sourceEncoding, destEncoding) {
  if (text) {
    return getDecoder(destEncoding)(text, sourceEncoding)
  }
  return text
}

module.exports = decodeText


/***/ }),

/***/ 1467:
/***/ ((module) => {

"use strict";


module.exports = function getLimit (limits, name, defaultLimit) {
  if (
    !limits ||
    limits[name] === undefined ||
    limits[name] === null
  ) { return defaultLimit }

  if (
    typeof limits[name] !== 'number' ||
    isNaN(limits[name])
  ) { throw new TypeError('Limit ' + name + ' is not a valid number') }

  return limits[name]
}


/***/ }),

/***/ 1854:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
/* eslint-disable object-property-newline */


const decodeText = __nccwpck_require__(4619)

const RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g

const EncodedLookup = {
  '%00': '\x00', '%01': '\x01', '%02': '\x02', '%03': '\x03', '%04': '\x04',
  '%05': '\x05', '%06': '\x06', '%07': '\x07', '%08': '\x08', '%09': '\x09',
  '%0a': '\x0a', '%0A': '\x0a', '%0b': '\x0b', '%0B': '\x0b', '%0c': '\x0c',
  '%0C': '\x0c', '%0d': '\x0d', '%0D': '\x0d', '%0e': '\x0e', '%0E': '\x0e',
  '%0f': '\x0f', '%0F': '\x0f', '%10': '\x10', '%11': '\x11', '%12': '\x12',
  '%13': '\x13', '%14': '\x14', '%15': '\x15', '%16': '\x16', '%17': '\x17',
  '%18': '\x18', '%19': '\x19', '%1a': '\x1a', '%1A': '\x1a', '%1b': '\x1b',
  '%1B': '\x1b', '%1c': '\x1c', '%1C': '\x1c', '%1d': '\x1d', '%1D': '\x1d',
  '%1e': '\x1e', '%1E': '\x1e', '%1f': '\x1f', '%1F': '\x1f', '%20': '\x20',
  '%21': '\x21', '%22': '\x22', '%23': '\x23', '%24': '\x24', '%25': '\x25',
  '%26': '\x26', '%27': '\x27', '%28': '\x28', '%29': '\x29', '%2a': '\x2a',
  '%2A': '\x2a', '%2b': '\x2b', '%2B': '\x2b', '%2c': '\x2c', '%2C': '\x2c',
  '%2d': '\x2d', '%2D': '\x2d', '%2e': '\x2e', '%2E': '\x2e', '%2f': '\x2f',
  '%2F': '\x2f', '%30': '\x30', '%31': '\x31', '%32': '\x32', '%33': '\x33',
  '%34': '\x34', '%35': '\x35', '%36': '\x36', '%37': '\x37', '%38': '\x38',
  '%39': '\x39', '%3a': '\x3a', '%3A': '\x3a', '%3b': '\x3b', '%3B': '\x3b',
  '%3c': '\x3c', '%3C': '\x3c', '%3d': '\x3d', '%3D': '\x3d', '%3e': '\x3e',
  '%3E': '\x3e', '%3f': '\x3f', '%3F': '\x3f', '%40': '\x40', '%41': '\x41',
  '%42': '\x42', '%43': '\x43', '%44': '\x44', '%45': '\x45', '%46': '\x46',
  '%47': '\x47', '%48': '\x48', '%49': '\x49', '%4a': '\x4a', '%4A': '\x4a',
  '%4b': '\x4b', '%4B': '\x4b', '%4c': '\x4c', '%4C': '\x4c', '%4d': '\x4d',
  '%4D': '\x4d', '%4e': '\x4e', '%4E': '\x4e', '%4f': '\x4f', '%4F': '\x4f',
  '%50': '\x50', '%51': '\x51', '%52': '\x52', '%53': '\x53', '%54': '\x54',
  '%55': '\x55', '%56': '\x56', '%57': '\x57', '%58': '\x58', '%59': '\x59',
  '%5a': '\x5a', '%5A': '\x5a', '%5b': '\x5b', '%5B': '\x5b', '%5c': '\x5c',
  '%5C': '\x5c', '%5d': '\x5d', '%5D': '\x5d', '%5e': '\x5e', '%5E': '\x5e',
  '%5f': '\x5f', '%5F': '\x5f', '%60': '\x60', '%61': '\x61', '%62': '\x62',
  '%63': '\x63', '%64': '\x64', '%65': '\x65', '%66': '\x66', '%67': '\x67',
  '%68': '\x68', '%69': '\x69', '%6a': '\x6a', '%6A': '\x6a', '%6b': '\x6b',
  '%6B': '\x6b', '%6c': '\x6c', '%6C': '\x6c', '%6d': '\x6d', '%6D': '\x6d',
  '%6e': '\x6e', '%6E': '\x6e', '%6f': '\x6f', '%6F': '\x6f', '%70': '\x70',
  '%71': '\x71', '%72': '\x72', '%73': '\x73', '%74': '\x74', '%75': '\x75',
  '%76': '\x76', '%77': '\x77', '%78': '\x78', '%79': '\x79', '%7a': '\x7a',
  '%7A': '\x7a', '%7b': '\x7b', '%7B': '\x7b', '%7c': '\x7c', '%7C': '\x7c',
  '%7d': '\x7d', '%7D': '\x7d', '%7e': '\x7e', '%7E': '\x7e', '%7f': '\x7f',
  '%7F': '\x7f', '%80': '\x80', '%81': '\x81', '%82': '\x82', '%83': '\x83',
  '%84': '\x84', '%85': '\x85', '%86': '\x86', '%87': '\x87', '%88': '\x88',
  '%89': '\x89', '%8a': '\x8a', '%8A': '\x8a', '%8b': '\x8b', '%8B': '\x8b',
  '%8c': '\x8c', '%8C': '\x8c', '%8d': '\x8d', '%8D': '\x8d', '%8e': '\x8e',
  '%8E': '\x8e', '%8f': '\x8f', '%8F': '\x8f', '%90': '\x90', '%91': '\x91',
  '%92': '\x92', '%93': '\x93', '%94': '\x94', '%95': '\x95', '%96': '\x96',
  '%97': '\x97', '%98': '\x98', '%99': '\x99', '%9a': '\x9a', '%9A': '\x9a',
  '%9b': '\x9b', '%9B': '\x9b', '%9c': '\x9c', '%9C': '\x9c', '%9d': '\x9d',
  '%9D': '\x9d', '%9e': '\x9e', '%9E': '\x9e', '%9f': '\x9f', '%9F': '\x9f',
  '%a0': '\xa0', '%A0': '\xa0', '%a1': '\xa1', '%A1': '\xa1', '%a2': '\xa2',
  '%A2': '\xa2', '%a3': '\xa3', '%A3': '\xa3', '%a4': '\xa4', '%A4': '\xa4',
  '%a5': '\xa5', '%A5': '\xa5', '%a6': '\xa6', '%A6': '\xa6', '%a7': '\xa7',
  '%A7': '\xa7', '%a8': '\xa8', '%A8': '\xa8', '%a9': '\xa9', '%A9': '\xa9',
  '%aa': '\xaa', '%Aa': '\xaa', '%aA': '\xaa', '%AA': '\xaa', '%ab': '\xab',
  '%Ab': '\xab', '%aB': '\xab', '%AB': '\xab', '%ac': '\xac', '%Ac': '\xac',
  '%aC': '\xac', '%AC': '\xac', '%ad': '\xad', '%Ad': '\xad', '%aD': '\xad',
  '%AD': '\xad', '%ae': '\xae', '%Ae': '\xae', '%aE': '\xae', '%AE': '\xae',
  '%af': '\xaf', '%Af': '\xaf', '%aF': '\xaf', '%AF': '\xaf', '%b0': '\xb0',
  '%B0': '\xb0', '%b1': '\xb1', '%B1': '\xb1', '%b2': '\xb2', '%B2': '\xb2',
  '%b3': '\xb3', '%B3': '\xb3', '%b4': '\xb4', '%B4': '\xb4', '%b5': '\xb5',
  '%B5': '\xb5', '%b6': '\xb6', '%B6': '\xb6', '%b7': '\xb7', '%B7': '\xb7',
  '%b8': '\xb8', '%B8': '\xb8', '%b9': '\xb9', '%B9': '\xb9', '%ba': '\xba',
  '%Ba': '\xba', '%bA': '\xba', '%BA': '\xba', '%bb': '\xbb', '%Bb': '\xbb',
  '%bB': '\xbb', '%BB': '\xbb', '%bc': '\xbc', '%Bc': '\xbc', '%bC': '\xbc',
  '%BC': '\xbc', '%bd': '\xbd', '%Bd': '\xbd', '%bD': '\xbd', '%BD': '\xbd',
  '%be': '\xbe', '%Be': '\xbe', '%bE': '\xbe', '%BE': '\xbe', '%bf': '\xbf',
  '%Bf': '\xbf', '%bF': '\xbf', '%BF': '\xbf', '%c0': '\xc0', '%C0': '\xc0',
  '%c1': '\xc1', '%C1': '\xc1', '%c2': '\xc2', '%C2': '\xc2', '%c3': '\xc3',
  '%C3': '\xc3', '%c4': '\xc4', '%C4': '\xc4', '%c5': '\xc5', '%C5': '\xc5',
  '%c6': '\xc6', '%C6': '\xc6', '%c7': '\xc7', '%C7': '\xc7', '%c8': '\xc8',
  '%C8': '\xc8', '%c9': '\xc9', '%C9': '\xc9', '%ca': '\xca', '%Ca': '\xca',
  '%cA': '\xca', '%CA': '\xca', '%cb': '\xcb', '%Cb': '\xcb', '%cB': '\xcb',
  '%CB': '\xcb', '%cc': '\xcc', '%Cc': '\xcc', '%cC': '\xcc', '%CC': '\xcc',
  '%cd': '\xcd', '%Cd': '\xcd', '%cD': '\xcd', '%CD': '\xcd', '%ce': '\xce',
  '%Ce': '\xce', '%cE': '\xce', '%CE': '\xce', '%cf': '\xcf', '%Cf': '\xcf',
  '%cF': '\xcf', '%CF': '\xcf', '%d0': '\xd0', '%D0': '\xd0', '%d1': '\xd1',
  '%D1': '\xd1', '%d2': '\xd2', '%D2': '\xd2', '%d3': '\xd3', '%D3': '\xd3',
  '%d4': '\xd4', '%D4': '\xd4', '%d5': '\xd5', '%D5': '\xd5', '%d6': '\xd6',
  '%D6': '\xd6', '%d7': '\xd7', '%D7': '\xd7', '%d8': '\xd8', '%D8': '\xd8',
  '%d9': '\xd9', '%D9': '\xd9', '%da': '\xda', '%Da': '\xda', '%dA': '\xda',
  '%DA': '\xda', '%db': '\xdb', '%Db': '\xdb', '%dB': '\xdb', '%DB': '\xdb',
  '%dc': '\xdc', '%Dc': '\xdc', '%dC': '\xdc', '%DC': '\xdc', '%dd': '\xdd',
  '%Dd': '\xdd', '%dD': '\xdd', '%DD': '\xdd', '%de': '\xde', '%De': '\xde',
  '%dE': '\xde', '%DE': '\xde', '%df': '\xdf', '%Df': '\xdf', '%dF': '\xdf',
  '%DF': '\xdf', '%e0': '\xe0', '%E0': '\xe0', '%e1': '\xe1', '%E1': '\xe1',
  '%e2': '\xe2', '%E2': '\xe2', '%e3': '\xe3', '%E3': '\xe3', '%e4': '\xe4',
  '%E4': '\xe4', '%e5': '\xe5', '%E5': '\xe5', '%e6': '\xe6', '%E6': '\xe6',
  '%e7': '\xe7', '%E7': '\xe7', '%e8': '\xe8', '%E8': '\xe8', '%e9': '\xe9',
  '%E9': '\xe9', '%ea': '\xea', '%Ea': '\xea', '%eA': '\xea', '%EA': '\xea',
  '%eb': '\xeb', '%Eb': '\xeb', '%eB': '\xeb', '%EB': '\xeb', '%ec': '\xec',
  '%Ec': '\xec', '%eC': '\xec', '%EC': '\xec', '%ed': '\xed', '%Ed': '\xed',
  '%eD': '\xed', '%ED': '\xed', '%ee': '\xee', '%Ee': '\xee', '%eE': '\xee',
  '%EE': '\xee', '%ef': '\xef', '%Ef': '\xef', '%eF': '\xef', '%EF': '\xef',
  '%f0': '\xf0', '%F0': '\xf0', '%f1': '\xf1', '%F1': '\xf1', '%f2': '\xf2',
  '%F2': '\xf2', '%f3': '\xf3', '%F3': '\xf3', '%f4': '\xf4', '%F4': '\xf4',
  '%f5': '\xf5', '%F5': '\xf5', '%f6': '\xf6', '%F6': '\xf6', '%f7': '\xf7',
  '%F7': '\xf7', '%f8': '\xf8', '%F8': '\xf8', '%f9': '\xf9', '%F9': '\xf9',
  '%fa': '\xfa', '%Fa': '\xfa', '%fA': '\xfa', '%FA': '\xfa', '%fb': '\xfb',
  '%Fb': '\xfb', '%fB': '\xfb', '%FB': '\xfb', '%fc': '\xfc', '%Fc': '\xfc',
  '%fC': '\xfc', '%FC': '\xfc', '%fd': '\xfd', '%Fd': '\xfd', '%fD': '\xfd',
  '%FD': '\xfd', '%fe': '\xfe', '%Fe': '\xfe', '%fE': '\xfe', '%FE': '\xfe',
  '%ff': '\xff', '%Ff': '\xff', '%fF': '\xff', '%FF': '\xff'
}

function encodedReplacer (match) {
  return EncodedLookup[match]
}

const STATE_KEY = 0
const STATE_VALUE = 1
const STATE_CHARSET = 2
const STATE_LANG = 3

function parseParams (str) {
  const res = []
  let state = STATE_KEY
  let charset = ''
  let inquote = false
  let escaping = false
  let p = 0
  let tmp = ''
  const len = str.length

  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var
    const char = str[i]
    if (char === '\\' && inquote) {
      if (escaping) { escaping = false } else {
        escaping = true
        continue
      }
    } else if (char === '"') {
      if (!escaping) {
        if (inquote) {
          inquote = false
          state = STATE_KEY
        } else { inquote = true }
        continue
      } else { escaping = false }
    } else {
      if (escaping && inquote) { tmp += '\\' }
      escaping = false
      if ((state === STATE_CHARSET || state === STATE_LANG) && char === "'") {
        if (state === STATE_CHARSET) {
          state = STATE_LANG
          charset = tmp.substring(1)
        } else { state = STATE_VALUE }
        tmp = ''
        continue
      } else if (state === STATE_KEY &&
        (char === '*' || char === '=') &&
        res.length) {
        state = char === '*'
          ? STATE_CHARSET
          : STATE_VALUE
        res[p] = [tmp, undefined]
        tmp = ''
        continue
      } else if (!inquote && char === ';') {
        state = STATE_KEY
        if (charset) {
          if (tmp.length) {
            tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer),
              'binary',
              charset)
          }
          charset = ''
        } else if (tmp.length) {
          tmp = decodeText(tmp, 'binary', 'utf8')
        }
        if (res[p] === undefined) { res[p] = tmp } else { res[p][1] = tmp }
        tmp = ''
        ++p
        continue
      } else if (!inquote && (char === ' ' || char === '\t')) { continue }
    }
    tmp += char
  }
  if (charset && tmp.length) {
    tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer),
      'binary',
      charset)
  } else if (tmp) {
    tmp = decodeText(tmp, 'binary', 'utf8')
  }

  if (res[p] === undefined) {
    if (tmp) { res[p] = tmp }
  } else { res[p][1] = tmp }

  return res
}

module.exports = parseParams


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nccwpck_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nccwpck_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__nccwpck_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	if (typeof __nccwpck_require__ !== 'undefined') __nccwpck_require__.ab = __dirname + "/";
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
// ESM COMPAT FLAG
__nccwpck_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/@actions/core/lib/core.js
var core = __nccwpck_require__(2186);
// EXTERNAL MODULE: ./node_modules/@actions/github/lib/github.js
var github = __nccwpck_require__(5438);
;// CONCATENATED MODULE: ./node_modules/luxon/src/errors.js
// these aren't really private, but nor are they really useful to document

/**
 * @private
 */
class LuxonError extends Error {}

/**
 * @private
 */
class InvalidDateTimeError extends LuxonError {
  constructor(reason) {
    super(`Invalid DateTime: ${reason.toMessage()}`);
  }
}

/**
 * @private
 */
class InvalidIntervalError extends LuxonError {
  constructor(reason) {
    super(`Invalid Interval: ${reason.toMessage()}`);
  }
}

/**
 * @private
 */
class InvalidDurationError extends LuxonError {
  constructor(reason) {
    super(`Invalid Duration: ${reason.toMessage()}`);
  }
}

/**
 * @private
 */
class ConflictingSpecificationError extends LuxonError {}

/**
 * @private
 */
class InvalidUnitError extends LuxonError {
  constructor(unit) {
    super(`Invalid unit ${unit}`);
  }
}

/**
 * @private
 */
class InvalidArgumentError extends LuxonError {}

/**
 * @private
 */
class ZoneIsAbstractError extends LuxonError {
  constructor() {
    super("Zone is an abstract class");
  }
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/formats.js
/**
 * @private
 */

const n = "numeric",
  s = "short",
  l = "long";

const DATE_SHORT = {
  year: n,
  month: n,
  day: n,
};

const DATE_MED = {
  year: n,
  month: s,
  day: n,
};

const DATE_MED_WITH_WEEKDAY = {
  year: n,
  month: s,
  day: n,
  weekday: s,
};

const DATE_FULL = {
  year: n,
  month: l,
  day: n,
};

const DATE_HUGE = {
  year: n,
  month: l,
  day: n,
  weekday: l,
};

const TIME_SIMPLE = {
  hour: n,
  minute: n,
};

const TIME_WITH_SECONDS = {
  hour: n,
  minute: n,
  second: n,
};

const TIME_WITH_SHORT_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  timeZoneName: s,
};

const TIME_WITH_LONG_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  timeZoneName: l,
};

const TIME_24_SIMPLE = {
  hour: n,
  minute: n,
  hourCycle: "h23",
};

const TIME_24_WITH_SECONDS = {
  hour: n,
  minute: n,
  second: n,
  hourCycle: "h23",
};

const TIME_24_WITH_SHORT_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  hourCycle: "h23",
  timeZoneName: s,
};

const TIME_24_WITH_LONG_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  hourCycle: "h23",
  timeZoneName: l,
};

const DATETIME_SHORT = {
  year: n,
  month: n,
  day: n,
  hour: n,
  minute: n,
};

const DATETIME_SHORT_WITH_SECONDS = {
  year: n,
  month: n,
  day: n,
  hour: n,
  minute: n,
  second: n,
};

const DATETIME_MED = {
  year: n,
  month: s,
  day: n,
  hour: n,
  minute: n,
};

const DATETIME_MED_WITH_SECONDS = {
  year: n,
  month: s,
  day: n,
  hour: n,
  minute: n,
  second: n,
};

const DATETIME_MED_WITH_WEEKDAY = {
  year: n,
  month: s,
  day: n,
  weekday: s,
  hour: n,
  minute: n,
};

const DATETIME_FULL = {
  year: n,
  month: l,
  day: n,
  hour: n,
  minute: n,
  timeZoneName: s,
};

const DATETIME_FULL_WITH_SECONDS = {
  year: n,
  month: l,
  day: n,
  hour: n,
  minute: n,
  second: n,
  timeZoneName: s,
};

const DATETIME_HUGE = {
  year: n,
  month: l,
  day: n,
  weekday: l,
  hour: n,
  minute: n,
  timeZoneName: l,
};

const DATETIME_HUGE_WITH_SECONDS = {
  year: n,
  month: l,
  day: n,
  weekday: l,
  hour: n,
  minute: n,
  second: n,
  timeZoneName: l,
};

;// CONCATENATED MODULE: ./node_modules/luxon/src/zone.js


/**
 * @interface
 */
class Zone {
  /**
   * The type of zone
   * @abstract
   * @type {string}
   */
  get type() {
    throw new ZoneIsAbstractError();
  }

  /**
   * The name of this zone.
   * @abstract
   * @type {string}
   */
  get name() {
    throw new ZoneIsAbstractError();
  }

  get ianaName() {
    return this.name;
  }

  /**
   * Returns whether the offset is known to be fixed for the whole year.
   * @abstract
   * @type {boolean}
   */
  get isUniversal() {
    throw new ZoneIsAbstractError();
  }

  /**
   * Returns the offset's common name (such as EST) at the specified timestamp
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to get the name
   * @param {Object} opts - Options to affect the format
   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
   * @param {string} opts.locale - What locale to return the offset name in.
   * @return {string}
   */
  offsetName(ts, opts) {
    throw new ZoneIsAbstractError();
  }

  /**
   * Returns the offset's value as a string
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to get the offset
   * @param {string} format - What style of offset to return.
   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
   * @return {string}
   */
  formatOffset(ts, format) {
    throw new ZoneIsAbstractError();
  }

  /**
   * Return the offset in minutes for this zone at the specified timestamp.
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to compute the offset
   * @return {number}
   */
  offset(ts) {
    throw new ZoneIsAbstractError();
  }

  /**
   * Return whether this Zone is equal to another zone
   * @abstract
   * @param {Zone} otherZone - the zone to compare
   * @return {boolean}
   */
  equals(otherZone) {
    throw new ZoneIsAbstractError();
  }

  /**
   * Return whether this Zone is valid.
   * @abstract
   * @type {boolean}
   */
  get isValid() {
    throw new ZoneIsAbstractError();
  }
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/zones/systemZone.js



let singleton = null;

/**
 * Represents the local zone for this JavaScript environment.
 * @implements {Zone}
 */
class SystemZone extends Zone {
  /**
   * Get a singleton instance of the local zone
   * @return {SystemZone}
   */
  static get instance() {
    if (singleton === null) {
      singleton = new SystemZone();
    }
    return singleton;
  }

  /** @override **/
  get type() {
    return "system";
  }

  /** @override **/
  get name() {
    return new Intl.DateTimeFormat().resolvedOptions().timeZone;
  }

  /** @override **/
  get isUniversal() {
    return false;
  }

  /** @override **/
  offsetName(ts, { format, locale }) {
    return parseZoneInfo(ts, format, locale);
  }

  /** @override **/
  formatOffset(ts, format) {
    return formatOffset(this.offset(ts), format);
  }

  /** @override **/
  offset(ts) {
    return -new Date(ts).getTimezoneOffset();
  }

  /** @override **/
  equals(otherZone) {
    return otherZone.type === "system";
  }

  /** @override **/
  get isValid() {
    return true;
  }
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/zones/IANAZone.js



let dtfCache = {};
function makeDTF(zone) {
  if (!dtfCache[zone]) {
    dtfCache[zone] = new Intl.DateTimeFormat("en-US", {
      hour12: false,
      timeZone: zone,
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      era: "short",
    });
  }
  return dtfCache[zone];
}

const typeToPos = {
  year: 0,
  month: 1,
  day: 2,
  era: 3,
  hour: 4,
  minute: 5,
  second: 6,
};

function hackyOffset(dtf, date) {
  const formatted = dtf.format(date).replace(/\u200E/g, ""),
    parsed = /(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(formatted),
    [, fMonth, fDay, fYear, fadOrBc, fHour, fMinute, fSecond] = parsed;
  return [fYear, fMonth, fDay, fadOrBc, fHour, fMinute, fSecond];
}

function partsOffset(dtf, date) {
  const formatted = dtf.formatToParts(date);
  const filled = [];
  for (let i = 0; i < formatted.length; i++) {
    const { type, value } = formatted[i];
    const pos = typeToPos[type];

    if (type === "era") {
      filled[pos] = value;
    } else if (!isUndefined(pos)) {
      filled[pos] = parseInt(value, 10);
    }
  }
  return filled;
}

let ianaZoneCache = {};
/**
 * A zone identified by an IANA identifier, like America/New_York
 * @implements {Zone}
 */
class IANAZone extends Zone {
  /**
   * @param {string} name - Zone name
   * @return {IANAZone}
   */
  static create(name) {
    if (!ianaZoneCache[name]) {
      ianaZoneCache[name] = new IANAZone(name);
    }
    return ianaZoneCache[name];
  }

  /**
   * Reset local caches. Should only be necessary in testing scenarios.
   * @return {void}
   */
  static resetCache() {
    ianaZoneCache = {};
    dtfCache = {};
  }

  /**
   * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
   * @param {string} s - The string to check validity on
   * @example IANAZone.isValidSpecifier("America/New_York") //=> true
   * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
   * @deprecated This method returns false for some valid IANA names. Use isValidZone instead.
   * @return {boolean}
   */
  static isValidSpecifier(s) {
    return this.isValidZone(s);
  }

  /**
   * Returns whether the provided string identifies a real zone
   * @param {string} zone - The string to check
   * @example IANAZone.isValidZone("America/New_York") //=> true
   * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
   * @example IANAZone.isValidZone("Sport~~blorp") //=> false
   * @return {boolean}
   */
  static isValidZone(zone) {
    if (!zone) {
      return false;
    }
    try {
      new Intl.DateTimeFormat("en-US", { timeZone: zone }).format();
      return true;
    } catch (e) {
      return false;
    }
  }

  constructor(name) {
    super();
    /** @private **/
    this.zoneName = name;
    /** @private **/
    this.valid = IANAZone.isValidZone(name);
  }

  /** @override **/
  get type() {
    return "iana";
  }

  /** @override **/
  get name() {
    return this.zoneName;
  }

  /** @override **/
  get isUniversal() {
    return false;
  }

  /** @override **/
  offsetName(ts, { format, locale }) {
    return parseZoneInfo(ts, format, locale, this.name);
  }

  /** @override **/
  formatOffset(ts, format) {
    return formatOffset(this.offset(ts), format);
  }

  /** @override **/
  offset(ts) {
    const date = new Date(ts);

    if (isNaN(date)) return NaN;

    const dtf = makeDTF(this.name);
    let [year, month, day, adOrBc, hour, minute, second] = dtf.formatToParts
      ? partsOffset(dtf, date)
      : hackyOffset(dtf, date);

    if (adOrBc === "BC") {
      year = -Math.abs(year) + 1;
    }

    // because we're using hour12 and https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat
    const adjustedHour = hour === 24 ? 0 : hour;

    const asUTC = objToLocalTS({
      year,
      month,
      day,
      hour: adjustedHour,
      minute,
      second,
      millisecond: 0,
    });

    let asTS = +date;
    const over = asTS % 1000;
    asTS -= over >= 0 ? over : 1000 + over;
    return (asUTC - asTS) / (60 * 1000);
  }

  /** @override **/
  equals(otherZone) {
    return otherZone.type === "iana" && otherZone.name === this.name;
  }

  /** @override **/
  get isValid() {
    return this.valid;
  }
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/locale.js






// todo - remap caching

let intlLFCache = {};
function getCachedLF(locString, opts = {}) {
  const key = JSON.stringify([locString, opts]);
  let dtf = intlLFCache[key];
  if (!dtf) {
    dtf = new Intl.ListFormat(locString, opts);
    intlLFCache[key] = dtf;
  }
  return dtf;
}

let intlDTCache = {};
function getCachedDTF(locString, opts = {}) {
  const key = JSON.stringify([locString, opts]);
  let dtf = intlDTCache[key];
  if (!dtf) {
    dtf = new Intl.DateTimeFormat(locString, opts);
    intlDTCache[key] = dtf;
  }
  return dtf;
}

let intlNumCache = {};
function getCachedINF(locString, opts = {}) {
  const key = JSON.stringify([locString, opts]);
  let inf = intlNumCache[key];
  if (!inf) {
    inf = new Intl.NumberFormat(locString, opts);
    intlNumCache[key] = inf;
  }
  return inf;
}

let intlRelCache = {};
function getCachedRTF(locString, opts = {}) {
  const { base, ...cacheKeyOpts } = opts; // exclude `base` from the options
  const key = JSON.stringify([locString, cacheKeyOpts]);
  let inf = intlRelCache[key];
  if (!inf) {
    inf = new Intl.RelativeTimeFormat(locString, opts);
    intlRelCache[key] = inf;
  }
  return inf;
}

let sysLocaleCache = null;
function systemLocale() {
  if (sysLocaleCache) {
    return sysLocaleCache;
  } else {
    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;
    return sysLocaleCache;
  }
}

let weekInfoCache = {};
function getCachedWeekInfo(locString) {
  let data = weekInfoCache[locString];
  if (!data) {
    const locale = new Intl.Locale(locString);
    // browsers currently implement this as a property, but spec says it should be a getter function
    data = "getWeekInfo" in locale ? locale.getWeekInfo() : locale.weekInfo;
    weekInfoCache[locString] = data;
  }
  return data;
}

function parseLocaleString(localeStr) {
  // I really want to avoid writing a BCP 47 parser
  // see, e.g. https://github.com/wooorm/bcp-47
  // Instead, we'll do this:

  // a) if the string has no -u extensions, just leave it alone
  // b) if it does, use Intl to resolve everything
  // c) if Intl fails, try again without the -u

  // private subtags and unicode subtags have ordering requirements,
  // and we're not properly parsing this, so just strip out the
  // private ones if they exist.
  const xIndex = localeStr.indexOf("-x-");
  if (xIndex !== -1) {
    localeStr = localeStr.substring(0, xIndex);
  }

  const uIndex = localeStr.indexOf("-u-");
  if (uIndex === -1) {
    return [localeStr];
  } else {
    let options;
    let selectedStr;
    try {
      options = getCachedDTF(localeStr).resolvedOptions();
      selectedStr = localeStr;
    } catch (e) {
      const smaller = localeStr.substring(0, uIndex);
      options = getCachedDTF(smaller).resolvedOptions();
      selectedStr = smaller;
    }

    const { numberingSystem, calendar } = options;
    return [selectedStr, numberingSystem, calendar];
  }
}

function intlConfigString(localeStr, numberingSystem, outputCalendar) {
  if (outputCalendar || numberingSystem) {
    if (!localeStr.includes("-u-")) {
      localeStr += "-u";
    }

    if (outputCalendar) {
      localeStr += `-ca-${outputCalendar}`;
    }

    if (numberingSystem) {
      localeStr += `-nu-${numberingSystem}`;
    }
    return localeStr;
  } else {
    return localeStr;
  }
}

function mapMonths(f) {
  const ms = [];
  for (let i = 1; i <= 12; i++) {
    const dt = DateTime.utc(2009, i, 1);
    ms.push(f(dt));
  }
  return ms;
}

function mapWeekdays(f) {
  const ms = [];
  for (let i = 1; i <= 7; i++) {
    const dt = DateTime.utc(2016, 11, 13 + i);
    ms.push(f(dt));
  }
  return ms;
}

function listStuff(loc, length, englishFn, intlFn) {
  const mode = loc.listingMode();

  if (mode === "error") {
    return null;
  } else if (mode === "en") {
    return englishFn(length);
  } else {
    return intlFn(length);
  }
}

function supportsFastNumbers(loc) {
  if (loc.numberingSystem && loc.numberingSystem !== "latn") {
    return false;
  } else {
    return (
      loc.numberingSystem === "latn" ||
      !loc.locale ||
      loc.locale.startsWith("en") ||
      new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn"
    );
  }
}

/**
 * @private
 */

class PolyNumberFormatter {
  constructor(intl, forceSimple, opts) {
    this.padTo = opts.padTo || 0;
    this.floor = opts.floor || false;

    const { padTo, floor, ...otherOpts } = opts;

    if (!forceSimple || Object.keys(otherOpts).length > 0) {
      const intlOpts = { useGrouping: false, ...opts };
      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;
      this.inf = getCachedINF(intl, intlOpts);
    }
  }

  format(i) {
    if (this.inf) {
      const fixed = this.floor ? Math.floor(i) : i;
      return this.inf.format(fixed);
    } else {
      // to match the browser's numberformatter defaults
      const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);
      return padStart(fixed, this.padTo);
    }
  }
}

/**
 * @private
 */

class PolyDateFormatter {
  constructor(dt, intl, opts) {
    this.opts = opts;
    this.originalZone = undefined;

    let z = undefined;
    if (this.opts.timeZone) {
      // Don't apply any workarounds if a timeZone is explicitly provided in opts
      this.dt = dt;
    } else if (dt.zone.type === "fixed") {
      // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.
      // That is why fixed-offset TZ is set to that unless it is:
      // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.
      // 2. Unsupported by the browser:
      //    - some do not support Etc/
      //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata
      const gmtOffset = -1 * (dt.offset / 60);
      const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;
      if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {
        z = offsetZ;
        this.dt = dt;
      } else {
        // Not all fixed-offset zones like Etc/+4:30 are present in tzdata so
        // we manually apply the offset and substitute the zone as needed.
        z = "UTC";
        this.dt = dt.offset === 0 ? dt : dt.setZone("UTC").plus({ minutes: dt.offset });
        this.originalZone = dt.zone;
      }
    } else if (dt.zone.type === "system") {
      this.dt = dt;
    } else if (dt.zone.type === "iana") {
      this.dt = dt;
      z = dt.zone.name;
    } else {
      // Custom zones can have any offset / offsetName so we just manually
      // apply the offset and substitute the zone as needed.
      z = "UTC";
      this.dt = dt.setZone("UTC").plus({ minutes: dt.offset });
      this.originalZone = dt.zone;
    }

    const intlOpts = { ...this.opts };
    intlOpts.timeZone = intlOpts.timeZone || z;
    this.dtf = getCachedDTF(intl, intlOpts);
  }

  format() {
    if (this.originalZone) {
      // If we have to substitute in the actual zone name, we have to use
      // formatToParts so that the timezone can be replaced.
      return this.formatToParts()
        .map(({ value }) => value)
        .join("");
    }
    return this.dtf.format(this.dt.toJSDate());
  }

  formatToParts() {
    const parts = this.dtf.formatToParts(this.dt.toJSDate());
    if (this.originalZone) {
      return parts.map((part) => {
        if (part.type === "timeZoneName") {
          const offsetName = this.originalZone.offsetName(this.dt.ts, {
            locale: this.dt.locale,
            format: this.opts.timeZoneName,
          });
          return {
            ...part,
            value: offsetName,
          };
        } else {
          return part;
        }
      });
    }
    return parts;
  }

  resolvedOptions() {
    return this.dtf.resolvedOptions();
  }
}

/**
 * @private
 */
class PolyRelFormatter {
  constructor(intl, isEnglish, opts) {
    this.opts = { style: "long", ...opts };
    if (!isEnglish && hasRelative()) {
      this.rtf = getCachedRTF(intl, opts);
    }
  }

  format(count, unit) {
    if (this.rtf) {
      return this.rtf.format(count, unit);
    } else {
      return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
    }
  }

  formatToParts(count, unit) {
    if (this.rtf) {
      return this.rtf.formatToParts(count, unit);
    } else {
      return [];
    }
  }
}

const fallbackWeekSettings = {
  firstDay: 1,
  minimalDays: 4,
  weekend: [6, 7],
};

/**
 * @private
 */

class Locale {
  static fromOpts(opts) {
    return Locale.create(
      opts.locale,
      opts.numberingSystem,
      opts.outputCalendar,
      opts.weekSettings,
      opts.defaultToEN
    );
  }

  static create(locale, numberingSystem, outputCalendar, weekSettings, defaultToEN = false) {
    const specifiedLocale = locale || Settings.defaultLocale;
    // the system locale is useful for human readable strings but annoying for parsing/formatting known formats
    const localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale());
    const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;
    const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
    const weekSettingsR = validateWeekSettings(weekSettings) || Settings.defaultWeekSettings;
    return new Locale(localeR, numberingSystemR, outputCalendarR, weekSettingsR, specifiedLocale);
  }

  static resetCache() {
    sysLocaleCache = null;
    intlDTCache = {};
    intlNumCache = {};
    intlRelCache = {};
  }

  static fromObject({ locale, numberingSystem, outputCalendar, weekSettings } = {}) {
    return Locale.create(locale, numberingSystem, outputCalendar, weekSettings);
  }

  constructor(locale, numbering, outputCalendar, weekSettings, specifiedLocale) {
    const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);

    this.locale = parsedLocale;
    this.numberingSystem = numbering || parsedNumberingSystem || null;
    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
    this.weekSettings = weekSettings;
    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);

    this.weekdaysCache = { format: {}, standalone: {} };
    this.monthsCache = { format: {}, standalone: {} };
    this.meridiemCache = null;
    this.eraCache = {};

    this.specifiedLocale = specifiedLocale;
    this.fastNumbersCached = null;
  }

  get fastNumbers() {
    if (this.fastNumbersCached == null) {
      this.fastNumbersCached = supportsFastNumbers(this);
    }

    return this.fastNumbersCached;
  }

  listingMode() {
    const isActuallyEn = this.isEnglish();
    const hasNoWeirdness =
      (this.numberingSystem === null || this.numberingSystem === "latn") &&
      (this.outputCalendar === null || this.outputCalendar === "gregory");
    return isActuallyEn && hasNoWeirdness ? "en" : "intl";
  }

  clone(alts) {
    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
      return this;
    } else {
      return Locale.create(
        alts.locale || this.specifiedLocale,
        alts.numberingSystem || this.numberingSystem,
        alts.outputCalendar || this.outputCalendar,
        validateWeekSettings(alts.weekSettings) || this.weekSettings,
        alts.defaultToEN || false
      );
    }
  }

  redefaultToEN(alts = {}) {
    return this.clone({ ...alts, defaultToEN: true });
  }

  redefaultToSystem(alts = {}) {
    return this.clone({ ...alts, defaultToEN: false });
  }

  months(length, format = false) {
    return listStuff(this, length, months, () => {
      const intl = format ? { month: length, day: "numeric" } : { month: length },
        formatStr = format ? "format" : "standalone";
      if (!this.monthsCache[formatStr][length]) {
        this.monthsCache[formatStr][length] = mapMonths((dt) => this.extract(dt, intl, "month"));
      }
      return this.monthsCache[formatStr][length];
    });
  }

  weekdays(length, format = false) {
    return listStuff(this, length, weekdays, () => {
      const intl = format
          ? { weekday: length, year: "numeric", month: "long", day: "numeric" }
          : { weekday: length },
        formatStr = format ? "format" : "standalone";
      if (!this.weekdaysCache[formatStr][length]) {
        this.weekdaysCache[formatStr][length] = mapWeekdays((dt) =>
          this.extract(dt, intl, "weekday")
        );
      }
      return this.weekdaysCache[formatStr][length];
    });
  }

  meridiems() {
    return listStuff(
      this,
      undefined,
      () => meridiems,
      () => {
        // In theory there could be aribitrary day periods. We're gonna assume there are exactly two
        // for AM and PM. This is probably wrong, but it's makes parsing way easier.
        if (!this.meridiemCache) {
          const intl = { hour: "numeric", hourCycle: "h12" };
          this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(
            (dt) => this.extract(dt, intl, "dayperiod")
          );
        }

        return this.meridiemCache;
      }
    );
  }

  eras(length) {
    return listStuff(this, length, eras, () => {
      const intl = { era: length };

      // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates
      // to definitely enumerate them.
      if (!this.eraCache[length]) {
        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map((dt) =>
          this.extract(dt, intl, "era")
        );
      }

      return this.eraCache[length];
    });
  }

  extract(dt, intlOpts, field) {
    const df = this.dtFormatter(dt, intlOpts),
      results = df.formatToParts(),
      matching = results.find((m) => m.type.toLowerCase() === field);
    return matching ? matching.value : null;
  }

  numberFormatter(opts = {}) {
    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)
    // (in contrast, the rest of the condition is used heavily)
    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
  }

  dtFormatter(dt, intlOpts = {}) {
    return new PolyDateFormatter(dt, this.intl, intlOpts);
  }

  relFormatter(opts = {}) {
    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
  }

  listFormatter(opts = {}) {
    return getCachedLF(this.intl, opts);
  }

  isEnglish() {
    return (
      this.locale === "en" ||
      this.locale.toLowerCase() === "en-us" ||
      new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us")
    );
  }

  getWeekSettings() {
    if (this.weekSettings) {
      return this.weekSettings;
    } else if (!hasLocaleWeekInfo()) {
      return fallbackWeekSettings;
    } else {
      return getCachedWeekInfo(this.locale);
    }
  }

  getStartOfWeek() {
    return this.getWeekSettings().firstDay;
  }

  getMinDaysInFirstWeek() {
    return this.getWeekSettings().minimalDays;
  }

  getWeekendDays() {
    return this.getWeekSettings().weekend;
  }

  equals(other) {
    return (
      this.locale === other.locale &&
      this.numberingSystem === other.numberingSystem &&
      this.outputCalendar === other.outputCalendar
    );
  }
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/zones/fixedOffsetZone.js



let fixedOffsetZone_singleton = null;

/**
 * A zone with a fixed offset (meaning no DST)
 * @implements {Zone}
 */
class FixedOffsetZone extends Zone {
  /**
   * Get a singleton instance of UTC
   * @return {FixedOffsetZone}
   */
  static get utcInstance() {
    if (fixedOffsetZone_singleton === null) {
      fixedOffsetZone_singleton = new FixedOffsetZone(0);
    }
    return fixedOffsetZone_singleton;
  }

  /**
   * Get an instance with a specified offset
   * @param {number} offset - The offset in minutes
   * @return {FixedOffsetZone}
   */
  static instance(offset) {
    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);
  }

  /**
   * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
   * @param {string} s - The offset string to parse
   * @example FixedOffsetZone.parseSpecifier("UTC+6")
   * @example FixedOffsetZone.parseSpecifier("UTC+06")
   * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
   * @return {FixedOffsetZone}
   */
  static parseSpecifier(s) {
    if (s) {
      const r = s.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
      if (r) {
        return new FixedOffsetZone(signedOffset(r[1], r[2]));
      }
    }
    return null;
  }

  constructor(offset) {
    super();
    /** @private **/
    this.fixed = offset;
  }

  /** @override **/
  get type() {
    return "fixed";
  }

  /** @override **/
  get name() {
    return this.fixed === 0 ? "UTC" : `UTC${formatOffset(this.fixed, "narrow")}`;
  }

  get ianaName() {
    if (this.fixed === 0) {
      return "Etc/UTC";
    } else {
      return `Etc/GMT${formatOffset(-this.fixed, "narrow")}`;
    }
  }

  /** @override **/
  offsetName() {
    return this.name;
  }

  /** @override **/
  formatOffset(ts, format) {
    return formatOffset(this.fixed, format);
  }

  /** @override **/
  get isUniversal() {
    return true;
  }

  /** @override **/
  offset() {
    return this.fixed;
  }

  /** @override **/
  equals(otherZone) {
    return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
  }

  /** @override **/
  get isValid() {
    return true;
  }
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/zones/invalidZone.js


/**
 * A zone that failed to parse. You should never need to instantiate this.
 * @implements {Zone}
 */
class InvalidZone extends Zone {
  constructor(zoneName) {
    super();
    /**  @private */
    this.zoneName = zoneName;
  }

  /** @override **/
  get type() {
    return "invalid";
  }

  /** @override **/
  get name() {
    return this.zoneName;
  }

  /** @override **/
  get isUniversal() {
    return false;
  }

  /** @override **/
  offsetName() {
    return null;
  }

  /** @override **/
  formatOffset() {
    return "";
  }

  /** @override **/
  offset() {
    return NaN;
  }

  /** @override **/
  equals() {
    return false;
  }

  /** @override **/
  get isValid() {
    return false;
  }
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/zoneUtil.js
/**
 * @private
 */









function normalizeZone(input, defaultZone) {
  let offset;
  if (isUndefined(input) || input === null) {
    return defaultZone;
  } else if (input instanceof Zone) {
    return input;
  } else if (isString(input)) {
    const lowered = input.toLowerCase();
    if (lowered === "default") return defaultZone;
    else if (lowered === "local" || lowered === "system") return SystemZone.instance;
    else if (lowered === "utc" || lowered === "gmt") return FixedOffsetZone.utcInstance;
    else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);
  } else if (isNumber(input)) {
    return FixedOffsetZone.instance(input);
  } else if (typeof input === "object" && "offset" in input && typeof input.offset === "function") {
    // This is dumb, but the instanceof check above doesn't seem to really work
    // so we're duck checking it
    return input;
  } else {
    return new InvalidZone(input);
  }
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/settings.js







let now = () => Date.now(),
  defaultZone = "system",
  defaultLocale = null,
  defaultNumberingSystem = null,
  defaultOutputCalendar = null,
  twoDigitCutoffYear = 60,
  throwOnInvalid,
  defaultWeekSettings = null;

/**
 * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.
 */
class Settings {
  /**
   * Get the callback for returning the current timestamp.
   * @type {function}
   */
  static get now() {
    return now;
  }

  /**
   * Set the callback for returning the current timestamp.
   * The function should return a number, which will be interpreted as an Epoch millisecond count
   * @type {function}
   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
   */
  static set now(n) {
    now = n;
  }

  /**
   * Set the default time zone to create DateTimes in. Does not affect existing instances.
   * Use the value "system" to reset this value to the system's time zone.
   * @type {string}
   */
  static set defaultZone(zone) {
    defaultZone = zone;
  }

  /**
   * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.
   * The default value is the system's time zone (the one set on the machine that runs this code).
   * @type {Zone}
   */
  static get defaultZone() {
    return normalizeZone(defaultZone, SystemZone.instance);
  }

  /**
   * Get the default locale to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */
  static get defaultLocale() {
    return defaultLocale;
  }

  /**
   * Set the default locale to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */
  static set defaultLocale(locale) {
    defaultLocale = locale;
  }

  /**
   * Get the default numbering system to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */
  static get defaultNumberingSystem() {
    return defaultNumberingSystem;
  }

  /**
   * Set the default numbering system to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */
  static set defaultNumberingSystem(numberingSystem) {
    defaultNumberingSystem = numberingSystem;
  }

  /**
   * Get the default output calendar to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */
  static get defaultOutputCalendar() {
    return defaultOutputCalendar;
  }

  /**
   * Set the default output calendar to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */
  static set defaultOutputCalendar(outputCalendar) {
    defaultOutputCalendar = outputCalendar;
  }

  /**
   * @typedef {Object} WeekSettings
   * @property {number} firstDay
   * @property {number} minimalDays
   * @property {number[]} weekend
   */

  /**
   * @return {WeekSettings|null}
   */
  static get defaultWeekSettings() {
    return defaultWeekSettings;
  }

  /**
   * Allows overriding the default locale week settings, i.e. the start of the week, the weekend and
   * how many days are required in the first week of a year.
   * Does not affect existing instances.
   *
   * @param {WeekSettings|null} weekSettings
   */
  static set defaultWeekSettings(weekSettings) {
    defaultWeekSettings = validateWeekSettings(weekSettings);
  }

  /**
   * Get the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.
   * @type {number}
   */
  static get twoDigitCutoffYear() {
    return twoDigitCutoffYear;
  }

  /**
   * Set the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.
   * @type {number}
   * @example Settings.twoDigitCutoffYear = 0 // cut-off year is 0, so all 'yy' are interpreted as current century
   * @example Settings.twoDigitCutoffYear = 50 // '49' -> 1949; '50' -> 2050
   * @example Settings.twoDigitCutoffYear = 1950 // interpreted as 50
   * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpreted as 50
   */
  static set twoDigitCutoffYear(cutoffYear) {
    twoDigitCutoffYear = cutoffYear % 100;
  }

  /**
   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
   * @type {boolean}
   */
  static get throwOnInvalid() {
    return throwOnInvalid;
  }

  /**
   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
   * @type {boolean}
   */
  static set throwOnInvalid(t) {
    throwOnInvalid = t;
  }

  /**
   * Reset Luxon's global caches. Should only be necessary in testing scenarios.
   * @return {void}
   */
  static resetCaches() {
    Locale.resetCache();
    IANAZone.resetCache();
  }
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/invalid.js
class Invalid {
  constructor(reason, explanation) {
    this.reason = reason;
    this.explanation = explanation;
  }

  toMessage() {
    if (this.explanation) {
      return `${this.reason}: ${this.explanation}`;
    } else {
      return this.reason;
    }
  }
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/conversions.js




const nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
  leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];

function unitOutOfRange(unit, value) {
  return new Invalid(
    "unit out of range",
    `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`
  );
}

function dayOfWeek(year, month, day) {
  const d = new Date(Date.UTC(year, month - 1, day));

  if (year < 100 && year >= 0) {
    d.setUTCFullYear(d.getUTCFullYear() - 1900);
  }

  const js = d.getUTCDay();

  return js === 0 ? 7 : js;
}

function computeOrdinal(year, month, day) {
  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
}

function uncomputeOrdinal(year, ordinal) {
  const table = isLeapYear(year) ? leapLadder : nonLeapLadder,
    month0 = table.findIndex((i) => i < ordinal),
    day = ordinal - table[month0];
  return { month: month0 + 1, day };
}

function isoWeekdayToLocal(isoWeekday, startOfWeek) {
  return ((isoWeekday - startOfWeek + 7) % 7) + 1;
}

/**
 * @private
 */

function gregorianToWeek(gregObj, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const { year, month, day } = gregObj,
    ordinal = computeOrdinal(year, month, day),
    weekday = isoWeekdayToLocal(dayOfWeek(year, month, day), startOfWeek);

  let weekNumber = Math.floor((ordinal - weekday + 14 - minDaysInFirstWeek) / 7),
    weekYear;

  if (weekNumber < 1) {
    weekYear = year - 1;
    weekNumber = weeksInWeekYear(weekYear, minDaysInFirstWeek, startOfWeek);
  } else if (weekNumber > weeksInWeekYear(year, minDaysInFirstWeek, startOfWeek)) {
    weekYear = year + 1;
    weekNumber = 1;
  } else {
    weekYear = year;
  }

  return { weekYear, weekNumber, weekday, ...timeObject(gregObj) };
}

function weekToGregorian(weekData, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const { weekYear, weekNumber, weekday } = weekData,
    weekdayOfJan4 = isoWeekdayToLocal(dayOfWeek(weekYear, 1, minDaysInFirstWeek), startOfWeek),
    yearInDays = daysInYear(weekYear);

  let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 7 + minDaysInFirstWeek,
    year;

  if (ordinal < 1) {
    year = weekYear - 1;
    ordinal += daysInYear(year);
  } else if (ordinal > yearInDays) {
    year = weekYear + 1;
    ordinal -= daysInYear(weekYear);
  } else {
    year = weekYear;
  }

  const { month, day } = uncomputeOrdinal(year, ordinal);
  return { year, month, day, ...timeObject(weekData) };
}

function gregorianToOrdinal(gregData) {
  const { year, month, day } = gregData;
  const ordinal = computeOrdinal(year, month, day);
  return { year, ordinal, ...timeObject(gregData) };
}

function ordinalToGregorian(ordinalData) {
  const { year, ordinal } = ordinalData;
  const { month, day } = uncomputeOrdinal(year, ordinal);
  return { year, month, day, ...timeObject(ordinalData) };
}

/**
 * Check if local week units like localWeekday are used in obj.
 * If so, validates that they are not mixed with ISO week units and then copies them to the normal week unit properties.
 * Modifies obj in-place!
 * @param obj the object values
 */
function usesLocalWeekValues(obj, loc) {
  const hasLocaleWeekData =
    !isUndefined(obj.localWeekday) ||
    !isUndefined(obj.localWeekNumber) ||
    !isUndefined(obj.localWeekYear);
  if (hasLocaleWeekData) {
    const hasIsoWeekData =
      !isUndefined(obj.weekday) || !isUndefined(obj.weekNumber) || !isUndefined(obj.weekYear);

    if (hasIsoWeekData) {
      throw new ConflictingSpecificationError(
        "Cannot mix locale-based week fields with ISO-based week fields"
      );
    }
    if (!isUndefined(obj.localWeekday)) obj.weekday = obj.localWeekday;
    if (!isUndefined(obj.localWeekNumber)) obj.weekNumber = obj.localWeekNumber;
    if (!isUndefined(obj.localWeekYear)) obj.weekYear = obj.localWeekYear;
    delete obj.localWeekday;
    delete obj.localWeekNumber;
    delete obj.localWeekYear;
    return {
      minDaysInFirstWeek: loc.getMinDaysInFirstWeek(),
      startOfWeek: loc.getStartOfWeek(),
    };
  } else {
    return { minDaysInFirstWeek: 4, startOfWeek: 1 };
  }
}

function hasInvalidWeekData(obj, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const validYear = isInteger(obj.weekYear),
    validWeek = integerBetween(
      obj.weekNumber,
      1,
      weeksInWeekYear(obj.weekYear, minDaysInFirstWeek, startOfWeek)
    ),
    validWeekday = integerBetween(obj.weekday, 1, 7);

  if (!validYear) {
    return unitOutOfRange("weekYear", obj.weekYear);
  } else if (!validWeek) {
    return unitOutOfRange("week", obj.weekNumber);
  } else if (!validWeekday) {
    return unitOutOfRange("weekday", obj.weekday);
  } else return false;
}

function hasInvalidOrdinalData(obj) {
  const validYear = isInteger(obj.year),
    validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));

  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validOrdinal) {
    return unitOutOfRange("ordinal", obj.ordinal);
  } else return false;
}

function hasInvalidGregorianData(obj) {
  const validYear = isInteger(obj.year),
    validMonth = integerBetween(obj.month, 1, 12),
    validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));

  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validMonth) {
    return unitOutOfRange("month", obj.month);
  } else if (!validDay) {
    return unitOutOfRange("day", obj.day);
  } else return false;
}

function hasInvalidTimeData(obj) {
  const { hour, minute, second, millisecond } = obj;
  const validHour =
      integerBetween(hour, 0, 23) ||
      (hour === 24 && minute === 0 && second === 0 && millisecond === 0),
    validMinute = integerBetween(minute, 0, 59),
    validSecond = integerBetween(second, 0, 59),
    validMillisecond = integerBetween(millisecond, 0, 999);

  if (!validHour) {
    return unitOutOfRange("hour", hour);
  } else if (!validMinute) {
    return unitOutOfRange("minute", minute);
  } else if (!validSecond) {
    return unitOutOfRange("second", second);
  } else if (!validMillisecond) {
    return unitOutOfRange("millisecond", millisecond);
  } else return false;
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/util.js
/*
  This is just a junk drawer, containing anything used across multiple classes.
  Because Luxon is small(ish), this should stay small and we won't worry about splitting
  it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.
*/





/**
 * @private
 */

// TYPES

function isUndefined(o) {
  return typeof o === "undefined";
}

function isNumber(o) {
  return typeof o === "number";
}

function isInteger(o) {
  return typeof o === "number" && o % 1 === 0;
}

function isString(o) {
  return typeof o === "string";
}

function isDate(o) {
  return Object.prototype.toString.call(o) === "[object Date]";
}

// CAPABILITIES

function hasRelative() {
  try {
    return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
  } catch (e) {
    return false;
  }
}

function hasLocaleWeekInfo() {
  try {
    return (
      typeof Intl !== "undefined" &&
      !!Intl.Locale &&
      ("weekInfo" in Intl.Locale.prototype || "getWeekInfo" in Intl.Locale.prototype)
    );
  } catch (e) {
    return false;
  }
}

// OBJECTS AND ARRAYS

function maybeArray(thing) {
  return Array.isArray(thing) ? thing : [thing];
}

function bestBy(arr, by, compare) {
  if (arr.length === 0) {
    return undefined;
  }
  return arr.reduce((best, next) => {
    const pair = [by(next), next];
    if (!best) {
      return pair;
    } else if (compare(best[0], pair[0]) === best[0]) {
      return best;
    } else {
      return pair;
    }
  }, null)[1];
}

function util_pick(obj, keys) {
  return keys.reduce((a, k) => {
    a[k] = obj[k];
    return a;
  }, {});
}

function util_hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

function validateWeekSettings(settings) {
  if (settings == null) {
    return null;
  } else if (typeof settings !== "object") {
    throw new InvalidArgumentError("Week settings must be an object");
  } else {
    if (
      !integerBetween(settings.firstDay, 1, 7) ||
      !integerBetween(settings.minimalDays, 1, 7) ||
      !Array.isArray(settings.weekend) ||
      settings.weekend.some((v) => !integerBetween(v, 1, 7))
    ) {
      throw new InvalidArgumentError("Invalid week settings");
    }
    return {
      firstDay: settings.firstDay,
      minimalDays: settings.minimalDays,
      weekend: Array.from(settings.weekend),
    };
  }
}

// NUMBERS AND STRINGS

function integerBetween(thing, bottom, top) {
  return isInteger(thing) && thing >= bottom && thing <= top;
}

// x % n but takes the sign of n instead of x
function floorMod(x, n) {
  return x - n * Math.floor(x / n);
}

function padStart(input, n = 2) {
  const isNeg = input < 0;
  let padded;
  if (isNeg) {
    padded = "-" + ("" + -input).padStart(n, "0");
  } else {
    padded = ("" + input).padStart(n, "0");
  }
  return padded;
}

function parseInteger(string) {
  if (isUndefined(string) || string === null || string === "") {
    return undefined;
  } else {
    return parseInt(string, 10);
  }
}

function parseFloating(string) {
  if (isUndefined(string) || string === null || string === "") {
    return undefined;
  } else {
    return parseFloat(string);
  }
}

function parseMillis(fraction) {
  // Return undefined (instead of 0) in these cases, where fraction is not set
  if (isUndefined(fraction) || fraction === null || fraction === "") {
    return undefined;
  } else {
    const f = parseFloat("0." + fraction) * 1000;
    return Math.floor(f);
  }
}

function roundTo(number, digits, towardZero = false) {
  const factor = 10 ** digits,
    rounder = towardZero ? Math.trunc : Math.round;
  return rounder(number * factor) / factor;
}

// DATE BASICS

function isLeapYear(year) {
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}

function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}

function daysInMonth(year, month) {
  const modMonth = floorMod(month - 1, 12) + 1,
    modYear = year + (month - modMonth) / 12;

  if (modMonth === 2) {
    return isLeapYear(modYear) ? 29 : 28;
  } else {
    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
  }
}

// convert a calendar object to a local timestamp (epoch, but with the offset baked in)
function objToLocalTS(obj) {
  let d = Date.UTC(
    obj.year,
    obj.month - 1,
    obj.day,
    obj.hour,
    obj.minute,
    obj.second,
    obj.millisecond
  );

  // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that
  if (obj.year < 100 && obj.year >= 0) {
    d = new Date(d);
    // set the month and day again, this is necessary because year 2000 is a leap year, but year 100 is not
    // so if obj.year is in 99, but obj.day makes it roll over into year 100,
    // the calculations done by Date.UTC are using year 2000 - which is incorrect
    d.setUTCFullYear(obj.year, obj.month - 1, obj.day);
  }
  return +d;
}

// adapted from moment.js: https://github.com/moment/moment/blob/000ac1800e620f770f4eb31b5ae908f6167b0ab2/src/lib/units/week-calendar-utils.js
function firstWeekOffset(year, minDaysInFirstWeek, startOfWeek) {
  const fwdlw = isoWeekdayToLocal(dayOfWeek(year, 1, minDaysInFirstWeek), startOfWeek);
  return -fwdlw + minDaysInFirstWeek - 1;
}

function weeksInWeekYear(weekYear, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const weekOffset = firstWeekOffset(weekYear, minDaysInFirstWeek, startOfWeek);
  const weekOffsetNext = firstWeekOffset(weekYear + 1, minDaysInFirstWeek, startOfWeek);
  return (daysInYear(weekYear) - weekOffset + weekOffsetNext) / 7;
}

function untruncateYear(year) {
  if (year > 99) {
    return year;
  } else return year > Settings.twoDigitCutoffYear ? 1900 + year : 2000 + year;
}

// PARSING

function parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {
  const date = new Date(ts),
    intlOpts = {
      hourCycle: "h23",
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
    };

  if (timeZone) {
    intlOpts.timeZone = timeZone;
  }

  const modified = { timeZoneName: offsetFormat, ...intlOpts };

  const parsed = new Intl.DateTimeFormat(locale, modified)
    .formatToParts(date)
    .find((m) => m.type.toLowerCase() === "timezonename");
  return parsed ? parsed.value : null;
}

// signedOffset('-5', '30') -> -330
function signedOffset(offHourStr, offMinuteStr) {
  let offHour = parseInt(offHourStr, 10);

  // don't || this because we want to preserve -0
  if (Number.isNaN(offHour)) {
    offHour = 0;
  }

  const offMin = parseInt(offMinuteStr, 10) || 0,
    offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
  return offHour * 60 + offMinSigned;
}

// COERCION

function asNumber(value) {
  const numericValue = Number(value);
  if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue))
    throw new InvalidArgumentError(`Invalid unit value ${value}`);
  return numericValue;
}

function normalizeObject(obj, normalizer) {
  const normalized = {};
  for (const u in obj) {
    if (util_hasOwnProperty(obj, u)) {
      const v = obj[u];
      if (v === undefined || v === null) continue;
      normalized[normalizer(u)] = asNumber(v);
    }
  }
  return normalized;
}

function formatOffset(offset, format) {
  const hours = Math.trunc(Math.abs(offset / 60)),
    minutes = Math.trunc(Math.abs(offset % 60)),
    sign = offset >= 0 ? "+" : "-";

  switch (format) {
    case "short":
      return `${sign}${padStart(hours, 2)}:${padStart(minutes, 2)}`;
    case "narrow":
      return `${sign}${hours}${minutes > 0 ? `:${minutes}` : ""}`;
    case "techie":
      return `${sign}${padStart(hours, 2)}${padStart(minutes, 2)}`;
    default:
      throw new RangeError(`Value format ${format} is out of range for property format`);
  }
}

function timeObject(obj) {
  return util_pick(obj, ["hour", "minute", "second", "millisecond"]);
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/english.js



function stringify(obj) {
  return JSON.stringify(obj, Object.keys(obj).sort());
}

/**
 * @private
 */

const monthsLong = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];

const monthsShort = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec",
];

const monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];

function months(length) {
  switch (length) {
    case "narrow":
      return [...monthsNarrow];
    case "short":
      return [...monthsShort];
    case "long":
      return [...monthsLong];
    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
    case "2-digit":
      return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
    default:
      return null;
  }
}

const weekdaysLong = [
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday",
  "Sunday",
];

const weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];

const weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];

function weekdays(length) {
  switch (length) {
    case "narrow":
      return [...weekdaysNarrow];
    case "short":
      return [...weekdaysShort];
    case "long":
      return [...weekdaysLong];
    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7"];
    default:
      return null;
  }
}

const meridiems = ["AM", "PM"];

const erasLong = ["Before Christ", "Anno Domini"];

const erasShort = ["BC", "AD"];

const erasNarrow = ["B", "A"];

function eras(length) {
  switch (length) {
    case "narrow":
      return [...erasNarrow];
    case "short":
      return [...erasShort];
    case "long":
      return [...erasLong];
    default:
      return null;
  }
}

function meridiemForDateTime(dt) {
  return meridiems[dt.hour < 12 ? 0 : 1];
}

function weekdayForDateTime(dt, length) {
  return weekdays(length)[dt.weekday - 1];
}

function monthForDateTime(dt, length) {
  return months(length)[dt.month - 1];
}

function eraForDateTime(dt, length) {
  return eras(length)[dt.year < 0 ? 0 : 1];
}

function formatRelativeTime(unit, count, numeric = "always", narrow = false) {
  const units = {
    years: ["year", "yr."],
    quarters: ["quarter", "qtr."],
    months: ["month", "mo."],
    weeks: ["week", "wk."],
    days: ["day", "day", "days"],
    hours: ["hour", "hr."],
    minutes: ["minute", "min."],
    seconds: ["second", "sec."],
  };

  const lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;

  if (numeric === "auto" && lastable) {
    const isDay = unit === "days";
    switch (count) {
      case 1:
        return isDay ? "tomorrow" : `next ${units[unit][0]}`;
      case -1:
        return isDay ? "yesterday" : `last ${units[unit][0]}`;
      case 0:
        return isDay ? "today" : `this ${units[unit][0]}`;
      default: // fall through
    }
  }

  const isInPast = Object.is(count, -0) || count < 0,
    fmtValue = Math.abs(count),
    singular = fmtValue === 1,
    lilUnits = units[unit],
    fmtUnit = narrow
      ? singular
        ? lilUnits[1]
        : lilUnits[2] || lilUnits[1]
      : singular
      ? units[unit][0]
      : unit;
  return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;
}

function formatString(knownFormat) {
  // these all have the offsets removed because we don't have access to them
  // without all the intl stuff this is backfilling
  const filtered = pick(knownFormat, [
      "weekday",
      "era",
      "year",
      "month",
      "day",
      "hour",
      "minute",
      "second",
      "timeZoneName",
      "hourCycle",
    ]),
    key = stringify(filtered),
    dateTimeHuge = "EEEE, LLLL d, yyyy, h:mm a";
  switch (key) {
    case stringify(Formats.DATE_SHORT):
      return "M/d/yyyy";
    case stringify(Formats.DATE_MED):
      return "LLL d, yyyy";
    case stringify(Formats.DATE_MED_WITH_WEEKDAY):
      return "EEE, LLL d, yyyy";
    case stringify(Formats.DATE_FULL):
      return "LLLL d, yyyy";
    case stringify(Formats.DATE_HUGE):
      return "EEEE, LLLL d, yyyy";
    case stringify(Formats.TIME_SIMPLE):
      return "h:mm a";
    case stringify(Formats.TIME_WITH_SECONDS):
      return "h:mm:ss a";
    case stringify(Formats.TIME_WITH_SHORT_OFFSET):
      return "h:mm a";
    case stringify(Formats.TIME_WITH_LONG_OFFSET):
      return "h:mm a";
    case stringify(Formats.TIME_24_SIMPLE):
      return "HH:mm";
    case stringify(Formats.TIME_24_WITH_SECONDS):
      return "HH:mm:ss";
    case stringify(Formats.TIME_24_WITH_SHORT_OFFSET):
      return "HH:mm";
    case stringify(Formats.TIME_24_WITH_LONG_OFFSET):
      return "HH:mm";
    case stringify(Formats.DATETIME_SHORT):
      return "M/d/yyyy, h:mm a";
    case stringify(Formats.DATETIME_MED):
      return "LLL d, yyyy, h:mm a";
    case stringify(Formats.DATETIME_FULL):
      return "LLLL d, yyyy, h:mm a";
    case stringify(Formats.DATETIME_HUGE):
      return dateTimeHuge;
    case stringify(Formats.DATETIME_SHORT_WITH_SECONDS):
      return "M/d/yyyy, h:mm:ss a";
    case stringify(Formats.DATETIME_MED_WITH_SECONDS):
      return "LLL d, yyyy, h:mm:ss a";
    case stringify(Formats.DATETIME_MED_WITH_WEEKDAY):
      return "EEE, d LLL yyyy, h:mm a";
    case stringify(Formats.DATETIME_FULL_WITH_SECONDS):
      return "LLLL d, yyyy, h:mm:ss a";
    case stringify(Formats.DATETIME_HUGE_WITH_SECONDS):
      return "EEEE, LLLL d, yyyy, h:mm:ss a";
    default:
      return dateTimeHuge;
  }
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/formatter.js




function stringifyTokens(splits, tokenToString) {
  let s = "";
  for (const token of splits) {
    if (token.literal) {
      s += token.val;
    } else {
      s += tokenToString(token.val);
    }
  }
  return s;
}

const macroTokenToFormatOpts = {
  D: DATE_SHORT,
  DD: DATE_MED,
  DDD: DATE_FULL,
  DDDD: DATE_HUGE,
  t: TIME_SIMPLE,
  tt: TIME_WITH_SECONDS,
  ttt: TIME_WITH_SHORT_OFFSET,
  tttt: TIME_WITH_LONG_OFFSET,
  T: TIME_24_SIMPLE,
  TT: TIME_24_WITH_SECONDS,
  TTT: TIME_24_WITH_SHORT_OFFSET,
  TTTT: TIME_24_WITH_LONG_OFFSET,
  f: DATETIME_SHORT,
  ff: DATETIME_MED,
  fff: DATETIME_FULL,
  ffff: DATETIME_HUGE,
  F: DATETIME_SHORT_WITH_SECONDS,
  FF: DATETIME_MED_WITH_SECONDS,
  FFF: DATETIME_FULL_WITH_SECONDS,
  FFFF: DATETIME_HUGE_WITH_SECONDS,
};

/**
 * @private
 */

class Formatter {
  static create(locale, opts = {}) {
    return new Formatter(locale, opts);
  }

  static parseFormat(fmt) {
    // white-space is always considered a literal in user-provided formats
    // the " " token has a special meaning (see unitForToken)

    let current = null,
      currentFull = "",
      bracketed = false;
    const splits = [];
    for (let i = 0; i < fmt.length; i++) {
      const c = fmt.charAt(i);
      if (c === "'") {
        if (currentFull.length > 0) {
          splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
        }
        current = null;
        currentFull = "";
        bracketed = !bracketed;
      } else if (bracketed) {
        currentFull += c;
      } else if (c === current) {
        currentFull += c;
      } else {
        if (currentFull.length > 0) {
          splits.push({ literal: /^\s+$/.test(currentFull), val: currentFull });
        }
        currentFull = c;
        current = c;
      }
    }

    if (currentFull.length > 0) {
      splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
    }

    return splits;
  }

  static macroTokenToFormatOpts(token) {
    return macroTokenToFormatOpts[token];
  }

  constructor(locale, formatOpts) {
    this.opts = formatOpts;
    this.loc = locale;
    this.systemLoc = null;
  }

  formatWithSystemDefault(dt, opts) {
    if (this.systemLoc === null) {
      this.systemLoc = this.loc.redefaultToSystem();
    }
    const df = this.systemLoc.dtFormatter(dt, { ...this.opts, ...opts });
    return df.format();
  }

  dtFormatter(dt, opts = {}) {
    return this.loc.dtFormatter(dt, { ...this.opts, ...opts });
  }

  formatDateTime(dt, opts) {
    return this.dtFormatter(dt, opts).format();
  }

  formatDateTimeParts(dt, opts) {
    return this.dtFormatter(dt, opts).formatToParts();
  }

  formatInterval(interval, opts) {
    const df = this.dtFormatter(interval.start, opts);
    return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());
  }

  resolvedOptions(dt, opts) {
    return this.dtFormatter(dt, opts).resolvedOptions();
  }

  num(n, p = 0) {
    // we get some perf out of doing this here, annoyingly
    if (this.opts.forceSimple) {
      return padStart(n, p);
    }

    const opts = { ...this.opts };

    if (p > 0) {
      opts.padTo = p;
    }

    return this.loc.numberFormatter(opts).format(n);
  }

  formatDateTimeFromString(dt, fmt) {
    const knownEnglish = this.loc.listingMode() === "en",
      useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory",
      string = (opts, extract) => this.loc.extract(dt, opts, extract),
      formatOffset = (opts) => {
        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
          return "Z";
        }

        return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
      },
      meridiem = () =>
        knownEnglish
          ? meridiemForDateTime(dt)
          : string({ hour: "numeric", hourCycle: "h12" }, "dayperiod"),
      month = (length, standalone) =>
        knownEnglish
          ? monthForDateTime(dt, length)
          : string(standalone ? { month: length } : { month: length, day: "numeric" }, "month"),
      weekday = (length, standalone) =>
        knownEnglish
          ? weekdayForDateTime(dt, length)
          : string(
              standalone ? { weekday: length } : { weekday: length, month: "long", day: "numeric" },
              "weekday"
            ),
      maybeMacro = (token) => {
        const formatOpts = Formatter.macroTokenToFormatOpts(token);
        if (formatOpts) {
          return this.formatWithSystemDefault(dt, formatOpts);
        } else {
          return token;
        }
      },
      era = (length) =>
        knownEnglish ? eraForDateTime(dt, length) : string({ era: length }, "era"),
      tokenToString = (token) => {
        // Where possible: https://cldr.unicode.org/translation/date-time/date-time-symbols
        switch (token) {
          // ms
          case "S":
            return this.num(dt.millisecond);
          case "u":
          // falls through
          case "SSS":
            return this.num(dt.millisecond, 3);
          // seconds
          case "s":
            return this.num(dt.second);
          case "ss":
            return this.num(dt.second, 2);
          // fractional seconds
          case "uu":
            return this.num(Math.floor(dt.millisecond / 10), 2);
          case "uuu":
            return this.num(Math.floor(dt.millisecond / 100));
          // minutes
          case "m":
            return this.num(dt.minute);
          case "mm":
            return this.num(dt.minute, 2);
          // hours
          case "h":
            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);
          case "hh":
            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);
          case "H":
            return this.num(dt.hour);
          case "HH":
            return this.num(dt.hour, 2);
          // offset
          case "Z":
            // like +6
            return formatOffset({ format: "narrow", allowZ: this.opts.allowZ });
          case "ZZ":
            // like +06:00
            return formatOffset({ format: "short", allowZ: this.opts.allowZ });
          case "ZZZ":
            // like +0600
            return formatOffset({ format: "techie", allowZ: this.opts.allowZ });
          case "ZZZZ":
            // like EST
            return dt.zone.offsetName(dt.ts, { format: "short", locale: this.loc.locale });
          case "ZZZZZ":
            // like Eastern Standard Time
            return dt.zone.offsetName(dt.ts, { format: "long", locale: this.loc.locale });
          // zone
          case "z":
            // like America/New_York
            return dt.zoneName;
          // meridiems
          case "a":
            return meridiem();
          // dates
          case "d":
            return useDateTimeFormatter ? string({ day: "numeric" }, "day") : this.num(dt.day);
          case "dd":
            return useDateTimeFormatter ? string({ day: "2-digit" }, "day") : this.num(dt.day, 2);
          // weekdays - standalone
          case "c":
            // like 1
            return this.num(dt.weekday);
          case "ccc":
            // like 'Tues'
            return weekday("short", true);
          case "cccc":
            // like 'Tuesday'
            return weekday("long", true);
          case "ccccc":
            // like 'T'
            return weekday("narrow", true);
          // weekdays - format
          case "E":
            // like 1
            return this.num(dt.weekday);
          case "EEE":
            // like 'Tues'
            return weekday("short", false);
          case "EEEE":
            // like 'Tuesday'
            return weekday("long", false);
          case "EEEEE":
            // like 'T'
            return weekday("narrow", false);
          // months - standalone
          case "L":
            // like 1
            return useDateTimeFormatter
              ? string({ month: "numeric", day: "numeric" }, "month")
              : this.num(dt.month);
          case "LL":
            // like 01, doesn't seem to work
            return useDateTimeFormatter
              ? string({ month: "2-digit", day: "numeric" }, "month")
              : this.num(dt.month, 2);
          case "LLL":
            // like Jan
            return month("short", true);
          case "LLLL":
            // like January
            return month("long", true);
          case "LLLLL":
            // like J
            return month("narrow", true);
          // months - format
          case "M":
            // like 1
            return useDateTimeFormatter
              ? string({ month: "numeric" }, "month")
              : this.num(dt.month);
          case "MM":
            // like 01
            return useDateTimeFormatter
              ? string({ month: "2-digit" }, "month")
              : this.num(dt.month, 2);
          case "MMM":
            // like Jan
            return month("short", false);
          case "MMMM":
            // like January
            return month("long", false);
          case "MMMMM":
            // like J
            return month("narrow", false);
          // years
          case "y":
            // like 2014
            return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt.year);
          case "yy":
            // like 14
            return useDateTimeFormatter
              ? string({ year: "2-digit" }, "year")
              : this.num(dt.year.toString().slice(-2), 2);
          case "yyyy":
            // like 0012
            return useDateTimeFormatter
              ? string({ year: "numeric" }, "year")
              : this.num(dt.year, 4);
          case "yyyyyy":
            // like 000012
            return useDateTimeFormatter
              ? string({ year: "numeric" }, "year")
              : this.num(dt.year, 6);
          // eras
          case "G":
            // like AD
            return era("short");
          case "GG":
            // like Anno Domini
            return era("long");
          case "GGGGG":
            return era("narrow");
          case "kk":
            return this.num(dt.weekYear.toString().slice(-2), 2);
          case "kkkk":
            return this.num(dt.weekYear, 4);
          case "W":
            return this.num(dt.weekNumber);
          case "WW":
            return this.num(dt.weekNumber, 2);
          case "n":
            return this.num(dt.localWeekNumber);
          case "nn":
            return this.num(dt.localWeekNumber, 2);
          case "ii":
            return this.num(dt.localWeekYear.toString().slice(-2), 2);
          case "iiii":
            return this.num(dt.localWeekYear, 4);
          case "o":
            return this.num(dt.ordinal);
          case "ooo":
            return this.num(dt.ordinal, 3);
          case "q":
            // like 1
            return this.num(dt.quarter);
          case "qq":
            // like 01
            return this.num(dt.quarter, 2);
          case "X":
            return this.num(Math.floor(dt.ts / 1000));
          case "x":
            return this.num(dt.ts);
          default:
            return maybeMacro(token);
        }
      };

    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);
  }

  formatDurationFromString(dur, fmt) {
    const tokenToField = (token) => {
        switch (token[0]) {
          case "S":
            return "millisecond";
          case "s":
            return "second";
          case "m":
            return "minute";
          case "h":
            return "hour";
          case "d":
            return "day";
          case "w":
            return "week";
          case "M":
            return "month";
          case "y":
            return "year";
          default:
            return null;
        }
      },
      tokenToString = (lildur) => (token) => {
        const mapped = tokenToField(token);
        if (mapped) {
          return this.num(lildur.get(mapped), token.length);
        } else {
          return token;
        }
      },
      tokens = Formatter.parseFormat(fmt),
      realTokens = tokens.reduce(
        (found, { literal, val }) => (literal ? found : found.concat(val)),
        []
      ),
      collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t) => t));
    return stringifyTokens(tokens, tokenToString(collapsed));
  }
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/regexParser.js





/*
 * This file handles parsing for well-specified formats. Here's how it works:
 * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.
 * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object
 * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.
 * Extractors can take a "cursor" representing the offset in the match to look at. This makes it easy to combine extractors.
 * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.
 * Some extractions are super dumb and simpleParse and fromStrings help DRY them.
 */

const ianaRegex = /[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;

function combineRegexes(...regexes) {
  const full = regexes.reduce((f, r) => f + r.source, "");
  return RegExp(`^${full}$`);
}

function combineExtractors(...extractors) {
  return (m) =>
    extractors
      .reduce(
        ([mergedVals, mergedZone, cursor], ex) => {
          const [val, zone, next] = ex(m, cursor);
          return [{ ...mergedVals, ...val }, zone || mergedZone, next];
        },
        [{}, null, 1]
      )
      .slice(0, 2);
}

function parse(s, ...patterns) {
  if (s == null) {
    return [null, null];
  }

  for (const [regex, extractor] of patterns) {
    const m = regex.exec(s);
    if (m) {
      return extractor(m);
    }
  }
  return [null, null];
}

function simpleParse(...keys) {
  return (match, cursor) => {
    const ret = {};
    let i;

    for (i = 0; i < keys.length; i++) {
      ret[keys[i]] = parseInteger(match[cursor + i]);
    }
    return [ret, null, cursor + i];
  };
}

// ISO and SQL parsing
const offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/;
const isoExtendedZone = `(?:${offsetRegex.source}?(?:\\[(${ianaRegex.source})\\])?)?`;
const isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/;
const isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${isoExtendedZone}`);
const isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`);
const isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/;
const isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/;
const isoOrdinalRegex = /(\d{4})-?(\d{3})/;
const extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay");
const extractISOOrdinalData = simpleParse("year", "ordinal");
const sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/; // dumbed-down version of the ISO one
const sqlTimeRegex = RegExp(
  `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`
);
const sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);

function regexParser_int(match, pos, fallback) {
  const m = match[pos];
  return isUndefined(m) ? fallback : parseInteger(m);
}

function extractISOYmd(match, cursor) {
  const item = {
    year: regexParser_int(match, cursor),
    month: regexParser_int(match, cursor + 1, 1),
    day: regexParser_int(match, cursor + 2, 1),
  };

  return [item, null, cursor + 3];
}

function extractISOTime(match, cursor) {
  const item = {
    hours: regexParser_int(match, cursor, 0),
    minutes: regexParser_int(match, cursor + 1, 0),
    seconds: regexParser_int(match, cursor + 2, 0),
    milliseconds: parseMillis(match[cursor + 3]),
  };

  return [item, null, cursor + 4];
}

function extractISOOffset(match, cursor) {
  const local = !match[cursor] && !match[cursor + 1],
    fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),
    zone = local ? null : FixedOffsetZone.instance(fullOffset);
  return [{}, zone, cursor + 3];
}

function extractIANAZone(match, cursor) {
  const zone = match[cursor] ? IANAZone.create(match[cursor]) : null;
  return [{}, zone, cursor + 1];
}

// ISO time parsing

const isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}$`);

// ISO duration parsing

const isoDuration =
  /^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;

function extractISODuration(match) {
  const [s, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] =
    match;

  const hasNegativePrefix = s[0] === "-";
  const negativeSeconds = secondStr && secondStr[0] === "-";

  const maybeNegate = (num, force = false) =>
    num !== undefined && (force || (num && hasNegativePrefix)) ? -num : num;

  return [
    {
      years: maybeNegate(parseFloating(yearStr)),
      months: maybeNegate(parseFloating(monthStr)),
      weeks: maybeNegate(parseFloating(weekStr)),
      days: maybeNegate(parseFloating(dayStr)),
      hours: maybeNegate(parseFloating(hourStr)),
      minutes: maybeNegate(parseFloating(minuteStr)),
      seconds: maybeNegate(parseFloating(secondStr), secondStr === "-0"),
      milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds),
    },
  ];
}

// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York
// and not just that we're in -240 *right now*. But since I don't think these are used that often
// I'm just going to ignore that
const obsOffsets = {
  GMT: 0,
  EDT: -4 * 60,
  EST: -5 * 60,
  CDT: -5 * 60,
  CST: -6 * 60,
  MDT: -6 * 60,
  MST: -7 * 60,
  PDT: -7 * 60,
  PST: -8 * 60,
};

function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  const result = {
    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
    month: monthsShort.indexOf(monthStr) + 1,
    day: parseInteger(dayStr),
    hour: parseInteger(hourStr),
    minute: parseInteger(minuteStr),
  };

  if (secondStr) result.second = parseInteger(secondStr);
  if (weekdayStr) {
    result.weekday =
      weekdayStr.length > 3
        ? weekdaysLong.indexOf(weekdayStr) + 1
        : weekdaysShort.indexOf(weekdayStr) + 1;
  }

  return result;
}

// RFC 2822/5322
const rfc2822 =
  /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;

function extractRFC2822(match) {
  const [
      ,
      weekdayStr,
      dayStr,
      monthStr,
      yearStr,
      hourStr,
      minuteStr,
      secondStr,
      obsOffset,
      milOffset,
      offHourStr,
      offMinuteStr,
    ] = match,
    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);

  let offset;
  if (obsOffset) {
    offset = obsOffsets[obsOffset];
  } else if (milOffset) {
    offset = 0;
  } else {
    offset = signedOffset(offHourStr, offMinuteStr);
  }

  return [result, new FixedOffsetZone(offset)];
}

function preprocessRFC2822(s) {
  // Remove comments and folding whitespace and replace multiple-spaces with a single space
  return s
    .replace(/\([^()]*\)|[\n\t]/g, " ")
    .replace(/(\s\s+)/g, " ")
    .trim();
}

// http date

const rfc1123 =
    /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,
  rfc850 =
    /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,
  ascii =
    /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;

function extractRFC1123Or850(match) {
  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,
    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}

function extractASCII(match) {
  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,
    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}

const isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
const isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
const isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
const isoTimeCombinedRegex = combineRegexes(isoTimeRegex);

const extractISOYmdTimeAndOffset = combineExtractors(
  extractISOYmd,
  extractISOTime,
  extractISOOffset,
  extractIANAZone
);
const extractISOWeekTimeAndOffset = combineExtractors(
  extractISOWeekData,
  extractISOTime,
  extractISOOffset,
  extractIANAZone
);
const extractISOOrdinalDateAndTime = combineExtractors(
  extractISOOrdinalData,
  extractISOTime,
  extractISOOffset,
  extractIANAZone
);
const extractISOTimeAndOffset = combineExtractors(
  extractISOTime,
  extractISOOffset,
  extractIANAZone
);

/*
 * @private
 */

function parseISODate(s) {
  return parse(
    s,
    [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
    [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset],
    [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime],
    [isoTimeCombinedRegex, extractISOTimeAndOffset]
  );
}

function parseRFC2822Date(s) {
  return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);
}

function parseHTTPDate(s) {
  return parse(
    s,
    [rfc1123, extractRFC1123Or850],
    [rfc850, extractRFC1123Or850],
    [ascii, extractASCII]
  );
}

function parseISODuration(s) {
  return parse(s, [isoDuration, extractISODuration]);
}

const extractISOTimeOnly = combineExtractors(extractISOTime);

function parseISOTimeOnly(s) {
  return parse(s, [isoTimeOnly, extractISOTimeOnly]);
}

const sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
const sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);

const extractISOTimeOffsetAndIANAZone = combineExtractors(
  extractISOTime,
  extractISOOffset,
  extractIANAZone
);

function parseSQL(s) {
  return parse(
    s,
    [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
    [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]
  );
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/duration.js









const INVALID = "Invalid Duration";

// unit conversion constants
const lowOrderMatrix = {
    weeks: {
      days: 7,
      hours: 7 * 24,
      minutes: 7 * 24 * 60,
      seconds: 7 * 24 * 60 * 60,
      milliseconds: 7 * 24 * 60 * 60 * 1000,
    },
    days: {
      hours: 24,
      minutes: 24 * 60,
      seconds: 24 * 60 * 60,
      milliseconds: 24 * 60 * 60 * 1000,
    },
    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },
    minutes: { seconds: 60, milliseconds: 60 * 1000 },
    seconds: { milliseconds: 1000 },
  },
  casualMatrix = {
    years: {
      quarters: 4,
      months: 12,
      weeks: 52,
      days: 365,
      hours: 365 * 24,
      minutes: 365 * 24 * 60,
      seconds: 365 * 24 * 60 * 60,
      milliseconds: 365 * 24 * 60 * 60 * 1000,
    },
    quarters: {
      months: 3,
      weeks: 13,
      days: 91,
      hours: 91 * 24,
      minutes: 91 * 24 * 60,
      seconds: 91 * 24 * 60 * 60,
      milliseconds: 91 * 24 * 60 * 60 * 1000,
    },
    months: {
      weeks: 4,
      days: 30,
      hours: 30 * 24,
      minutes: 30 * 24 * 60,
      seconds: 30 * 24 * 60 * 60,
      milliseconds: 30 * 24 * 60 * 60 * 1000,
    },

    ...lowOrderMatrix,
  },
  daysInYearAccurate = 146097.0 / 400,
  daysInMonthAccurate = 146097.0 / 4800,
  accurateMatrix = {
    years: {
      quarters: 4,
      months: 12,
      weeks: daysInYearAccurate / 7,
      days: daysInYearAccurate,
      hours: daysInYearAccurate * 24,
      minutes: daysInYearAccurate * 24 * 60,
      seconds: daysInYearAccurate * 24 * 60 * 60,
      milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000,
    },
    quarters: {
      months: 3,
      weeks: daysInYearAccurate / 28,
      days: daysInYearAccurate / 4,
      hours: (daysInYearAccurate * 24) / 4,
      minutes: (daysInYearAccurate * 24 * 60) / 4,
      seconds: (daysInYearAccurate * 24 * 60 * 60) / 4,
      milliseconds: (daysInYearAccurate * 24 * 60 * 60 * 1000) / 4,
    },
    months: {
      weeks: daysInMonthAccurate / 7,
      days: daysInMonthAccurate,
      hours: daysInMonthAccurate * 24,
      minutes: daysInMonthAccurate * 24 * 60,
      seconds: daysInMonthAccurate * 24 * 60 * 60,
      milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000,
    },
    ...lowOrderMatrix,
  };

// units ordered by size
const orderedUnits = [
  "years",
  "quarters",
  "months",
  "weeks",
  "days",
  "hours",
  "minutes",
  "seconds",
  "milliseconds",
];

const reverseUnits = orderedUnits.slice(0).reverse();

// clone really means "create another instance just like this one, but with these changes"
function clone(dur, alts, clear = false) {
  // deep merge for vals
  const conf = {
    values: clear ? alts.values : { ...dur.values, ...(alts.values || {}) },
    loc: dur.loc.clone(alts.loc),
    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,
    matrix: alts.matrix || dur.matrix,
  };
  return new Duration(conf);
}

function durationToMillis(matrix, vals) {
  let sum = vals.milliseconds ?? 0;
  for (const unit of reverseUnits.slice(1)) {
    if (vals[unit]) {
      sum += vals[unit] * matrix[unit]["milliseconds"];
    }
  }
  return sum;
}

// NB: mutates parameters
function normalizeValues(matrix, vals) {
  // the logic below assumes the overall value of the duration is positive
  // if this is not the case, factor is used to make it so
  const factor = durationToMillis(matrix, vals) < 0 ? -1 : 1;

  orderedUnits.reduceRight((previous, current) => {
    if (!isUndefined(vals[current])) {
      if (previous) {
        const previousVal = vals[previous] * factor;
        const conv = matrix[current][previous];

        // if (previousVal < 0):
        // lower order unit is negative (e.g. { years: 2, days: -2 })
        // normalize this by reducing the higher order unit by the appropriate amount
        // and increasing the lower order unit
        // this can never make the higher order unit negative, because this function only operates
        // on positive durations, so the amount of time represented by the lower order unit cannot
        // be larger than the higher order unit
        // else:
        // lower order unit is positive (e.g. { years: 2, days: 450 } or { years: -2, days: 450 })
        // in this case we attempt to convert as much as possible from the lower order unit into
        // the higher order one
        //
        // Math.floor takes care of both of these cases, rounding away from 0
        // if previousVal < 0 it makes the absolute value larger
        // if previousVal >= it makes the absolute value smaller
        const rollUp = Math.floor(previousVal / conv);
        vals[current] += rollUp * factor;
        vals[previous] -= rollUp * conv * factor;
      }
      return current;
    } else {
      return previous;
    }
  }, null);

  // try to convert any decimals into smaller units if possible
  // for example for { years: 2.5, days: 0, seconds: 0 } we want to get { years: 2, days: 182, hours: 12 }
  orderedUnits.reduce((previous, current) => {
    if (!isUndefined(vals[current])) {
      if (previous) {
        const fraction = vals[previous] % 1;
        vals[previous] -= fraction;
        vals[current] += fraction * matrix[previous][current];
      }
      return current;
    } else {
      return previous;
    }
  }, null);
}

// Remove all properties with a value of 0 from an object
function removeZeroes(vals) {
  const newVals = {};
  for (const [key, value] of Object.entries(vals)) {
    if (value !== 0) {
      newVals[key] = value;
    }
  }
  return newVals;
}

/**
 * A Duration object represents a period of time, like "2 months" or "1 day, 1 hour". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime#plus} to add a Duration object to a DateTime, producing another DateTime.
 *
 * Here is a brief overview of commonly used methods and getters in Duration:
 *
 * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.
 * * **Unit values** See the {@link Duration#years}, {@link Duration#months}, {@link Duration#weeks}, {@link Duration#days}, {@link Duration#hours}, {@link Duration#minutes}, {@link Duration#seconds}, {@link Duration#milliseconds} accessors.
 * * **Configuration** See  {@link Duration#locale} and {@link Duration#numberingSystem} accessors.
 * * **Transformation** To create new Durations out of old ones use {@link Duration#plus}, {@link Duration#minus}, {@link Duration#normalize}, {@link Duration#set}, {@link Duration#reconfigure}, {@link Duration#shiftTo}, and {@link Duration#negate}.
 * * **Output** To convert the Duration into other representations, see {@link Duration#as}, {@link Duration#toISO}, {@link Duration#toFormat}, and {@link Duration#toJSON}
 *
 * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.
 */
class Duration {
  /**
   * @private
   */
  constructor(config) {
    const accurate = config.conversionAccuracy === "longterm" || false;
    let matrix = accurate ? accurateMatrix : casualMatrix;

    if (config.matrix) {
      matrix = config.matrix;
    }

    /**
     * @access private
     */
    this.values = config.values;
    /**
     * @access private
     */
    this.loc = config.loc || Locale.create();
    /**
     * @access private
     */
    this.conversionAccuracy = accurate ? "longterm" : "casual";
    /**
     * @access private
     */
    this.invalid = config.invalid || null;
    /**
     * @access private
     */
    this.matrix = matrix;
    /**
     * @access private
     */
    this.isLuxonDuration = true;
  }

  /**
   * Create Duration from a number of milliseconds.
   * @param {number} count of milliseconds
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */
  static fromMillis(count, opts) {
    return Duration.fromObject({ milliseconds: count }, opts);
  }

  /**
   * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.
   * If this object is empty then a zero milliseconds duration is returned.
   * @param {Object} obj - the object to create the DateTime from
   * @param {number} obj.years
   * @param {number} obj.quarters
   * @param {number} obj.months
   * @param {number} obj.weeks
   * @param {number} obj.days
   * @param {number} obj.hours
   * @param {number} obj.minutes
   * @param {number} obj.seconds
   * @param {number} obj.milliseconds
   * @param {Object} [opts=[]] - options for creating this Duration
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
   * @param {string} [opts.matrix=Object] - the custom conversion system to use
   * @return {Duration}
   */
  static fromObject(obj, opts = {}) {
    if (obj == null || typeof obj !== "object") {
      throw new InvalidArgumentError(
        `Duration.fromObject: argument expected to be an object, got ${
          obj === null ? "null" : typeof obj
        }`
      );
    }

    return new Duration({
      values: normalizeObject(obj, Duration.normalizeUnit),
      loc: Locale.fromObject(opts),
      conversionAccuracy: opts.conversionAccuracy,
      matrix: opts.matrix,
    });
  }

  /**
   * Create a Duration from DurationLike.
   *
   * @param {Object | number | Duration} durationLike
   * One of:
   * - object with keys like 'years' and 'hours'.
   * - number representing milliseconds
   * - Duration instance
   * @return {Duration}
   */
  static fromDurationLike(durationLike) {
    if (isNumber(durationLike)) {
      return Duration.fromMillis(durationLike);
    } else if (Duration.isDuration(durationLike)) {
      return durationLike;
    } else if (typeof durationLike === "object") {
      return Duration.fromObject(durationLike);
    } else {
      throw new InvalidArgumentError(
        `Unknown duration argument ${durationLike} of type ${typeof durationLike}`
      );
    }
  }

  /**
   * Create a Duration from an ISO 8601 duration string.
   * @param {string} text - text to parse
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
   * @param {string} [opts.matrix=Object] - the preset conversion system to use
   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
   * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
   * @return {Duration}
   */
  static fromISO(text, opts) {
    const [parsed] = parseISODuration(text);
    if (parsed) {
      return Duration.fromObject(parsed, opts);
    } else {
      return Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
    }
  }

  /**
   * Create a Duration from an ISO 8601 time string.
   * @param {string} text - text to parse
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
   * @param {string} [opts.matrix=Object] - the conversion system to use
   * @see https://en.wikipedia.org/wiki/ISO_8601#Times
   * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }
   * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @return {Duration}
   */
  static fromISOTime(text, opts) {
    const [parsed] = parseISOTimeOnly(text);
    if (parsed) {
      return Duration.fromObject(parsed, opts);
    } else {
      return Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
    }
  }

  /**
   * Create an invalid Duration.
   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {Duration}
   */
  static invalid(reason, explanation = null) {
    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
    }

    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

    if (Settings.throwOnInvalid) {
      throw new InvalidDurationError(invalid);
    } else {
      return new Duration({ invalid });
    }
  }

  /**
   * @private
   */
  static normalizeUnit(unit) {
    const normalized = {
      year: "years",
      years: "years",
      quarter: "quarters",
      quarters: "quarters",
      month: "months",
      months: "months",
      week: "weeks",
      weeks: "weeks",
      day: "days",
      days: "days",
      hour: "hours",
      hours: "hours",
      minute: "minutes",
      minutes: "minutes",
      second: "seconds",
      seconds: "seconds",
      millisecond: "milliseconds",
      milliseconds: "milliseconds",
    }[unit ? unit.toLowerCase() : unit];

    if (!normalized) throw new InvalidUnitError(unit);

    return normalized;
  }

  /**
   * Check if an object is a Duration. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */
  static isDuration(o) {
    return (o && o.isLuxonDuration) || false;
  }

  /**
   * Get  the locale of a Duration, such 'en-GB'
   * @type {string}
   */
  get locale() {
    return this.isValid ? this.loc.locale : null;
  }

  /**
   * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
   *
   * @type {string}
   */
  get numberingSystem() {
    return this.isValid ? this.loc.numberingSystem : null;
  }

  /**
   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
   * * `S` for milliseconds
   * * `s` for seconds
   * * `m` for minutes
   * * `h` for hours
   * * `d` for days
   * * `w` for weeks
   * * `M` for months
   * * `y` for years
   * Notes:
   * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
   * * Tokens can be escaped by wrapping with single quotes.
   * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.
   * @param {string} fmt - the format string
   * @param {Object} opts - options
   * @param {boolean} [opts.floor=true] - floor numerical values
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
   * @return {string}
   */
  toFormat(fmt, opts = {}) {
    // reverse-compat since 1.2; we always round down now, never up, and we do it by default
    const fmtOpts = {
      ...opts,
      floor: opts.round !== false && opts.floor !== false,
    };
    return this.isValid
      ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt)
      : INVALID;
  }

  /**
   * Returns a string representation of a Duration with all units included.
   * To modify its behavior, use `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options
   * @param {Object} opts - Formatting options. Accepts the same keys as the options parameter of the native `Intl.NumberFormat` constructor, as well as `listStyle`.
   * @param {string} [opts.listStyle='narrow'] - How to format the merged list. Corresponds to the `style` property of the options parameter of the native `Intl.ListFormat` constructor.
   * @example
   * ```js
   * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })
   * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'
   * dur.toHuman({ listStyle: "long" }) //=> '1 day, 5 hours, and 6 minutes'
   * dur.toHuman({ unitDisplay: "short" }) //=> '1 day, 5 hr, 6 min'
   * ```
   */
  toHuman(opts = {}) {
    if (!this.isValid) return INVALID;

    const l = orderedUnits
      .map((unit) => {
        const val = this.values[unit];
        if (isUndefined(val)) {
          return null;
        }
        return this.loc
          .numberFormatter({ style: "unit", unitDisplay: "long", ...opts, unit: unit.slice(0, -1) })
          .format(val);
      })
      .filter((n) => n);

    return this.loc
      .listFormatter({ type: "conjunction", style: opts.listStyle || "narrow", ...opts })
      .format(l);
  }

  /**
   * Returns a JavaScript object with this Duration's values.
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
   * @return {Object}
   */
  toObject() {
    if (!this.isValid) return {};
    return { ...this.values };
  }

  /**
   * Returns an ISO 8601-compliant string representation of this Duration.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
   * @return {string}
   */
  toISO() {
    // we could use the formatter, but this is an easier way to get the minimum string
    if (!this.isValid) return null;

    let s = "P";
    if (this.years !== 0) s += this.years + "Y";
    if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + "M";
    if (this.weeks !== 0) s += this.weeks + "W";
    if (this.days !== 0) s += this.days + "D";
    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)
      s += "T";
    if (this.hours !== 0) s += this.hours + "H";
    if (this.minutes !== 0) s += this.minutes + "M";
    if (this.seconds !== 0 || this.milliseconds !== 0)
      // this will handle "floating point madness" by removing extra decimal places
      // https://stackoverflow.com/questions/588004/is-floating-point-math-broken
      s += roundTo(this.seconds + this.milliseconds / 1000, 3) + "S";
    if (s === "P") s += "T0S";
    return s;
  }

  /**
   * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.
   * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Times
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'
   * @return {string}
   */
  toISOTime(opts = {}) {
    if (!this.isValid) return null;

    const millis = this.toMillis();
    if (millis < 0 || millis >= 86400000) return null;

    opts = {
      suppressMilliseconds: false,
      suppressSeconds: false,
      includePrefix: false,
      format: "extended",
      ...opts,
      includeOffset: false,
    };

    const dateTime = DateTime.fromMillis(millis, { zone: "UTC" });
    return dateTime.toISOTime(opts);
  }

  /**
   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
   * @return {string}
   */
  toJSON() {
    return this.toISO();
  }

  /**
   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
   * @return {string}
   */
  toString() {
    return this.toISO();
  }

  /**
   * Returns a string representation of this Duration appropriate for the REPL.
   * @return {string}
   */
  [Symbol.for("nodejs.util.inspect.custom")]() {
    if (this.isValid) {
      return `Duration { values: ${JSON.stringify(this.values)} }`;
    } else {
      return `Duration { Invalid, reason: ${this.invalidReason} }`;
    }
  }

  /**
   * Returns an milliseconds value of this Duration.
   * @return {number}
   */
  toMillis() {
    if (!this.isValid) return NaN;

    return durationToMillis(this.matrix, this.values);
  }

  /**
   * Returns an milliseconds value of this Duration. Alias of {@link toMillis}
   * @return {number}
   */
  valueOf() {
    return this.toMillis();
  }

  /**
   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @return {Duration}
   */
  plus(duration) {
    if (!this.isValid) return this;

    const dur = Duration.fromDurationLike(duration),
      result = {};

    for (const k of orderedUnits) {
      if (util_hasOwnProperty(dur.values, k) || util_hasOwnProperty(this.values, k)) {
        result[k] = dur.get(k) + this.get(k);
      }
    }

    return clone(this, { values: result }, true);
  }

  /**
   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @return {Duration}
   */
  minus(duration) {
    if (!this.isValid) return this;

    const dur = Duration.fromDurationLike(duration);
    return this.plus(dur.negate());
  }

  /**
   * Scale this Duration by the specified amount. Return a newly-constructed Duration.
   * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }
   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === "hours" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
   * @return {Duration}
   */
  mapUnits(fn) {
    if (!this.isValid) return this;
    const result = {};
    for (const k of Object.keys(this.values)) {
      result[k] = asNumber(fn(this.values[k], k));
    }
    return clone(this, { values: result }, true);
  }

  /**
   * Get the value of unit.
   * @param {string} unit - a unit such as 'minute' or 'day'
   * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2
   * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0
   * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3
   * @return {number}
   */
  get(unit) {
    return this[Duration.normalizeUnit(unit)];
  }

  /**
   * "Set" the values of specified units. Return a newly-constructed Duration.
   * @param {Object} values - a mapping of units to numbers
   * @example dur.set({ years: 2017 })
   * @example dur.set({ hours: 8, minutes: 30 })
   * @return {Duration}
   */
  set(values) {
    if (!this.isValid) return this;

    const mixed = { ...this.values, ...normalizeObject(values, Duration.normalizeUnit) };
    return clone(this, { values: mixed });
  }

  /**
   * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
   * @example dur.reconfigure({ locale: 'en-GB' })
   * @return {Duration}
   */
  reconfigure({ locale, numberingSystem, conversionAccuracy, matrix } = {}) {
    const loc = this.loc.clone({ locale, numberingSystem });
    const opts = { loc, matrix, conversionAccuracy };
    return clone(this, opts);
  }

  /**
   * Return the length of the duration in the specified unit.
   * @param {string} unit - a unit such as 'minutes' or 'days'
   * @example Duration.fromObject({years: 1}).as('days') //=> 365
   * @example Duration.fromObject({years: 1}).as('months') //=> 12
   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
   * @return {number}
   */
  as(unit) {
    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
  }

  /**
   * Reduce this Duration to its canonical representation in its current units.
   * Assuming the overall value of the Duration is positive, this means:
   * - excessive values for lower-order units are converted to higher-order units (if possible, see first and second example)
   * - negative lower-order units are converted to higher order units (there must be such a higher order unit, otherwise
   *   the overall value would be negative, see third example)
   * - fractional values for higher-order units are converted to lower-order units (if possible, see fourth example)
   *
   * If the overall value is negative, the result of this method is equivalent to `this.negate().normalize().negate()`.
   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
   * @example Duration.fromObject({ days: 5000 }).normalize().toObject() //=> { days: 5000 }
   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
   * @example Duration.fromObject({ years: 2.5, days: 0, hours: 0 }).normalize().toObject() //=> { years: 2, days: 182, hours: 12 }
   * @return {Duration}
   */
  normalize() {
    if (!this.isValid) return this;
    const vals = this.toObject();
    normalizeValues(this.matrix, vals);
    return clone(this, { values: vals }, true);
  }

  /**
   * Rescale units to its largest representation
   * @example Duration.fromObject({ milliseconds: 90000 }).rescale().toObject() //=> { minutes: 1, seconds: 30 }
   * @return {Duration}
   */
  rescale() {
    if (!this.isValid) return this;
    const vals = removeZeroes(this.normalize().shiftToAll().toObject());
    return clone(this, { values: vals }, true);
  }

  /**
   * Convert this Duration into its representation in a different set of units.
   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
   * @return {Duration}
   */
  shiftTo(...units) {
    if (!this.isValid) return this;

    if (units.length === 0) {
      return this;
    }

    units = units.map((u) => Duration.normalizeUnit(u));

    const built = {},
      accumulated = {},
      vals = this.toObject();
    let lastUnit;

    for (const k of orderedUnits) {
      if (units.indexOf(k) >= 0) {
        lastUnit = k;

        let own = 0;

        // anything we haven't boiled down yet should get boiled to this unit
        for (const ak in accumulated) {
          own += this.matrix[ak][k] * accumulated[ak];
          accumulated[ak] = 0;
        }

        // plus anything that's already in this unit
        if (isNumber(vals[k])) {
          own += vals[k];
        }

        // only keep the integer part for now in the hopes of putting any decimal part
        // into a smaller unit later
        const i = Math.trunc(own);
        built[k] = i;
        accumulated[k] = (own * 1000 - i * 1000) / 1000;

        // otherwise, keep it in the wings to boil it later
      } else if (isNumber(vals[k])) {
        accumulated[k] = vals[k];
      }
    }

    // anything leftover becomes the decimal for the last unit
    // lastUnit must be defined since units is not empty
    for (const key in accumulated) {
      if (accumulated[key] !== 0) {
        built[lastUnit] +=
          key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
      }
    }

    normalizeValues(this.matrix, built);
    return clone(this, { values: built }, true);
  }

  /**
   * Shift this Duration to all available units.
   * Same as shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds")
   * @return {Duration}
   */
  shiftToAll() {
    if (!this.isValid) return this;
    return this.shiftTo(
      "years",
      "months",
      "weeks",
      "days",
      "hours",
      "minutes",
      "seconds",
      "milliseconds"
    );
  }

  /**
   * Return the negative of this Duration.
   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
   * @return {Duration}
   */
  negate() {
    if (!this.isValid) return this;
    const negated = {};
    for (const k of Object.keys(this.values)) {
      negated[k] = this.values[k] === 0 ? 0 : -this.values[k];
    }
    return clone(this, { values: negated }, true);
  }

  /**
   * Get the years.
   * @type {number}
   */
  get years() {
    return this.isValid ? this.values.years || 0 : NaN;
  }

  /**
   * Get the quarters.
   * @type {number}
   */
  get quarters() {
    return this.isValid ? this.values.quarters || 0 : NaN;
  }

  /**
   * Get the months.
   * @type {number}
   */
  get months() {
    return this.isValid ? this.values.months || 0 : NaN;
  }

  /**
   * Get the weeks
   * @type {number}
   */
  get weeks() {
    return this.isValid ? this.values.weeks || 0 : NaN;
  }

  /**
   * Get the days.
   * @type {number}
   */
  get days() {
    return this.isValid ? this.values.days || 0 : NaN;
  }

  /**
   * Get the hours.
   * @type {number}
   */
  get hours() {
    return this.isValid ? this.values.hours || 0 : NaN;
  }

  /**
   * Get the minutes.
   * @type {number}
   */
  get minutes() {
    return this.isValid ? this.values.minutes || 0 : NaN;
  }

  /**
   * Get the seconds.
   * @return {number}
   */
  get seconds() {
    return this.isValid ? this.values.seconds || 0 : NaN;
  }

  /**
   * Get the milliseconds.
   * @return {number}
   */
  get milliseconds() {
    return this.isValid ? this.values.milliseconds || 0 : NaN;
  }

  /**
   * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
   * on invalid DateTimes or Intervals.
   * @return {boolean}
   */
  get isValid() {
    return this.invalid === null;
  }

  /**
   * Returns an error code if this Duration became invalid, or null if the Duration is valid
   * @return {string}
   */
  get invalidReason() {
    return this.invalid ? this.invalid.reason : null;
  }

  /**
   * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
   * @type {string}
   */
  get invalidExplanation() {
    return this.invalid ? this.invalid.explanation : null;
  }

  /**
   * Equality check
   * Two Durations are equal iff they have the same units and the same values for each unit.
   * @param {Duration} other
   * @return {boolean}
   */
  equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }

    if (!this.loc.equals(other.loc)) {
      return false;
    }

    function eq(v1, v2) {
      // Consider 0 and undefined as equal
      if (v1 === undefined || v1 === 0) return v2 === undefined || v2 === 0;
      return v1 === v2;
    }

    for (const u of orderedUnits) {
      if (!eq(this.values[u], other.values[u])) {
        return false;
      }
    }
    return true;
  }
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/interval.js








const interval_INVALID = "Invalid Interval";

// checks if the start is equal to or before the end
function validateStartEnd(start, end) {
  if (!start || !start.isValid) {
    return Interval.invalid("missing or invalid start");
  } else if (!end || !end.isValid) {
    return Interval.invalid("missing or invalid end");
  } else if (end < start) {
    return Interval.invalid(
      "end before start",
      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`
    );
  } else {
    return null;
  }
}

/**
 * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.
 *
 * Here is a brief overview of the most commonly used methods and getters in Interval:
 *
 * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.
 * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.
 * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.
 * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.
 * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}
 * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toLocaleString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.
 */
class Interval {
  /**
   * @private
   */
  constructor(config) {
    /**
     * @access private
     */
    this.s = config.start;
    /**
     * @access private
     */
    this.e = config.end;
    /**
     * @access private
     */
    this.invalid = config.invalid || null;
    /**
     * @access private
     */
    this.isLuxonInterval = true;
  }

  /**
   * Create an invalid Interval.
   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {Interval}
   */
  static invalid(reason, explanation = null) {
    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
    }

    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

    if (Settings.throwOnInvalid) {
      throw new InvalidIntervalError(invalid);
    } else {
      return new Interval({ invalid });
    }
  }

  /**
   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
   * @param {DateTime|Date|Object} start
   * @param {DateTime|Date|Object} end
   * @return {Interval}
   */
  static fromDateTimes(start, end) {
    const builtStart = friendlyDateTime(start),
      builtEnd = friendlyDateTime(end);

    const validateError = validateStartEnd(builtStart, builtEnd);

    if (validateError == null) {
      return new Interval({
        start: builtStart,
        end: builtEnd,
      });
    } else {
      return validateError;
    }
  }

  /**
   * Create an Interval from a start DateTime and a Duration to extend to.
   * @param {DateTime|Date|Object} start
   * @param {Duration|Object|number} duration - the length of the Interval.
   * @return {Interval}
   */
  static after(start, duration) {
    const dur = Duration.fromDurationLike(duration),
      dt = friendlyDateTime(start);
    return Interval.fromDateTimes(dt, dt.plus(dur));
  }

  /**
   * Create an Interval from an end DateTime and a Duration to extend backwards to.
   * @param {DateTime|Date|Object} end
   * @param {Duration|Object|number} duration - the length of the Interval.
   * @return {Interval}
   */
  static before(end, duration) {
    const dur = Duration.fromDurationLike(duration),
      dt = friendlyDateTime(end);
    return Interval.fromDateTimes(dt.minus(dur), dt);
  }

  /**
   * Create an Interval from an ISO 8601 string.
   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
   * @param {string} text - the ISO string to parse
   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @return {Interval}
   */
  static fromISO(text, opts) {
    const [s, e] = (text || "").split("/", 2);
    if (s && e) {
      let start, startIsValid;
      try {
        start = DateTime.fromISO(s, opts);
        startIsValid = start.isValid;
      } catch (e) {
        startIsValid = false;
      }

      let end, endIsValid;
      try {
        end = DateTime.fromISO(e, opts);
        endIsValid = end.isValid;
      } catch (e) {
        endIsValid = false;
      }

      if (startIsValid && endIsValid) {
        return Interval.fromDateTimes(start, end);
      }

      if (startIsValid) {
        const dur = Duration.fromISO(e, opts);
        if (dur.isValid) {
          return Interval.after(start, dur);
        }
      } else if (endIsValid) {
        const dur = Duration.fromISO(s, opts);
        if (dur.isValid) {
          return Interval.before(end, dur);
        }
      }
    }
    return Interval.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
  }

  /**
   * Check if an object is an Interval. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */
  static isInterval(o) {
    return (o && o.isLuxonInterval) || false;
  }

  /**
   * Returns the start of the Interval
   * @type {DateTime}
   */
  get start() {
    return this.isValid ? this.s : null;
  }

  /**
   * Returns the end of the Interval
   * @type {DateTime}
   */
  get end() {
    return this.isValid ? this.e : null;
  }

  /**
   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
   * @type {boolean}
   */
  get isValid() {
    return this.invalidReason === null;
  }

  /**
   * Returns an error code if this Interval is invalid, or null if the Interval is valid
   * @type {string}
   */
  get invalidReason() {
    return this.invalid ? this.invalid.reason : null;
  }

  /**
   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
   * @type {string}
   */
  get invalidExplanation() {
    return this.invalid ? this.invalid.explanation : null;
  }

  /**
   * Returns the length of the Interval in the specified unit.
   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
   * @return {number}
   */
  length(unit = "milliseconds") {
    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;
  }

  /**
   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
   * @param {string} [unit='milliseconds'] - the unit of time to count.
   * @param {Object} opts - options
   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; this operation will always use the locale of the start DateTime
   * @return {number}
   */
  count(unit = "milliseconds", opts) {
    if (!this.isValid) return NaN;
    const start = this.start.startOf(unit, opts);
    let end;
    if (opts?.useLocaleWeeks) {
      end = this.end.reconfigure({ locale: start.locale });
    } else {
      end = this.end;
    }
    end = end.startOf(unit, opts);
    return Math.floor(end.diff(start, unit).get(unit)) + (end.valueOf() !== this.end.valueOf());
  }

  /**
   * Returns whether this Interval's start and end are both in the same unit of time
   * @param {string} unit - the unit of time to check sameness on
   * @return {boolean}
   */
  hasSame(unit) {
    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
  }

  /**
   * Return whether this Interval has the same start and end DateTimes.
   * @return {boolean}
   */
  isEmpty() {
    return this.s.valueOf() === this.e.valueOf();
  }

  /**
   * Return whether this Interval's start is after the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */
  isAfter(dateTime) {
    if (!this.isValid) return false;
    return this.s > dateTime;
  }

  /**
   * Return whether this Interval's end is before the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */
  isBefore(dateTime) {
    if (!this.isValid) return false;
    return this.e <= dateTime;
  }

  /**
   * Return whether this Interval contains the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */
  contains(dateTime) {
    if (!this.isValid) return false;
    return this.s <= dateTime && this.e > dateTime;
  }

  /**
   * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
   * @param {Object} values - the values to set
   * @param {DateTime} values.start - the starting DateTime
   * @param {DateTime} values.end - the ending DateTime
   * @return {Interval}
   */
  set({ start, end } = {}) {
    if (!this.isValid) return this;
    return Interval.fromDateTimes(start || this.s, end || this.e);
  }

  /**
   * Split this Interval at each of the specified DateTimes
   * @param {...DateTime} dateTimes - the unit of time to count.
   * @return {Array}
   */
  splitAt(...dateTimes) {
    if (!this.isValid) return [];
    const sorted = dateTimes
        .map(friendlyDateTime)
        .filter((d) => this.contains(d))
        .sort((a, b) => a.toMillis() - b.toMillis()),
      results = [];
    let { s } = this,
      i = 0;

    while (s < this.e) {
      const added = sorted[i] || this.e,
        next = +added > +this.e ? this.e : added;
      results.push(Interval.fromDateTimes(s, next));
      s = next;
      i += 1;
    }

    return results;
  }

  /**
   * Split this Interval into smaller Intervals, each of the specified length.
   * Left over time is grouped into a smaller interval
   * @param {Duration|Object|number} duration - The length of each resulting interval.
   * @return {Array}
   */
  splitBy(duration) {
    const dur = Duration.fromDurationLike(duration);

    if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
      return [];
    }

    let { s } = this,
      idx = 1,
      next;

    const results = [];
    while (s < this.e) {
      const added = this.start.plus(dur.mapUnits((x) => x * idx));
      next = +added > +this.e ? this.e : added;
      results.push(Interval.fromDateTimes(s, next));
      s = next;
      idx += 1;
    }

    return results;
  }

  /**
   * Split this Interval into the specified number of smaller intervals.
   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
   * @return {Array}
   */
  divideEqually(numberOfParts) {
    if (!this.isValid) return [];
    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
  }

  /**
   * Return whether this Interval overlaps with the specified Interval
   * @param {Interval} other
   * @return {boolean}
   */
  overlaps(other) {
    return this.e > other.s && this.s < other.e;
  }

  /**
   * Return whether this Interval's end is adjacent to the specified Interval's start.
   * @param {Interval} other
   * @return {boolean}
   */
  abutsStart(other) {
    if (!this.isValid) return false;
    return +this.e === +other.s;
  }

  /**
   * Return whether this Interval's start is adjacent to the specified Interval's end.
   * @param {Interval} other
   * @return {boolean}
   */
  abutsEnd(other) {
    if (!this.isValid) return false;
    return +other.e === +this.s;
  }

  /**
   * Return whether this Interval engulfs the start and end of the specified Interval.
   * @param {Interval} other
   * @return {boolean}
   */
  engulfs(other) {
    if (!this.isValid) return false;
    return this.s <= other.s && this.e >= other.e;
  }

  /**
   * Return whether this Interval has the same start and end as the specified Interval.
   * @param {Interval} other
   * @return {boolean}
   */
  equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }

    return this.s.equals(other.s) && this.e.equals(other.e);
  }

  /**
   * Return an Interval representing the intersection of this Interval and the specified Interval.
   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
   * Returns null if the intersection is empty, meaning, the intervals don't intersect.
   * @param {Interval} other
   * @return {Interval}
   */
  intersection(other) {
    if (!this.isValid) return this;
    const s = this.s > other.s ? this.s : other.s,
      e = this.e < other.e ? this.e : other.e;

    if (s >= e) {
      return null;
    } else {
      return Interval.fromDateTimes(s, e);
    }
  }

  /**
   * Return an Interval representing the union of this Interval and the specified Interval.
   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
   * @param {Interval} other
   * @return {Interval}
   */
  union(other) {
    if (!this.isValid) return this;
    const s = this.s < other.s ? this.s : other.s,
      e = this.e > other.e ? this.e : other.e;
    return Interval.fromDateTimes(s, e);
  }

  /**
   * Merge an array of Intervals into a equivalent minimal set of Intervals.
   * Combines overlapping and adjacent Intervals.
   * @param {Array} intervals
   * @return {Array}
   */
  static merge(intervals) {
    const [found, final] = intervals
      .sort((a, b) => a.s - b.s)
      .reduce(
        ([sofar, current], item) => {
          if (!current) {
            return [sofar, item];
          } else if (current.overlaps(item) || current.abutsStart(item)) {
            return [sofar, current.union(item)];
          } else {
            return [sofar.concat([current]), item];
          }
        },
        [[], null]
      );
    if (final) {
      found.push(final);
    }
    return found;
  }

  /**
   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
   * @param {Array} intervals
   * @return {Array}
   */
  static xor(intervals) {
    let start = null,
      currentCount = 0;
    const results = [],
      ends = intervals.map((i) => [
        { time: i.s, type: "s" },
        { time: i.e, type: "e" },
      ]),
      flattened = Array.prototype.concat(...ends),
      arr = flattened.sort((a, b) => a.time - b.time);

    for (const i of arr) {
      currentCount += i.type === "s" ? 1 : -1;

      if (currentCount === 1) {
        start = i.time;
      } else {
        if (start && +start !== +i.time) {
          results.push(Interval.fromDateTimes(start, i.time));
        }

        start = null;
      }
    }

    return Interval.merge(results);
  }

  /**
   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
   * @param {...Interval} intervals
   * @return {Array}
   */
  difference(...intervals) {
    return Interval.xor([this].concat(intervals))
      .map((i) => this.intersection(i))
      .filter((i) => i && !i.isEmpty());
  }

  /**
   * Returns a string representation of this Interval appropriate for debugging.
   * @return {string}
   */
  toString() {
    if (!this.isValid) return interval_INVALID;
    return `[${this.s.toISO()} – ${this.e.toISO()})`;
  }

  /**
   * Returns a string representation of this Interval appropriate for the REPL.
   * @return {string}
   */
  [Symbol.for("nodejs.util.inspect.custom")]() {
    if (this.isValid) {
      return `Interval { start: ${this.s.toISO()}, end: ${this.e.toISO()} }`;
    } else {
      return `Interval { Invalid, reason: ${this.invalidReason} }`;
    }
  }

  /**
   * Returns a localized string representing this Interval. Accepts the same options as the
   * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as
   * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method
   * is browser-specific, but in general it will return an appropriate representation of the
   * Interval in the assigned locale. Defaults to the system's locale if no locale has been
   * specified.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or
   * Intl.DateTimeFormat constructor options.
   * @param {Object} opts - Options to override the configuration of the start DateTime.
   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022
   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022
   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022
   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM
   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p
   * @return {string}
   */
  toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
    return this.isValid
      ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this)
      : interval_INVALID;
  }

  /**
   * Returns an ISO 8601-compliant string representation of this Interval.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @param {Object} opts - The same options as {@link DateTime#toISO}
   * @return {string}
   */
  toISO(opts) {
    if (!this.isValid) return interval_INVALID;
    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;
  }

  /**
   * Returns an ISO 8601-compliant string representation of date of this Interval.
   * The time components are ignored.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @return {string}
   */
  toISODate() {
    if (!this.isValid) return interval_INVALID;
    return `${this.s.toISODate()}/${this.e.toISODate()}`;
  }

  /**
   * Returns an ISO 8601-compliant string representation of time of this Interval.
   * The date components are ignored.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @param {Object} opts - The same options as {@link DateTime#toISO}
   * @return {string}
   */
  toISOTime(opts) {
    if (!this.isValid) return interval_INVALID;
    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;
  }

  /**
   * Returns a string representation of this Interval formatted according to the specified format
   * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible
   * formatting tool.
   * @param {string} dateFormat - The format string. This string formats the start and end time.
   * See {@link DateTime#toFormat} for details.
   * @param {Object} opts - Options.
   * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end
   * representations.
   * @return {string}
   */
  toFormat(dateFormat, { separator = " – " } = {}) {
    if (!this.isValid) return interval_INVALID;
    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;
  }

  /**
   * Return a Duration representing the time spanned by this interval.
   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
   * @return {Duration}
   */
  toDuration(unit, opts) {
    if (!this.isValid) {
      return Duration.invalid(this.invalidReason);
    }
    return this.e.diff(this.s, unit, opts);
  }

  /**
   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
   * @param {function} mapFn
   * @return {Interval}
   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
   */
  mapEndpoints(mapFn) {
    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
  }
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/info.js








/**
 * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.
 */
class Info {
  /**
   * Return whether the specified zone contains a DST.
   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
   * @return {boolean}
   */
  static hasDST(zone = Settings.defaultZone) {
    const proto = DateTime.now().setZone(zone).set({ month: 12 });

    return !zone.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;
  }

  /**
   * Return whether the specified zone is a valid IANA specifier.
   * @param {string} zone - Zone to check
   * @return {boolean}
   */
  static isValidIANAZone(zone) {
    return IANAZone.isValidZone(zone);
  }

  /**
   * Converts the input into a {@link Zone} instance.
   *
   * * If `input` is already a Zone instance, it is returned unchanged.
   * * If `input` is a string containing a valid time zone name, a Zone instance
   *   with that name is returned.
   * * If `input` is a string that doesn't refer to a known time zone, a Zone
   *   instance with {@link Zone#isValid} == false is returned.
   * * If `input is a number, a Zone instance with the specified fixed offset
   *   in minutes is returned.
   * * If `input` is `null` or `undefined`, the default zone is returned.
   * @param {string|Zone|number} [input] - the value to be converted
   * @return {Zone}
   */
  static normalizeZone(input) {
    return normalizeZone(input, Settings.defaultZone);
  }

  /**
   * Get the weekday on which the week starts according to the given locale.
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @returns {number} the start of the week, 1 for Monday through 7 for Sunday
   */
  static getStartOfWeek({ locale = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale)).getStartOfWeek();
  }

  /**
   * Get the minimum number of days necessary in a week before it is considered part of the next year according
   * to the given locale.
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @returns {number}
   */
  static getMinimumDaysInFirstWeek({ locale = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale)).getMinDaysInFirstWeek();
  }

  /**
   * Get the weekdays, which are considered the weekend according to the given locale
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @returns {number[]} an array of weekdays, 1 for Monday through 7 for Sunday
   */
  static getWeekendWeekdays({ locale = null, locObj = null } = {}) {
    // copy the array, because we cache it internally
    return (locObj || Locale.create(locale)).getWeekendDays().slice();
  }

  /**
   * Return an array of standalone month names.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @param {string} [opts.outputCalendar='gregory'] - the calendar
   * @example Info.months()[0] //=> 'January'
   * @example Info.months('short')[0] //=> 'Jan'
   * @example Info.months('numeric')[0] //=> '1'
   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
   * @return {Array}
   */
  static months(
    length = "long",
    { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}
  ) {
    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);
  }

  /**
   * Return an array of format month names.
   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
   * changes the string.
   * See {@link Info#months}
   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @param {string} [opts.outputCalendar='gregory'] - the calendar
   * @return {Array}
   */
  static monthsFormat(
    length = "long",
    { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}
  ) {
    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);
  }

  /**
   * Return an array of standalone week names.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @example Info.weekdays()[0] //=> 'Monday'
   * @example Info.weekdays('short')[0] //=> 'Mon'
   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
   * @return {Array}
   */
  static weekdays(length = "long", { locale = null, numberingSystem = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);
  }

  /**
   * Return an array of format week names.
   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
   * changes the string.
   * See {@link Info#weekdays}
   * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale=null] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @return {Array}
   */
  static weekdaysFormat(
    length = "long",
    { locale = null, numberingSystem = null, locObj = null } = {}
  ) {
    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);
  }

  /**
   * Return an array of meridiems.
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @example Info.meridiems() //=> [ 'AM', 'PM' ]
   * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
   * @return {Array}
   */
  static meridiems({ locale = null } = {}) {
    return Locale.create(locale).meridiems();
  }

  /**
   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
   * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @example Info.eras() //=> [ 'BC', 'AD' ]
   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
   * @return {Array}
   */
  static eras(length = "short", { locale = null } = {}) {
    return Locale.create(locale, null, "gregory").eras(length);
  }

  /**
   * Return the set of available features in this environment.
   * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.
   * Keys:
   * * `relative`: whether this environment supports relative time formatting
   * * `localeWeek`: whether this environment supports different weekdays for the start of the week based on the locale
   * @example Info.features() //=> { relative: false, localeWeek: true }
   * @return {Object}
   */
  static features() {
    return { relative: hasRelative(), localeWeek: hasLocaleWeekInfo() };
  }
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/diff.js


function dayDiff(earlier, later) {
  const utcDayStart = (dt) => dt.toUTC(0, { keepLocalTime: true }).startOf("day").valueOf(),
    ms = utcDayStart(later) - utcDayStart(earlier);
  return Math.floor(Duration.fromMillis(ms).as("days"));
}

function highOrderDiffs(cursor, later, units) {
  const differs = [
    ["years", (a, b) => b.year - a.year],
    ["quarters", (a, b) => b.quarter - a.quarter + (b.year - a.year) * 4],
    ["months", (a, b) => b.month - a.month + (b.year - a.year) * 12],
    [
      "weeks",
      (a, b) => {
        const days = dayDiff(a, b);
        return (days - (days % 7)) / 7;
      },
    ],
    ["days", dayDiff],
  ];

  const results = {};
  const earlier = cursor;
  let lowestOrder, highWater;

  /* This loop tries to diff using larger units first.
     If we overshoot, we backtrack and try the next smaller unit.
     "cursor" starts out at the earlier timestamp and moves closer and closer to "later"
     as we use smaller and smaller units.
     highWater keeps track of where we would be if we added one more of the smallest unit,
     this is used later to potentially convert any difference smaller than the smallest higher order unit
     into a fraction of that smallest higher order unit
  */
  for (const [unit, differ] of differs) {
    if (units.indexOf(unit) >= 0) {
      lowestOrder = unit;

      results[unit] = differ(cursor, later);
      highWater = earlier.plus(results);

      if (highWater > later) {
        // we overshot the end point, backtrack cursor by 1
        results[unit]--;
        cursor = earlier.plus(results);

        // if we are still overshooting now, we need to backtrack again
        // this happens in certain situations when diffing times in different zones,
        // because this calculation ignores time zones
        if (cursor > later) {
          // keep the "overshot by 1" around as highWater
          highWater = cursor;
          // backtrack cursor by 1
          results[unit]--;
          cursor = earlier.plus(results);
        }
      } else {
        cursor = highWater;
      }
    }
  }

  return [cursor, results, highWater, lowestOrder];
}

/* harmony default export */ function diff(earlier, later, units, opts) {
  let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);

  const remainingMillis = later - cursor;

  const lowerOrderUnits = units.filter(
    (u) => ["hours", "minutes", "seconds", "milliseconds"].indexOf(u) >= 0
  );

  if (lowerOrderUnits.length === 0) {
    if (highWater < later) {
      highWater = cursor.plus({ [lowestOrder]: 1 });
    }

    if (highWater !== cursor) {
      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
    }
  }

  const duration = Duration.fromObject(results, opts);

  if (lowerOrderUnits.length > 0) {
    return Duration.fromMillis(remainingMillis, opts)
      .shiftTo(...lowerOrderUnits)
      .plus(duration);
  } else {
    return duration;
  }
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/digits.js
const numberingSystems = {
  arab: "[\u0660-\u0669]",
  arabext: "[\u06F0-\u06F9]",
  bali: "[\u1B50-\u1B59]",
  beng: "[\u09E6-\u09EF]",
  deva: "[\u0966-\u096F]",
  fullwide: "[\uFF10-\uFF19]",
  gujr: "[\u0AE6-\u0AEF]",
  hanidec: "[〇|一|二|三|四|五|六|七|八|九]",
  khmr: "[\u17E0-\u17E9]",
  knda: "[\u0CE6-\u0CEF]",
  laoo: "[\u0ED0-\u0ED9]",
  limb: "[\u1946-\u194F]",
  mlym: "[\u0D66-\u0D6F]",
  mong: "[\u1810-\u1819]",
  mymr: "[\u1040-\u1049]",
  orya: "[\u0B66-\u0B6F]",
  tamldec: "[\u0BE6-\u0BEF]",
  telu: "[\u0C66-\u0C6F]",
  thai: "[\u0E50-\u0E59]",
  tibt: "[\u0F20-\u0F29]",
  latn: "\\d",
};

const numberingSystemsUTF16 = {
  arab: [1632, 1641],
  arabext: [1776, 1785],
  bali: [6992, 7001],
  beng: [2534, 2543],
  deva: [2406, 2415],
  fullwide: [65296, 65303],
  gujr: [2790, 2799],
  khmr: [6112, 6121],
  knda: [3302, 3311],
  laoo: [3792, 3801],
  limb: [6470, 6479],
  mlym: [3430, 3439],
  mong: [6160, 6169],
  mymr: [4160, 4169],
  orya: [2918, 2927],
  tamldec: [3046, 3055],
  telu: [3174, 3183],
  thai: [3664, 3673],
  tibt: [3872, 3881],
};

const hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");

function parseDigits(str) {
  let value = parseInt(str, 10);
  if (isNaN(value)) {
    value = "";
    for (let i = 0; i < str.length; i++) {
      const code = str.charCodeAt(i);

      if (str[i].search(numberingSystems.hanidec) !== -1) {
        value += hanidecChars.indexOf(str[i]);
      } else {
        for (const key in numberingSystemsUTF16) {
          const [min, max] = numberingSystemsUTF16[key];
          if (code >= min && code <= max) {
            value += code - min;
          }
        }
      }
    }
    return parseInt(value, 10);
  } else {
    return value;
  }
}

function digitRegex({ numberingSystem }, append = "") {
  return new RegExp(`${numberingSystems[numberingSystem || "latn"]}${append}`);
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/tokenParser.js








const MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";

function intUnit(regex, post = (i) => i) {
  return { regex, deser: ([s]) => post(parseDigits(s)) };
}

const NBSP = String.fromCharCode(160);
const spaceOrNBSP = `[ ${NBSP}]`;
const spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");

function fixListRegex(s) {
  // make dots optional and also make them literal
  // make space and non breakable space characters interchangeable
  return s.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);
}

function stripInsensitivities(s) {
  return s
    .replace(/\./g, "") // ignore dots that were made optional
    .replace(spaceOrNBSPRegExp, " ") // interchange space and nbsp
    .toLowerCase();
}

function oneOf(strings, startIndex) {
  if (strings === null) {
    return null;
  } else {
    return {
      regex: RegExp(strings.map(fixListRegex).join("|")),
      deser: ([s]) =>
        strings.findIndex((i) => stripInsensitivities(s) === stripInsensitivities(i)) + startIndex,
    };
  }
}

function offset(regex, groups) {
  return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };
}

function simple(regex) {
  return { regex, deser: ([s]) => s };
}

function escapeToken(value) {
  return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
}

/**
 * @param token
 * @param {Locale} loc
 */
function unitForToken(token, loc) {
  const one = digitRegex(loc),
    two = digitRegex(loc, "{2}"),
    three = digitRegex(loc, "{3}"),
    four = digitRegex(loc, "{4}"),
    six = digitRegex(loc, "{6}"),
    oneOrTwo = digitRegex(loc, "{1,2}"),
    oneToThree = digitRegex(loc, "{1,3}"),
    oneToSix = digitRegex(loc, "{1,6}"),
    oneToNine = digitRegex(loc, "{1,9}"),
    twoToFour = digitRegex(loc, "{2,4}"),
    fourToSix = digitRegex(loc, "{4,6}"),
    literal = (t) => ({ regex: RegExp(escapeToken(t.val)), deser: ([s]) => s, literal: true }),
    unitate = (t) => {
      if (token.literal) {
        return literal(t);
      }
      switch (t.val) {
        // era
        case "G":
          return oneOf(loc.eras("short"), 0);
        case "GG":
          return oneOf(loc.eras("long"), 0);
        // years
        case "y":
          return intUnit(oneToSix);
        case "yy":
          return intUnit(twoToFour, untruncateYear);
        case "yyyy":
          return intUnit(four);
        case "yyyyy":
          return intUnit(fourToSix);
        case "yyyyyy":
          return intUnit(six);
        // months
        case "M":
          return intUnit(oneOrTwo);
        case "MM":
          return intUnit(two);
        case "MMM":
          return oneOf(loc.months("short", true), 1);
        case "MMMM":
          return oneOf(loc.months("long", true), 1);
        case "L":
          return intUnit(oneOrTwo);
        case "LL":
          return intUnit(two);
        case "LLL":
          return oneOf(loc.months("short", false), 1);
        case "LLLL":
          return oneOf(loc.months("long", false), 1);
        // dates
        case "d":
          return intUnit(oneOrTwo);
        case "dd":
          return intUnit(two);
        // ordinals
        case "o":
          return intUnit(oneToThree);
        case "ooo":
          return intUnit(three);
        // time
        case "HH":
          return intUnit(two);
        case "H":
          return intUnit(oneOrTwo);
        case "hh":
          return intUnit(two);
        case "h":
          return intUnit(oneOrTwo);
        case "mm":
          return intUnit(two);
        case "m":
          return intUnit(oneOrTwo);
        case "q":
          return intUnit(oneOrTwo);
        case "qq":
          return intUnit(two);
        case "s":
          return intUnit(oneOrTwo);
        case "ss":
          return intUnit(two);
        case "S":
          return intUnit(oneToThree);
        case "SSS":
          return intUnit(three);
        case "u":
          return simple(oneToNine);
        case "uu":
          return simple(oneOrTwo);
        case "uuu":
          return intUnit(one);
        // meridiem
        case "a":
          return oneOf(loc.meridiems(), 0);
        // weekYear (k)
        case "kkkk":
          return intUnit(four);
        case "kk":
          return intUnit(twoToFour, untruncateYear);
        // weekNumber (W)
        case "W":
          return intUnit(oneOrTwo);
        case "WW":
          return intUnit(two);
        // weekdays
        case "E":
        case "c":
          return intUnit(one);
        case "EEE":
          return oneOf(loc.weekdays("short", false), 1);
        case "EEEE":
          return oneOf(loc.weekdays("long", false), 1);
        case "ccc":
          return oneOf(loc.weekdays("short", true), 1);
        case "cccc":
          return oneOf(loc.weekdays("long", true), 1);
        // offset/zone
        case "Z":
        case "ZZ":
          return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);
        case "ZZZ":
          return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);
        // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing
        // because we don't have any way to figure out what they are
        case "z":
          return simple(/[a-z_+-/]{1,256}?/i);
        // this special-case "token" represents a place where a macro-token expanded into a white-space literal
        // in this case we accept any non-newline white-space
        case " ":
          return simple(/[^\S\n\r]/);
        default:
          return literal(t);
      }
    };

  const unit = unitate(token) || {
    invalidReason: MISSING_FTP,
  };

  unit.token = token;

  return unit;
}

const partTypeStyleToTokenVal = {
  year: {
    "2-digit": "yy",
    numeric: "yyyyy",
  },
  month: {
    numeric: "M",
    "2-digit": "MM",
    short: "MMM",
    long: "MMMM",
  },
  day: {
    numeric: "d",
    "2-digit": "dd",
  },
  weekday: {
    short: "EEE",
    long: "EEEE",
  },
  dayperiod: "a",
  dayPeriod: "a",
  hour12: {
    numeric: "h",
    "2-digit": "hh",
  },
  hour24: {
    numeric: "H",
    "2-digit": "HH",
  },
  minute: {
    numeric: "m",
    "2-digit": "mm",
  },
  second: {
    numeric: "s",
    "2-digit": "ss",
  },
  timeZoneName: {
    long: "ZZZZZ",
    short: "ZZZ",
  },
};

function tokenForPart(part, formatOpts, resolvedOpts) {
  const { type, value } = part;

  if (type === "literal") {
    const isSpace = /^\s+$/.test(value);
    return {
      literal: !isSpace,
      val: isSpace ? " " : value,
    };
  }

  const style = formatOpts[type];

  // The user might have explicitly specified hour12 or hourCycle
  // if so, respect their decision
  // if not, refer back to the resolvedOpts, which are based on the locale
  let actualType = type;
  if (type === "hour") {
    if (formatOpts.hour12 != null) {
      actualType = formatOpts.hour12 ? "hour12" : "hour24";
    } else if (formatOpts.hourCycle != null) {
      if (formatOpts.hourCycle === "h11" || formatOpts.hourCycle === "h12") {
        actualType = "hour12";
      } else {
        actualType = "hour24";
      }
    } else {
      // tokens only differentiate between 24 hours or not,
      // so we do not need to check hourCycle here, which is less supported anyways
      actualType = resolvedOpts.hour12 ? "hour12" : "hour24";
    }
  }
  let val = partTypeStyleToTokenVal[actualType];
  if (typeof val === "object") {
    val = val[style];
  }

  if (val) {
    return {
      literal: false,
      val,
    };
  }

  return undefined;
}

function buildRegex(units) {
  const re = units.map((u) => u.regex).reduce((f, r) => `${f}(${r.source})`, "");
  return [`^${re}$`, units];
}

function match(input, regex, handlers) {
  const matches = input.match(regex);

  if (matches) {
    const all = {};
    let matchIndex = 1;
    for (const i in handlers) {
      if (util_hasOwnProperty(handlers, i)) {
        const h = handlers[i],
          groups = h.groups ? h.groups + 1 : 1;
        if (!h.literal && h.token) {
          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
        }
        matchIndex += groups;
      }
    }
    return [matches, all];
  } else {
    return [matches, {}];
  }
}

function dateTimeFromMatches(matches) {
  const toField = (token) => {
    switch (token) {
      case "S":
        return "millisecond";
      case "s":
        return "second";
      case "m":
        return "minute";
      case "h":
      case "H":
        return "hour";
      case "d":
        return "day";
      case "o":
        return "ordinal";
      case "L":
      case "M":
        return "month";
      case "y":
        return "year";
      case "E":
      case "c":
        return "weekday";
      case "W":
        return "weekNumber";
      case "k":
        return "weekYear";
      case "q":
        return "quarter";
      default:
        return null;
    }
  };

  let zone = null;
  let specificOffset;
  if (!isUndefined(matches.z)) {
    zone = IANAZone.create(matches.z);
  }

  if (!isUndefined(matches.Z)) {
    if (!zone) {
      zone = new FixedOffsetZone(matches.Z);
    }
    specificOffset = matches.Z;
  }

  if (!isUndefined(matches.q)) {
    matches.M = (matches.q - 1) * 3 + 1;
  }

  if (!isUndefined(matches.h)) {
    if (matches.h < 12 && matches.a === 1) {
      matches.h += 12;
    } else if (matches.h === 12 && matches.a === 0) {
      matches.h = 0;
    }
  }

  if (matches.G === 0 && matches.y) {
    matches.y = -matches.y;
  }

  if (!isUndefined(matches.u)) {
    matches.S = parseMillis(matches.u);
  }

  const vals = Object.keys(matches).reduce((r, k) => {
    const f = toField(k);
    if (f) {
      r[f] = matches[k];
    }

    return r;
  }, {});

  return [vals, zone, specificOffset];
}

let dummyDateTimeCache = null;

function getDummyDateTime() {
  if (!dummyDateTimeCache) {
    dummyDateTimeCache = DateTime.fromMillis(1555555555555);
  }

  return dummyDateTimeCache;
}

function maybeExpandMacroToken(token, locale) {
  if (token.literal) {
    return token;
  }

  const formatOpts = Formatter.macroTokenToFormatOpts(token.val);
  const tokens = formatOptsToTokens(formatOpts, locale);

  if (tokens == null || tokens.includes(undefined)) {
    return token;
  }

  return tokens;
}

function expandMacroTokens(tokens, locale) {
  return Array.prototype.concat(...tokens.map((t) => maybeExpandMacroToken(t, locale)));
}

/**
 * @private
 */

function explainFromTokens(locale, input, format) {
  const tokens = expandMacroTokens(Formatter.parseFormat(format), locale),
    units = tokens.map((t) => unitForToken(t, locale)),
    disqualifyingUnit = units.find((t) => t.invalidReason);

  if (disqualifyingUnit) {
    return { input, tokens, invalidReason: disqualifyingUnit.invalidReason };
  } else {
    const [regexString, handlers] = buildRegex(units),
      regex = RegExp(regexString, "i"),
      [rawMatches, matches] = match(input, regex, handlers),
      [result, zone, specificOffset] = matches
        ? dateTimeFromMatches(matches)
        : [null, null, undefined];
    if (util_hasOwnProperty(matches, "a") && util_hasOwnProperty(matches, "H")) {
      throw new ConflictingSpecificationError(
        "Can't include meridiem when specifying 24-hour format"
      );
    }
    return { input, tokens, regex, rawMatches, matches, result, zone, specificOffset };
  }
}

function parseFromTokens(locale, input, format) {
  const { result, zone, specificOffset, invalidReason } = explainFromTokens(locale, input, format);
  return [result, zone, specificOffset, invalidReason];
}

function formatOptsToTokens(formatOpts, locale) {
  if (!formatOpts) {
    return null;
  }

  const formatter = Formatter.create(locale, formatOpts);
  const df = formatter.dtFormatter(getDummyDateTime());
  const parts = df.formatToParts();
  const resolvedOpts = df.resolvedOptions();
  return parts.map((p) => tokenForPart(p, formatOpts, resolvedOpts));
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/datetime.js

















const datetime_INVALID = "Invalid DateTime";
const MAX_DATE = 8.64e15;

function unsupportedZone(zone) {
  return new Invalid("unsupported zone", `the zone "${zone.name}" is not supported`);
}

// we cache week data on the DT object and this intermediates the cache
/**
 * @param {DateTime} dt
 */
function possiblyCachedWeekData(dt) {
  if (dt.weekData === null) {
    dt.weekData = gregorianToWeek(dt.c);
  }
  return dt.weekData;
}

/**
 * @param {DateTime} dt
 */
function possiblyCachedLocalWeekData(dt) {
  if (dt.localWeekData === null) {
    dt.localWeekData = gregorianToWeek(
      dt.c,
      dt.loc.getMinDaysInFirstWeek(),
      dt.loc.getStartOfWeek()
    );
  }
  return dt.localWeekData;
}

// clone really means, "make a new object with these modifications". all "setters" really use this
// to create a new object while only changing some of the properties
function datetime_clone(inst, alts) {
  const current = {
    ts: inst.ts,
    zone: inst.zone,
    c: inst.c,
    o: inst.o,
    loc: inst.loc,
    invalid: inst.invalid,
  };
  return new DateTime({ ...current, ...alts, old: current });
}

// find the right offset a given local time. The o input is our guess, which determines which
// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)
function fixOffset(localTS, o, tz) {
  // Our UTC time is just a guess because our offset is just a guess
  let utcGuess = localTS - o * 60 * 1000;

  // Test whether the zone matches the offset for this ts
  const o2 = tz.offset(utcGuess);

  // If so, offset didn't change and we're done
  if (o === o2) {
    return [utcGuess, o];
  }

  // If not, change the ts by the difference in the offset
  utcGuess -= (o2 - o) * 60 * 1000;

  // If that gives us the local time we want, we're done
  const o3 = tz.offset(utcGuess);
  if (o2 === o3) {
    return [utcGuess, o2];
  }

  // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time
  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];
}

// convert an epoch timestamp into a calendar object with the given offset
function tsToObj(ts, offset) {
  ts += offset * 60 * 1000;

  const d = new Date(ts);

  return {
    year: d.getUTCFullYear(),
    month: d.getUTCMonth() + 1,
    day: d.getUTCDate(),
    hour: d.getUTCHours(),
    minute: d.getUTCMinutes(),
    second: d.getUTCSeconds(),
    millisecond: d.getUTCMilliseconds(),
  };
}

// convert a calendar object to a epoch timestamp
function objToTS(obj, offset, zone) {
  return fixOffset(objToLocalTS(obj), offset, zone);
}

// create a new DT instance by adding a duration, adjusting for DSTs
function adjustTime(inst, dur) {
  const oPre = inst.o,
    year = inst.c.year + Math.trunc(dur.years),
    month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3,
    c = {
      ...inst.c,
      year,
      month,
      day:
        Math.min(inst.c.day, daysInMonth(year, month)) +
        Math.trunc(dur.days) +
        Math.trunc(dur.weeks) * 7,
    },
    millisToAdd = Duration.fromObject({
      years: dur.years - Math.trunc(dur.years),
      quarters: dur.quarters - Math.trunc(dur.quarters),
      months: dur.months - Math.trunc(dur.months),
      weeks: dur.weeks - Math.trunc(dur.weeks),
      days: dur.days - Math.trunc(dur.days),
      hours: dur.hours,
      minutes: dur.minutes,
      seconds: dur.seconds,
      milliseconds: dur.milliseconds,
    }).as("milliseconds"),
    localTS = objToLocalTS(c);

  let [ts, o] = fixOffset(localTS, oPre, inst.zone);

  if (millisToAdd !== 0) {
    ts += millisToAdd;
    // that could have changed the offset by going over a DST, but we want to keep the ts the same
    o = inst.zone.offset(ts);
  }

  return { ts, o };
}

// helper useful in turning the results of parsing into real dates
// by handling the zone options
function parseDataToDateTime(parsed, parsedZone, opts, format, text, specificOffset) {
  const { setZone, zone } = opts;
  if ((parsed && Object.keys(parsed).length !== 0) || parsedZone) {
    const interpretationZone = parsedZone || zone,
      inst = DateTime.fromObject(parsed, {
        ...opts,
        zone: interpretationZone,
        specificOffset,
      });
    return setZone ? inst : inst.setZone(zone);
  } else {
    return DateTime.invalid(
      new Invalid("unparsable", `the input "${text}" can't be parsed as ${format}`)
    );
  }
}

// if you want to output a technical format (e.g. RFC 2822), this helper
// helps handle the details
function toTechFormat(dt, format, allowZ = true) {
  return dt.isValid
    ? Formatter.create(Locale.create("en-US"), {
        allowZ,
        forceSimple: true,
      }).formatDateTimeFromString(dt, format)
    : null;
}

function toISODate(o, extended) {
  const longFormat = o.c.year > 9999 || o.c.year < 0;
  let c = "";
  if (longFormat && o.c.year >= 0) c += "+";
  c += padStart(o.c.year, longFormat ? 6 : 4);

  if (extended) {
    c += "-";
    c += padStart(o.c.month);
    c += "-";
    c += padStart(o.c.day);
  } else {
    c += padStart(o.c.month);
    c += padStart(o.c.day);
  }
  return c;
}

function toISOTime(
  o,
  extended,
  suppressSeconds,
  suppressMilliseconds,
  includeOffset,
  extendedZone
) {
  let c = padStart(o.c.hour);
  if (extended) {
    c += ":";
    c += padStart(o.c.minute);
    if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {
      c += ":";
    }
  } else {
    c += padStart(o.c.minute);
  }

  if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {
    c += padStart(o.c.second);

    if (o.c.millisecond !== 0 || !suppressMilliseconds) {
      c += ".";
      c += padStart(o.c.millisecond, 3);
    }
  }

  if (includeOffset) {
    if (o.isOffsetFixed && o.offset === 0 && !extendedZone) {
      c += "Z";
    } else if (o.o < 0) {
      c += "-";
      c += padStart(Math.trunc(-o.o / 60));
      c += ":";
      c += padStart(Math.trunc(-o.o % 60));
    } else {
      c += "+";
      c += padStart(Math.trunc(o.o / 60));
      c += ":";
      c += padStart(Math.trunc(o.o % 60));
    }
  }

  if (extendedZone) {
    c += "[" + o.zone.ianaName + "]";
  }
  return c;
}

// defaults for unspecified units in the supported calendars
const defaultUnitValues = {
    month: 1,
    day: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0,
  },
  defaultWeekUnitValues = {
    weekNumber: 1,
    weekday: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0,
  },
  defaultOrdinalUnitValues = {
    ordinal: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0,
  };

// Units in the supported calendars, sorted by bigness
const datetime_orderedUnits = ["year", "month", "day", "hour", "minute", "second", "millisecond"],
  orderedWeekUnits = [
    "weekYear",
    "weekNumber",
    "weekday",
    "hour",
    "minute",
    "second",
    "millisecond",
  ],
  orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"];

// standardize case and plurality in units
function normalizeUnit(unit) {
  const normalized = {
    year: "year",
    years: "year",
    month: "month",
    months: "month",
    day: "day",
    days: "day",
    hour: "hour",
    hours: "hour",
    minute: "minute",
    minutes: "minute",
    quarter: "quarter",
    quarters: "quarter",
    second: "second",
    seconds: "second",
    millisecond: "millisecond",
    milliseconds: "millisecond",
    weekday: "weekday",
    weekdays: "weekday",
    weeknumber: "weekNumber",
    weeksnumber: "weekNumber",
    weeknumbers: "weekNumber",
    weekyear: "weekYear",
    weekyears: "weekYear",
    ordinal: "ordinal",
  }[unit.toLowerCase()];

  if (!normalized) throw new InvalidUnitError(unit);

  return normalized;
}

function normalizeUnitWithLocalWeeks(unit) {
  switch (unit.toLowerCase()) {
    case "localweekday":
    case "localweekdays":
      return "localWeekday";
    case "localweeknumber":
    case "localweeknumbers":
      return "localWeekNumber";
    case "localweekyear":
    case "localweekyears":
      return "localWeekYear";
    default:
      return normalizeUnit(unit);
  }
}

// this is a dumbed down version of fromObject() that runs about 60% faster
// but doesn't do any validation, makes a bunch of assumptions about what units
// are present, and so on.
function quickDT(obj, opts) {
  const zone = normalizeZone(opts.zone, Settings.defaultZone),
    loc = Locale.fromObject(opts),
    tsNow = Settings.now();

  let ts, o;

  // assume we have the higher-order units
  if (!isUndefined(obj.year)) {
    for (const u of datetime_orderedUnits) {
      if (isUndefined(obj[u])) {
        obj[u] = defaultUnitValues[u];
      }
    }

    const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);
    if (invalid) {
      return DateTime.invalid(invalid);
    }

    const offsetProvis = zone.offset(tsNow);
    [ts, o] = objToTS(obj, offsetProvis, zone);
  } else {
    ts = tsNow;
  }

  return new DateTime({ ts, zone, loc, o });
}

function diffRelative(start, end, opts) {
  const round = isUndefined(opts.round) ? true : opts.round,
    format = (c, unit) => {
      c = roundTo(c, round || opts.calendary ? 0 : 2, true);
      const formatter = end.loc.clone(opts).relFormatter(opts);
      return formatter.format(c, unit);
    },
    differ = (unit) => {
      if (opts.calendary) {
        if (!end.hasSame(start, unit)) {
          return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);
        } else return 0;
      } else {
        return end.diff(start, unit).get(unit);
      }
    };

  if (opts.unit) {
    return format(differ(opts.unit), opts.unit);
  }

  for (const unit of opts.units) {
    const count = differ(unit);
    if (Math.abs(count) >= 1) {
      return format(count, unit);
    }
  }
  return format(start > end ? -0 : 0, opts.units[opts.units.length - 1]);
}

function lastOpts(argList) {
  let opts = {},
    args;
  if (argList.length > 0 && typeof argList[argList.length - 1] === "object") {
    opts = argList[argList.length - 1];
    args = Array.from(argList).slice(0, argList.length - 1);
  } else {
    args = Array.from(argList);
  }
  return [opts, args];
}

/**
 * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.
 *
 * A DateTime comprises of:
 * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.
 * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).
 * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.
 *
 * Here is a brief overview of the most commonly used functionality it provides:
 *
 * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link DateTime.local}, {@link DateTime.utc}, and (most flexibly) {@link DateTime.fromObject}. To create one from a standard string format, use {@link DateTime.fromISO}, {@link DateTime.fromHTTP}, and {@link DateTime.fromRFC2822}. To create one from a custom string format, use {@link DateTime.fromFormat}. To create one from a native JS date, use {@link DateTime.fromJSDate}.
 * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link DateTime#toObject}), use the {@link DateTime#year}, {@link DateTime#month},
 * {@link DateTime#day}, {@link DateTime#hour}, {@link DateTime#minute}, {@link DateTime#second}, {@link DateTime#millisecond} accessors.
 * * **Week calendar**: For ISO week calendar attributes, see the {@link DateTime#weekYear}, {@link DateTime#weekNumber}, and {@link DateTime#weekday} accessors.
 * * **Configuration** See the {@link DateTime#locale} and {@link DateTime#numberingSystem} accessors.
 * * **Transformation**: To transform the DateTime into other DateTimes, use {@link DateTime#set}, {@link DateTime#reconfigure}, {@link DateTime#setZone}, {@link DateTime#setLocale}, {@link DateTime.plus}, {@link DateTime#minus}, {@link DateTime#endOf}, {@link DateTime#startOf}, {@link DateTime#toUTC}, and {@link DateTime#toLocal}.
 * * **Output**: To convert the DateTime to other representations, use the {@link DateTime#toRelative}, {@link DateTime#toRelativeCalendar}, {@link DateTime#toJSON}, {@link DateTime#toISO}, {@link DateTime#toHTTP}, {@link DateTime#toObject}, {@link DateTime#toRFC2822}, {@link DateTime#toString}, {@link DateTime#toLocaleString}, {@link DateTime#toFormat}, {@link DateTime#toMillis} and {@link DateTime#toJSDate}.
 *
 * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.
 */
class DateTime {
  /**
   * @access private
   */
  constructor(config) {
    const zone = config.zone || Settings.defaultZone;

    let invalid =
      config.invalid ||
      (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) ||
      (!zone.isValid ? unsupportedZone(zone) : null);
    /**
     * @access private
     */
    this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;

    let c = null,
      o = null;
    if (!invalid) {
      const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);

      if (unchanged) {
        [c, o] = [config.old.c, config.old.o];
      } else {
        const ot = zone.offset(this.ts);
        c = tsToObj(this.ts, ot);
        invalid = Number.isNaN(c.year) ? new Invalid("invalid input") : null;
        c = invalid ? null : c;
        o = invalid ? null : ot;
      }
    }

    /**
     * @access private
     */
    this._zone = zone;
    /**
     * @access private
     */
    this.loc = config.loc || Locale.create();
    /**
     * @access private
     */
    this.invalid = invalid;
    /**
     * @access private
     */
    this.weekData = null;
    /**
     * @access private
     */
    this.localWeekData = null;
    /**
     * @access private
     */
    this.c = c;
    /**
     * @access private
     */
    this.o = o;
    /**
     * @access private
     */
    this.isLuxonDateTime = true;
  }

  // CONSTRUCT

  /**
   * Create a DateTime for the current instant, in the system's time zone.
   *
   * Use Settings to override these default values if needed.
   * @example DateTime.now().toISO() //~> now in the ISO format
   * @return {DateTime}
   */
  static now() {
    return new DateTime({});
  }

  /**
   * Create a local DateTime
   * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
   * @param {number} [month=1] - The month, 1-indexed
   * @param {number} [day=1] - The day of the month, 1-indexed
   * @param {number} [hour=0] - The hour of the day, in 24-hour time
   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
   * @example DateTime.local()                                  //~> now
   * @example DateTime.local({ zone: "America/New_York" })      //~> now, in US east coast time
   * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00
   * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00
   * @example DateTime.local(2017, 3, 12, { locale: "fr" })     //~> 2017-03-12T00:00:00, with a French locale
   * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00
   * @example DateTime.local(2017, 3, 12, 5, { zone: "utc" })   //~> 2017-03-12T05:00:00, in UTC
   * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00
   * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10
   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765
   * @return {DateTime}
   */
  static local() {
    const [opts, args] = lastOpts(arguments),
      [year, month, day, hour, minute, second, millisecond] = args;
    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
  }

  /**
   * Create a DateTime in UTC
   * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
   * @param {number} [month=1] - The month, 1-indexed
   * @param {number} [day=1] - The day of the month
   * @param {number} [hour=0] - The hour of the day, in 24-hour time
   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
   * @param {Object} options - configuration options for the DateTime
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance
   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance
   * @example DateTime.utc()                                              //~> now
   * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z
   * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z
   * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z
   * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z
   * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z
   * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: "fr" })          //~> 2017-03-12T05:45:00Z with a French locale
   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z
   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: "fr" }) //~> 2017-03-12T05:45:10.765Z with a French locale
   * @return {DateTime}
   */
  static utc() {
    const [opts, args] = lastOpts(arguments),
      [year, month, day, hour, minute, second, millisecond] = args;

    opts.zone = FixedOffsetZone.utcInstance;
    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
  }

  /**
   * Create a DateTime from a JavaScript Date object. Uses the default zone.
   * @param {Date} date - a JavaScript Date object
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @return {DateTime}
   */
  static fromJSDate(date, options = {}) {
    const ts = isDate(date) ? date.valueOf() : NaN;
    if (Number.isNaN(ts)) {
      return DateTime.invalid("invalid input");
    }

    const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);
    if (!zoneToUse.isValid) {
      return DateTime.invalid(unsupportedZone(zoneToUse));
    }

    return new DateTime({
      ts: ts,
      zone: zoneToUse,
      loc: Locale.fromObject(options),
    });
  }

  /**
   * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
   * @param {number} milliseconds - a number of milliseconds since 1970 UTC
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @return {DateTime}
   */
  static fromMillis(milliseconds, options = {}) {
    if (!isNumber(milliseconds)) {
      throw new InvalidArgumentError(
        `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`
      );
    } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
      // this isn't perfect because because we can still end up out of range because of additional shifting, but it's a start
      return DateTime.invalid("Timestamp out of range");
    } else {
      return new DateTime({
        ts: milliseconds,
        zone: normalizeZone(options.zone, Settings.defaultZone),
        loc: Locale.fromObject(options),
      });
    }
  }

  /**
   * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
   * @param {number} seconds - a number of seconds since 1970 UTC
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @return {DateTime}
   */
  static fromSeconds(seconds, options = {}) {
    if (!isNumber(seconds)) {
      throw new InvalidArgumentError("fromSeconds requires a numerical input");
    } else {
      return new DateTime({
        ts: seconds * 1000,
        zone: normalizeZone(options.zone, Settings.defaultZone),
        loc: Locale.fromObject(options),
      });
    }
  }

  /**
   * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.
   * @param {Object} obj - the object to create the DateTime from
   * @param {number} obj.year - a year, such as 1987
   * @param {number} obj.month - a month, 1-12
   * @param {number} obj.day - a day of the month, 1-31, depending on the month
   * @param {number} obj.ordinal - day of the year, 1-365 or 366
   * @param {number} obj.weekYear - an ISO week year
   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
   * @param {number} obj.localWeekYear - a week year, according to the locale
   * @param {number} obj.localWeekNumber - a week number, between 1 and 52 or 53, depending on the year, according to the locale
   * @param {number} obj.localWeekday - a weekday, 1-7, where 1 is the first and 7 is the last day of the week, according to the locale
   * @param {number} obj.hour - hour of the day, 0-23
   * @param {number} obj.minute - minute of the hour, 0-59
   * @param {number} obj.second - second of the minute, 0-59
   * @param {number} obj.millisecond - millisecond of the second, 0-999
   * @param {Object} opts - options for creating this DateTime
   * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
   * @param {string} [opts.locale='system\'s locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })
   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
   * @example DateTime.fromObject({ localWeekYear: 2022, localWeekNumber: 1, localWeekday: 1 }, { locale: "en-US" }).toISODate() //=> '2021-12-26'
   * @return {DateTime}
   */
  static fromObject(obj, opts = {}) {
    obj = obj || {};
    const zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);
    if (!zoneToUse.isValid) {
      return DateTime.invalid(unsupportedZone(zoneToUse));
    }

    const loc = Locale.fromObject(opts);
    const normalized = normalizeObject(obj, normalizeUnitWithLocalWeeks);
    const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, loc);

    const tsNow = Settings.now(),
      offsetProvis = !isUndefined(opts.specificOffset)
        ? opts.specificOffset
        : zoneToUse.offset(tsNow),
      containsOrdinal = !isUndefined(normalized.ordinal),
      containsGregorYear = !isUndefined(normalized.year),
      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),
      containsGregor = containsGregorYear || containsGregorMD,
      definiteWeekDef = normalized.weekYear || normalized.weekNumber;

    // cases:
    // just a weekday -> this week's instance of that weekday, no worries
    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error
    // (gregorian month or day) + ordinal -> error
    // otherwise just use weeks or ordinals or gregorian, depending on what's specified

    if ((containsGregor || containsOrdinal) && definiteWeekDef) {
      throw new ConflictingSpecificationError(
        "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
      );
    }

    if (containsGregorMD && containsOrdinal) {
      throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
    }

    const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);

    // configure ourselves to deal with gregorian dates or week stuff
    let units,
      defaultValues,
      objNow = tsToObj(tsNow, offsetProvis);
    if (useWeekData) {
      units = orderedWeekUnits;
      defaultValues = defaultWeekUnitValues;
      objNow = gregorianToWeek(objNow, minDaysInFirstWeek, startOfWeek);
    } else if (containsOrdinal) {
      units = orderedOrdinalUnits;
      defaultValues = defaultOrdinalUnitValues;
      objNow = gregorianToOrdinal(objNow);
    } else {
      units = datetime_orderedUnits;
      defaultValues = defaultUnitValues;
    }

    // set default values for missing stuff
    let foundFirst = false;
    for (const u of units) {
      const v = normalized[u];
      if (!isUndefined(v)) {
        foundFirst = true;
      } else if (foundFirst) {
        normalized[u] = defaultValues[u];
      } else {
        normalized[u] = objNow[u];
      }
    }

    // make sure the values we have are in range
    const higherOrderInvalid = useWeekData
        ? hasInvalidWeekData(normalized, minDaysInFirstWeek, startOfWeek)
        : containsOrdinal
        ? hasInvalidOrdinalData(normalized)
        : hasInvalidGregorianData(normalized),
      invalid = higherOrderInvalid || hasInvalidTimeData(normalized);

    if (invalid) {
      return DateTime.invalid(invalid);
    }

    // compute the actual time
    const gregorian = useWeekData
        ? weekToGregorian(normalized, minDaysInFirstWeek, startOfWeek)
        : containsOrdinal
        ? ordinalToGregorian(normalized)
        : normalized,
      [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),
      inst = new DateTime({
        ts: tsFinal,
        zone: zoneToUse,
        o: offsetFinal,
        loc,
      });

    // gregorian data + weekday serves only to validate
    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
      return DateTime.invalid(
        "mismatched weekday",
        `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`
      );
    }

    return inst;
  }

  /**
   * Create a DateTime from an ISO 8601 string
   * @param {string} text - the ISO string
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance
   * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromISO('2016-05-25T09:08:34.123')
   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
   * @example DateTime.fromISO('2016-W05-4')
   * @return {DateTime}
   */
  static fromISO(text, opts = {}) {
    const [vals, parsedZone] = parseISODate(text);
    return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
  }

  /**
   * Create a DateTime from an RFC 2822 string
   * @param {string} text - the RFC 2822 string
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
   * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
   * @return {DateTime}
   */
  static fromRFC2822(text, opts = {}) {
    const [vals, parsedZone] = parseRFC2822Date(text);
    return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
  }

  /**
   * Create a DateTime from an HTTP header date
   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
   * @param {string} text - the HTTP header date
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
   * @return {DateTime}
   */
  static fromHTTP(text, opts = {}) {
    const [vals, parsedZone] = parseHTTPDate(text);
    return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
  }

  /**
   * Create a DateTime from an input string and format string.
   * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).
   * @param {string} text - the string to parse
   * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @return {DateTime}
   */
  static fromFormat(text, fmt, opts = {}) {
    if (isUndefined(text) || isUndefined(fmt)) {
      throw new InvalidArgumentError("fromFormat requires an input string and a format");
    }

    const { locale = null, numberingSystem = null } = opts,
      localeToUse = Locale.fromOpts({
        locale,
        numberingSystem,
        defaultToEN: true,
      }),
      [vals, parsedZone, specificOffset, invalid] = parseFromTokens(localeToUse, text, fmt);
    if (invalid) {
      return DateTime.invalid(invalid);
    } else {
      return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text, specificOffset);
    }
  }

  /**
   * @deprecated use fromFormat instead
   */
  static fromString(text, fmt, opts = {}) {
    return DateTime.fromFormat(text, fmt, opts);
  }

  /**
   * Create a DateTime from a SQL date, time, or datetime
   * Defaults to en-US if no locale has been specified, regardless of the system's locale
   * @param {string} text - the string to parse
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @example DateTime.fromSQL('2017-05-15')
   * @example DateTime.fromSQL('2017-05-15 09:12:34')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
   * @example DateTime.fromSQL('09:12:34.342')
   * @return {DateTime}
   */
  static fromSQL(text, opts = {}) {
    const [vals, parsedZone] = parseSQL(text);
    return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
  }

  /**
   * Create an invalid DateTime.
   * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent.
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {DateTime}
   */
  static invalid(reason, explanation = null) {
    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
    }

    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

    if (Settings.throwOnInvalid) {
      throw new InvalidDateTimeError(invalid);
    } else {
      return new DateTime({ invalid });
    }
  }

  /**
   * Check if an object is an instance of DateTime. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */
  static isDateTime(o) {
    return (o && o.isLuxonDateTime) || false;
  }

  /**
   * Produce the format string for a set of options
   * @param formatOpts
   * @param localeOpts
   * @returns {string}
   */
  static parseFormatForOpts(formatOpts, localeOpts = {}) {
    const tokenList = formatOptsToTokens(formatOpts, Locale.fromObject(localeOpts));
    return !tokenList ? null : tokenList.map((t) => (t ? t.val : null)).join("");
  }

  /**
   * Produce the the fully expanded format token for the locale
   * Does NOT quote characters, so quoted tokens will not round trip correctly
   * @param fmt
   * @param localeOpts
   * @returns {string}
   */
  static expandFormat(fmt, localeOpts = {}) {
    const expanded = expandMacroTokens(Formatter.parseFormat(fmt), Locale.fromObject(localeOpts));
    return expanded.map((t) => t.val).join("");
  }

  // INFO

  /**
   * Get the value of unit.
   * @param {string} unit - a unit such as 'minute' or 'day'
   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
   * @return {number}
   */
  get(unit) {
    return this[unit];
  }

  /**
   * Returns whether the DateTime is valid. Invalid DateTimes occur when:
   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
   * * The DateTime was created by an operation on another invalid date
   * @type {boolean}
   */
  get isValid() {
    return this.invalid === null;
  }

  /**
   * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
   * @type {string}
   */
  get invalidReason() {
    return this.invalid ? this.invalid.reason : null;
  }

  /**
   * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
   * @type {string}
   */
  get invalidExplanation() {
    return this.invalid ? this.invalid.explanation : null;
  }

  /**
   * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
   *
   * @type {string}
   */
  get locale() {
    return this.isValid ? this.loc.locale : null;
  }

  /**
   * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
   *
   * @type {string}
   */
  get numberingSystem() {
    return this.isValid ? this.loc.numberingSystem : null;
  }

  /**
   * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
   *
   * @type {string}
   */
  get outputCalendar() {
    return this.isValid ? this.loc.outputCalendar : null;
  }

  /**
   * Get the time zone associated with this DateTime.
   * @type {Zone}
   */
  get zone() {
    return this._zone;
  }

  /**
   * Get the name of the time zone.
   * @type {string}
   */
  get zoneName() {
    return this.isValid ? this.zone.name : null;
  }

  /**
   * Get the year
   * @example DateTime.local(2017, 5, 25).year //=> 2017
   * @type {number}
   */
  get year() {
    return this.isValid ? this.c.year : NaN;
  }

  /**
   * Get the quarter
   * @example DateTime.local(2017, 5, 25).quarter //=> 2
   * @type {number}
   */
  get quarter() {
    return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
  }

  /**
   * Get the month (1-12).
   * @example DateTime.local(2017, 5, 25).month //=> 5
   * @type {number}
   */
  get month() {
    return this.isValid ? this.c.month : NaN;
  }

  /**
   * Get the day of the month (1-30ish).
   * @example DateTime.local(2017, 5, 25).day //=> 25
   * @type {number}
   */
  get day() {
    return this.isValid ? this.c.day : NaN;
  }

  /**
   * Get the hour of the day (0-23).
   * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
   * @type {number}
   */
  get hour() {
    return this.isValid ? this.c.hour : NaN;
  }

  /**
   * Get the minute of the hour (0-59).
   * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
   * @type {number}
   */
  get minute() {
    return this.isValid ? this.c.minute : NaN;
  }

  /**
   * Get the second of the minute (0-59).
   * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
   * @type {number}
   */
  get second() {
    return this.isValid ? this.c.second : NaN;
  }

  /**
   * Get the millisecond of the second (0-999).
   * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
   * @type {number}
   */
  get millisecond() {
    return this.isValid ? this.c.millisecond : NaN;
  }

  /**
   * Get the week year
   * @see https://en.wikipedia.org/wiki/ISO_week_date
   * @example DateTime.local(2014, 12, 31).weekYear //=> 2015
   * @type {number}
   */
  get weekYear() {
    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
  }

  /**
   * Get the week number of the week year (1-52ish).
   * @see https://en.wikipedia.org/wiki/ISO_week_date
   * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
   * @type {number}
   */
  get weekNumber() {
    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
  }

  /**
   * Get the day of the week.
   * 1 is Monday and 7 is Sunday
   * @see https://en.wikipedia.org/wiki/ISO_week_date
   * @example DateTime.local(2014, 11, 31).weekday //=> 4
   * @type {number}
   */
  get weekday() {
    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
  }

  /**
   * Returns true if this date is on a weekend according to the locale, false otherwise
   * @returns {boolean}
   */
  get isWeekend() {
    return this.isValid && this.loc.getWeekendDays().includes(this.weekday);
  }

  /**
   * Get the day of the week according to the locale.
   * 1 is the first day of the week and 7 is the last day of the week.
   * If the locale assigns Sunday as the first day of the week, then a date which is a Sunday will return 1,
   * @returns {number}
   */
  get localWeekday() {
    return this.isValid ? possiblyCachedLocalWeekData(this).weekday : NaN;
  }

  /**
   * Get the week number of the week year according to the locale. Different locales assign week numbers differently,
   * because the week can start on different days of the week (see localWeekday) and because a different number of days
   * is required for a week to count as the first week of a year.
   * @returns {number}
   */
  get localWeekNumber() {
    return this.isValid ? possiblyCachedLocalWeekData(this).weekNumber : NaN;
  }

  /**
   * Get the week year according to the locale. Different locales assign week numbers (and therefor week years)
   * differently, see localWeekNumber.
   * @returns {number}
   */
  get localWeekYear() {
    return this.isValid ? possiblyCachedLocalWeekData(this).weekYear : NaN;
  }

  /**
   * Get the ordinal (meaning the day of the year)
   * @example DateTime.local(2017, 5, 25).ordinal //=> 145
   * @type {number|DateTime}
   */
  get ordinal() {
    return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
  }

  /**
   * Get the human readable short month name, such as 'Oct'.
   * Defaults to the system's locale if no locale has been specified
   * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
   * @type {string}
   */
  get monthShort() {
    return this.isValid ? Info.months("short", { locObj: this.loc })[this.month - 1] : null;
  }

  /**
   * Get the human readable long month name, such as 'October'.
   * Defaults to the system's locale if no locale has been specified
   * @example DateTime.local(2017, 10, 30).monthLong //=> October
   * @type {string}
   */
  get monthLong() {
    return this.isValid ? Info.months("long", { locObj: this.loc })[this.month - 1] : null;
  }

  /**
   * Get the human readable short weekday, such as 'Mon'.
   * Defaults to the system's locale if no locale has been specified
   * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
   * @type {string}
   */
  get weekdayShort() {
    return this.isValid ? Info.weekdays("short", { locObj: this.loc })[this.weekday - 1] : null;
  }

  /**
   * Get the human readable long weekday, such as 'Monday'.
   * Defaults to the system's locale if no locale has been specified
   * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
   * @type {string}
   */
  get weekdayLong() {
    return this.isValid ? Info.weekdays("long", { locObj: this.loc })[this.weekday - 1] : null;
  }

  /**
   * Get the UTC offset of this DateTime in minutes
   * @example DateTime.now().offset //=> -240
   * @example DateTime.utc().offset //=> 0
   * @type {number}
   */
  get offset() {
    return this.isValid ? +this.o : NaN;
  }

  /**
   * Get the short human name for the zone's current offset, for example "EST" or "EDT".
   * Defaults to the system's locale if no locale has been specified
   * @type {string}
   */
  get offsetNameShort() {
    if (this.isValid) {
      return this.zone.offsetName(this.ts, {
        format: "short",
        locale: this.locale,
      });
    } else {
      return null;
    }
  }

  /**
   * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
   * Defaults to the system's locale if no locale has been specified
   * @type {string}
   */
  get offsetNameLong() {
    if (this.isValid) {
      return this.zone.offsetName(this.ts, {
        format: "long",
        locale: this.locale,
      });
    } else {
      return null;
    }
  }

  /**
   * Get whether this zone's offset ever changes, as in a DST.
   * @type {boolean}
   */
  get isOffsetFixed() {
    return this.isValid ? this.zone.isUniversal : null;
  }

  /**
   * Get whether the DateTime is in a DST.
   * @type {boolean}
   */
  get isInDST() {
    if (this.isOffsetFixed) {
      return false;
    } else {
      return (
        this.offset > this.set({ month: 1, day: 1 }).offset ||
        this.offset > this.set({ month: 5 }).offset
      );
    }
  }

  /**
   * Get those DateTimes which have the same local time as this DateTime, but a different offset from UTC
   * in this DateTime's zone. During DST changes local time can be ambiguous, for example
   * `2023-10-29T02:30:00` in `Europe/Berlin` can have offset `+01:00` or `+02:00`.
   * This method will return both possible DateTimes if this DateTime's local time is ambiguous.
   * @returns {DateTime[]}
   */
  getPossibleOffsets() {
    if (!this.isValid || this.isOffsetFixed) {
      return [this];
    }
    const dayMs = 86400000;
    const minuteMs = 60000;
    const localTS = objToLocalTS(this.c);
    const oEarlier = this.zone.offset(localTS - dayMs);
    const oLater = this.zone.offset(localTS + dayMs);

    const o1 = this.zone.offset(localTS - oEarlier * minuteMs);
    const o2 = this.zone.offset(localTS - oLater * minuteMs);
    if (o1 === o2) {
      return [this];
    }
    const ts1 = localTS - o1 * minuteMs;
    const ts2 = localTS - o2 * minuteMs;
    const c1 = tsToObj(ts1, o1);
    const c2 = tsToObj(ts2, o2);
    if (
      c1.hour === c2.hour &&
      c1.minute === c2.minute &&
      c1.second === c2.second &&
      c1.millisecond === c2.millisecond
    ) {
      return [datetime_clone(this, { ts: ts1 }), datetime_clone(this, { ts: ts2 })];
    }
    return [this];
  }

  /**
   * Returns true if this DateTime is in a leap year, false otherwise
   * @example DateTime.local(2016).isInLeapYear //=> true
   * @example DateTime.local(2013).isInLeapYear //=> false
   * @type {boolean}
   */
  get isInLeapYear() {
    return isLeapYear(this.year);
  }

  /**
   * Returns the number of days in this DateTime's month
   * @example DateTime.local(2016, 2).daysInMonth //=> 29
   * @example DateTime.local(2016, 3).daysInMonth //=> 31
   * @type {number}
   */
  get daysInMonth() {
    return daysInMonth(this.year, this.month);
  }

  /**
   * Returns the number of days in this DateTime's year
   * @example DateTime.local(2016).daysInYear //=> 366
   * @example DateTime.local(2013).daysInYear //=> 365
   * @type {number}
   */
  get daysInYear() {
    return this.isValid ? daysInYear(this.year) : NaN;
  }

  /**
   * Returns the number of weeks in this DateTime's year
   * @see https://en.wikipedia.org/wiki/ISO_week_date
   * @example DateTime.local(2004).weeksInWeekYear //=> 53
   * @example DateTime.local(2013).weeksInWeekYear //=> 52
   * @type {number}
   */
  get weeksInWeekYear() {
    return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
  }

  /**
   * Returns the number of weeks in this DateTime's local week year
   * @example DateTime.local(2020, 6, {locale: 'en-US'}).weeksInLocalWeekYear //=> 52
   * @example DateTime.local(2020, 6, {locale: 'de-DE'}).weeksInLocalWeekYear //=> 53
   * @type {number}
   */
  get weeksInLocalWeekYear() {
    return this.isValid
      ? weeksInWeekYear(
          this.localWeekYear,
          this.loc.getMinDaysInFirstWeek(),
          this.loc.getStartOfWeek()
        )
      : NaN;
  }

  /**
   * Returns the resolved Intl options for this DateTime.
   * This is useful in understanding the behavior of formatting methods
   * @param {Object} opts - the same options as toLocaleString
   * @return {Object}
   */
  resolvedLocaleOptions(opts = {}) {
    const { locale, numberingSystem, calendar } = Formatter.create(
      this.loc.clone(opts),
      opts
    ).resolvedOptions(this);
    return { locale, numberingSystem, outputCalendar: calendar };
  }

  // TRANSFORM

  /**
   * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
   *
   * Equivalent to {@link DateTime#setZone}('utc')
   * @param {number} [offset=0] - optionally, an offset from UTC in minutes
   * @param {Object} [opts={}] - options to pass to `setZone()`
   * @return {DateTime}
   */
  toUTC(offset = 0, opts = {}) {
    return this.setZone(FixedOffsetZone.instance(offset), opts);
  }

  /**
   * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
   *
   * Equivalent to `setZone('local')`
   * @return {DateTime}
   */
  toLocal() {
    return this.setZone(Settings.defaultZone);
  }

  /**
   * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
   *
   * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.
   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.
   * @param {Object} opts - options
   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
   * @return {DateTime}
   */
  setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {
    zone = normalizeZone(zone, Settings.defaultZone);
    if (zone.equals(this.zone)) {
      return this;
    } else if (!zone.isValid) {
      return DateTime.invalid(unsupportedZone(zone));
    } else {
      let newTS = this.ts;
      if (keepLocalTime || keepCalendarTime) {
        const offsetGuess = zone.offset(this.ts);
        const asObj = this.toObject();
        [newTS] = objToTS(asObj, offsetGuess, zone);
      }
      return datetime_clone(this, { ts: newTS, zone });
    }
  }

  /**
   * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
   * @param {Object} properties - the properties to set
   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
   * @return {DateTime}
   */
  reconfigure({ locale, numberingSystem, outputCalendar } = {}) {
    const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });
    return datetime_clone(this, { loc });
  }

  /**
   * "Set" the locale. Returns a newly-constructed DateTime.
   * Just a convenient alias for reconfigure({ locale })
   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
   * @return {DateTime}
   */
  setLocale(locale) {
    return this.reconfigure({ locale });
  }

  /**
   * "Set" the values of specified units. Returns a newly-constructed DateTime.
   * You can only set units with this method; for "setting" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.
   *
   * This method also supports setting locale-based week units, i.e. `localWeekday`, `localWeekNumber` and `localWeekYear`.
   * They cannot be mixed with ISO-week units like `weekday`.
   * @param {Object} values - a mapping of units to numbers
   * @example dt.set({ year: 2017 })
   * @example dt.set({ hour: 8, minute: 30 })
   * @example dt.set({ weekday: 5 })
   * @example dt.set({ year: 2005, ordinal: 234 })
   * @return {DateTime}
   */
  set(values) {
    if (!this.isValid) return this;

    const normalized = normalizeObject(values, normalizeUnitWithLocalWeeks);
    const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, this.loc);

    const settingWeekStuff =
        !isUndefined(normalized.weekYear) ||
        !isUndefined(normalized.weekNumber) ||
        !isUndefined(normalized.weekday),
      containsOrdinal = !isUndefined(normalized.ordinal),
      containsGregorYear = !isUndefined(normalized.year),
      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),
      containsGregor = containsGregorYear || containsGregorMD,
      definiteWeekDef = normalized.weekYear || normalized.weekNumber;

    if ((containsGregor || containsOrdinal) && definiteWeekDef) {
      throw new ConflictingSpecificationError(
        "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
      );
    }

    if (containsGregorMD && containsOrdinal) {
      throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
    }

    let mixed;
    if (settingWeekStuff) {
      mixed = weekToGregorian(
        { ...gregorianToWeek(this.c, minDaysInFirstWeek, startOfWeek), ...normalized },
        minDaysInFirstWeek,
        startOfWeek
      );
    } else if (!isUndefined(normalized.ordinal)) {
      mixed = ordinalToGregorian({ ...gregorianToOrdinal(this.c), ...normalized });
    } else {
      mixed = { ...this.toObject(), ...normalized };

      // if we didn't set the day but we ended up on an overflow date,
      // use the last day of the right month
      if (isUndefined(normalized.day)) {
        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
      }
    }

    const [ts, o] = objToTS(mixed, this.o, this.zone);
    return datetime_clone(this, { ts, o });
  }

  /**
   * Add a period of time to this DateTime and return the resulting DateTime
   *
   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @example DateTime.now().plus(123) //~> in 123 milliseconds
   * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes
   * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow
   * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday
   * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
   * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
   * @return {DateTime}
   */
  plus(duration) {
    if (!this.isValid) return this;
    const dur = Duration.fromDurationLike(duration);
    return datetime_clone(this, adjustTime(this, dur));
  }

  /**
   * Subtract a period of time to this DateTime and return the resulting DateTime
   * See {@link DateTime#plus}
   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   @return {DateTime}
   */
  minus(duration) {
    if (!this.isValid) return this;
    const dur = Duration.fromDurationLike(duration).negate();
    return datetime_clone(this, adjustTime(this, dur));
  }

  /**
   * "Set" this DateTime to the beginning of a unit of time.
   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
   * @param {Object} opts - options
   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
   * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays
   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
   * @return {DateTime}
   */
  startOf(unit, { useLocaleWeeks = false } = {}) {
    if (!this.isValid) return this;

    const o = {},
      normalizedUnit = Duration.normalizeUnit(unit);
    switch (normalizedUnit) {
      case "years":
        o.month = 1;
      // falls through
      case "quarters":
      case "months":
        o.day = 1;
      // falls through
      case "weeks":
      case "days":
        o.hour = 0;
      // falls through
      case "hours":
        o.minute = 0;
      // falls through
      case "minutes":
        o.second = 0;
      // falls through
      case "seconds":
        o.millisecond = 0;
        break;
      case "milliseconds":
        break;
      // no default, invalid units throw in normalizeUnit()
    }

    if (normalizedUnit === "weeks") {
      if (useLocaleWeeks) {
        const startOfWeek = this.loc.getStartOfWeek();
        const { weekday } = this;
        if (weekday < startOfWeek) {
          o.weekNumber = this.weekNumber - 1;
        }
        o.weekday = startOfWeek;
      } else {
        o.weekday = 1;
      }
    }

    if (normalizedUnit === "quarters") {
      const q = Math.ceil(this.month / 3);
      o.month = (q - 1) * 3 + 1;
    }

    return this.set(o);
  }

  /**
   * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
   * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
   * @param {Object} opts - options
   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays
   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
   * @return {DateTime}
   */
  endOf(unit, opts) {
    return this.isValid
      ? this.plus({ [unit]: 1 })
          .startOf(unit, opts)
          .minus(1)
      : this;
  }

  // OUTPUT

  /**
   * Returns a string representation of this DateTime formatted according to the specified format string.
   * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).
   * Defaults to en-US if no locale has been specified, regardless of the system's locale.
   * @param {string} fmt - the format string
   * @param {Object} opts - opts to override the configuration options on this DateTime
   * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
   * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
   * @example DateTime.now().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
   * @example DateTime.now().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
   * @return {string}
   */
  toFormat(fmt, opts = {}) {
    return this.isValid
      ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt)
      : datetime_INVALID;
  }

  /**
   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
   * of the DateTime in the assigned locale.
   * Defaults to the system's locale if no locale has been specified
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options
   * @param {Object} opts - opts to override the configuration options on this DateTime
   * @example DateTime.now().toLocaleString(); //=> 4/20/2017
   * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL, { locale: 'fr' }); //=> '28 août 2022'
   * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
   * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
   * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
   * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
   * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'
   * @return {string}
   */
  toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
    return this.isValid
      ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this)
      : datetime_INVALID;
  }

  /**
   * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
   * Defaults to the system's locale if no locale has been specified
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
   * @example DateTime.now().toLocaleParts(); //=> [
   *                                   //=>   { type: 'day', value: '25' },
   *                                   //=>   { type: 'literal', value: '/' },
   *                                   //=>   { type: 'month', value: '05' },
   *                                   //=>   { type: 'literal', value: '/' },
   *                                   //=>   { type: 'year', value: '1982' }
   *                                   //=> ]
   */
  toLocaleParts(opts = {}) {
    return this.isValid
      ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this)
      : [];
  }

  /**
   * Returns an ISO 8601-compliant string representation of this DateTime
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.extendedZone=false] - add the time zone format extension
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
   * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'
   * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
   * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
   * @return {string}
   */
  toISO({
    format = "extended",
    suppressSeconds = false,
    suppressMilliseconds = false,
    includeOffset = true,
    extendedZone = false,
  } = {}) {
    if (!this.isValid) {
      return null;
    }

    const ext = format === "extended";

    let c = toISODate(this, ext);
    c += "T";
    c += toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
    return c;
  }

  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's date component
   * @param {Object} opts - options
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
   * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
   * @return {string}
   */
  toISODate({ format = "extended" } = {}) {
    if (!this.isValid) {
      return null;
    }

    return toISODate(this, format === "extended");
  }

  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's week date
   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
   * @return {string}
   */
  toISOWeekDate() {
    return toTechFormat(this, "kkkk-'W'WW-c");
  }

  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's time component
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.extendedZone=true] - add the time zone format extension
   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'
   * @return {string}
   */
  toISOTime({
    suppressMilliseconds = false,
    suppressSeconds = false,
    includeOffset = true,
    includePrefix = false,
    extendedZone = false,
    format = "extended",
  } = {}) {
    if (!this.isValid) {
      return null;
    }

    let c = includePrefix ? "T" : "";
    return (
      c +
      toISOTime(
        this,
        format === "extended",
        suppressSeconds,
        suppressMilliseconds,
        includeOffset,
        extendedZone
      )
    );
  }

  /**
   * Returns an RFC 2822-compatible string representation of this DateTime
   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
   * @return {string}
   */
  toRFC2822() {
    return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
  }

  /**
   * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.
   * Specifically, the string conforms to RFC 1123.
   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
   * @return {string}
   */
  toHTTP() {
    return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
  }

  /**
   * Returns a string representation of this DateTime appropriate for use in SQL Date
   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
   * @return {string}
   */
  toSQLDate() {
    if (!this.isValid) {
      return null;
    }
    return toISODate(this, true);
  }

  /**
   * Returns a string representation of this DateTime appropriate for use in SQL Time
   * @param {Object} opts - options
   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
   * @example DateTime.utc().toSQL() //=> '05:15:16.345'
   * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'
   * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'
   * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
   * @return {string}
   */
  toSQLTime({ includeOffset = true, includeZone = false, includeOffsetSpace = true } = {}) {
    let fmt = "HH:mm:ss.SSS";

    if (includeZone || includeOffset) {
      if (includeOffsetSpace) {
        fmt += " ";
      }
      if (includeZone) {
        fmt += "z";
      } else if (includeOffset) {
        fmt += "ZZ";
      }
    }

    return toTechFormat(this, fmt, true);
  }

  /**
   * Returns a string representation of this DateTime appropriate for use in SQL DateTime
   * @param {Object} opts - options
   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
   * @return {string}
   */
  toSQL(opts = {}) {
    if (!this.isValid) {
      return null;
    }

    return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;
  }

  /**
   * Returns a string representation of this DateTime appropriate for debugging
   * @return {string}
   */
  toString() {
    return this.isValid ? this.toISO() : datetime_INVALID;
  }

  /**
   * Returns a string representation of this DateTime appropriate for the REPL.
   * @return {string}
   */
  [Symbol.for("nodejs.util.inspect.custom")]() {
    if (this.isValid) {
      return `DateTime { ts: ${this.toISO()}, zone: ${this.zone.name}, locale: ${this.locale} }`;
    } else {
      return `DateTime { Invalid, reason: ${this.invalidReason} }`;
    }
  }

  /**
   * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}
   * @return {number}
   */
  valueOf() {
    return this.toMillis();
  }

  /**
   * Returns the epoch milliseconds of this DateTime.
   * @return {number}
   */
  toMillis() {
    return this.isValid ? this.ts : NaN;
  }

  /**
   * Returns the epoch seconds of this DateTime.
   * @return {number}
   */
  toSeconds() {
    return this.isValid ? this.ts / 1000 : NaN;
  }

  /**
   * Returns the epoch seconds (as a whole number) of this DateTime.
   * @return {number}
   */
  toUnixInteger() {
    return this.isValid ? Math.floor(this.ts / 1000) : NaN;
  }

  /**
   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
   * @return {string}
   */
  toJSON() {
    return this.toISO();
  }

  /**
   * Returns a BSON serializable equivalent to this DateTime.
   * @return {Date}
   */
  toBSON() {
    return this.toJSDate();
  }

  /**
   * Returns a JavaScript object with this DateTime's year, month, day, and so on.
   * @param opts - options for generating the object
   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
   * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
   * @return {Object}
   */
  toObject(opts = {}) {
    if (!this.isValid) return {};

    const base = { ...this.c };

    if (opts.includeConfig) {
      base.outputCalendar = this.outputCalendar;
      base.numberingSystem = this.loc.numberingSystem;
      base.locale = this.loc.locale;
    }
    return base;
  }

  /**
   * Returns a JavaScript Date equivalent to this DateTime.
   * @return {Date}
   */
  toJSDate() {
    return new Date(this.isValid ? this.ts : NaN);
  }

  // COMPARE

  /**
   * Return the difference between two DateTimes as a Duration.
   * @param {DateTime} otherDateTime - the DateTime to compare this one to
   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @example
   * var i1 = DateTime.fromISO('1982-05-25T09:45'),
   *     i2 = DateTime.fromISO('1983-10-14T10:30');
   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
   * @return {Duration}
   */
  diff(otherDateTime, unit = "milliseconds", opts = {}) {
    if (!this.isValid || !otherDateTime.isValid) {
      return Duration.invalid("created by diffing an invalid DateTime");
    }

    const durOpts = { locale: this.locale, numberingSystem: this.numberingSystem, ...opts };

    const units = maybeArray(unit).map(Duration.normalizeUnit),
      otherIsLater = otherDateTime.valueOf() > this.valueOf(),
      earlier = otherIsLater ? this : otherDateTime,
      later = otherIsLater ? otherDateTime : this,
      diffed = diff(earlier, later, units, durOpts);

    return otherIsLater ? diffed.negate() : diffed;
  }

  /**
   * Return the difference between this DateTime and right now.
   * See {@link DateTime#diff}
   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */
  diffNow(unit = "milliseconds", opts = {}) {
    return this.diff(DateTime.now(), unit, opts);
  }

  /**
   * Return an Interval spanning between this DateTime and another DateTime
   * @param {DateTime} otherDateTime - the other end point of the Interval
   * @return {Interval}
   */
  until(otherDateTime) {
    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
  }

  /**
   * Return whether this DateTime is in the same unit of time as another DateTime.
   * Higher-order units must also be identical for this function to return `true`.
   * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.
   * @param {DateTime} otherDateTime - the other DateTime
   * @param {string} unit - the unit of time to check sameness on
   * @param {Object} opts - options
   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; only the locale of this DateTime is used
   * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day
   * @return {boolean}
   */
  hasSame(otherDateTime, unit, opts) {
    if (!this.isValid) return false;

    const inputMs = otherDateTime.valueOf();
    const adjustedToZone = this.setZone(otherDateTime.zone, { keepLocalTime: true });
    return (
      adjustedToZone.startOf(unit, opts) <= inputMs && inputMs <= adjustedToZone.endOf(unit, opts)
    );
  }

  /**
   * Equality check
   * Two DateTimes are equal if and only if they represent the same millisecond, have the same zone and location, and are both valid.
   * To compare just the millisecond values, use `+dt1 === +dt2`.
   * @param {DateTime} other - the other DateTime
   * @return {boolean}
   */
  equals(other) {
    return (
      this.isValid &&
      other.isValid &&
      this.valueOf() === other.valueOf() &&
      this.zone.equals(other.zone) &&
      this.loc.equals(other.loc)
    );
  }

  /**
   * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
   * platform supports Intl.RelativeTimeFormat. Rounds down by default.
   * @param {Object} options - options that affect the output
   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
   * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
   * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
   * @param {boolean} [options.round=true] - whether to round the numbers in the output.
   * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
   * @param {string} options.locale - override the locale of this DateTime
   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
   * @example DateTime.now().plus({ days: 1 }).toRelative() //=> "in 1 day"
   * @example DateTime.now().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
   * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
   * @example DateTime.now().minus({ days: 2 }).toRelative() //=> "2 days ago"
   * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
   * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
   */
  toRelative(options = {}) {
    if (!this.isValid) return null;
    const base = options.base || DateTime.fromObject({}, { zone: this.zone }),
      padding = options.padding ? (this < base ? -options.padding : options.padding) : 0;
    let units = ["years", "months", "days", "hours", "minutes", "seconds"];
    let unit = options.unit;
    if (Array.isArray(options.unit)) {
      units = options.unit;
      unit = undefined;
    }
    return diffRelative(base, this.plus(padding), {
      ...options,
      numeric: "always",
      units,
      unit,
    });
  }

  /**
   * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
   * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
   * @param {Object} options - options that affect the output
   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
   * @param {string} options.locale - override the locale of this DateTime
   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
   * @example DateTime.now().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
   * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
   */
  toRelativeCalendar(options = {}) {
    if (!this.isValid) return null;

    return diffRelative(options.base || DateTime.fromObject({}, { zone: this.zone }), this, {
      ...options,
      numeric: "auto",
      units: ["years", "months", "days"],
      calendary: true,
    });
  }

  /**
   * Return the min of several date times
   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
   * @return {DateTime} the min DateTime, or undefined if called with no argument
   */
  static min(...dateTimes) {
    if (!dateTimes.every(DateTime.isDateTime)) {
      throw new InvalidArgumentError("min requires all arguments be DateTimes");
    }
    return bestBy(dateTimes, (i) => i.valueOf(), Math.min);
  }

  /**
   * Return the max of several date times
   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
   * @return {DateTime} the max DateTime, or undefined if called with no argument
   */
  static max(...dateTimes) {
    if (!dateTimes.every(DateTime.isDateTime)) {
      throw new InvalidArgumentError("max requires all arguments be DateTimes");
    }
    return bestBy(dateTimes, (i) => i.valueOf(), Math.max);
  }

  // MISC

  /**
   * Explain how a string would be parsed by fromFormat()
   * @param {string} text - the string to parse
   * @param {string} fmt - the format the string is expected to be in (see description)
   * @param {Object} options - options taken by fromFormat()
   * @return {Object}
   */
  static fromFormatExplain(text, fmt, options = {}) {
    const { locale = null, numberingSystem = null } = options,
      localeToUse = Locale.fromOpts({
        locale,
        numberingSystem,
        defaultToEN: true,
      });
    return explainFromTokens(localeToUse, text, fmt);
  }

  /**
   * @deprecated use fromFormatExplain instead
   */
  static fromStringExplain(text, fmt, options = {}) {
    return DateTime.fromFormatExplain(text, fmt, options);
  }

  // FORMAT PRESETS

  /**
   * {@link DateTime#toLocaleString} format like 10/14/1983
   * @type {Object}
   */
  static get DATE_SHORT() {
    return DATE_SHORT;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'
   * @type {Object}
   */
  static get DATE_MED() {
    return DATE_MED;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'
   * @type {Object}
   */
  static get DATE_MED_WITH_WEEKDAY() {
    return DATE_MED_WITH_WEEKDAY;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'October 14, 1983'
   * @type {Object}
   */
  static get DATE_FULL() {
    return DATE_FULL;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'
   * @type {Object}
   */
  static get DATE_HUGE() {
    return DATE_HUGE;
  }

  /**
   * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get TIME_SIMPLE() {
    return TIME_SIMPLE;
  }

  /**
   * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get TIME_WITH_SECONDS() {
    return TIME_WITH_SECONDS;
  }

  /**
   * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get TIME_WITH_SHORT_OFFSET() {
    return TIME_WITH_SHORT_OFFSET;
  }

  /**
   * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get TIME_WITH_LONG_OFFSET() {
    return TIME_WITH_LONG_OFFSET;
  }

  /**
   * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.
   * @type {Object}
   */
  static get TIME_24_SIMPLE() {
    return TIME_24_SIMPLE;
  }

  /**
   * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.
   * @type {Object}
   */
  static get TIME_24_WITH_SECONDS() {
    return TIME_24_WITH_SECONDS;
  }

  /**
   * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.
   * @type {Object}
   */
  static get TIME_24_WITH_SHORT_OFFSET() {
    return TIME_24_WITH_SHORT_OFFSET;
  }

  /**
   * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
   * @type {Object}
   */
  static get TIME_24_WITH_LONG_OFFSET() {
    return TIME_24_WITH_LONG_OFFSET;
  }

  /**
   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_SHORT() {
    return DATETIME_SHORT;
  }

  /**
   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_SHORT_WITH_SECONDS() {
    return DATETIME_SHORT_WITH_SECONDS;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_MED() {
    return DATETIME_MED;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_MED_WITH_SECONDS() {
    return DATETIME_MED_WITH_SECONDS;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_MED_WITH_WEEKDAY() {
    return DATETIME_MED_WITH_WEEKDAY;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_FULL() {
    return DATETIME_FULL;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_FULL_WITH_SECONDS() {
    return DATETIME_FULL_WITH_SECONDS;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_HUGE() {
    return DATETIME_HUGE;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_HUGE_WITH_SECONDS() {
    return DATETIME_HUGE_WITH_SECONDS;
  }
}

/**
 * @private
 */
function friendlyDateTime(dateTimeish) {
  if (DateTime.isDateTime(dateTimeish)) {
    return dateTimeish;
  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {
    return DateTime.fromJSDate(dateTimeish);
  } else if (dateTimeish && typeof dateTimeish === "object") {
    return DateTime.fromObject(dateTimeish);
  } else {
    throw new InvalidArgumentError(
      `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`
    );
  }
}

;// CONCATENATED MODULE: ./node_modules/luxon/src/luxon.js











const VERSION = "3.4.4";



;// CONCATENATED MODULE: ./src/holidays.json
const holidays_namespaceObject = JSON.parse('{"Andorra":[{"id":"20240101_ulo5vn8lqsr72midgoipq3hsfg","status":"confirmed","summary":"New Year\'s Day","region":"Andorra","date":"2024-01-01"},{"id":"20240106_k5nia7h00co6sic50p9b71ufvg","status":"confirmed","summary":"Epiphany","region":"Andorra","date":"2024-01-06"},{"id":"20240212_79fr20o2ane1j9refle0ekks5g","status":"confirmed","summary":"Carnival","region":"Andorra","date":"2024-02-12"},{"id":"20240314_9qgabuiho4957s178imtu860os","status":"confirmed","summary":"Constitution Day","region":"Andorra","date":"2024-03-14"},{"id":"20240319_csr9km4tivc97hfrptosqdib4g","status":"confirmed","summary":"Fathers\' Day","region":"Andorra","date":"2024-03-19"},{"id":"20240328_jq0u7neb052lfg89gcpo796o4o","status":"confirmed","summary":"Maundy Thursday (Starting Noon)","region":"Andorra","date":"2024-03-28"},{"id":"20240329_rt3ad4pr4ov3ljejqeh0mpe3o8","status":"confirmed","summary":"Good Friday","region":"Andorra","date":"2024-03-29"},{"id":"20240331_2qevbsr4fag5jkhh9pn5ickafg","status":"confirmed","summary":"Easter Sunday","region":"Andorra","date":"2024-03-31"},{"id":"20240331_dkoh984cib5orv7ufmuobdbpj8","status":"confirmed","summary":"Daylight Saving Time starts","region":"Andorra","date":"2024-03-31"},{"id":"20240401_vi3dmfsgtiu92rtv5a70dp11g0","status":"confirmed","summary":"Easter Monday","region":"Andorra","date":"2024-04-01"},{"id":"20240501_nufkcdtmafe322c4bs6j5sar48","status":"confirmed","summary":"May Day","region":"Andorra","date":"2024-05-01"},{"id":"20240505_9b8bcr9sjt1vm8fen2j6jc9gek","status":"confirmed","summary":"Mothers\' Day","region":"Andorra","date":"2024-05-05"},{"id":"20240509_3cq4ngpq04u0j60ccusnehbbu0","status":"confirmed","summary":"Ascension Day","region":"Andorra","date":"2024-05-09"},{"id":"20240519_b1nkksidogk5v881dvlr5f6b68","status":"confirmed","summary":"Whit Sunday","region":"Andorra","date":"2024-05-19"},{"id":"20240520_1km78uq9gnhgh72eev8jlp3vl8","status":"confirmed","summary":"Whit Monday","region":"Andorra","date":"2024-05-20"},{"id":"20240815_2tk7gb775bbq4qr8u7c514sis4","status":"confirmed","summary":"Assumption of Mary","region":"Andorra","date":"2024-08-15"},{"id":"20240908_4anskliv7ijot340msvs5a01cc","status":"confirmed","summary":"National Day","region":"Andorra","date":"2024-09-08"},{"id":"20241027_4ip3n8eib2sf6ggouff3s2u198","status":"confirmed","summary":"Daylight Saving Time ends","region":"Andorra","date":"2024-10-27"},{"id":"20241101_6fuij15pt26c29nhmmcfaltg6k","status":"confirmed","summary":"All Saints\' Day","region":"Andorra","date":"2024-11-01"},{"id":"20241208_p0nd1q4b20uo402kpulhkld118","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Andorra","date":"2024-12-08"},{"id":"20241225_uitomqs8j1de4ms8geshr8msec","status":"confirmed","summary":"Christmas Day","region":"Andorra","date":"2024-12-25"},{"id":"20241226_ue1oja75asgjhtqjcs2fng7i84","status":"confirmed","summary":"Boxing Day","region":"Andorra","date":"2024-12-26"},{"id":"20250101_s7enhlami5sdbfr5ortcf1mgh8","status":"confirmed","summary":"New Year\'s Day","region":"Andorra","date":"2025-01-01"},{"id":"20250106_88c6aihltv1fhqp47v3smoisdk","status":"confirmed","summary":"Epiphany","region":"Andorra","date":"2025-01-06"},{"id":"20250303_leefcot27bcjuonp486albjr00","status":"confirmed","summary":"Carnival","region":"Andorra","date":"2025-03-03"},{"id":"20250314_nd2tl1t8iumr9ol1ndpnacvq64","status":"confirmed","summary":"Constitution Day","region":"Andorra","date":"2025-03-14"},{"id":"20250319_vtia8n8j1cnf5tdua3rkm1knl8","status":"confirmed","summary":"Fathers\' Day","region":"Andorra","date":"2025-03-19"},{"id":"20250330_t4al3mqjktvu5dj1satq8pr408","status":"confirmed","summary":"Daylight Saving Time starts","region":"Andorra","date":"2025-03-30"},{"id":"20250417_b49a5jn1402svtk81fft1ilieo","status":"confirmed","summary":"Maundy Thursday (Starting Noon)","region":"Andorra","date":"2025-04-17"},{"id":"20250418_qd9pdg485u1brq5e6r3inufon8","status":"confirmed","summary":"Good Friday","region":"Andorra","date":"2025-04-18"},{"id":"20250420_2f6khf3l7hgo23hrko1tppsrs0","status":"confirmed","summary":"Easter Sunday","region":"Andorra","date":"2025-04-20"},{"id":"20250421_3uk3jelr02q2ersqlcf9m3ir60","status":"confirmed","summary":"Easter Monday","region":"Andorra","date":"2025-04-21"},{"id":"20250501_o9v1dbe8inr7sjv7jl785t4hrs","status":"confirmed","summary":"May Day","region":"Andorra","date":"2025-05-01"},{"id":"20250504_jonk862ot55ni9628j2irurmqg","status":"confirmed","summary":"Mothers\' Day","region":"Andorra","date":"2025-05-04"},{"id":"20250529_k6rql2i4lhs0soi13lkf3si90c","status":"confirmed","summary":"Ascension Day","region":"Andorra","date":"2025-05-29"},{"id":"20250608_71m2t3d3k8ddt8agd4rvv3q02k","status":"confirmed","summary":"Whit Sunday","region":"Andorra","date":"2025-06-08"},{"id":"20250609_ki05mqmjicbha55q8n4i83giuo","status":"confirmed","summary":"Whit Monday","region":"Andorra","date":"2025-06-09"},{"id":"20250815_mlvujdn5stkrsalqcj94l7bk6s","status":"confirmed","summary":"Assumption of Mary","region":"Andorra","date":"2025-08-15"},{"id":"20250908_klfp6j9glfhtqo7rv2j5s3e00o","status":"confirmed","summary":"National Day","region":"Andorra","date":"2025-09-08"},{"id":"20251026_cgspfj5r9pbpl7oc5n4kl314ss","status":"confirmed","summary":"Daylight Saving Time ends","region":"Andorra","date":"2025-10-26"},{"id":"20251101_eevdts1ggbl0jrobutq3oq90us","status":"confirmed","summary":"All Saints\' Day","region":"Andorra","date":"2025-11-01"},{"id":"20251208_8cg18e8bli2iaenlve2p0t6k1s","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Andorra","date":"2025-12-08"},{"id":"20251225_ou26s4i0b3u32vhaiu22m9vl5s","status":"confirmed","summary":"Christmas Day","region":"Andorra","date":"2025-12-25"},{"id":"20251226_d0qg2ts07dg336fhl1bcttgo10","status":"confirmed","summary":"Boxing Day","region":"Andorra","date":"2025-12-26"}],"United Arab Emirates":[{"id":"20240101_h1btp2bvq6ok5av851jccrhkjk","status":"confirmed","summary":"New Year\'s Day","region":"United Arab Emirates","date":"2024-01-01"},{"id":"20240208_6np2ilfdp4h2vdvrer4cef83cs","status":"confirmed","summary":"Leilat al-Meiraj (The Prophet\'s Ascension)","region":"United Arab Emirates","date":"2024-02-08"},{"id":"20240311_tp1cai9q5sisfiihr7i22duk9o","status":"confirmed","summary":"Ramadan Start","region":"United Arab Emirates","date":"2024-03-11"},{"id":"20240408_c16grmaghbrka6okga3dshns58","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"United Arab Emirates","date":"2024-04-08"},{"id":"20240409_ttcmibletmah8a6vom8ahc745s","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"United Arab Emirates","date":"2024-04-09"},{"id":"20240410_50olam5ft9a6phhnf201cnsptc","status":"confirmed","summary":"Eid al-Fitr","region":"United Arab Emirates","date":"2024-04-10"},{"id":"20240411_ctfrcnh3sl4frcalk5s6mtenhk","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"United Arab Emirates","date":"2024-04-11"},{"id":"20240412_it9cs5lf1bv87takb8siba4tv8","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"United Arab Emirates","date":"2024-04-12"},{"id":"20240608_j6vffhe0gss2dnbvb598ve9kh4","status":"confirmed","summary":"Hajj season begins","region":"United Arab Emirates","date":"2024-06-08"},{"id":"20240615_8fql8el6evm6ho40322j6e3ams","status":"confirmed","summary":"Arafat (Hajj) Day","region":"United Arab Emirates","date":"2024-06-15"},{"id":"20240616_8006eq2jekh7pajodf7hah8a28","status":"confirmed","summary":"Eid al-Adha (Feast of Sacrifice)","region":"United Arab Emirates","date":"2024-06-16"},{"id":"20240617_dejeqnbnq63c1avh04ladackk4","status":"confirmed","summary":"Eid al-Adha Holiday","region":"United Arab Emirates","date":"2024-06-17"},{"id":"20240618_ne7ju26ljhq59ivceb2cu8qqmc","status":"confirmed","summary":"Eid al-Adha Holiday","region":"United Arab Emirates","date":"2024-06-18"},{"id":"20240707_oisenmlkvm63ib2ipei7sd5pk8","status":"confirmed","summary":"Al-Hijra (Islamic New Year)","region":"United Arab Emirates","date":"2024-07-07"},{"id":"20240915_dep628q6kurbon7q0sn7tlk3qs","status":"confirmed","summary":"Mouloud","region":"United Arab Emirates","date":"2024-09-15"},{"id":"20241130_knpnlpmij5akgo769d6n4ktpug","status":"confirmed","summary":"Commemoration Day","region":"United Arab Emirates","date":"2024-11-30"},{"id":"20241202_qrjf3sq6v8c0a1otbn06st53k8","status":"confirmed","summary":"National Day","region":"United Arab Emirates","date":"2024-12-02"},{"id":"20241203_o5id2gm8404jvirh368433a3f0","status":"confirmed","summary":"National Day Holiday","region":"United Arab Emirates","date":"2024-12-03"},{"id":"20241231_4f7o7spvmoj3914fbkrq5apf1o","status":"confirmed","summary":"New Year\'s Eve","region":"United Arab Emirates","date":"2024-12-31"},{"id":"20250101_vv3g3kvt8t03jhnfsdebe89ro4","status":"confirmed","summary":"New Year\'s Day","region":"United Arab Emirates","date":"2025-01-01"},{"id":"20250127_jgtk5tmr2uium5cf3a3j00n2ik","status":"confirmed","summary":"Leilat al-Meiraj (The Prophet\'s Ascension)","region":"United Arab Emirates","date":"2025-01-27"},{"id":"20250301_pe345cb1c34vkjqsqe9kav4vt0","status":"confirmed","summary":"Ramadan Start","region":"United Arab Emirates","date":"2025-03-01"},{"id":"20250331_mml58g1arg8guci14oi4adq184","status":"confirmed","summary":"Eid al-Fitr","region":"United Arab Emirates","date":"2025-03-31"},{"id":"20250401_e67bke30eotsk7p217q6th4u64","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"United Arab Emirates","date":"2025-04-01"},{"id":"20250402_t0q307qvruktj88drpc4hrbrvo","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"United Arab Emirates","date":"2025-04-02"},{"id":"20250529_h8eicidrh0vv6n4kr653of89t0","status":"confirmed","summary":"Hajj season begins","region":"United Arab Emirates","date":"2025-05-29"},{"id":"20250606_7soranlv7fdnhupg8kj00uoeu8","status":"confirmed","summary":"Arafat (Hajj) Day","region":"United Arab Emirates","date":"2025-06-06"},{"id":"20250607_b84t83q5ccjm2ld74935o6cemc","status":"confirmed","summary":"Eid al-Adha (Feast of Sacrifice)","region":"United Arab Emirates","date":"2025-06-07"},{"id":"20250607_kc1fm3ka040g8hig8faqi2kal0","status":"confirmed","summary":"Eid al-Adha Holiday","region":"United Arab Emirates","date":"2025-06-07"},{"id":"20250608_30rn9pbdlmaok8g3plviq41lqs","status":"confirmed","summary":"Eid al-Adha Holiday","region":"United Arab Emirates","date":"2025-06-08"},{"id":"20250627_jjn12a35jntka49meud6iv87e0","status":"confirmed","summary":"Al-Hijra (Islamic New Year)","region":"United Arab Emirates","date":"2025-06-27"},{"id":"20250905_3useqtgbcsprckk5hi4kktlv3o","status":"confirmed","summary":"Mouloud","region":"United Arab Emirates","date":"2025-09-05"},{"id":"20251130_g1tado9ea8sf52e24h453bnehs","status":"confirmed","summary":"Commemoration Day","region":"United Arab Emirates","date":"2025-11-30"},{"id":"20251202_vgbq4ucg2fgi09130hdlruipek","status":"confirmed","summary":"National Day","region":"United Arab Emirates","date":"2025-12-02"},{"id":"20251203_lt4eue752s1ha2cs5tp13j13u0","status":"confirmed","summary":"National Day Holiday","region":"United Arab Emirates","date":"2025-12-03"},{"id":"20251231_ubvfe0u37ir87uhtg5lrsuhf2k","status":"confirmed","summary":"New Year\'s Eve","region":"United Arab Emirates","date":"2025-12-31"}],"Afghanistan":[{"id":"20240215_u0i54ngq5maobqgj4fv8h8gkh4","status":"confirmed","summary":"Liberation Day","region":"Afghanistan","date":"2024-02-15"},{"id":"20240311_4da9cmf67cjcf4k6ftdav7nf84","status":"confirmed","summary":"First Day of Ramadan","region":"Afghanistan","date":"2024-03-11"},{"id":"20240321_5lurc0ke5bg4mlul8t5t7vuip4","status":"confirmed","summary":"Nauruz","region":"Afghanistan","date":"2024-03-21"},{"id":"20240410_cjl830qban0qannno9cpnaen7k","status":"confirmed","summary":"Eid al-Fitr","region":"Afghanistan","date":"2024-04-10"},{"id":"20240411_478jdl20rd6m4hcv5j07k5f6b8","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Afghanistan","date":"2024-04-11"},{"id":"20240412_prcd8bjmsg53hvdtjspq4hvd3o","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Afghanistan","date":"2024-04-12"},{"id":"20240413_peauu6jlm7pknf8qbn648tqrbg","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Afghanistan","date":"2024-04-13"},{"id":"20240428_c6i9kcui1oredk3ql8imi535ts","status":"confirmed","summary":"Afghan Victory Day","region":"Afghanistan","date":"2024-04-28"},{"id":"20240501_0ni35q5ekip6f0jdb2b31qtm2c","status":"confirmed","summary":"Labor Day","region":"Afghanistan","date":"2024-05-01"},{"id":"20240616_vp64916jv0bgmhomm9el0n7sgg","status":"confirmed","summary":"Day of Arafat","region":"Afghanistan","date":"2024-06-16"},{"id":"20240617_un3gn78h58t3nsrlhcfvqavsbs","status":"confirmed","summary":"Eid al-Qurban","region":"Afghanistan","date":"2024-06-17"},{"id":"20240618_v7697o86s0t1p09ueqs8uj4h4o","status":"confirmed","summary":"Eid al-Qurban Holiday","region":"Afghanistan","date":"2024-06-18"},{"id":"20240619_9a3e565rcmjjboiuhht4cmvs7k","status":"confirmed","summary":"Eid al-Qurban Holiday","region":"Afghanistan","date":"2024-06-19"},{"id":"20240717_l621ldifp2sbir9k5v10bqf3r8","status":"confirmed","summary":"Ashura","region":"Afghanistan","date":"2024-07-17"},{"id":"20240819_pjjvl1hnhfnl0lrl9v4h831eg0","status":"confirmed","summary":"Independence Day (National Day)","region":"Afghanistan","date":"2024-08-19"},{"id":"20240831_eia3forh3orghgs51mlrgur3p8","status":"confirmed","summary":"Anniversary of the Withdrawal of Foreign Troops","region":"Afghanistan","date":"2024-08-31"},{"id":"20240909_d28ntgv7dlknsljb9plq0f1ffo","status":"confirmed","summary":"Martyrs and Ahmad Shah Masoud Day","region":"Afghanistan","date":"2024-09-09"},{"id":"20240916_9tpsrho5u522qqdt836aqjm5vc","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Afghanistan","date":"2024-09-16"},{"id":"20250215_5uaf51le9omtk7jfusqk04ipko","status":"confirmed","summary":"Liberation Day","region":"Afghanistan","date":"2025-02-15"},{"id":"20250301_t1ou7mpff6unq6r8rtooed887c","status":"confirmed","summary":"First Day of Ramadan","region":"Afghanistan","date":"2025-03-01"},{"id":"20250321_3v9u107uucb3g80rdk3ma6554c","status":"confirmed","summary":"Nauruz","region":"Afghanistan","date":"2025-03-21"},{"id":"20250331_qhg8o2unl77lhr6cthqjj82808","status":"confirmed","summary":"Eid al-Fitr","region":"Afghanistan","date":"2025-03-31"},{"id":"20250401_tm0ksqubpc465pcbn1tnn1a39s","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Afghanistan","date":"2025-04-01"},{"id":"20250402_f1je445t0vvole7qr4mc27o8c4","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Afghanistan","date":"2025-04-02"},{"id":"20250428_ii6coof1ulmrnml794pc2rjefs","status":"confirmed","summary":"Afghan Victory Day","region":"Afghanistan","date":"2025-04-28"},{"id":"20250501_rjkami0jjmi49ajn3rkv7riia0","status":"confirmed","summary":"Labor Day","region":"Afghanistan","date":"2025-05-01"},{"id":"20250606_9u00i00g5ctj05l9k49djrulug","status":"confirmed","summary":"Day of Arafat","region":"Afghanistan","date":"2025-06-06"},{"id":"20250607_itqecn06g908iartoatkjks6v4","status":"confirmed","summary":"Eid al-Qurban","region":"Afghanistan","date":"2025-06-07"},{"id":"20250608_eo9ufb5hmek61jvoo1401qorm0","status":"confirmed","summary":"Eid al-Qurban Holiday","region":"Afghanistan","date":"2025-06-08"},{"id":"20250609_8piv689ktussr1ql7hqvm6c0fs","status":"confirmed","summary":"Eid al-Qurban Holiday","region":"Afghanistan","date":"2025-06-09"},{"id":"20250706_qcb7nf59jdqhnjfs5e84m9d150","status":"confirmed","summary":"Ashura","region":"Afghanistan","date":"2025-07-06"},{"id":"20250819_l3qhl7fr4vvoogp551jd5rctd4","status":"confirmed","summary":"Independence Day (National Day)","region":"Afghanistan","date":"2025-08-19"},{"id":"20250831_dtpk1u92krit9ginlridbseoeg","status":"confirmed","summary":"Anniversary of the Withdrawal of Foreign Troops","region":"Afghanistan","date":"2025-08-31"},{"id":"20250905_6k3qotk0fmlv3h2b6q2flv9e7g","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Afghanistan","date":"2025-09-05"},{"id":"20250909_i22np464e5p38gvjkcuqg3p0bg","status":"confirmed","summary":"Martyrs and Ahmad Shah Masoud Day","region":"Afghanistan","date":"2025-09-09"}],"Antigua & Barbuda":[{"id":"20240101_31pic72u4h41eet1nrumo83k3o","status":"confirmed","summary":"New Year\'s Day","region":"Antigua & Barbuda","date":"2024-01-01"},{"id":"20240329_ouk7j1tihqcvsju5ep2jb1gj5g","status":"confirmed","summary":"Good Friday","region":"Antigua & Barbuda","date":"2024-03-29"},{"id":"20240401_s695htmq2j1fnpmstum6j6kof4","status":"confirmed","summary":"Easter Monday","region":"Antigua & Barbuda","date":"2024-04-01"},{"id":"20240506_v2ooei7735mj20kgfdqh97pvm0","status":"confirmed","summary":"Labour Day","region":"Antigua & Barbuda","date":"2024-05-06"},{"id":"20240520_a8e8q6bie64s7jg52ijs5b2bjs","status":"confirmed","summary":"Whit Monday","region":"Antigua & Barbuda","date":"2024-05-20"},{"id":"20240805_spk1a2qc7sleame74hroifhckk","status":"confirmed","summary":"Carnival Holiday","region":"Antigua & Barbuda","date":"2024-08-05"},{"id":"20240806_pqro74d9pgv2devdjust0p34h0","status":"confirmed","summary":"Carnival Holiday","region":"Antigua & Barbuda","date":"2024-08-06"},{"id":"20241026_he7hedhi1mrtacl1jrspg8p69s","status":"confirmed","summary":"National Heroes Day","region":"Antigua & Barbuda","date":"2024-10-26"},{"id":"20241101_br0jrcv749lbklq62h0gv58r3s","status":"confirmed","summary":"Independence Day","region":"Antigua & Barbuda","date":"2024-11-01"},{"id":"20241209_g8hbe1kjpt2kqch4koks084n24","status":"confirmed","summary":"V.C. Bird Day","region":"Antigua & Barbuda","date":"2024-12-09"},{"id":"20241225_rht7gl5itj8dp8cc09id9br5i8","status":"confirmed","summary":"Christmas Day","region":"Antigua & Barbuda","date":"2024-12-25"},{"id":"20241226_7bdnv6kvbtdu8ckln6sm1vf51g","status":"confirmed","summary":"Boxing Day","region":"Antigua & Barbuda","date":"2024-12-26"},{"id":"20250101_runph4o5lq224j21dvhleo230g","status":"confirmed","summary":"New Year\'s Day","region":"Antigua & Barbuda","date":"2025-01-01"},{"id":"20250418_9rmd0c5c1fl9dismojljd480tg","status":"confirmed","summary":"Good Friday","region":"Antigua & Barbuda","date":"2025-04-18"},{"id":"20250421_3shdnqn3bu43k3vmdru05arlu4","status":"confirmed","summary":"Easter Monday","region":"Antigua & Barbuda","date":"2025-04-21"},{"id":"20250505_o5cvd3egq3b0nbb7na68rqdl9o","status":"confirmed","summary":"Labour Day","region":"Antigua & Barbuda","date":"2025-05-05"},{"id":"20250609_7i1nu4ut7gon23m5bcdddk4c30","status":"confirmed","summary":"Whit Monday","region":"Antigua & Barbuda","date":"2025-06-09"},{"id":"20250804_ib1ssk1kqf4o6o64ls4cmu1fpk","status":"confirmed","summary":"Carnival Holiday","region":"Antigua & Barbuda","date":"2025-08-04"},{"id":"20250805_rks18tlv2hdq284qeifqanm5es","status":"confirmed","summary":"Carnival Holiday","region":"Antigua & Barbuda","date":"2025-08-05"},{"id":"20251026_9r9pc9c40ua0a5qfo8ndb0kvb8","status":"confirmed","summary":"National Heroes Day","region":"Antigua & Barbuda","date":"2025-10-26"},{"id":"20251101_f164el92r37dajb9prh15f57r4","status":"confirmed","summary":"Independence Day","region":"Antigua & Barbuda","date":"2025-11-01"},{"id":"20251103_bnh4if7ea058homvflloi12f90","status":"confirmed","summary":"Independence Day observed","region":"Antigua & Barbuda","date":"2025-11-03"},{"id":"20251209_o8pilo9reingqnitvkmvue9mb8","status":"confirmed","summary":"V.C. Bird Day","region":"Antigua & Barbuda","date":"2025-12-09"},{"id":"20251225_1m1biqnmde0u0cegm864jk35gk","status":"confirmed","summary":"Christmas Day","region":"Antigua & Barbuda","date":"2025-12-25"},{"id":"20251226_7qefmv3dbe7s6drneq2d6e0d9k","status":"confirmed","summary":"Boxing Day","region":"Antigua & Barbuda","date":"2025-12-26"}],"Anguilla":[{"id":"20240101_l4jsvc6gerohv8ebgp1hquue9k","status":"confirmed","summary":"New Year\'s Day","region":"Anguilla","date":"2024-01-01"},{"id":"20240302_qbktup02fa470kbr1vdmvpir6s","status":"confirmed","summary":"James Ronald Webster Day","region":"Anguilla","date":"2024-03-02"},{"id":"20240304_85eei8ivu734os7bbfl0uqirks","status":"confirmed","summary":"Day off for James Ronald Webster Day","region":"Anguilla","date":"2024-03-04"},{"id":"20240329_5pkusogsiha3fal2mm5lji8vmk","status":"confirmed","summary":"Good Friday","region":"Anguilla","date":"2024-03-29"},{"id":"20240401_psruv0jo8i6l4qp0oq5je3ulgc","status":"confirmed","summary":"Easter Monday","region":"Anguilla","date":"2024-04-01"},{"id":"20240501_d3pad1001gdsgnv8rv1iiaeum4","status":"confirmed","summary":"Labor Day / May Day","region":"Anguilla","date":"2024-05-01"},{"id":"20240520_292u5faofkhdcigk1en7bog1ic","status":"confirmed","summary":"Whit Monday","region":"Anguilla","date":"2024-05-20"},{"id":"20240530_am4vd9i70krqaddbfem283uoag","status":"confirmed","summary":"Anguilla Day","region":"Anguilla","date":"2024-05-30"},{"id":"20240617_f87q7k7to10tdrblmvufmj5140","status":"confirmed","summary":"Sovereign\'s Birthday","region":"Anguilla","date":"2024-06-17"},{"id":"20240805_4iis4iptk8o5r3bkq7advd6qso","status":"confirmed","summary":"August Monday","region":"Anguilla","date":"2024-08-05"},{"id":"20240808_iv6rcbbaf4e269ebj8o5n5lcfo","status":"confirmed","summary":"August Thursday","region":"Anguilla","date":"2024-08-08"},{"id":"20240809_tvb7msmf60jd9b28fiike6ljlk","status":"confirmed","summary":"Constitution Day","region":"Anguilla","date":"2024-08-09"},{"id":"20241219_9pmvu63hjl2i6nkc4maedbat88","status":"confirmed","summary":"National Heroes and Heroines Day","region":"Anguilla","date":"2024-12-19"},{"id":"20241225_31pqq932chi2k6thquo6lva8ho","status":"confirmed","summary":"Christmas Day","region":"Anguilla","date":"2024-12-25"},{"id":"20241226_k9am0h0gqnddu4m0gn0ivqq8s0","status":"confirmed","summary":"Boxing Day","region":"Anguilla","date":"2024-12-26"},{"id":"20250101_1qbb976kbrvg0mb494o85vgahc","status":"confirmed","summary":"New Year\'s Day","region":"Anguilla","date":"2025-01-01"},{"id":"20250302_n1bv54ko3rkst9hco136qbks80","status":"confirmed","summary":"James Ronald Webster Day","region":"Anguilla","date":"2025-03-02"},{"id":"20250303_p98to3upr500ekjlp4jc7te4k8","status":"confirmed","summary":"Day off for James Ronald Webster Day","region":"Anguilla","date":"2025-03-03"},{"id":"20250418_m95711f1r2efee37d8d75kn764","status":"confirmed","summary":"Good Friday","region":"Anguilla","date":"2025-04-18"},{"id":"20250421_h15uu6bmh708bhld2n6du36ngg","status":"confirmed","summary":"Easter Monday","region":"Anguilla","date":"2025-04-21"},{"id":"20250501_99j4rqnha1jbiv1c35k5bmp13g","status":"confirmed","summary":"Labor Day / May Day","region":"Anguilla","date":"2025-05-01"},{"id":"20250530_pcgte45iu0hcggin0o548b1khs","status":"confirmed","summary":"Anguilla Day","region":"Anguilla","date":"2025-05-30"},{"id":"20250609_93v8ei4s4n09cptkr0agrdnrgk","status":"confirmed","summary":"Whit Monday","region":"Anguilla","date":"2025-06-09"},{"id":"20250609_bj5u6jbsm6a2o003ev70vt137g","status":"confirmed","summary":"Sovereign\'s Birthday","region":"Anguilla","date":"2025-06-09"},{"id":"20250804_u8hedbj2h00rmppm9erem1fkgg","status":"confirmed","summary":"August Monday","region":"Anguilla","date":"2025-08-04"},{"id":"20250807_htr5pms4hkt6rrnjopnpd6jcg0","status":"confirmed","summary":"August Thursday","region":"Anguilla","date":"2025-08-07"},{"id":"20250808_gkjrc9qbmvao56tcpest86vr3g","status":"confirmed","summary":"Constitution Day","region":"Anguilla","date":"2025-08-08"},{"id":"20251219_6tljfudli9o5ult07qelovq52g","status":"confirmed","summary":"National Heroes and Heroines Day","region":"Anguilla","date":"2025-12-19"},{"id":"20251225_oaolqhaod4gos4ha4g25f6hcqg","status":"confirmed","summary":"Christmas Day","region":"Anguilla","date":"2025-12-25"},{"id":"20251226_aud6v7411naspemq7cpv91g7qg","status":"confirmed","summary":"Boxing Day","region":"Anguilla","date":"2025-12-26"}],"Albania":[{"id":"20240101_uqteh978i44v6kgvtng8sf3vus","status":"confirmed","summary":"New Year\'s Day","region":"Albania","date":"2024-01-01"},{"id":"20240102_nbkpf9ucthv0lj89747atb47cg","status":"confirmed","summary":"New Year\'s Day (Day 2)","region":"Albania","date":"2024-01-02"},{"id":"20240214_qhcl1an5hk4b6602teud1ta4bc","status":"confirmed","summary":"Valentine\'s Day","region":"Albania","date":"2024-02-14"},{"id":"20240308_tamemtucbkvlia8slqri85cto0","status":"confirmed","summary":"Mothers\' Day","region":"Albania","date":"2024-03-08"},{"id":"20240311_34m4hvs58er04b23hh2bfsiut4","status":"confirmed","summary":"Ramadan Start","region":"Albania","date":"2024-03-11"},{"id":"20240314_7qsu8id4qrviijmldeqbre7thg","status":"confirmed","summary":"Summer Day","region":"Albania","date":"2024-03-14"},{"id":"20240315_ikoik55gsclcj00h5ngnrh1asc","status":"confirmed","summary":"Summer Day Holiday","region":"Albania","date":"2024-03-15"},{"id":"20240322_kdiphumojilmq584olq9o1lci0","status":"confirmed","summary":"Nevruz Day","region":"Albania","date":"2024-03-22"},{"id":"20240329_sn7n4f59064fbmsfacmiftle7c","status":"confirmed","summary":"Good Friday","region":"Albania","date":"2024-03-29"},{"id":"20240330_h3emdvoc9570kqtvik6pfekdjo","status":"confirmed","summary":"Holy Saturday","region":"Albania","date":"2024-03-30"},{"id":"20240331_87e8sepnkegp6u1a2vsp75agn4","status":"confirmed","summary":"Easter Sunday","region":"Albania","date":"2024-03-31"},{"id":"20240331_p6d8boolv8qof8krp41ptv1dtg","status":"confirmed","summary":"Daylight Saving Time starts","region":"Albania","date":"2024-03-31"},{"id":"20240401_qcu4u1vu22vioaqq6010m5g0gs","status":"confirmed","summary":"Day off for Easter Sunday","region":"Albania","date":"2024-04-01"},{"id":"20240401_sot7ms0of0clmi67q6hp57o5b4","status":"confirmed","summary":"Easter Monday","region":"Albania","date":"2024-04-01"},{"id":"20240410_8qje672uupsfjgrbaqmjhq4mdk","status":"confirmed","summary":"Eid al-Fitr","region":"Albania","date":"2024-04-10"},{"id":"20240501_asb11k1ge3dlvmsal0vcsq6gqc","status":"confirmed","summary":"International Worker’s Day","region":"Albania","date":"2024-05-01"},{"id":"20240503_1mgbtphu3ionm0eki8j1kha23s","status":"confirmed","summary":"Good Friday (Orthodox)","region":"Albania","date":"2024-05-03"},{"id":"20240504_n0cs0bqdfbvj6kn1s8mtl1js64","status":"confirmed","summary":"Easter Saturday (Orthodox)","region":"Albania","date":"2024-05-04"},{"id":"20240505_dj5ac8dan71t4qoibf65abdf80","status":"confirmed","summary":"Easter Sunday (Orthodox)","region":"Albania","date":"2024-05-05"},{"id":"20240506_1pu6vood1fh0f2shs1desk06h4","status":"confirmed","summary":"Day off for Easter Sunday (Orthodox)","region":"Albania","date":"2024-05-06"},{"id":"20240506_v6vu6bjkgmcmkim6eiahgqjf2s","status":"confirmed","summary":"Easter Monday (Orthodox)","region":"Albania","date":"2024-05-06"},{"id":"20240616_3maa2e52mesgch18tvhfft5cg4","status":"confirmed","summary":"Fathers\' Day","region":"Albania","date":"2024-06-16"},{"id":"20240617_5g3s4r1fistr7eks5uhm07f128","status":"confirmed","summary":"Feast of the Sacrifice","region":"Albania","date":"2024-06-17"},{"id":"20240905_n3fq66u3h8o6thuh9od197u118","status":"confirmed","summary":"Mother Teresa Beatification Day","region":"Albania","date":"2024-09-05"},{"id":"20241027_e68pnvgp6pa9e25evgkfkh76v8","status":"confirmed","summary":"Daylight Saving Time ends","region":"Albania","date":"2024-10-27"},{"id":"20241031_ogk2q0m65dlol70qs351oio2as","status":"confirmed","summary":"Halloween","region":"Albania","date":"2024-10-31"},{"id":"20241128_qo0gt4dt5mkr91nd1f7kagaqpk","status":"confirmed","summary":"Flag and Independence Day","region":"Albania","date":"2024-11-28"},{"id":"20241129_h14fm5u9dedleiftgnj4kaviho","status":"confirmed","summary":"Liberation Day","region":"Albania","date":"2024-11-29"},{"id":"20241208_e686mu3rpjhc2gdkooc3g4tlk8","status":"confirmed","summary":"National Youth Day","region":"Albania","date":"2024-12-08"},{"id":"20241209_ies7pb13n2g513nf0f72ephorc","status":"confirmed","summary":"Day off for National Youth Day","region":"Albania","date":"2024-12-09"},{"id":"20241224_i8v8ai6br2llsmco010pu9etuo","status":"confirmed","summary":"Christmas Eve","region":"Albania","date":"2024-12-24"},{"id":"20241225_4g9fd2sf6b3d6ihoueror5f2kc","status":"confirmed","summary":"Christmas Day","region":"Albania","date":"2024-12-25"},{"id":"20241231_lgbs1mnibhhjmmqfl0df0pcln4","status":"confirmed","summary":"New Year\'s Eve","region":"Albania","date":"2024-12-31"},{"id":"20250101_bqg40eo1ttf0u2f7ruh0nuj25g","status":"confirmed","summary":"New Year\'s Day","region":"Albania","date":"2025-01-01"},{"id":"20250102_egntqk29rtbrvegmhvjfko4khs","status":"confirmed","summary":"New Year\'s Day (Day 2)","region":"Albania","date":"2025-01-02"},{"id":"20250214_a9bve8qsb8c1vb68bb126u2994","status":"confirmed","summary":"Valentine\'s Day","region":"Albania","date":"2025-02-14"},{"id":"20250301_lcior94ss81kd04o5pi21o7hts","status":"confirmed","summary":"Ramadan Start","region":"Albania","date":"2025-03-01"},{"id":"20250308_3ro7de64kn074l4j7q7atss3no","status":"confirmed","summary":"Mothers\' Day","region":"Albania","date":"2025-03-08"},{"id":"20250314_4bqgt3cm6mfqejd6d5gc2h9i2k","status":"confirmed","summary":"Summer Day","region":"Albania","date":"2025-03-14"},{"id":"20250322_kikii2uf56nrin0oigi0eueuu8","status":"confirmed","summary":"Nevruz Day","region":"Albania","date":"2025-03-22"},{"id":"20250324_aqjko1mrf5n325jqudj58pemn4","status":"confirmed","summary":"Day off for Nevruz Day","region":"Albania","date":"2025-03-24"},{"id":"20250330_37rpv3vqv90oi5d0hh9v5njefs","status":"confirmed","summary":"Daylight Saving Time starts","region":"Albania","date":"2025-03-30"},{"id":"20250331_ks4sug7icsft6setnf64ifm908","status":"confirmed","summary":"Eid al-Fitr","region":"Albania","date":"2025-03-31"},{"id":"20250418_8o0vvdoceem8vou58ohi96bqro","status":"confirmed","summary":"Good Friday","region":"Albania","date":"2025-04-18"},{"id":"20250418_l6loelrpl97dpr0tgiqbrufev0","status":"confirmed","summary":"Good Friday (Orthodox)","region":"Albania","date":"2025-04-18"},{"id":"20250419_4teqfeph54su8h8jcaarqr7ks0","status":"confirmed","summary":"Holy Saturday","region":"Albania","date":"2025-04-19"},{"id":"20250419_kkejlkaaomcbmpcdmjvp6bij20","status":"confirmed","summary":"Easter Saturday (Orthodox)","region":"Albania","date":"2025-04-19"},{"id":"20250420_3ct6b7c1j57eo1es8c9p7q23h8","status":"confirmed","summary":"Easter Sunday","region":"Albania","date":"2025-04-20"},{"id":"20250420_s5rfdvmdudcimsitco0h6c5agg","status":"confirmed","summary":"Easter Sunday (Orthodox)","region":"Albania","date":"2025-04-20"},{"id":"20250421_13as4kkectc5uesg8jgr82tkbs","status":"confirmed","summary":"Day off for Easter Sunday","region":"Albania","date":"2025-04-21"},{"id":"20250421_d7r8fj6b1udnvoluhvfke1qm9o","status":"confirmed","summary":"Easter Monday (Orthodox)","region":"Albania","date":"2025-04-21"},{"id":"20250421_ghp4t6sevc692iuo4tk4jqcgn0","status":"confirmed","summary":"Day off for Easter Sunday (Orthodox)","region":"Albania","date":"2025-04-21"},{"id":"20250421_raqcrhmd1oh8luml77ec3j210s","status":"confirmed","summary":"Easter Monday","region":"Albania","date":"2025-04-21"},{"id":"20250501_l427ck2nhov1njcefodcf81sn8","status":"confirmed","summary":"International Worker’s Day","region":"Albania","date":"2025-05-01"},{"id":"20250607_ar232i27s2c47so50mdihpimo4","status":"confirmed","summary":"Feast of the Sacrifice","region":"Albania","date":"2025-06-07"},{"id":"20250615_ian3p7o9vjduuccssgoqnhnl7o","status":"confirmed","summary":"Fathers\' Day","region":"Albania","date":"2025-06-15"},{"id":"20250905_8iqlrs5bhh7a2c8463uomgsoq8","status":"confirmed","summary":"Mother Teresa Beatification Day","region":"Albania","date":"2025-09-05"},{"id":"20251026_g7cf0savfscbhmc56ohh4hm1jo","status":"confirmed","summary":"Daylight Saving Time ends","region":"Albania","date":"2025-10-26"},{"id":"20251031_i0gmkienh21vh3td6940g6v5bo","status":"confirmed","summary":"Halloween","region":"Albania","date":"2025-10-31"},{"id":"20251128_vvn74ktp0kpsdvkhauv4fujb8s","status":"confirmed","summary":"Flag and Independence Day","region":"Albania","date":"2025-11-28"},{"id":"20251129_g5qhissr1o7i218i48hq6f9lu4","status":"confirmed","summary":"Liberation Day","region":"Albania","date":"2025-11-29"},{"id":"20251201_1sgjmtiuhb0lep2mir5p252hag","status":"confirmed","summary":"Day off for Liberation Day","region":"Albania","date":"2025-12-01"},{"id":"20251208_6igj54gekmbpbjd9rvm6bmqdkk","status":"confirmed","summary":"National Youth Day","region":"Albania","date":"2025-12-08"},{"id":"20251224_vrhuihi58r6r92u5akqivv3n9g","status":"confirmed","summary":"Christmas Eve","region":"Albania","date":"2025-12-24"},{"id":"20251225_9ma0a8s6rg1tia7c0r36d2lifc","status":"confirmed","summary":"Christmas Day","region":"Albania","date":"2025-12-25"},{"id":"20251231_bard3tj0c5hnpm9bm4rl3f99f4","status":"confirmed","summary":"New Year\'s Eve","region":"Albania","date":"2025-12-31"}],"Armenia":[{"id":"20240101_gl93j66rgogofttgld82qpd1oo","status":"confirmed","summary":"New Year\'s Day","region":"Armenia","date":"2024-01-01"},{"id":"20240102_e23o9lvnp1db68uhdl9a830u7o","status":"confirmed","summary":"New Year\'s Day (Day 2)","region":"Armenia","date":"2024-01-02"},{"id":"20240105_fsm0q1asso3i33l5pigr2nddis","status":"confirmed","summary":"Christmas Eve","region":"Armenia","date":"2024-01-05"},{"id":"20240106_59bdmvlbi2dr1b6fokd66puco4","status":"confirmed","summary":"Christmas Day","region":"Armenia","date":"2024-01-06"},{"id":"20240107_v1h0g3f9abn59g31o61jud232o","status":"confirmed","summary":"Christmas Remembrance Day","region":"Armenia","date":"2024-01-07"},{"id":"20240128_mvm0ikat4k08o6ekfldam7nklk","status":"confirmed","summary":"Army Day","region":"Armenia","date":"2024-01-28"},{"id":"20240208_s1rphquk2v6mfivalkkaipn1tk","status":"confirmed","summary":"Feast of Saint Vartan","region":"Armenia","date":"2024-02-08"},{"id":"20240221_cgnhbqqa6m3kgufm9n2u4e68to","status":"confirmed","summary":"Mother Language Day","region":"Armenia","date":"2024-02-21"},{"id":"20240308_rv84u7lvc5mpfvh9hlnp6t7kog","status":"confirmed","summary":"International Women\'s Day","region":"Armenia","date":"2024-03-08"},{"id":"20240329_9f8dljj53c4gsecb9ucu34b2bc","status":"confirmed","summary":"Good Friday","region":"Armenia","date":"2024-03-29"},{"id":"20240330_4bpl389vpmu7sbjp8cj6446r34","status":"confirmed","summary":"Holy Saturday","region":"Armenia","date":"2024-03-30"},{"id":"20240331_ijdv8qs86t26qpuh83q8vn45eg","status":"confirmed","summary":"Easter Sunday","region":"Armenia","date":"2024-03-31"},{"id":"20240401_jg35gkmbu5ormqgbrovmvg18vc","status":"confirmed","summary":"Easter Monday","region":"Armenia","date":"2024-04-01"},{"id":"20240407_f0jf3li3b07mareiu2smcghsss","status":"confirmed","summary":"Motherhood and Beauty Day","region":"Armenia","date":"2024-04-07"},{"id":"20240416_83nm2a4cs515c7nior10hk0gd4","status":"confirmed","summary":"Armenian Cinema Day","region":"Armenia","date":"2024-04-16"},{"id":"20240419_t7aintlmg4oj6f2s6j1doqnoc8","status":"confirmed","summary":"Taxpayers\' Day","region":"Armenia","date":"2024-04-19"},{"id":"20240424_3qdq1ponrnkehpf9j9u41aofp0","status":"confirmed","summary":"Genocide Remembrance Day","region":"Armenia","date":"2024-04-24"},{"id":"20240427_8gd7f8juntnf430l1iokfmq5o0","status":"confirmed","summary":"Citizens\' Day","region":"Armenia","date":"2024-04-27"},{"id":"20240501_c2pkf2t8f2ffc31jmgccc7udo8","status":"confirmed","summary":"Labor Day","region":"Armenia","date":"2024-05-01"},{"id":"20240508_r54b9hsq780rfmesl1hdm3ho7g","status":"confirmed","summary":"Yerkrapah Day","region":"Armenia","date":"2024-05-08"},{"id":"20240509_jrr1gk9o12nedafb9ckauccf94","status":"confirmed","summary":"Victory and Peace Day","region":"Armenia","date":"2024-05-09"},{"id":"20240515_u4jjhg39o4dmfgiv768lc21agg","status":"confirmed","summary":"Family Day","region":"Armenia","date":"2024-05-15"},{"id":"20240516_tkgbjvkkgavb6bical6n8n4430","status":"confirmed","summary":"Day of Students and Youth","region":"Armenia","date":"2024-05-16"},{"id":"20240528_970q2tonf46uve4djkntdga5os","status":"confirmed","summary":"Republic Day","region":"Armenia","date":"2024-05-28"},{"id":"20240601_0b8i9e067lg3csi5vul7vc9rf0","status":"confirmed","summary":"Children\'s Day","region":"Armenia","date":"2024-06-01"},{"id":"20240614_5dfeibc8oemcfdsg242f5pr6sk","status":"confirmed","summary":"Remembrance Day of the Oppressed","region":"Armenia","date":"2024-06-14"},{"id":"20240705_6e8ugf3pjl07jglf64oe8b67ns","status":"confirmed","summary":"Constitution Day","region":"Armenia","date":"2024-07-05"},{"id":"20240705_oa349nmlkqi7c1raen9f9ip0ss","status":"confirmed","summary":"Day of State Symbols","region":"Armenia","date":"2024-07-05"},{"id":"20240901_4c1ng700cmssaqung312u59m24","status":"confirmed","summary":"Knowledge and Literature Day","region":"Armenia","date":"2024-09-01"},{"id":"20240921_kmb94bn3fkuoli2ecalh2ehn0k","status":"confirmed","summary":"Independence Day","region":"Armenia","date":"2024-09-21"},{"id":"20241005_e408mg5qfa3ba9tpklup1td22c","status":"confirmed","summary":"Teachers\' Day","region":"Armenia","date":"2024-10-05"},{"id":"20241006_jgqsrma2ns4huthcra1p0tm7bg","status":"confirmed","summary":"Day of National Minorities of the Republic of Armenia","region":"Armenia","date":"2024-10-06"},{"id":"20241012_8uomnl9s6vq7lb6su7q6n46k20","status":"confirmed","summary":"Translators\' Day","region":"Armenia","date":"2024-10-12"},{"id":"20241110_okp0mb92h9kn05t8mnrfo018v4","status":"confirmed","summary":"Local Self-Government Day","region":"Armenia","date":"2024-11-10"},{"id":"20241207_ira57iippje8gdqrvhs2fcs5to","status":"confirmed","summary":"Spitak Remembrance Day","region":"Armenia","date":"2024-12-07"},{"id":"20241209_vvdpgvhhanucdftjjpj7nsftnk","status":"confirmed","summary":"Genocide Condemnation and Prevention Day","region":"Armenia","date":"2024-12-09"},{"id":"20241231_51nm28380msi0tp8bb5kbhquvk","status":"confirmed","summary":"New Year\'s Eve","region":"Armenia","date":"2024-12-31"},{"id":"20250101_ifbd9gu9dm0jq8hju3s0tasmio","status":"confirmed","summary":"New Year\'s Day","region":"Armenia","date":"2025-01-01"},{"id":"20250102_cobjaoa323opodicsuo3c0ctbk","status":"confirmed","summary":"New Year\'s Day (Day 2)","region":"Armenia","date":"2025-01-02"},{"id":"20250105_e40nc4amekjg1lm2tqdnk7umd4","status":"confirmed","summary":"Christmas Eve","region":"Armenia","date":"2025-01-05"},{"id":"20250106_hp4qji3ji5mdu64bevhvug605o","status":"confirmed","summary":"Christmas Day","region":"Armenia","date":"2025-01-06"},{"id":"20250107_tsf5ohhjvt9ri4qe0rrd3c67t8","status":"confirmed","summary":"Christmas Remembrance Day","region":"Armenia","date":"2025-01-07"},{"id":"20250128_e3h4glvj50mfis3g5ei2c9n930","status":"confirmed","summary":"Army Day","region":"Armenia","date":"2025-01-28"},{"id":"20250221_19jvrni1815llr874verjhb02k","status":"confirmed","summary":"Mother Language Day","region":"Armenia","date":"2025-02-21"},{"id":"20250227_opn3h1m39sqo0br6rbq54oksss","status":"confirmed","summary":"Feast of Saint Vartan","region":"Armenia","date":"2025-02-27"},{"id":"20250308_v6fle557i5st266l777a543lvc","status":"confirmed","summary":"International Women\'s Day","region":"Armenia","date":"2025-03-08"},{"id":"20250407_112bp4ig93b3veqmo3v743vh9g","status":"confirmed","summary":"Motherhood and Beauty Day","region":"Armenia","date":"2025-04-07"},{"id":"20250416_1ie8rs91fjiglusiv1cdbius78","status":"confirmed","summary":"Armenian Cinema Day","region":"Armenia","date":"2025-04-16"},{"id":"20250418_o0909m0k0477sivn0iue22kgkc","status":"confirmed","summary":"Good Friday","region":"Armenia","date":"2025-04-18"},{"id":"20250419_4b89c6nhojl421s0t585lv9ng0","status":"confirmed","summary":"Taxpayers\' Day","region":"Armenia","date":"2025-04-19"},{"id":"20250419_ud6au7b6hdj9i9eq206jrlceas","status":"confirmed","summary":"Holy Saturday","region":"Armenia","date":"2025-04-19"},{"id":"20250420_r2u1k0dsv862c27p8g4a9vv4as","status":"confirmed","summary":"Easter Sunday","region":"Armenia","date":"2025-04-20"},{"id":"20250421_idf2b70lf9g2mbsota92mku7tg","status":"confirmed","summary":"Easter Monday","region":"Armenia","date":"2025-04-21"},{"id":"20250424_1bl6o2e83vgel8e8rir6dblcc4","status":"confirmed","summary":"Genocide Remembrance Day","region":"Armenia","date":"2025-04-24"},{"id":"20250426_lui82a823sk5ph3eupg3eiegtk","status":"confirmed","summary":"Citizens\' Day","region":"Armenia","date":"2025-04-26"},{"id":"20250501_fs679piquo6figj85pn3p2od58","status":"confirmed","summary":"Labor Day","region":"Armenia","date":"2025-05-01"},{"id":"20250508_lt3rldaksa92glt27ocm6e5pbg","status":"confirmed","summary":"Yerkrapah Day","region":"Armenia","date":"2025-05-08"},{"id":"20250509_7ugrira62rh3sov2ohh8shjo9s","status":"confirmed","summary":"Victory and Peace Day","region":"Armenia","date":"2025-05-09"},{"id":"20250515_59u1nprn7npuvqfar2bb8ai8ao","status":"confirmed","summary":"Family Day","region":"Armenia","date":"2025-05-15"},{"id":"20250516_qa7afjh7d78u2kmo565onrpuqg","status":"confirmed","summary":"Day of Students and Youth","region":"Armenia","date":"2025-05-16"},{"id":"20250528_heo10ht0mqlvikssm1t0rtv73g","status":"confirmed","summary":"Republic Day","region":"Armenia","date":"2025-05-28"},{"id":"20250601_sf8210av3efuvpcc39s04kftg0","status":"confirmed","summary":"Children\'s Day","region":"Armenia","date":"2025-06-01"},{"id":"20250614_tgsd1p7rc2pocu80ga5f2mdn1o","status":"confirmed","summary":"Remembrance Day of the Oppressed","region":"Armenia","date":"2025-06-14"},{"id":"20250705_gmtjdbmh4k0g0p9o2gr78724n0","status":"confirmed","summary":"Constitution Day","region":"Armenia","date":"2025-07-05"},{"id":"20250705_qtj0gf42ce94o8pkjfh4goooms","status":"confirmed","summary":"Day of State Symbols","region":"Armenia","date":"2025-07-05"},{"id":"20250901_kqpkc31cm0b0a092j4urdi07og","status":"confirmed","summary":"Knowledge and Literature Day","region":"Armenia","date":"2025-09-01"},{"id":"20250921_e0bf8rf4phdvj3o4p6m13cier8","status":"confirmed","summary":"Independence Day","region":"Armenia","date":"2025-09-21"},{"id":"20251005_7spegcvarvj1e32g0m6n07nkvc","status":"confirmed","summary":"Day of National Minorities of the Republic of Armenia","region":"Armenia","date":"2025-10-05"},{"id":"20251005_8cn3qdh20umcerdvjs9mlr3gls","status":"confirmed","summary":"Teachers\' Day","region":"Armenia","date":"2025-10-05"},{"id":"20251011_sv4f7c60c1n6mmlpl4bp214gf0","status":"confirmed","summary":"Translators\' Day","region":"Armenia","date":"2025-10-11"},{"id":"20251110_7c4jo0e9ac6jro5ahpopqi0ruo","status":"confirmed","summary":"Local Self-Government Day","region":"Armenia","date":"2025-11-10"},{"id":"20251207_77n87abp658m88b72vplcanevk","status":"confirmed","summary":"Spitak Remembrance Day","region":"Armenia","date":"2025-12-07"},{"id":"20251209_mcucqq2b2p5u8qhh9o1c751ro8","status":"confirmed","summary":"Genocide Condemnation and Prevention Day","region":"Armenia","date":"2025-12-09"},{"id":"20251231_u2qepea6d508d2ao1576i1q2rs","status":"confirmed","summary":"New Year\'s Eve","region":"Armenia","date":"2025-12-31"}],"Angola":[{"id":"20240101_fu03v87ufens50990vku9ghvtg","status":"confirmed","summary":"New Year","region":"Angola","date":"2024-01-01"},{"id":"20240204_iegjegren935e9i64j1l05bq04","status":"confirmed","summary":"Liberation Movement Day","region":"Angola","date":"2024-02-04"},{"id":"20240212_71fvrtbieh8pd4mdmkg6khbqt0","status":"confirmed","summary":"Carnival Holiday","region":"Angola","date":"2024-02-12"},{"id":"20240213_eetpdk7r8b4gpg6f4m12g32008","status":"confirmed","summary":"Carnival","region":"Angola","date":"2024-02-13"},{"id":"20240308_lbgkvici6gmpnh8dla464cmui0","status":"confirmed","summary":"International Woman\'s Day","region":"Angola","date":"2024-03-08"},{"id":"20240323_llk4cmpoa8k97lp110qkko0k7c","status":"confirmed","summary":"Southern Africa Liberation Day","region":"Angola","date":"2024-03-23"},{"id":"20240329_mip4frc2si5nmrsbvjckpe7t9s","status":"confirmed","summary":"Good Friday","region":"Angola","date":"2024-03-29"},{"id":"20240404_chkhd2fbu80863mei1p9398vak","status":"confirmed","summary":"Peace Day","region":"Angola","date":"2024-04-04"},{"id":"20240405_8kcoccj7ghc75qheie9k2mh4fc","status":"confirmed","summary":"Day off for Peace Day","region":"Angola","date":"2024-04-05"},{"id":"20240501_a3o3v7obtmu1vi3uib0tuusff8","status":"confirmed","summary":"May Day","region":"Angola","date":"2024-05-01"},{"id":"20240916_45jd63b0thcsi37vase8bnmlk0","status":"confirmed","summary":"Day off for National Hero Day","region":"Angola","date":"2024-09-16"},{"id":"20240917_d08j5jppuu2pt9emnogl1ra39o","status":"confirmed","summary":"National Hero Day","region":"Angola","date":"2024-09-17"},{"id":"20241102_a6ntse4k4qamqota6fpjqodn2c","status":"confirmed","summary":"All Souls\' Day","region":"Angola","date":"2024-11-02"},{"id":"20241111_32obdkpmk601he5afdcr57319o","status":"confirmed","summary":"Independence Day","region":"Angola","date":"2024-11-11"},{"id":"20241225_mihjsb8hi6gi28j1rvanq77kk4","status":"confirmed","summary":"Christmas Day","region":"Angola","date":"2024-12-25"},{"id":"20250101_i946trvai4hgulskss3dljruvo","status":"confirmed","summary":"New Year","region":"Angola","date":"2025-01-01"},{"id":"20250203_g03a8m18vu870uq0jcv1t7be1s","status":"confirmed","summary":"Day off for Liberation Movement Day","region":"Angola","date":"2025-02-03"},{"id":"20250204_nsk7hrr4olg78akfhups4na85s","status":"confirmed","summary":"Liberation Movement Day","region":"Angola","date":"2025-02-04"},{"id":"20250303_7nuk28esbe0ltkepf8sc6e0v90","status":"confirmed","summary":"Carnival Holiday","region":"Angola","date":"2025-03-03"},{"id":"20250304_hviftgt3scbsf3rvn352fplrv4","status":"confirmed","summary":"Carnival","region":"Angola","date":"2025-03-04"},{"id":"20250308_g3o1qo3j48gqrk3m8kir9v2ifg","status":"confirmed","summary":"International Woman\'s Day","region":"Angola","date":"2025-03-08"},{"id":"20250323_i17jtgin1jv9i77q4l5tav33uo","status":"confirmed","summary":"Southern Africa Liberation Day","region":"Angola","date":"2025-03-23"},{"id":"20250404_q487abu352g15v0o9vqcfp0nbc","status":"confirmed","summary":"Peace Day","region":"Angola","date":"2025-04-04"},{"id":"20250418_rmt4rtknbga2hpp5br8s022s88","status":"confirmed","summary":"Good Friday","region":"Angola","date":"2025-04-18"},{"id":"20250501_ve5fc4ehtjsh4drtpofln4uk6s","status":"confirmed","summary":"May Day","region":"Angola","date":"2025-05-01"},{"id":"20250502_pfv6snhjecpbl7d13uj82kb7p0","status":"confirmed","summary":"Day off for May Day","region":"Angola","date":"2025-05-02"},{"id":"20250917_efnpefd38aj9pjp39osa305uv8","status":"confirmed","summary":"National Hero Day","region":"Angola","date":"2025-09-17"},{"id":"20251102_1rluc3sntv39rpjankmsn6l1f4","status":"confirmed","summary":"All Souls\' Day","region":"Angola","date":"2025-11-02"},{"id":"20251110_lupsg2eeqqkr63tktaq8h0b1m4","status":"confirmed","summary":"Day off for Independence Day","region":"Angola","date":"2025-11-10"},{"id":"20251111_6rq9aj3ae12pkcpok0naq4m4v4","status":"confirmed","summary":"Independence Day","region":"Angola","date":"2025-11-11"},{"id":"20251225_1pghfbarc85ea33qvnh3r7f4rk","status":"confirmed","summary":"Christmas Day","region":"Angola","date":"2025-12-25"},{"id":"20251226_lva3no73vbptg5fkqg3fubfl4o","status":"confirmed","summary":"Day off for Christmas Day","region":"Angola","date":"2025-12-26"}],"Argentina":[{"id":"20240101_n1m4v4ul85ji5hf8u9lm7n8k7g","status":"confirmed","summary":"New Year\'s Day","region":"Argentina","date":"2024-01-01"},{"id":"20240212_7tcjngc7t3a2enk46dmg4nr380","status":"confirmed","summary":"Carnival / Shrove Monday","region":"Argentina","date":"2024-02-12"},{"id":"20240213_1sgh1k9tqm5lut18movchtnahs","status":"confirmed","summary":"Carnival / Shrove Tuesday / Pancake Day","region":"Argentina","date":"2024-02-13"},{"id":"20240311_m816v2ipk8jlrpelfk8r01gmkc","status":"confirmed","summary":"Ramadan Start","region":"Argentina","date":"2024-03-11"},{"id":"20240324_55gnsiaih3rvuvc9jq00otlto4","status":"confirmed","summary":"Memorial Day","region":"Argentina","date":"2024-03-24"},{"id":"20240328_gm0tr2hesl39efim6mc6qq39f8","status":"confirmed","summary":"Maundy Thursday","region":"Argentina","date":"2024-03-28"},{"id":"20240329_1g6225fdng1j0i27oue8rco3rs","status":"confirmed","summary":"Good Friday","region":"Argentina","date":"2024-03-29"},{"id":"20240331_l3e8fhau4qgn8qh93vqbq2fdqk","status":"confirmed","summary":"Easter Sunday","region":"Argentina","date":"2024-03-31"},{"id":"20240401_dq68n02pqc41sus9fn1fudioa0","status":"confirmed","summary":"Tourist Bridge Holiday","region":"Argentina","date":"2024-04-01"},{"id":"20240402_1al5qcnb140v3lpi279gn1k20k","status":"confirmed","summary":"Day of the Veterans","region":"Argentina","date":"2024-04-02"},{"id":"20240410_ca1t8tc5a30r926qvlcmbjvc1k","status":"confirmed","summary":"End of Ramadan","region":"Argentina","date":"2024-04-10"},{"id":"20240422_7kejb67t7da38uv419j2bjis64","status":"confirmed","summary":"Passover Eve","region":"Argentina","date":"2024-04-22"},{"id":"20240423_v8ue6p0rn5djs8ih0e7b47gdl0","status":"confirmed","summary":"First day of Passover","region":"Argentina","date":"2024-04-23"},{"id":"20240424_33pi8o02a9muf07pjm308fa7q8","status":"confirmed","summary":"Action Day for Tolerance and Respect between People","region":"Argentina","date":"2024-04-24"},{"id":"20240424_d1ori1nvlpgfmf4ne3ve8s6rck","status":"confirmed","summary":"Second Day of Passover","region":"Argentina","date":"2024-04-24"},{"id":"20240428_j5uvm28r36osriqdhfni1e6uvo","status":"confirmed","summary":"Sixth Day of Passover","region":"Argentina","date":"2024-04-28"},{"id":"20240429_fu1qvmsbb1k5fkpog02sghqrb4","status":"confirmed","summary":"Seventh Day of Passover","region":"Argentina","date":"2024-04-29"},{"id":"20240430_i4c0816nk5ceruu8idppbnv628","status":"confirmed","summary":"Last day of Passover","region":"Argentina","date":"2024-04-30"},{"id":"20240501_rje90dp1m7qugk3t7mstfp0sag","status":"confirmed","summary":"Labor Day / May Day","region":"Argentina","date":"2024-05-01"},{"id":"20240525_2q6obv98n22r94beicvpqden5o","status":"confirmed","summary":"National Day/May 1810 Revolution","region":"Argentina","date":"2024-05-25"},{"id":"20240617_n06hkh16ni53blumog6aihc7bo","status":"confirmed","summary":"Commemoration of General Don Martín Miguel de Güemes","region":"Argentina","date":"2024-06-17"},{"id":"20240617_tnu6ib6e4mvicbgremh42qn2j4","status":"confirmed","summary":"Eid al-Adha","region":"Argentina","date":"2024-06-17"},{"id":"20240620_8silbeeupm2u7re4bu8ss88jus","status":"confirmed","summary":"Flag Day","region":"Argentina","date":"2024-06-20"},{"id":"20240621_592kkim348sn9hb9qt7a2o1kt0","status":"confirmed","summary":"Tourist Bridge Holiday","region":"Argentina","date":"2024-06-21"},{"id":"20240708_7vrhabc53lgufgldsqle3n1q2o","status":"confirmed","summary":"Muharram/New Year","region":"Argentina","date":"2024-07-08"},{"id":"20240709_n1kod4l32piatkunjta4kdp6ro","status":"confirmed","summary":"Independence day","region":"Argentina","date":"2024-07-09"},{"id":"20240817_boe9vikbr1mtd33l5fl7c5vpho","status":"confirmed","summary":"San Martín Day","region":"Argentina","date":"2024-08-17"},{"id":"20241003_g98obi0bukk6p15i53a1l0v4f4","status":"confirmed","summary":"Rosh Hashana","region":"Argentina","date":"2024-10-03"},{"id":"20241004_c7fegbojobvqu16sa9iarq0mg0","status":"confirmed","summary":"Second Day of Rosh Hashana","region":"Argentina","date":"2024-10-04"},{"id":"20241011_s5qgt08liqn4lu5glr1rcad074","status":"confirmed","summary":"Tourist Bridge Holiday","region":"Argentina","date":"2024-10-11"},{"id":"20241012_4sshug4tge88dg8pkrnjmi4dps","status":"confirmed","summary":"Day of Respect for Cultural Diversity","region":"Argentina","date":"2024-10-12"},{"id":"20241012_c9ch5q1imj84f51050hublikro","status":"confirmed","summary":"Yom Kippur","region":"Argentina","date":"2024-10-12"},{"id":"20241020_ehsghkfcoskqm7ebfdg1jlgbpo","status":"confirmed","summary":"Mothers\' Day","region":"Argentina","date":"2024-10-20"},{"id":"20241118_t2kt7lgirsv0romgq832e3i434","status":"confirmed","summary":"National Sovereignty Day","region":"Argentina","date":"2024-11-18"},{"id":"20241208_ts7fc7qmhro7tuehi92fk5ndd8","status":"confirmed","summary":"Immaculate Conception","region":"Argentina","date":"2024-12-08"},{"id":"20241225_rdvflg2n9d6vivvks9scpvhh1o","status":"confirmed","summary":"Christmas Day","region":"Argentina","date":"2024-12-25"},{"id":"20241231_jk40pk7s53iio465r83gp7l9dc","status":"confirmed","summary":"New Year\'s Eve","region":"Argentina","date":"2024-12-31"},{"id":"20250101_mnqg13g0oqhr982qpp0korfuog","status":"confirmed","summary":"New Year\'s Day","region":"Argentina","date":"2025-01-01"},{"id":"20250301_7lnjuen5cvfmj1dr1b5q04qihk","status":"confirmed","summary":"Ramadan Start","region":"Argentina","date":"2025-03-01"},{"id":"20250303_mh4masr1gukk8phc7npchq2jtk","status":"confirmed","summary":"Carnival / Shrove Monday","region":"Argentina","date":"2025-03-03"},{"id":"20250304_nhrinf20ep0o3fja7nptv6cfac","status":"confirmed","summary":"Carnival / Shrove Tuesday / Pancake Day","region":"Argentina","date":"2025-03-04"},{"id":"20250324_5o3n7rovv6epb3e2msntnb43kk","status":"confirmed","summary":"Memorial Day","region":"Argentina","date":"2025-03-24"},{"id":"20250331_cle93e3fba07l6m69kvekhjhg8","status":"confirmed","summary":"End of Ramadan","region":"Argentina","date":"2025-03-31"},{"id":"20250402_lm98lidlfprpv26e4q0ukusm2o","status":"confirmed","summary":"Day of the Veterans","region":"Argentina","date":"2025-04-02"},{"id":"20250412_nsoko6a3jki4hm91t4rj6gc2e0","status":"confirmed","summary":"Passover Eve","region":"Argentina","date":"2025-04-12"},{"id":"20250413_6n7p8b7sd91pb9f5poasds46cg","status":"confirmed","summary":"First day of Passover","region":"Argentina","date":"2025-04-13"},{"id":"20250414_jngov6p9gj6h3vgje3jiun3klg","status":"confirmed","summary":"Second Day of Passover","region":"Argentina","date":"2025-04-14"},{"id":"20250417_ibhso953vf6f0sg6841h8dotas","status":"confirmed","summary":"Maundy Thursday","region":"Argentina","date":"2025-04-17"},{"id":"20250418_i51gss3mhi8lujf745k3ku5o20","status":"confirmed","summary":"Good Friday","region":"Argentina","date":"2025-04-18"},{"id":"20250418_mse30amtqdbqt9n4jo6a273bco","status":"confirmed","summary":"Sixth Day of Passover","region":"Argentina","date":"2025-04-18"},{"id":"20250419_lsaugp6bvcnvf3lmtv6fhsnjmc","status":"confirmed","summary":"Seventh Day of Passover","region":"Argentina","date":"2025-04-19"},{"id":"20250420_2oocvnk7b7st48a645k2th1f4k","status":"confirmed","summary":"Easter Sunday","region":"Argentina","date":"2025-04-20"},{"id":"20250420_ps6prks7poivgb1l0vmlvvn8g4","status":"confirmed","summary":"Last day of Passover","region":"Argentina","date":"2025-04-20"},{"id":"20250424_lpnmnn15ph8mhjet894nvon2ak","status":"confirmed","summary":"Action Day for Tolerance and Respect between People","region":"Argentina","date":"2025-04-24"},{"id":"20250501_7qv84tdo99bnlash1vbbsa2m84","status":"confirmed","summary":"Labor Day / May Day","region":"Argentina","date":"2025-05-01"},{"id":"20250525_jfai7mpdcpke2kfhum8kc8f8kk","status":"confirmed","summary":"National Day/May 1810 Revolution","region":"Argentina","date":"2025-05-25"},{"id":"20250607_u9adagupppk9gklgidds09e034","status":"confirmed","summary":"Eid al-Adha","region":"Argentina","date":"2025-06-07"},{"id":"20250617_uamo773p9dnl3ahpcd9kkfnr7g","status":"confirmed","summary":"Commemoration of General Don Martín Miguel de Güemes","region":"Argentina","date":"2025-06-17"},{"id":"20250620_n2l60fes5aqqbg11ido29d6lmk","status":"confirmed","summary":"Flag Day","region":"Argentina","date":"2025-06-20"},{"id":"20250627_7bn9e8mhjhuhs16o52su561bsc","status":"confirmed","summary":"Muharram/New Year","region":"Argentina","date":"2025-06-27"},{"id":"20250709_89qa418f6b9cep9hr34dv441cc","status":"confirmed","summary":"Independence day","region":"Argentina","date":"2025-07-09"},{"id":"20250818_7sr3pp6kg7b6noi803vn3i9lfs","status":"confirmed","summary":"San Martín Day","region":"Argentina","date":"2025-08-18"},{"id":"20250923_u2qhk46kkljsd1otuatl0bmin0","status":"confirmed","summary":"Rosh Hashana","region":"Argentina","date":"2025-09-23"},{"id":"20250924_bq58ec0asm9ukg5igtujpo4448","status":"confirmed","summary":"Second Day of Rosh Hashana","region":"Argentina","date":"2025-09-24"},{"id":"20251002_cfv90lq4ugsr099ebqcd31lre8","status":"confirmed","summary":"Yom Kippur","region":"Argentina","date":"2025-10-02"},{"id":"20251013_m57ge4jhvst4tmbsankc7mhq7o","status":"confirmed","summary":"Day of Respect for Cultural Diversity","region":"Argentina","date":"2025-10-13"},{"id":"20251019_btfvcbml6no9tus1uudh21r1ik","status":"confirmed","summary":"Mothers\' Day","region":"Argentina","date":"2025-10-19"},{"id":"20251117_41rtp8uhjkoqsnqchfphcv2aig","status":"confirmed","summary":"National Sovereignty Day","region":"Argentina","date":"2025-11-17"},{"id":"20251208_0vl2va6t7fq83hlh25gjhbg9r0","status":"confirmed","summary":"Immaculate Conception","region":"Argentina","date":"2025-12-08"},{"id":"20251225_gml3q8omfo9ormn87ba5l4klrg","status":"confirmed","summary":"Christmas Day","region":"Argentina","date":"2025-12-25"},{"id":"20251231_mi502n7iu8go5hpnr4mj0vag90","status":"confirmed","summary":"New Year\'s Eve","region":"Argentina","date":"2025-12-31"}],"American Samoa":[{"id":"20240101_bucaa064cj4eos5u06qh2eb7u8","status":"confirmed","summary":"New Year\'s Day","region":"American Samoa","date":"2024-01-01"},{"id":"20240115_r54c8mhik05laqbprf00rv1abk","status":"confirmed","summary":"Martin Luther King Jr. Day","region":"American Samoa","date":"2024-01-15"},{"id":"20240219_rtjn9tdpav3citlidlmi3fe8o8","status":"confirmed","summary":"President\'s Day","region":"American Samoa","date":"2024-02-19"},{"id":"20240329_fm860kg6j51mjicfkur0g47vfk","status":"confirmed","summary":"Good Friday","region":"American Samoa","date":"2024-03-29"},{"id":"20240417_r0truk85vhvf0vtr3sc64vi6b8","status":"confirmed","summary":"Flag Day","region":"American Samoa","date":"2024-04-17"},{"id":"20240527_c0128ipo1unfmu25p852rkmpic","status":"confirmed","summary":"Memorial Day","region":"American Samoa","date":"2024-05-27"},{"id":"20240619_f7la9r35ers47qommmliv047vc","status":"confirmed","summary":"Juneteenth Independence Day","region":"American Samoa","date":"2024-06-19"},{"id":"20240704_vu9dhuq37ecrhd3m7mvlke1moo","status":"confirmed","summary":"Independence Day","region":"American Samoa","date":"2024-07-04"},{"id":"20240716_p17fplruep724rcknaij97kqe8","status":"confirmed","summary":"Manu\'a Cession Day","region":"American Samoa","date":"2024-07-16"},{"id":"20240902_8m9tpb2lquoaccdmecen04srm4","status":"confirmed","summary":"Labor Day","region":"American Samoa","date":"2024-09-02"},{"id":"20241014_gco1b9888abuiee2c5dsd05s5o","status":"confirmed","summary":"Columbus Day","region":"American Samoa","date":"2024-10-14"},{"id":"20241111_1r9cvh2ab6e6l48nvc3bkql1c8","status":"confirmed","summary":"Veterans\' Day","region":"American Samoa","date":"2024-11-11"},{"id":"20241128_0g1vqvuu0id0tahd7mhjqhds5s","status":"confirmed","summary":"Thanksgiving","region":"American Samoa","date":"2024-11-28"},{"id":"20241225_de4qce7udubivamkq9qemul09s","status":"confirmed","summary":"Christmas Day","region":"American Samoa","date":"2024-12-25"},{"id":"20250101_6netsrnj420csptuj59t9j2nos","status":"confirmed","summary":"New Year\'s Day","region":"American Samoa","date":"2025-01-01"},{"id":"20250120_2d79d9iplqcuv0sf9s67r5s67o","status":"confirmed","summary":"Martin Luther King Jr. Day","region":"American Samoa","date":"2025-01-20"},{"id":"20250217_9vl0ehbndl23filso7peaheq0o","status":"confirmed","summary":"President\'s Day","region":"American Samoa","date":"2025-02-17"},{"id":"20250417_ek2f4r3o861o8iuesa65rkdd4o","status":"confirmed","summary":"Flag Day","region":"American Samoa","date":"2025-04-17"},{"id":"20250418_tp0754aouem8cultdl627tpm48","status":"confirmed","summary":"Good Friday","region":"American Samoa","date":"2025-04-18"},{"id":"20250526_dka4p8phst33mucis6v9ve0rbg","status":"confirmed","summary":"Memorial Day","region":"American Samoa","date":"2025-05-26"},{"id":"20250619_3l65s8e2gvmaspq7a9440cn2ug","status":"confirmed","summary":"Juneteenth Independence Day","region":"American Samoa","date":"2025-06-19"},{"id":"20250704_0adof4299kfglom1b1k9ipd2qk","status":"confirmed","summary":"Independence Day","region":"American Samoa","date":"2025-07-04"},{"id":"20250716_gsh4q1b6orjdbk4v7ms45goe4g","status":"confirmed","summary":"Manu\'a Cession Day","region":"American Samoa","date":"2025-07-16"},{"id":"20250901_bjij5v1njb4njcti28p18js1ms","status":"confirmed","summary":"Labor Day","region":"American Samoa","date":"2025-09-01"},{"id":"20251013_5emdlp3pp4ef2kb61cf1r4cevk","status":"confirmed","summary":"Columbus Day","region":"American Samoa","date":"2025-10-13"},{"id":"20251111_9qmsvsjsfns4dnlbk1509drjc4","status":"confirmed","summary":"Veterans\' Day","region":"American Samoa","date":"2025-11-11"},{"id":"20251127_3np5p4ks9j1p4aocrhbg2ek9kc","status":"confirmed","summary":"Thanksgiving","region":"American Samoa","date":"2025-11-27"},{"id":"20251225_31j4abehu67dt2vnkst70fqkmo","status":"confirmed","summary":"Christmas Day","region":"American Samoa","date":"2025-12-25"}],"Australia":[{"id":"20240101_56hjl8ml666t0q40hpc9nrabek","status":"confirmed","summary":"New Year\'s Day","region":"Australia","date":"2024-01-01"},{"id":"20240126_ih3fjpvt05q5ijoo4jed05g3d8","status":"confirmed","summary":"Australia Day","region":"Australia","date":"2024-01-26"},{"id":"20240210_77dqfs3nqdeu2hvrcepjsd0p3o","status":"confirmed","summary":"Lunar New Year (Christmas Island)","region":"Australia","date":"2024-02-10"},{"id":"20240211_svbf80ufasbl3mk1vfhohv8kpc","status":"confirmed","summary":"Lunar New Year Holiday (Day 2) (Christmas Island)","region":"Australia","date":"2024-02-11"},{"id":"20240212_nsludm4g2m2qc5h9t7kefnusdo","status":"confirmed","summary":"Day off for Lunar New Year (Christmas Island)","region":"Australia","date":"2024-02-12"},{"id":"20240212_rsjhmqjj95qib42jfnl0c5d8ns","status":"confirmed","summary":"Royal Hobart Regatta (Tasmania)","region":"Australia","date":"2024-02-12"},{"id":"20240304_d3oepmc3t5ffae3vf8qml0plqs","status":"confirmed","summary":"Labour Day (Western Australia)","region":"Australia","date":"2024-03-04"},{"id":"20240311_20662k8cqf0tlp7jg3kj71r0fk","status":"confirmed","summary":"Canberra Day (Australian Capital Territory)","region":"Australia","date":"2024-03-11"},{"id":"20240311_2cm8gpmaunpp3gn0ev6n9re8c0","status":"confirmed","summary":"Labour Day (Victoria)","region":"Australia","date":"2024-03-11"},{"id":"20240311_iu838i3nsdqcu89fuh7j9s1mss","status":"confirmed","summary":"Adelaide Cup (South Australia)","region":"Australia","date":"2024-03-11"},{"id":"20240311_qsc3klo33vk4t6d6eemjrbjfg4","status":"confirmed","summary":"Eight Hours Day (Tasmania)","region":"Australia","date":"2024-03-11"},{"id":"20240316_hgggj7j5kntgkhhvh3s031kuik","status":"confirmed","summary":"Labour Day (Christmas Island)","region":"Australia","date":"2024-03-16"},{"id":"20240321_cq7dnpb5soj1h4dej5ek8kpp7g","status":"confirmed","summary":"Harmony Day","region":"Australia","date":"2024-03-21"},{"id":"20240329_bbbcjqrrdo41hsa00a5s21a268","status":"confirmed","summary":"Good Friday (Victoria)","region":"Australia","date":"2024-03-29"},{"id":"20240330_5k3n8cgu57lsa18qosiajkk5js","status":"confirmed","summary":"Holy Saturday (regional holiday)","region":"Australia","date":"2024-03-30"},{"id":"20240331_uu5rujj2vpcg4m9b9gcgdsh0j4","status":"confirmed","summary":"Easter Sunday (regional holiday)","region":"Australia","date":"2024-03-31"},{"id":"20240401_8kg6m71ncdidmk8j8hojrsvra8","status":"confirmed","summary":"Easter Monday","region":"Australia","date":"2024-04-01"},{"id":"20240402_4eoqi5u1sekfgmco7hv9hql4gk","status":"confirmed","summary":"Easter Tuesday (Tasmania)","region":"Australia","date":"2024-04-02"},{"id":"20240407_mj471m19lhi8l0j87f8rm7b9qs","status":"confirmed","summary":"Daylight Saving Time ends","region":"Australia","date":"2024-04-07"},{"id":"20240410_fut3a3j2so9c74p4sgp50ro37s","status":"confirmed","summary":"Hari Raya Puasa (regional holiday)","region":"Australia","date":"2024-04-10"},{"id":"20240425_7tri8c4kkohkgc2db9lcb9bvo8","status":"confirmed","summary":"ANZAC Day","region":"Australia","date":"2024-04-25"},{"id":"20240425_qlulro35api5gieeddssln9j9o","status":"confirmed","summary":"ANZAC Day Observed (Victoria)","region":"Australia","date":"2024-04-25"},{"id":"20240429_b6vosupmb3cu68g562dd1ik16k","status":"confirmed","summary":"Self Determination Day (Cocos and Keeling Islands)","region":"Australia","date":"2024-04-29"},{"id":"20240506_8t71fpee19mfd1dt3gkvmjv678","status":"confirmed","summary":"Labour Day (Queensland)","region":"Australia","date":"2024-05-06"},{"id":"20240506_mfnhdmiebd0i228ij09lc7ocpg","status":"confirmed","summary":"May Day (Northern Territory)","region":"Australia","date":"2024-05-06"},{"id":"20240527_eq8laqo0qg71q67s01kgokml8g","status":"confirmed","summary":"Reconciliation Day (Australian Capital Territory)","region":"Australia","date":"2024-05-27"},{"id":"20240603_vqsmacc58frrpiqpi1e808pn9k","status":"confirmed","summary":"Western Australia Day (Western Australia)","region":"Australia","date":"2024-06-03"},{"id":"20240606_1mochru4ck8jfmm3su2ttehqao","status":"confirmed","summary":"King\'s Birthday (Cocos and Keeling Islands)","region":"Australia","date":"2024-06-06"},{"id":"20240610_savh63aov340ec9dff7km0okto","status":"confirmed","summary":"King\'s Birthday (regional holiday)","region":"Australia","date":"2024-06-10"},{"id":"20240617_20g25fnmsa785fh5q0vp6845bo","status":"confirmed","summary":"Hari Raya Haji (regional holiday)","region":"Australia","date":"2024-06-17"},{"id":"20240805_hp2ce64s1t1ois28ee1bog05ls","status":"confirmed","summary":"Northern Territory Picnic Day (Northern Territory)","region":"Australia","date":"2024-08-05"},{"id":"20240805_v114ba1rc0n3k35jafh1rg80ac","status":"confirmed","summary":"New South Wales Bank Holiday (New South Wales)","region":"Australia","date":"2024-08-05"},{"id":"20240814_rgp26ei9ungm86nbdg9kvn5aco","status":"confirmed","summary":"Royal National Agricultural Show Day Queensland (Queensland)","region":"Australia","date":"2024-08-14"},{"id":"20240916_0gpgs48b3q8g1es844vjlok85s","status":"confirmed","summary":"Hari Maulad Nabi (Cocos and Keeling Islands)","region":"Australia","date":"2024-09-16"},{"id":"20240923_maqfmii8bh8j8mlpmune0jl5as","status":"confirmed","summary":"King\'s Birthday (Western Australia)","region":"Australia","date":"2024-09-23"},{"id":"20240927_pqb9049nbmgmjalc9cgh3u2ud8","status":"confirmed","summary":"Friday before the AFL Grand Final (Victoria)","region":"Australia","date":"2024-09-27"},{"id":"20241006_g2ch06o9d8r5ske0tage5a305k","status":"confirmed","summary":"Daylight Saving Time starts","region":"Australia","date":"2024-10-06"},{"id":"20241007_0r742louclns5t11pbv8k4vre0","status":"confirmed","summary":"King\'s Birthday (Queensland)","region":"Australia","date":"2024-10-07"},{"id":"20241007_ata33mpgo9d44nqk61iofauc2s","status":"confirmed","summary":"Territory Day (Christmas Island)","region":"Australia","date":"2024-10-07"},{"id":"20241007_npvkv5dme2lvqg9g996on5a4bg","status":"confirmed","summary":"Labour Day (regional holiday)","region":"Australia","date":"2024-10-07"},{"id":"20241024_ml0dk3v3tmo3h28o0cqa4fn4sk","status":"confirmed","summary":"Royal Hobart Show (Tasmania)","region":"Australia","date":"2024-10-24"},{"id":"20241104_ti80tkmgaqgkctr85i8aqbj9gk","status":"confirmed","summary":"Recreation Day (Tasmania)","region":"Australia","date":"2024-11-04"},{"id":"20241105_foctakcpjsmtm129jndaper2fs","status":"confirmed","summary":"Melbourne Cup Day (Victoria)","region":"Australia","date":"2024-11-05"},{"id":"20241111_c0gu6c53jdb73gr9dq48mq6pus","status":"confirmed","summary":"Remembrance Day","region":"Australia","date":"2024-11-11"},{"id":"20241224_nfda3n7f2hjm5fbq4m89bnah9s","status":"confirmed","summary":"Christmas Eve (regional holiday)","region":"Australia","date":"2024-12-24"},{"id":"20241225_o2b82j6p6cgve7hsv6f8hde7gs","status":"confirmed","summary":"Christmas Day (Victoria)","region":"Australia","date":"2024-12-25"},{"id":"20241226_8etbm45ad8tu792bd1r7cvun28","status":"confirmed","summary":"Proclamation Day (South Australia)","region":"Australia","date":"2024-12-26"},{"id":"20241226_vm40mu3kc06aqjjg0q2dt1m1qg","status":"confirmed","summary":"Boxing Day","region":"Australia","date":"2024-12-26"},{"id":"20241231_jfb6done1i91ocilflgrkg4eq0","status":"confirmed","summary":"New Year\'s Eve (regional holiday)","region":"Australia","date":"2024-12-31"},{"id":"20250101_h7k72tj8kfamdnra2tpfinsr7o","status":"confirmed","summary":"New Year\'s Day","region":"Australia","date":"2025-01-01"},{"id":"20250126_an3vpjh38ih1ga4hikcd5b83pc","status":"confirmed","summary":"Australia Day","region":"Australia","date":"2025-01-26"},{"id":"20250127_dt2lku6cb88nf9fgl5sv80gato","status":"confirmed","summary":"Australia Day Observed (regional holiday)","region":"Australia","date":"2025-01-27"},{"id":"20250129_cmbcsnrti75ksf4cmpqof77vvg","status":"confirmed","summary":"Lunar New Year (Christmas Island)","region":"Australia","date":"2025-01-29"},{"id":"20250130_t04lrjq1t5gicsaesj80317lh4","status":"confirmed","summary":"Lunar New Year Holiday (Day 2) (Christmas Island)","region":"Australia","date":"2025-01-30"},{"id":"20250210_547jcmrd8qvu0rgvnrq580cvj8","status":"confirmed","summary":"Royal Hobart Regatta (Tasmania)","region":"Australia","date":"2025-02-10"},{"id":"20250303_l41u24vkg0gf0ds1v8rud4el9s","status":"confirmed","summary":"Labour Day (Western Australia)","region":"Australia","date":"2025-03-03"},{"id":"20250310_iq8l1okntakj458vpt406avij8","status":"confirmed","summary":"Adelaide Cup (South Australia)","region":"Australia","date":"2025-03-10"},{"id":"20250310_l7g0hj0o05nll0egfuklur6m30","status":"confirmed","summary":"Canberra Day (Australian Capital Territory)","region":"Australia","date":"2025-03-10"},{"id":"20250310_lgvmdfvq3elutvopip0t5ms8hk","status":"confirmed","summary":"Labour Day (Victoria)","region":"Australia","date":"2025-03-10"},{"id":"20250310_ti0recg1b0pb8ndhunch8oankc","status":"confirmed","summary":"Eight Hours Day (Tasmania)","region":"Australia","date":"2025-03-10"},{"id":"20250321_enj1ckarum43lbrr1gvurnv4ak","status":"confirmed","summary":"Harmony Day","region":"Australia","date":"2025-03-21"},{"id":"20250331_av0aiptofbn1rsa5eas8ikn8ug","status":"confirmed","summary":"Hari Raya Puasa (regional holiday)","region":"Australia","date":"2025-03-31"},{"id":"20250406_4turk85iu7hgvam6ncgjbqkv80","status":"confirmed","summary":"Self Determination Day (Cocos and Keeling Islands)","region":"Australia","date":"2025-04-06"},{"id":"20250406_73gr6e4l3cjss4esv8r0veo6vc","status":"confirmed","summary":"Daylight Saving Time ends","region":"Australia","date":"2025-04-06"},{"id":"20250407_ar3eso6937af7fgnr49e1j0thk","status":"confirmed","summary":"Day off for Self Determination Day (Cocos and Keeling Islands)","region":"Australia","date":"2025-04-07"},{"id":"20250418_v376vl9sja0779i4vc01nkq2vg","status":"confirmed","summary":"Good Friday (Victoria)","region":"Australia","date":"2025-04-18"},{"id":"20250419_v6u1p89s1ij6l9js01ehfdv6sk","status":"confirmed","summary":"Holy Saturday (regional holiday)","region":"Australia","date":"2025-04-19"},{"id":"20250420_f3phtnj3up1523n9vlsq28fk28","status":"confirmed","summary":"Easter Sunday (regional holiday)","region":"Australia","date":"2025-04-20"},{"id":"20250421_hem8fmibltk1j02ik119i4ud7o","status":"confirmed","summary":"Easter Monday","region":"Australia","date":"2025-04-21"},{"id":"20250422_dc76nqsbgg9ouohorvcjp00g9o","status":"confirmed","summary":"Easter Tuesday (Tasmania)","region":"Australia","date":"2025-04-22"},{"id":"20250425_0k3838k5dd6hjadod7i0ns91ug","status":"confirmed","summary":"ANZAC Day","region":"Australia","date":"2025-04-25"},{"id":"20250425_jveij0hk62tdmrsirt0ecnnvnc","status":"confirmed","summary":"ANZAC Day Observed (Victoria)","region":"Australia","date":"2025-04-25"},{"id":"20250505_1tpl9j0lhk18c9k2f0v8pfeg1g","status":"confirmed","summary":"May Day (Northern Territory)","region":"Australia","date":"2025-05-05"},{"id":"20250505_9sgfvje44pc998rske61aeil20","status":"confirmed","summary":"Labour Day (Queensland)","region":"Australia","date":"2025-05-05"},{"id":"20250602_hcsn0vm0akdecgtf4ck8gb0emk","status":"confirmed","summary":"Reconciliation Day (Australian Capital Territory)","region":"Australia","date":"2025-06-02"},{"id":"20250602_nhautvqknr7uep4eoqcm4ok6m8","status":"confirmed","summary":"Western Australia Day (Western Australia)","region":"Australia","date":"2025-06-02"},{"id":"20250606_mnltm5r0o5ahru2h7ep1p7ujgg","status":"confirmed","summary":"King\'s Birthday (Cocos and Keeling Islands)","region":"Australia","date":"2025-06-06"},{"id":"20250607_5g51m0mb9fhggeio0v89i4c0dc","status":"confirmed","summary":"Hari Raya Haji (regional holiday)","region":"Australia","date":"2025-06-07"},{"id":"20250609_0bnjm83c310kv86u98aptlieuc","status":"confirmed","summary":"Day off for Hari Raya Haji (regional holiday)","region":"Australia","date":"2025-06-09"},{"id":"20250609_64eak1svs63tm8m3bj1gjdvj9g","status":"confirmed","summary":"King\'s Birthday (regional holiday)","region":"Australia","date":"2025-06-09"},{"id":"20250804_8tbis5d15v2eqb9i3dptfs5ulg","status":"confirmed","summary":"New South Wales Bank Holiday (New South Wales)","region":"Australia","date":"2025-08-04"},{"id":"20250804_jmav4r57n7tnag4g50u9mtajdo","status":"confirmed","summary":"Northern Territory Picnic Day (Northern Territory)","region":"Australia","date":"2025-08-04"},{"id":"20250813_mo36vqdu9hsvpv2s4jcl9tnhek","status":"confirmed","summary":"Royal National Agricultural Show Day Queensland (Queensland)","region":"Australia","date":"2025-08-13"},{"id":"20250905_dvtkoq4rag0st423oi7oq8l550","status":"confirmed","summary":"Hari Maulad Nabi (Cocos and Keeling Islands)","region":"Australia","date":"2025-09-05"},{"id":"20250926_smvfeui996g6t6omoenm8m7i38","status":"confirmed","summary":"Friday before the AFL Grand Final (Victoria)","region":"Australia","date":"2025-09-26"},{"id":"20250929_lvfljn8bbgc9fulmslvh5latok","status":"confirmed","summary":"King\'s Birthday (Western Australia)","region":"Australia","date":"2025-09-29"},{"id":"20251005_s62fp17eflt1keio3b4cehn3n4","status":"confirmed","summary":"Daylight Saving Time starts","region":"Australia","date":"2025-10-05"},{"id":"20251006_886ec18tq9qehu9fd49ng7pa90","status":"confirmed","summary":"King\'s Birthday (Queensland)","region":"Australia","date":"2025-10-06"},{"id":"20251006_muk40mcflkrctju07c6n34ri8o","status":"confirmed","summary":"Territory Day (Christmas Island)","region":"Australia","date":"2025-10-06"},{"id":"20251006_vea0ej2rui97e58fb67o1po5i0","status":"confirmed","summary":"Labour Day (regional holiday)","region":"Australia","date":"2025-10-06"},{"id":"20251023_ghhijqiu9c61m5805v20l0l11o","status":"confirmed","summary":"Royal Hobart Show (Tasmania)","region":"Australia","date":"2025-10-23"},{"id":"20251103_vkgnb3fjdbvquk6m1p0oth4gmc","status":"confirmed","summary":"Recreation Day (Tasmania)","region":"Australia","date":"2025-11-03"},{"id":"20251104_kinghm273pgnb920qjfv5ne5eg","status":"confirmed","summary":"Melbourne Cup Day (Victoria)","region":"Australia","date":"2025-11-04"},{"id":"20251111_ki7rrj0cn08ltpgqaonap7n6ss","status":"confirmed","summary":"Remembrance Day","region":"Australia","date":"2025-11-11"},{"id":"20251224_qd2uujtvo63jcbsj0meb8i47lg","status":"confirmed","summary":"Christmas Eve (regional holiday)","region":"Australia","date":"2025-12-24"},{"id":"20251225_4t2fl38dn6n3novb53p2d1rus0","status":"confirmed","summary":"Christmas Day (Victoria)","region":"Australia","date":"2025-12-25"},{"id":"20251226_3dkqsq4hdcr88etrfn5tkdf7h0","status":"confirmed","summary":"Boxing Day","region":"Australia","date":"2025-12-26"},{"id":"20251226_i7ngrqq6j395uqcqkd5997chrc","status":"confirmed","summary":"Proclamation Day (South Australia)","region":"Australia","date":"2025-12-26"},{"id":"20251231_me74edarbbdg3om4pr1m35rmvc","status":"confirmed","summary":"New Year\'s Eve (regional holiday)","region":"Australia","date":"2025-12-31"}],"Austria":[{"id":"20240101_mcb8bjkl9p5oill67s4uojt4b4","status":"confirmed","summary":"New Year\'s Day","region":"Austria","date":"2024-01-01"},{"id":"20240106_rkjfo1tb4tv2abl0q6v9bt1760","status":"confirmed","summary":"Epiphany","region":"Austria","date":"2024-01-06"},{"id":"20240324_5kb1ihanl0vi3rqpofep6at21o","status":"confirmed","summary":"Palm Sunday","region":"Austria","date":"2024-03-24"},{"id":"20240329_d4j94rrq9k7acrj9kov70qbagg","status":"confirmed","summary":"Good Friday","region":"Austria","date":"2024-03-29"},{"id":"20240331_2pq0kbif54tu1m0s7mfanvbmvc","status":"confirmed","summary":"Daylight Saving Time starts","region":"Austria","date":"2024-03-31"},{"id":"20240331_nb2d632rv8m357actvscg4rnu8","status":"confirmed","summary":"Easter Sunday","region":"Austria","date":"2024-03-31"},{"id":"20240401_89idggm85fud0ae4tsjq3mu0q0","status":"confirmed","summary":"Easter Monday","region":"Austria","date":"2024-04-01"},{"id":"20240501_lq1fd29vho0ado0t3g5jvrhcds","status":"confirmed","summary":"Labor Day / May Day","region":"Austria","date":"2024-05-01"},{"id":"20240509_hnd93ain4avhrojp080rpt81ho","status":"confirmed","summary":"Ascension Day","region":"Austria","date":"2024-05-09"},{"id":"20240512_jbf1orkmfej4hqk77dauo1fuco","status":"confirmed","summary":"Mothers\' Day","region":"Austria","date":"2024-05-12"},{"id":"20240519_vm3aktn28v4tejknf9ede2dhec","status":"confirmed","summary":"Whit Sunday","region":"Austria","date":"2024-05-19"},{"id":"20240520_ovibbiur8s4poe14bbvnev7h9s","status":"confirmed","summary":"Whit Monday","region":"Austria","date":"2024-05-20"},{"id":"20240530_qo71kitbhf5dah87ssocf2uqec","status":"confirmed","summary":"Corpus Christi","region":"Austria","date":"2024-05-30"},{"id":"20240609_m9v681eesti4vu7l2k702spvh8","status":"confirmed","summary":"Fathers\' Day","region":"Austria","date":"2024-06-09"},{"id":"20240815_25e2pmgj5b4uakbies17dkhvec","status":"confirmed","summary":"Assumption of Mary","region":"Austria","date":"2024-08-15"},{"id":"20241012_jelrvmvhh6fbngiol45lcalc2c","status":"confirmed","summary":"Yom Kippur","region":"Austria","date":"2024-10-12"},{"id":"20241026_gdr30ij9kcr4v64fi2khlnr674","status":"confirmed","summary":"National Day","region":"Austria","date":"2024-10-26"},{"id":"20241027_3vpf4rdppo7uos70qgsvs8nsc8","status":"confirmed","summary":"Daylight Saving Time ends","region":"Austria","date":"2024-10-27"},{"id":"20241031_ijfpjrsre4rb7g1e0o7g1dg5k4","status":"confirmed","summary":"Reformation Day","region":"Austria","date":"2024-10-31"},{"id":"20241101_89dpopbupfajfjli4db4nkeoco","status":"confirmed","summary":"All Saints\' Day","region":"Austria","date":"2024-11-01"},{"id":"20241102_i76afj83h61vf8qkk1b1pjlj24","status":"confirmed","summary":"All Souls\' Day","region":"Austria","date":"2024-11-02"},{"id":"20241201_thtkmjrtef2i3ebdi4485epcs8","status":"confirmed","summary":"First Advent Sunday","region":"Austria","date":"2024-12-01"},{"id":"20241208_0gg7v3svdbl7b1etboqqeaeuv8","status":"confirmed","summary":"Immaculate Conception","region":"Austria","date":"2024-12-08"},{"id":"20241225_id74cs937u8ihl26c0uqdmg040","status":"confirmed","summary":"Christmas Day","region":"Austria","date":"2024-12-25"},{"id":"20241226_m5602036pf3ngp0t76hrtk3928","status":"confirmed","summary":"St. Stephen\'s Day","region":"Austria","date":"2024-12-26"},{"id":"20241231_q0drhurha0f7k4os7vi1jl1hsc","status":"confirmed","summary":"New Year\'s Eve","region":"Austria","date":"2024-12-31"},{"id":"20250101_51aij2hf2io98ujhbkj1pvn01o","status":"confirmed","summary":"New Year\'s Day","region":"Austria","date":"2025-01-01"},{"id":"20250106_2chshvm265rtse55loa722hv30","status":"confirmed","summary":"Epiphany","region":"Austria","date":"2025-01-06"},{"id":"20250330_scehei5c8ugv31eavqugdbi8ug","status":"confirmed","summary":"Daylight Saving Time starts","region":"Austria","date":"2025-03-30"},{"id":"20250413_h8d0hhfgqgerpkvj53mijavq9k","status":"confirmed","summary":"Palm Sunday","region":"Austria","date":"2025-04-13"},{"id":"20250418_ejieil238psl7g2d5v1pk40pj4","status":"confirmed","summary":"Good Friday","region":"Austria","date":"2025-04-18"},{"id":"20250420_gmaogg7lmgiijvjsp7p84je07c","status":"confirmed","summary":"Easter Sunday","region":"Austria","date":"2025-04-20"},{"id":"20250421_2kfjllp75apiaj90s5sfjlao58","status":"confirmed","summary":"Easter Monday","region":"Austria","date":"2025-04-21"},{"id":"20250501_3o0vppd1tn40racfees487g0m8","status":"confirmed","summary":"Labor Day / May Day","region":"Austria","date":"2025-05-01"},{"id":"20250511_otq980iokrj5ss08qlt3gis80k","status":"confirmed","summary":"Mothers\' Day","region":"Austria","date":"2025-05-11"},{"id":"20250529_oe6cah8r8i9d1f8ci5an28ii44","status":"confirmed","summary":"Ascension Day","region":"Austria","date":"2025-05-29"},{"id":"20250608_54rgat4na82mq2cv0ne4r3r6co","status":"confirmed","summary":"Whit Sunday","region":"Austria","date":"2025-06-08"},{"id":"20250608_sovj3upgs0sbpjafngq32110dk","status":"confirmed","summary":"Fathers\' Day","region":"Austria","date":"2025-06-08"},{"id":"20250609_93t264gvgc35r64hkurnlhbk78","status":"confirmed","summary":"Whit Monday","region":"Austria","date":"2025-06-09"},{"id":"20250619_f8pek56r9ko9h7fdrvi5i866g4","status":"confirmed","summary":"Corpus Christi","region":"Austria","date":"2025-06-19"},{"id":"20250815_bp3b7sn4l599hurrgm4hcb5b88","status":"confirmed","summary":"Assumption of Mary","region":"Austria","date":"2025-08-15"},{"id":"20251002_c5nhbgh4hs8l4kv6ucprh83kjg","status":"confirmed","summary":"Yom Kippur","region":"Austria","date":"2025-10-02"},{"id":"20251026_dof7sdppasrebpvg5dk1c4e46o","status":"confirmed","summary":"Daylight Saving Time ends","region":"Austria","date":"2025-10-26"},{"id":"20251026_k15ahf5cvs3fs1omog1tfcqj4s","status":"confirmed","summary":"National Day","region":"Austria","date":"2025-10-26"},{"id":"20251031_ab0sekuo0222vp3ain7dlbge8o","status":"confirmed","summary":"Reformation Day","region":"Austria","date":"2025-10-31"},{"id":"20251101_iupl77bla4ib7so88fm11njlnc","status":"confirmed","summary":"All Saints\' Day","region":"Austria","date":"2025-11-01"},{"id":"20251102_vvd1rjsn9j3pt4qvguao0gb4s0","status":"confirmed","summary":"All Souls\' Day","region":"Austria","date":"2025-11-02"},{"id":"20251130_nqvmu6o18c5gip23sqelnh9qgk","status":"confirmed","summary":"First Advent Sunday","region":"Austria","date":"2025-11-30"},{"id":"20251208_3hahpf2veqr59s570vcu536smg","status":"confirmed","summary":"Immaculate Conception","region":"Austria","date":"2025-12-08"},{"id":"20251225_sss3omhsdr0c0175g3kokdk1sc","status":"confirmed","summary":"Christmas Day","region":"Austria","date":"2025-12-25"},{"id":"20251226_3v3gudeothtp5m5g3f1cdvbq98","status":"confirmed","summary":"St. Stephen\'s Day","region":"Austria","date":"2025-12-26"},{"id":"20251231_9sjsiddhtqg2lequs9fv0f17eg","status":"confirmed","summary":"New Year\'s Eve","region":"Austria","date":"2025-12-31"}],"Aruba":[{"id":"20240101_980u0ol6tdrdeul2rv4i4s1hik","status":"confirmed","summary":"New Year\'s Day","region":"Aruba","date":"2024-01-01"},{"id":"20240125_necnfn1u9alreate0gcjb2ddjo","status":"confirmed","summary":"Betico Croes\' Birthday","region":"Aruba","date":"2024-01-25"},{"id":"20240212_j13c23iip52q701prj91a4p2lo","status":"confirmed","summary":"Carnival Monday","region":"Aruba","date":"2024-02-12"},{"id":"20240318_fep77vpeo4ik7t1fa0ookrqd94","status":"confirmed","summary":"National Anthem and Flag Day","region":"Aruba","date":"2024-03-18"},{"id":"20240329_18vb5du9tpf404e5n6a19ev7g4","status":"confirmed","summary":"Good Friday","region":"Aruba","date":"2024-03-29"},{"id":"20240401_n0hrfd64ndp3bi09ncr3galfuk","status":"confirmed","summary":"Easter Monday","region":"Aruba","date":"2024-04-01"},{"id":"20240427_qov758fo900plvg11lqlv3ir38","status":"confirmed","summary":"King\'s Day","region":"Aruba","date":"2024-04-27"},{"id":"20240501_nj6jhi1ar6l1jltvet358kideo","status":"confirmed","summary":"Labor Day","region":"Aruba","date":"2024-05-01"},{"id":"20240509_ba2gork6aloj8ustn6ndr61irs","status":"confirmed","summary":"Ascension Day","region":"Aruba","date":"2024-05-09"},{"id":"20241225_niietf2pv2djltvp2eko0663ao","status":"confirmed","summary":"Christmas Day","region":"Aruba","date":"2024-12-25"},{"id":"20241226_06ihavr03cdlh2n6ukr91u4j2g","status":"confirmed","summary":"Boxing Day","region":"Aruba","date":"2024-12-26"},{"id":"20250101_o4j5p13r7m6rcr4v3aubvov4qc","status":"confirmed","summary":"New Year\'s Day","region":"Aruba","date":"2025-01-01"},{"id":"20250125_h1osvr3mvungt89ubv8cpmtk18","status":"confirmed","summary":"Betico Croes\' Birthday","region":"Aruba","date":"2025-01-25"},{"id":"20250303_q1lspen2abg9ov0unvl9bphdhs","status":"confirmed","summary":"Carnival Monday","region":"Aruba","date":"2025-03-03"},{"id":"20250318_fvjr9ktqj18a3cuisljujotdig","status":"confirmed","summary":"National Anthem and Flag Day","region":"Aruba","date":"2025-03-18"},{"id":"20250418_8oglmq0q7m4qh4k2sh6j87080c","status":"confirmed","summary":"Good Friday","region":"Aruba","date":"2025-04-18"},{"id":"20250421_a9otjrqnffmjp0mjns3in9lskk","status":"confirmed","summary":"Easter Monday","region":"Aruba","date":"2025-04-21"},{"id":"20250427_m7feeivjac4gonl9u26hlgpngc","status":"confirmed","summary":"King\'s Day","region":"Aruba","date":"2025-04-27"},{"id":"20250501_i42irdbn2q1fm6r2chp5hchfns","status":"confirmed","summary":"Labor Day","region":"Aruba","date":"2025-05-01"},{"id":"20250529_c8hn44sb0078pecrs89e76c5jk","status":"confirmed","summary":"Ascension Day","region":"Aruba","date":"2025-05-29"},{"id":"20251225_1nh85hu3oaucp9uju13kbvseko","status":"confirmed","summary":"Christmas Day","region":"Aruba","date":"2025-12-25"},{"id":"20251226_sn5si5nha6rqffdkajmpl0b8ek","status":"confirmed","summary":"Boxing Day","region":"Aruba","date":"2025-12-26"}],"Azerbaijan":[{"id":"20240101_d1nhpm40ph58g973nmhducucg8","status":"confirmed","summary":"New Year\'s Day","region":"Azerbaijan","date":"2024-01-01"},{"id":"20240102_jlm3uqc0id8h30l03026hk1ko0","status":"confirmed","summary":"New Year\'s Holiday","region":"Azerbaijan","date":"2024-01-02"},{"id":"20240103_s98fuf652lalmbls4uppr71dbg","status":"confirmed","summary":"New Year\'s Holiday","region":"Azerbaijan","date":"2024-01-03"},{"id":"20240104_c2buol73e3s055dj6s4lmg8ado","status":"confirmed","summary":"New Year\'s Holiday","region":"Azerbaijan","date":"2024-01-04"},{"id":"20240105_rpledf939pu51q7qp6selk93ng","status":"confirmed","summary":"New Year\'s Holiday","region":"Azerbaijan","date":"2024-01-05"},{"id":"20240120_hr8mvq07cii2rumeeli13mn56k","status":"confirmed","summary":"Martyrs’ Day","region":"Azerbaijan","date":"2024-01-20"},{"id":"20240122_faegk6k0vkdqn063h312di35b0","status":"confirmed","summary":"Day off for Martyrs’ Day","region":"Azerbaijan","date":"2024-01-22"},{"id":"20240207_8rkj7jmsmtf5jpd4kajq02soc0","status":"confirmed","summary":"Presidential Election","region":"Azerbaijan","date":"2024-02-07"},{"id":"20240308_9vkfjh7nb33813eh77nr9fabmk","status":"confirmed","summary":"Women\'s Day","region":"Azerbaijan","date":"2024-03-08"},{"id":"20240311_qs5i6iq9a0067iiqj5vramovf4","status":"confirmed","summary":"Ramadan Start","region":"Azerbaijan","date":"2024-03-11"},{"id":"20240320_14qulreivc5nu9r9p00bu2um60","status":"confirmed","summary":"Nowruz","region":"Azerbaijan","date":"2024-03-20"},{"id":"20240321_pcso78hln73odlruaka88h7g4g","status":"confirmed","summary":"Nowruz/Spring Holiday","region":"Azerbaijan","date":"2024-03-21"},{"id":"20240322_tevj5n1v1jcn1vk30dgjgnbn78","status":"confirmed","summary":"Nowruz/Spring Holiday","region":"Azerbaijan","date":"2024-03-22"},{"id":"20240323_vhu5b83f87r4s3scvppel2eamo","status":"confirmed","summary":"Nowruz/Spring Holiday","region":"Azerbaijan","date":"2024-03-23"},{"id":"20240324_sfbtff11ag6usjukm5u4mfrkv8","status":"confirmed","summary":"Nowruz/Spring Holiday","region":"Azerbaijan","date":"2024-03-24"},{"id":"20240325_vrag60uid684i76qnp8ingiv1c","status":"confirmed","summary":"Nowruz/Spring Holiday","region":"Azerbaijan","date":"2024-03-25"},{"id":"20240326_nb4sh6fbsbi3vk0677oneceb40","status":"confirmed","summary":"Nowruz/Spring Holiday","region":"Azerbaijan","date":"2024-03-26"},{"id":"20240410_l21j87mrr892gtf6hjrmnqpv20","status":"confirmed","summary":"Ramadan holiday","region":"Azerbaijan","date":"2024-04-10"},{"id":"20240411_1ogoea630iv89ns0uhi38db8kg","status":"confirmed","summary":"Ramadan holiday","region":"Azerbaijan","date":"2024-04-11"},{"id":"20240412_d3kiaja3273ih125rkdpusrl1g","status":"confirmed","summary":"Ramadan holiday","region":"Azerbaijan","date":"2024-04-12"},{"id":"20240509_ah1h5khvu0c7m2k7vsh33fmias","status":"confirmed","summary":"Victory Day over Fascism","region":"Azerbaijan","date":"2024-05-09"},{"id":"20240528_ob3v1v2nn8n3d75efoa5ram6d0","status":"confirmed","summary":"Republic Day","region":"Azerbaijan","date":"2024-05-28"},{"id":"20240615_pedlpne4o0rm7b9hfco0sspc1s","status":"confirmed","summary":"Day of National Salvation of the Azerbaijani People","region":"Azerbaijan","date":"2024-06-15"},{"id":"20240617_2ir3fsp813du2n3bcb9g4eo558","status":"confirmed","summary":"Feast of the Sacrifice","region":"Azerbaijan","date":"2024-06-17"},{"id":"20240617_6c9vmhasb6p3aiu0e0nhuugvoc","status":"confirmed","summary":"Day off for Day of National Salvation of the Azerbaijani People","region":"Azerbaijan","date":"2024-06-17"},{"id":"20240618_hc1130mricacg22km5n4d4bfmg","status":"confirmed","summary":"Feast of the Sacrifice Holiday","region":"Azerbaijan","date":"2024-06-18"},{"id":"20240626_8nvljjsm01qrb95e25k65n31t4","status":"confirmed","summary":"Azerbaijan Armed Forces Day","region":"Azerbaijan","date":"2024-06-26"},{"id":"20241018_dusc2pfmm79l0lr5gj8eqhnp28","status":"confirmed","summary":"National Independence Day","region":"Azerbaijan","date":"2024-10-18"},{"id":"20241108_n9392sscienc74d7sgeqc520mg","status":"confirmed","summary":"Victory Day of the Republic of Azerbaijan","region":"Azerbaijan","date":"2024-11-08"},{"id":"20241109_vveflati1oi9a85m87bom47aog","status":"confirmed","summary":"State Flag Day of Azerbaijan","region":"Azerbaijan","date":"2024-11-09"},{"id":"20241111_j8g8v776auap35q6o61gjpo450","status":"confirmed","summary":"Day off for State Flag Day of Azerbaijan","region":"Azerbaijan","date":"2024-11-11"},{"id":"20241112_ve47ud688fkq6d9vmbb9pdpjng","status":"confirmed","summary":"Constitution Day","region":"Azerbaijan","date":"2024-11-12"},{"id":"20241117_urie0kvtoaiufku5h8or13cod4","status":"confirmed","summary":"National Revival Day","region":"Azerbaijan","date":"2024-11-17"},{"id":"20241231_di626a2t3vkfdpmatqnvdi9ouo","status":"confirmed","summary":"World Azerbaijanis Solidarity Day","region":"Azerbaijan","date":"2024-12-31"},{"id":"20241231_s9sea6psbfrg9g26m9hmd69v20","status":"confirmed","summary":"New Year\'s Eve","region":"Azerbaijan","date":"2024-12-31"},{"id":"20250101_2edq5lvte0lopriqo5vndgm8c8","status":"confirmed","summary":"New Year\'s Day","region":"Azerbaijan","date":"2025-01-01"},{"id":"20250102_rlpkacdanu5pbrj5052mj42eso","status":"confirmed","summary":"New Year\'s Holiday","region":"Azerbaijan","date":"2025-01-02"},{"id":"20250120_26qisrfe2foo9nu4kcovsebf1g","status":"confirmed","summary":"Martyrs’ Day","region":"Azerbaijan","date":"2025-01-20"},{"id":"20250301_gd89qoniv07nqspn46q8o3f73k","status":"confirmed","summary":"Ramadan Start","region":"Azerbaijan","date":"2025-03-01"},{"id":"20250308_dj75undl51lt577ac77uo5rdvs","status":"confirmed","summary":"Women\'s Day","region":"Azerbaijan","date":"2025-03-08"},{"id":"20250310_aldf42o6deb8gj1nina0pu39s0","status":"confirmed","summary":"Women\'s Day observed","region":"Azerbaijan","date":"2025-03-10"},{"id":"20250320_3ep3h02kpch79b7fot522dnt24","status":"confirmed","summary":"Nowruz","region":"Azerbaijan","date":"2025-03-20"},{"id":"20250321_s2nf7fellibkq7lt510appei00","status":"confirmed","summary":"Nowruz/Spring Holiday","region":"Azerbaijan","date":"2025-03-21"},{"id":"20250322_b0u0b2plfi7j1fghtai4n91454","status":"confirmed","summary":"Nowruz/Spring Holiday","region":"Azerbaijan","date":"2025-03-22"},{"id":"20250323_8rf03gomqv8s6eou810p35n9s4","status":"confirmed","summary":"Nowruz/Spring Holiday","region":"Azerbaijan","date":"2025-03-23"},{"id":"20250324_fgnnk1r8jsppbm5tanvkm185og","status":"confirmed","summary":"Nowruz/Spring Holiday","region":"Azerbaijan","date":"2025-03-24"},{"id":"20250331_u86l34tlntq7lmllc3557882g0","status":"confirmed","summary":"Ramadan holiday","region":"Azerbaijan","date":"2025-03-31"},{"id":"20250401_6ks1r9im1vnsmcv417ardlirnk","status":"confirmed","summary":"Ramadan holiday","region":"Azerbaijan","date":"2025-04-01"},{"id":"20250509_crj3r790ccp5v5bj5qrc9bpn6o","status":"confirmed","summary":"Victory Day over Fascism","region":"Azerbaijan","date":"2025-05-09"},{"id":"20250528_v3r1oqfaqklvphb4umapf11jio","status":"confirmed","summary":"Republic Day","region":"Azerbaijan","date":"2025-05-28"},{"id":"20250607_7flhbabe2g9ltksaka7e90knu0","status":"confirmed","summary":"Feast of the Sacrifice","region":"Azerbaijan","date":"2025-06-07"},{"id":"20250608_6b8ah2qo573bf31q6i9mk14aug","status":"confirmed","summary":"Feast of the Sacrifice Holiday","region":"Azerbaijan","date":"2025-06-08"},{"id":"20250615_aqfhism46donu0j7su884kj1j4","status":"confirmed","summary":"Day of National Salvation of the Azerbaijani People","region":"Azerbaijan","date":"2025-06-15"},{"id":"20250616_q7nr6b0fhp22vv4gv298fq9nso","status":"confirmed","summary":"Day off for Day of National Salvation of the Azerbaijani People","region":"Azerbaijan","date":"2025-06-16"},{"id":"20250626_b3etrp52fd2vjaqv5h420cses0","status":"confirmed","summary":"Azerbaijan Armed Forces Day","region":"Azerbaijan","date":"2025-06-26"},{"id":"20251018_dgpgbd4pak73abcmpmiukb49h0","status":"confirmed","summary":"National Independence Day","region":"Azerbaijan","date":"2025-10-18"},{"id":"20251108_tgg655fu2787nk0a37msjglqcc","status":"confirmed","summary":"Victory Day of the Republic of Azerbaijan","region":"Azerbaijan","date":"2025-11-08"},{"id":"20251109_2qm71vcuvopqugvcmne7vstddo","status":"confirmed","summary":"State Flag Day of Azerbaijan","region":"Azerbaijan","date":"2025-11-09"},{"id":"20251110_430ftf2838q7lrmh3dh47t0sno","status":"confirmed","summary":"Day off for Victory Day of the Republic of Azerbaijan","region":"Azerbaijan","date":"2025-11-10"},{"id":"20251110_bhgakhcf4p00d8p4gbeim93rcc","status":"confirmed","summary":"Day off for State Flag Day of Azerbaijan","region":"Azerbaijan","date":"2025-11-10"},{"id":"20251112_0pqoal3det6hi25711padp7018","status":"confirmed","summary":"Constitution Day","region":"Azerbaijan","date":"2025-11-12"},{"id":"20251117_1cqm5hst0qs4099hmgseus1th0","status":"confirmed","summary":"National Revival Day","region":"Azerbaijan","date":"2025-11-17"},{"id":"20251231_99kcffrott3o81p49m9erpdsq8","status":"confirmed","summary":"New Year\'s Eve","region":"Azerbaijan","date":"2025-12-31"},{"id":"20251231_ic4jue037h699pgd57smm9vak8","status":"confirmed","summary":"World Azerbaijanis Solidarity Day","region":"Azerbaijan","date":"2025-12-31"}],"Bosnia & Herzegovina":[{"id":"20240101_g0k8gir49br2rdg9jbhnsc0j7s","status":"confirmed","summary":"New Year\'s Day","region":"Bosnia & Herzegovina","date":"2024-01-01"},{"id":"20240102_cdd42c3sjr8hcrctidggoigib0","status":"confirmed","summary":"New Year\'s (Day 2)","region":"Bosnia & Herzegovina","date":"2024-01-02"},{"id":"20240106_a0bgq7qi3a8ndut06b4saddafg","status":"confirmed","summary":"Orthodox Christmas Eve","region":"Bosnia & Herzegovina","date":"2024-01-06"},{"id":"20240107_vstekk840a55q2cum62dqlaq60","status":"confirmed","summary":"Orthodox Christmas Day","region":"Bosnia & Herzegovina","date":"2024-01-07"},{"id":"20240214_5mm8g72gt8bsohodr7usunv760","status":"confirmed","summary":"Valentine\'s Day","region":"Bosnia & Herzegovina","date":"2024-02-14"},{"id":"20240301_u3hov2ogdedafufjd1l6p0uad4","status":"confirmed","summary":"Independence Day (Federation of Bosnia and Herzegovina)","region":"Bosnia & Herzegovina","date":"2024-03-01"},{"id":"20240308_ol82r883gh16ll225gkrj1r5e0","status":"confirmed","summary":"Mothers\' Day","region":"Bosnia & Herzegovina","date":"2024-03-08"},{"id":"20240311_ve36ocj4uo0pbgnsf9kt28esg4","status":"confirmed","summary":"Ramadan Start","region":"Bosnia & Herzegovina","date":"2024-03-11"},{"id":"20240329_ucu2ehein35sk3olhe03mm1ork","status":"confirmed","summary":"Good Friday","region":"Bosnia & Herzegovina","date":"2024-03-29"},{"id":"20240330_vcubjdktkrqpejamjkqfi3qaek","status":"confirmed","summary":"Holy Saturday","region":"Bosnia & Herzegovina","date":"2024-03-30"},{"id":"20240331_ru9l8h9nrkqud38n6m6h5nfdag","status":"confirmed","summary":"Easter Sunday","region":"Bosnia & Herzegovina","date":"2024-03-31"},{"id":"20240401_ko4h4dhqtf3ob8eo9dg27h6v30","status":"confirmed","summary":"Easter Monday","region":"Bosnia & Herzegovina","date":"2024-04-01"},{"id":"20240410_hi44mb51bmtj6m534pbec6pmlk","status":"confirmed","summary":"End of Ramadan","region":"Bosnia & Herzegovina","date":"2024-04-10"},{"id":"20240411_1dtq3eihtjsb1gj88bkprh0s90","status":"confirmed","summary":"End of Ramadan Holiday","region":"Bosnia & Herzegovina","date":"2024-04-11"},{"id":"20240501_cka4rmr9jsqm3a0mkdu0ogfet0","status":"confirmed","summary":"Labor Day","region":"Bosnia & Herzegovina","date":"2024-05-01"},{"id":"20240502_tg8t82s0hhbajvad68c55srqdo","status":"confirmed","summary":"Labor Day (Day 2)","region":"Bosnia & Herzegovina","date":"2024-05-02"},{"id":"20240503_5qquas8etpq1d5jk4nen32s3r4","status":"confirmed","summary":"Orthodox Good Friday","region":"Bosnia & Herzegovina","date":"2024-05-03"},{"id":"20240504_2pbrfuos89n1c3fkcboh096jng","status":"confirmed","summary":"Orthodox Holy Saturday","region":"Bosnia & Herzegovina","date":"2024-05-04"},{"id":"20240505_ufmjnkm7s0716n5bbucckr8op8","status":"confirmed","summary":"Orthodox Easter Sunday","region":"Bosnia & Herzegovina","date":"2024-05-05"},{"id":"20240506_d50ehu1f7ki0ang8faus1hoqn4","status":"confirmed","summary":"Orthodox Easter Monday","region":"Bosnia & Herzegovina","date":"2024-05-06"},{"id":"20240509_ep6s5du360q8jg0ud837f3pggk","status":"confirmed","summary":"Victory Day (Federation of Bosnia and Herzegovina)","region":"Bosnia & Herzegovina","date":"2024-05-09"},{"id":"20240616_btoi3fhtodnp6ms5qr7qcgt3d8","status":"confirmed","summary":"Feast of the Sacrifice Day Holiday","region":"Bosnia & Herzegovina","date":"2024-06-16"},{"id":"20240616_i1v40rvbf86j3vs3ac32acqbuk","status":"confirmed","summary":"Fathers\' Day","region":"Bosnia & Herzegovina","date":"2024-06-16"},{"id":"20240617_qeracvrkmrfd19vr5o6e5p3tic","status":"confirmed","summary":"Feast of the Sacrifice","region":"Bosnia & Herzegovina","date":"2024-06-17"},{"id":"20241031_tgpqvdpklrkhfl410j44fu2ri8","status":"confirmed","summary":"Halloween","region":"Bosnia & Herzegovina","date":"2024-10-31"},{"id":"20241224_nbua8tedspp66qrio7dhk5u4t0","status":"confirmed","summary":"Christmas Eve (regional holiday)","region":"Bosnia & Herzegovina","date":"2024-12-24"},{"id":"20241225_rec63207uff5sldgoj4n71aef8","status":"confirmed","summary":"Christmas Day","region":"Bosnia & Herzegovina","date":"2024-12-25"},{"id":"20241231_d086686l4vcka5j3tb8divrvtc","status":"confirmed","summary":"New Year\'s Eve","region":"Bosnia & Herzegovina","date":"2024-12-31"},{"id":"20250101_gc0ffd8u3teoamsifoct113llo","status":"confirmed","summary":"New Year\'s Day","region":"Bosnia & Herzegovina","date":"2025-01-01"},{"id":"20250102_8hckef7bd43shlk2h6c8efq3ig","status":"confirmed","summary":"New Year\'s (Day 2)","region":"Bosnia & Herzegovina","date":"2025-01-02"},{"id":"20250106_6sn06p1dbiaf7optrbsfoma14s","status":"confirmed","summary":"Orthodox Christmas Eve","region":"Bosnia & Herzegovina","date":"2025-01-06"},{"id":"20250107_l3a4mdigjucbtnt0a449e67k08","status":"confirmed","summary":"Orthodox Christmas Day","region":"Bosnia & Herzegovina","date":"2025-01-07"},{"id":"20250214_e4h0onv98k840dltnnlkfmi3u0","status":"confirmed","summary":"Valentine\'s Day","region":"Bosnia & Herzegovina","date":"2025-02-14"},{"id":"20250301_2bssbi307trhns94fhdrgio45o","status":"confirmed","summary":"Independence Day (Federation of Bosnia and Herzegovina)","region":"Bosnia & Herzegovina","date":"2025-03-01"},{"id":"20250301_t22t3bted0jooa0h1lsrdqs9nc","status":"confirmed","summary":"Ramadan Start","region":"Bosnia & Herzegovina","date":"2025-03-01"},{"id":"20250308_mp7sfcinv3n8u9ku52648kgk5c","status":"confirmed","summary":"Mothers\' Day","region":"Bosnia & Herzegovina","date":"2025-03-08"},{"id":"20250331_ecfuml8kergkp7fgtjcfage4ig","status":"confirmed","summary":"End of Ramadan","region":"Bosnia & Herzegovina","date":"2025-03-31"},{"id":"20250418_ck5f6aenjcccnes5ot723ou2b8","status":"confirmed","summary":"Good Friday","region":"Bosnia & Herzegovina","date":"2025-04-18"},{"id":"20250418_u9m26lncuir5hnch9jq8ruhc00","status":"confirmed","summary":"Orthodox Good Friday","region":"Bosnia & Herzegovina","date":"2025-04-18"},{"id":"20250419_ek7jbii03s39qmjrui1fkug13s","status":"confirmed","summary":"Orthodox Holy Saturday","region":"Bosnia & Herzegovina","date":"2025-04-19"},{"id":"20250419_f2r5h240je70876af1sq38lj7k","status":"confirmed","summary":"Holy Saturday","region":"Bosnia & Herzegovina","date":"2025-04-19"},{"id":"20250420_cgkh4pqiaffal6av5olf6ln2h4","status":"confirmed","summary":"Easter Sunday","region":"Bosnia & Herzegovina","date":"2025-04-20"},{"id":"20250420_urs2r4r5o2i3j2uv2sjhsjmiik","status":"confirmed","summary":"Orthodox Easter Sunday","region":"Bosnia & Herzegovina","date":"2025-04-20"},{"id":"20250421_0s6hgi6omfsp223dms3hdtb8d4","status":"confirmed","summary":"Orthodox Easter Monday","region":"Bosnia & Herzegovina","date":"2025-04-21"},{"id":"20250421_1c5tgqbuo2s3f2pnhakjm5cv1o","status":"confirmed","summary":"Easter Monday","region":"Bosnia & Herzegovina","date":"2025-04-21"},{"id":"20250501_alid4bdeo0afdq7kajqiamgg8s","status":"confirmed","summary":"Labor Day","region":"Bosnia & Herzegovina","date":"2025-05-01"},{"id":"20250502_lm3bi44i5ore42thlibqjlmq5c","status":"confirmed","summary":"Labor Day (Day 2)","region":"Bosnia & Herzegovina","date":"2025-05-02"},{"id":"20250509_sp7ffbedjap9mu5vkg130uv45k","status":"confirmed","summary":"Victory Day (Federation of Bosnia and Herzegovina)","region":"Bosnia & Herzegovina","date":"2025-05-09"},{"id":"20250607_vvsfkluacn2136rh9fb450bqlg","status":"confirmed","summary":"Feast of the Sacrifice","region":"Bosnia & Herzegovina","date":"2025-06-07"},{"id":"20250615_8ljgvkg4em57kqtirfdh1u3gtk","status":"confirmed","summary":"Fathers\' Day","region":"Bosnia & Herzegovina","date":"2025-06-15"},{"id":"20251031_vj95rasd0hotur67qfd9e23t74","status":"confirmed","summary":"Halloween","region":"Bosnia & Herzegovina","date":"2025-10-31"},{"id":"20251224_v2d3pocgvb641o5ahbsfdmo128","status":"confirmed","summary":"Christmas Eve (regional holiday)","region":"Bosnia & Herzegovina","date":"2025-12-24"},{"id":"20251225_9hgl8iidi892ac7b2n74hv5tss","status":"confirmed","summary":"Christmas Day","region":"Bosnia & Herzegovina","date":"2025-12-25"},{"id":"20251231_rhle1t5p2qcjg1hku6e0b95arc","status":"confirmed","summary":"New Year\'s Eve","region":"Bosnia & Herzegovina","date":"2025-12-31"}],"Barbados":[{"id":"20240101_ektgp0rov16a9ph5d0ogeo5em0","status":"confirmed","summary":"New Year\'s Day","region":"Barbados","date":"2024-01-01"},{"id":"20240121_2q4j2rctjputn6r8k96budvdt0","status":"confirmed","summary":"Errol Barrow Day","region":"Barbados","date":"2024-01-21"},{"id":"20240122_sg6iqdrqv65p6s39hl16q1036c","status":"confirmed","summary":"Day off for Errol Barrow Day","region":"Barbados","date":"2024-01-22"},{"id":"20240214_i8h2fkb5hirinlhgnlbtcleqqg","status":"confirmed","summary":"Valentine\'s Day","region":"Barbados","date":"2024-02-14"},{"id":"20240329_bfsecii17vi15llud7liu9qcts","status":"confirmed","summary":"Good Friday","region":"Barbados","date":"2024-03-29"},{"id":"20240331_ubsssaobjqn9ubib18jmlvreg4","status":"confirmed","summary":"Easter Sunday","region":"Barbados","date":"2024-03-31"},{"id":"20240401_qcggaqokireqa6evrkc1jflbfg","status":"confirmed","summary":"Easter Monday","region":"Barbados","date":"2024-04-01"},{"id":"20240428_t3ech964tflulnco3qlou0rrts","status":"confirmed","summary":"National Heroes Day","region":"Barbados","date":"2024-04-28"},{"id":"20240429_dm61kislsda9ug1hnt6t3uiiak","status":"confirmed","summary":"Day off for National Heroes Day","region":"Barbados","date":"2024-04-29"},{"id":"20240501_kemni459j9s24td1g6mnrb6qmk","status":"confirmed","summary":"Labor Day / May Day","region":"Barbados","date":"2024-05-01"},{"id":"20240512_57o3aataboji9d0q40a4djqbgg","status":"confirmed","summary":"Mothers\' Day","region":"Barbados","date":"2024-05-12"},{"id":"20240519_h689sv3h9r2ev7ffj7j7gl9tpo","status":"confirmed","summary":"Whit Sunday","region":"Barbados","date":"2024-05-19"},{"id":"20240520_cqkje15ud64lfk16flknr1t9lc","status":"confirmed","summary":"Whit Monday","region":"Barbados","date":"2024-05-20"},{"id":"20240616_ttb3rg5mn3fiutfc2jt8fus1hk","status":"confirmed","summary":"Fathers\' Day","region":"Barbados","date":"2024-06-16"},{"id":"20240801_ijgfq2jvc9fl0l7n2u15f5rcg8","status":"confirmed","summary":"Emancipation Day","region":"Barbados","date":"2024-08-01"},{"id":"20240805_08bdgqi1rrand2b54hfo6mjhlo","status":"confirmed","summary":"Kadooment Day","region":"Barbados","date":"2024-08-05"},{"id":"20241031_rl8qstnsn7b5gnaigsjbkpkic4","status":"confirmed","summary":"Halloween","region":"Barbados","date":"2024-10-31"},{"id":"20241130_s43edna75mh3f1u06hjp8hnvbs","status":"confirmed","summary":"Independence Day","region":"Barbados","date":"2024-11-30"},{"id":"20241224_go2o5c82qng52av2g0mg34ut9k","status":"confirmed","summary":"Christmas Eve","region":"Barbados","date":"2024-12-24"},{"id":"20241225_9s9h37lfq398qrggm9geoliltc","status":"confirmed","summary":"Christmas Day","region":"Barbados","date":"2024-12-25"},{"id":"20241226_7dkgna6e5e7moa77ucsjkblqhc","status":"confirmed","summary":"Boxing Day","region":"Barbados","date":"2024-12-26"},{"id":"20241231_1n35vbv4vmeciuvjdjuahtdsjg","status":"confirmed","summary":"Old Year\'s Night","region":"Barbados","date":"2024-12-31"},{"id":"20250101_vhp8cem93jgl35350s8pfhiaok","status":"confirmed","summary":"New Year\'s Day","region":"Barbados","date":"2025-01-01"},{"id":"20250121_33rfqc1mshf5gn5uqf54p2p3o8","status":"confirmed","summary":"Errol Barrow Day","region":"Barbados","date":"2025-01-21"},{"id":"20250214_2ojk3qqe5oi032vb55teme7928","status":"confirmed","summary":"Valentine\'s Day","region":"Barbados","date":"2025-02-14"},{"id":"20250418_5qlcaqq6ftn6lsb6i6q7idm4rg","status":"confirmed","summary":"Good Friday","region":"Barbados","date":"2025-04-18"},{"id":"20250420_3046fv5h7pe6pjcl0ihh06n8i8","status":"confirmed","summary":"Easter Sunday","region":"Barbados","date":"2025-04-20"},{"id":"20250421_f2gf78h49u4b06vpuetlj7cqn8","status":"confirmed","summary":"Easter Monday","region":"Barbados","date":"2025-04-21"},{"id":"20250428_rql85bn1jevdq0s3mv9iho9qk4","status":"confirmed","summary":"National Heroes Day","region":"Barbados","date":"2025-04-28"},{"id":"20250501_am0jmmt1rvscdee8ae9ukfo76k","status":"confirmed","summary":"Labor Day / May Day","region":"Barbados","date":"2025-05-01"},{"id":"20250511_9fojf0997sui74qd7ifn823pog","status":"confirmed","summary":"Mothers\' Day","region":"Barbados","date":"2025-05-11"},{"id":"20250608_md6c0hpjsisl87qqp0tdgv9nm0","status":"confirmed","summary":"Whit Sunday","region":"Barbados","date":"2025-06-08"},{"id":"20250609_nbf4kt6ecgv5bnkqj5g3dic0n0","status":"confirmed","summary":"Whit Monday","region":"Barbados","date":"2025-06-09"},{"id":"20250615_si6o03156ta5kt23v304j4c8a0","status":"confirmed","summary":"Fathers\' Day","region":"Barbados","date":"2025-06-15"},{"id":"20250801_gi997sgnbadvpk4okq06oe76oo","status":"confirmed","summary":"Emancipation Day","region":"Barbados","date":"2025-08-01"},{"id":"20250804_4eefeesif90leb1mj49a6kq7a4","status":"confirmed","summary":"Kadooment Day","region":"Barbados","date":"2025-08-04"},{"id":"20251031_9ikgc6cq5tkmegkfjpf3bf76n0","status":"confirmed","summary":"Halloween","region":"Barbados","date":"2025-10-31"},{"id":"20251130_79kgtip82cvhvnbeomvpcfl9cg","status":"confirmed","summary":"Independence Day","region":"Barbados","date":"2025-11-30"},{"id":"20251201_qd7gfg4c7gql4pf4g7d4tu5re4","status":"confirmed","summary":"Day off for Independence Day","region":"Barbados","date":"2025-12-01"},{"id":"20251224_9odv51t7u6en374er8b58kdqa8","status":"confirmed","summary":"Christmas Eve","region":"Barbados","date":"2025-12-24"},{"id":"20251225_n53o0bcgg1153d3so7fecepnr4","status":"confirmed","summary":"Christmas Day","region":"Barbados","date":"2025-12-25"},{"id":"20251226_0p4sl4ockf8gjljqn8f7ls6n4c","status":"confirmed","summary":"Boxing Day","region":"Barbados","date":"2025-12-26"},{"id":"20251231_o4pmrt2jnvreoel6k9tropt2p0","status":"confirmed","summary":"Old Year\'s Night","region":"Barbados","date":"2025-12-31"}],"Bangladesh":[{"id":"20240107_l2oa0nvqq294spesd4gebdqupo","status":"confirmed","summary":"Election Day","region":"Bangladesh","date":"2024-01-07"},{"id":"20240214_6m17k15o0ga35paemeov63oeq4","status":"confirmed","summary":"Valentine\'s Day","region":"Bangladesh","date":"2024-02-14"},{"id":"20240221_bcj2hbo4sjm38albpbo1k3fqc4","status":"confirmed","summary":"Language Martyrs\' Day","region":"Bangladesh","date":"2024-02-21"},{"id":"20240223_ovveci2e3c5eckqgnk5tn67j6o","status":"confirmed","summary":"Maghi Purnima","region":"Bangladesh","date":"2024-02-23"},{"id":"20240226_sha4pfgsbq08702e219rtvahho","status":"confirmed","summary":"Shab e-Barat","region":"Bangladesh","date":"2024-02-26"},{"id":"20240312_3l2vria5tle9q5sun626nshv5s","status":"confirmed","summary":"Ramadan Start","region":"Bangladesh","date":"2024-03-12"},{"id":"20240317_2m5g84mnkvok7bherm5f37n0ok","status":"confirmed","summary":"Sheikh Mujibur Rahman’s birthday","region":"Bangladesh","date":"2024-03-17"},{"id":"20240325_jspeu1r0c4hm1vm3b3fuft2rk0","status":"confirmed","summary":"Doljatra","region":"Bangladesh","date":"2024-03-25"},{"id":"20240326_fcteh9thhm7d0jfvvrm34j1skg","status":"confirmed","summary":"Independence Day","region":"Bangladesh","date":"2024-03-26"},{"id":"20240401_fl5dujrddcb65pgbmapg1v3so0","status":"confirmed","summary":"Easter Monday","region":"Bangladesh","date":"2024-04-01"},{"id":"20240406_asg5hkdui21m0n0csglqnirnbg","status":"confirmed","summary":"Arrival Day of Sri Sri Harichand Tagore","region":"Bangladesh","date":"2024-04-06"},{"id":"20240407_u2l8i8368bckmqq5f5g1dlir6s","status":"confirmed","summary":"Shab-e-qadr","region":"Bangladesh","date":"2024-04-07"},{"id":"20240410_q8sa0h699h8kfe70tdlpib8dgc","status":"confirmed","summary":"Eid ul-Fitr","region":"Bangladesh","date":"2024-04-10"},{"id":"20240412_01lhmqk8p21r3fj4hcviq8mlrg","status":"confirmed","summary":"Eid ul-Fitr Holiday","region":"Bangladesh","date":"2024-04-12"},{"id":"20240413_jhrkltl3oo8p7sabc1hbdbteao","status":"confirmed","summary":"Eid ul-Fitr Holiday","region":"Bangladesh","date":"2024-04-13"},{"id":"20240413_md5ffdcmeopd67htiiv8c8ikss","status":"confirmed","summary":"Chaitra Sankranti","region":"Bangladesh","date":"2024-04-13"},{"id":"20240414_rt8p370n02ffs7tj32r8eu6gt8","status":"confirmed","summary":"Bengali New Year","region":"Bangladesh","date":"2024-04-14"},{"id":"20240501_klenppmekos26ah46keq3o32lo","status":"confirmed","summary":"May Day","region":"Bangladesh","date":"2024-05-01"},{"id":"20240512_t7k232go17b9rd2f04pfamhqa4","status":"confirmed","summary":"Mothers\' Day","region":"Bangladesh","date":"2024-05-12"},{"id":"20240523_5rib0qbdsbhcbgk41cj4j3a23o","status":"confirmed","summary":"Buddha Purnima/Vesak","region":"Bangladesh","date":"2024-05-23"},{"id":"20240616_omlqcbduhdkutkov9djfssq89s","status":"confirmed","summary":"Fathers\' Day","region":"Bangladesh","date":"2024-06-16"},{"id":"20240617_6nk1ggjamk3avtfu5v5phtt62g","status":"confirmed","summary":"Eid al-Adha","region":"Bangladesh","date":"2024-06-17"},{"id":"20240618_nvci8l2q2p8kf4atn8rsg5th4o","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Bangladesh","date":"2024-06-18"},{"id":"20240619_9t84m7oul945ljbdp1jji0pcs4","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Bangladesh","date":"2024-06-19"},{"id":"20240708_mq3f6rv80kd2luc740pu4ls098","status":"confirmed","summary":"Muharram","region":"Bangladesh","date":"2024-07-08"},{"id":"20240717_lc9frvds0gemiifg2ggopiviic","status":"confirmed","summary":"Ashura","region":"Bangladesh","date":"2024-07-17"},{"id":"20240720_m0eeroj5aiqrfh3svgrmnd81uc","status":"confirmed","summary":"Ashari Purnima","region":"Bangladesh","date":"2024-07-20"},{"id":"20240815_apd4cb2qcvf5a0h88uu6kcjtjg","status":"confirmed","summary":"National Mourning Day","region":"Bangladesh","date":"2024-08-15"},{"id":"20240904_n9fnlq2ssmdl8rnlvi08vdsm20","status":"confirmed","summary":"Akhari Chahar Somba","region":"Bangladesh","date":"2024-09-04"},{"id":"20240916_am6gf8l4ehckkgpom1tme0cl68","status":"confirmed","summary":"Madhu Purnima","region":"Bangladesh","date":"2024-09-16"},{"id":"20240916_oq90td65of56ierqlofpoj462g","status":"confirmed","summary":"Eid e-Milad-un Nabi","region":"Bangladesh","date":"2024-09-16"},{"id":"20241002_e5tk5kd80vdpe4lifrkr3sq4o0","status":"confirmed","summary":"Mahalaya","region":"Bangladesh","date":"2024-10-02"},{"id":"20241011_efpac5c6mo4kepkebr0ar9apes","status":"confirmed","summary":"Ashtami","region":"Bangladesh","date":"2024-10-11"},{"id":"20241012_5g01ff31lnu9ukkofbqf1bug1g","status":"confirmed","summary":"Mahanabami","region":"Bangladesh","date":"2024-10-12"},{"id":"20241015_vph58m2km44rgnhkvavftlee7k","status":"confirmed","summary":"Fateha-i-Yajdaham","region":"Bangladesh","date":"2024-10-15"},{"id":"20241016_0nl2jq55k9cnajr5ijt1oouhq4","status":"confirmed","summary":"Lakshmi Puja","region":"Bangladesh","date":"2024-10-16"},{"id":"20241016_oicf44pgir7lq2toot1oq1i2hc","status":"confirmed","summary":"Prabarana Purnima","region":"Bangladesh","date":"2024-10-16"},{"id":"20241031_ieks616pgqrtbr02c8fate8dkg","status":"confirmed","summary":"Sri Shayama Puja","region":"Bangladesh","date":"2024-10-31"},{"id":"20241031_nuqmhjm0gmt7m9o59r29433r20","status":"confirmed","summary":"Halloween","region":"Bangladesh","date":"2024-10-31"},{"id":"20241216_tkqv6rbjitikb9j2n771a1q21k","status":"confirmed","summary":"Victory Day","region":"Bangladesh","date":"2024-12-16"},{"id":"20241225_cqg1kdpr6v7kbjhneuc3faf9u4","status":"confirmed","summary":"Christmas Day","region":"Bangladesh","date":"2024-12-25"},{"id":"20250214_n4kj3mtnksih6rrfke57ofe7ko","status":"confirmed","summary":"Valentine\'s Day","region":"Bangladesh","date":"2025-02-14"},{"id":"20250221_oevne6vba34un9sl429h7f18eo","status":"confirmed","summary":"Language Martyrs\' Day","region":"Bangladesh","date":"2025-02-21"},{"id":"20250301_5de6rv0b9rem12oij18hk8qn4o","status":"confirmed","summary":"Ramadan Start","region":"Bangladesh","date":"2025-03-01"},{"id":"20250313_vrogjmfa2hu4cf1oj9fjkat61o","status":"confirmed","summary":"Doljatra","region":"Bangladesh","date":"2025-03-13"},{"id":"20250317_7rq94cb3pcjb997ob5q1b4rpgk","status":"confirmed","summary":"Sheikh Mujibur Rahman’s birthday","region":"Bangladesh","date":"2025-03-17"},{"id":"20250326_20f5cbbrpoqrcc8kuj418e29ko","status":"confirmed","summary":"Independence Day","region":"Bangladesh","date":"2025-03-26"},{"id":"20250331_1u84r3pfd591p3ljpa7n45rk04","status":"confirmed","summary":"Eid ul-Fitr","region":"Bangladesh","date":"2025-03-31"},{"id":"20250401_r0f6c3d30gesh0n904gg11hekg","status":"confirmed","summary":"Eid ul-Fitr Holiday","region":"Bangladesh","date":"2025-04-01"},{"id":"20250402_tk9btioa2fcfea5r0bjnktqi0g","status":"confirmed","summary":"Eid ul-Fitr Holiday","region":"Bangladesh","date":"2025-04-02"},{"id":"20250403_5b4r3km24piuqhosl1uo1rqidk","status":"confirmed","summary":"Eid ul-Fitr Holiday","region":"Bangladesh","date":"2025-04-03"},{"id":"20250413_duejvl2n47e89681vd1lg9chl8","status":"confirmed","summary":"Chaitra Sankranti","region":"Bangladesh","date":"2025-04-13"},{"id":"20250414_6muittrvsoesls5c1gn6tjss1c","status":"confirmed","summary":"Bengali New Year","region":"Bangladesh","date":"2025-04-14"},{"id":"20250501_ac944lopssahfkaknffo53ivas","status":"confirmed","summary":"May Day","region":"Bangladesh","date":"2025-05-01"},{"id":"20250511_mjgirffcco904qs9t09rrcptdc","status":"confirmed","summary":"Mothers\' Day","region":"Bangladesh","date":"2025-05-11"},{"id":"20250607_3lrvta4s78c31ildn67gt5cers","status":"confirmed","summary":"Eid al-Adha","region":"Bangladesh","date":"2025-06-07"},{"id":"20250608_sfeskdci6llo3iknt9jgu9qveo","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Bangladesh","date":"2025-06-08"},{"id":"20250609_vabtru252u89bmdj2thh1cmc5k","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Bangladesh","date":"2025-06-09"},{"id":"20250615_14ci9htle39p2mngr8tf6nnpjo","status":"confirmed","summary":"Fathers\' Day","region":"Bangladesh","date":"2025-06-15"},{"id":"20250627_04fki108lrrm93deh5fk9rmn0k","status":"confirmed","summary":"Muharram","region":"Bangladesh","date":"2025-06-27"},{"id":"20250706_30oirkl13eae1g2fs1u3jpsars","status":"confirmed","summary":"Ashura","region":"Bangladesh","date":"2025-07-06"},{"id":"20250815_um1pkn500u8v9ojbv7m4oqv13g","status":"confirmed","summary":"National Mourning Day","region":"Bangladesh","date":"2025-08-15"},{"id":"20250820_iakk6koc4s34jkvpk34t4m3gvg","status":"confirmed","summary":"Akhari Chahar Somba","region":"Bangladesh","date":"2025-08-20"},{"id":"20250905_d32m4a029jtfe653imuajfm200","status":"confirmed","summary":"Eid e-Milad-un Nabi","region":"Bangladesh","date":"2025-09-05"},{"id":"20251004_2eq7aqjlbeag0hsgl9d7smgml0","status":"confirmed","summary":"Fateha-i-Yajdaham","region":"Bangladesh","date":"2025-10-04"},{"id":"20251031_e8ji78gnlki0joofk6dddv4ik4","status":"confirmed","summary":"Halloween","region":"Bangladesh","date":"2025-10-31"},{"id":"20251216_m3qodoia2uktg6e5g9v9of2ddc","status":"confirmed","summary":"Victory Day","region":"Bangladesh","date":"2025-12-16"},{"id":"20251225_cnar1aavv6qamk92ntgpv50gbo","status":"confirmed","summary":"Christmas Day","region":"Bangladesh","date":"2025-12-25"}],"Belgium":[{"id":"20240101_6pi9fqjsdcfnlup245ag62ve7g","status":"confirmed","summary":"New Year\'s Day","region":"Belgium","date":"2024-01-01"},{"id":"20240106_3upmkt8pvu0r30mmbatlnn5rjo","status":"confirmed","summary":"Epiphany","region":"Belgium","date":"2024-01-06"},{"id":"20240214_bu699kiuc1fmk959npdsel5s64","status":"confirmed","summary":"Valentine\'s Day","region":"Belgium","date":"2024-02-14"},{"id":"20240329_3u8kdhnctm14ha07b70akp3of4","status":"confirmed","summary":"Good Friday","region":"Belgium","date":"2024-03-29"},{"id":"20240331_gmi5qm0hq5im54f1li3k4mnq0o","status":"confirmed","summary":"Daylight Saving Time starts","region":"Belgium","date":"2024-03-31"},{"id":"20240331_uqup3k9gknedo9rsbr28omhv30","status":"confirmed","summary":"Easter Sunday","region":"Belgium","date":"2024-03-31"},{"id":"20240401_5c296iql14lka04sjrvfav36eg","status":"confirmed","summary":"Easter Monday","region":"Belgium","date":"2024-04-01"},{"id":"20240501_8e5irgf7qsafspbveva4j3355s","status":"confirmed","summary":"Labor Day / May Day","region":"Belgium","date":"2024-05-01"},{"id":"20240509_ri5f7tls5rtkchel9e7prb57ls","status":"confirmed","summary":"Ascension Day","region":"Belgium","date":"2024-05-09"},{"id":"20240510_7k1cigdaoi54aedu95bu0qauq4","status":"confirmed","summary":"Day after Ascension Day","region":"Belgium","date":"2024-05-10"},{"id":"20240512_laa3ghkeohg80vpaq0kb2bf3e4","status":"confirmed","summary":"Mothers\' Day","region":"Belgium","date":"2024-05-12"},{"id":"20240519_8rmur23tfv758lnbggevpvm5cs","status":"confirmed","summary":"Whit Sunday","region":"Belgium","date":"2024-05-19"},{"id":"20240520_qh4ndatr0nu33pvdtue5u0kh6c","status":"confirmed","summary":"Whit Monday","region":"Belgium","date":"2024-05-20"},{"id":"20240609_0i2opktpdj7tpet1mh90b9eap4","status":"confirmed","summary":"Fathers\' Day","region":"Belgium","date":"2024-06-09"},{"id":"20240721_8rtv3l37pgadsiqstnl9gfm2ro","status":"confirmed","summary":"Belgian National Day","region":"Belgium","date":"2024-07-21"},{"id":"20240815_apj86accbaea1i1c9g4tj6dcvs","status":"confirmed","summary":"Assumption of Mary","region":"Belgium","date":"2024-08-15"},{"id":"20241027_hu00hp5vonf4mn0pqt9giif4mo","status":"confirmed","summary":"Daylight Saving Time ends","region":"Belgium","date":"2024-10-27"},{"id":"20241031_hnefp76p27e9ebogu3481nf3oo","status":"confirmed","summary":"Halloween","region":"Belgium","date":"2024-10-31"},{"id":"20241101_v03gc43rfpk17lb7tvfbtesijo","status":"confirmed","summary":"All Saints\' Day","region":"Belgium","date":"2024-11-01"},{"id":"20241111_2g667i132agk4pr680qc1v0tl0","status":"confirmed","summary":"Armistice Day","region":"Belgium","date":"2024-11-11"},{"id":"20241206_qh9kjjvqnm91fr4k0bb96vvjl0","status":"confirmed","summary":"St. Nicholas Day","region":"Belgium","date":"2024-12-06"},{"id":"20241224_anann4fmaejv5r7mcfh2pa9m0s","status":"confirmed","summary":"Christmas Eve","region":"Belgium","date":"2024-12-24"},{"id":"20241225_1f6bcb5reqei2hb69rfnokv6vc","status":"confirmed","summary":"Christmas Day","region":"Belgium","date":"2024-12-25"},{"id":"20241226_3c3livlgrkrl1qokka0i8f82qo","status":"confirmed","summary":"Boxing Day","region":"Belgium","date":"2024-12-26"},{"id":"20241231_d13um3v0s65lfm8fvag4qkouu4","status":"confirmed","summary":"New Year\'s Eve","region":"Belgium","date":"2024-12-31"},{"id":"20250101_q7l9jjv37f9up5t1mo04ti7vr8","status":"confirmed","summary":"New Year\'s Day","region":"Belgium","date":"2025-01-01"},{"id":"20250106_atqsm4onpvkjjk9f3g3o204jq8","status":"confirmed","summary":"Epiphany","region":"Belgium","date":"2025-01-06"},{"id":"20250214_8ghg2crge4o6bardtq9f0h28e8","status":"confirmed","summary":"Valentine\'s Day","region":"Belgium","date":"2025-02-14"},{"id":"20250330_97sbvsbbpkk6iotl7q40rn0sdk","status":"confirmed","summary":"Daylight Saving Time starts","region":"Belgium","date":"2025-03-30"},{"id":"20250418_nf64hsctqciv1ic3acm1nbjiek","status":"confirmed","summary":"Good Friday","region":"Belgium","date":"2025-04-18"},{"id":"20250420_a5uikh6cvll91hji9868bjn2ro","status":"confirmed","summary":"Easter Sunday","region":"Belgium","date":"2025-04-20"},{"id":"20250421_32l9lf9oetgutli7nqoc7g7a8c","status":"confirmed","summary":"Easter Monday","region":"Belgium","date":"2025-04-21"},{"id":"20250501_7u1t41p0qu7n61mv991ab29coc","status":"confirmed","summary":"Labor Day / May Day","region":"Belgium","date":"2025-05-01"},{"id":"20250511_p6jrvj51skf5ebkk9ios1kfbcc","status":"confirmed","summary":"Mothers\' Day","region":"Belgium","date":"2025-05-11"},{"id":"20250529_73l8nm7if1bdn1gpgs7dg60998","status":"confirmed","summary":"Ascension Day","region":"Belgium","date":"2025-05-29"},{"id":"20250530_adsqjhmrcfmoh07vifr10g4e40","status":"confirmed","summary":"Day after Ascension Day","region":"Belgium","date":"2025-05-30"},{"id":"20250608_b2vn48h84b7uirdnh6eq549rnk","status":"confirmed","summary":"Fathers\' Day","region":"Belgium","date":"2025-06-08"},{"id":"20250608_gu374kvhpb41n1e1ldtm43h710","status":"confirmed","summary":"Whit Sunday","region":"Belgium","date":"2025-06-08"},{"id":"20250609_151f8elgesl7dj79vldl6nhu10","status":"confirmed","summary":"Whit Monday","region":"Belgium","date":"2025-06-09"},{"id":"20250721_p2uuuqrqhmfdgpquisomqfkquc","status":"confirmed","summary":"Belgian National Day","region":"Belgium","date":"2025-07-21"},{"id":"20250815_2bgto58fkq0rbfv4rnq9mhro4c","status":"confirmed","summary":"Assumption of Mary","region":"Belgium","date":"2025-08-15"},{"id":"20251026_ls8gs7dds6eb1k7ls7pebo09ng","status":"confirmed","summary":"Daylight Saving Time ends","region":"Belgium","date":"2025-10-26"},{"id":"20251031_vo6p3e7e2g2kumdie1ajtm4slc","status":"confirmed","summary":"Halloween","region":"Belgium","date":"2025-10-31"},{"id":"20251101_4haiedop9hib1ib3tv88962n3g","status":"confirmed","summary":"All Saints\' Day","region":"Belgium","date":"2025-11-01"},{"id":"20251111_2e8n57cq5mpi8kktpfnau33nok","status":"confirmed","summary":"Armistice Day","region":"Belgium","date":"2025-11-11"},{"id":"20251206_ebhsm574810bphrfoiu39ijhrs","status":"confirmed","summary":"St. Nicholas Day","region":"Belgium","date":"2025-12-06"},{"id":"20251224_fhvvsts45ddofhn6qmvqutogho","status":"confirmed","summary":"Christmas Eve","region":"Belgium","date":"2025-12-24"},{"id":"20251225_3tkad64lh6gfc5q1g6pln8bv6g","status":"confirmed","summary":"Christmas Day","region":"Belgium","date":"2025-12-25"},{"id":"20251226_stapjmh1qfg4g4l58rs4283e9s","status":"confirmed","summary":"Boxing Day","region":"Belgium","date":"2025-12-26"},{"id":"20251231_unu6o9l7ba1uucju4eno3kp87k","status":"confirmed","summary":"New Year\'s Eve","region":"Belgium","date":"2025-12-31"}],"Burkina Faso":[{"id":"20240101_9r8fh86agdqfgqmkednodkdvts","status":"confirmed","summary":"New Year","region":"Burkina Faso","date":"2024-01-01"},{"id":"20240103_bm6fatpstophq2s8emq6q5da3c","status":"confirmed","summary":"Burkina Faso Popular Uprising Day","region":"Burkina Faso","date":"2024-01-03"},{"id":"20240308_trrj8cats1o8o5qodibr7etntk","status":"confirmed","summary":"International Women\'s Day","region":"Burkina Faso","date":"2024-03-08"},{"id":"20240311_808g9i2lumsi3pqnu4npippj5c","status":"confirmed","summary":"Ramadan Start","region":"Burkina Faso","date":"2024-03-11"},{"id":"20240401_rf4eht9hdq1io5s4m74uvftc28","status":"confirmed","summary":"Easter Monday","region":"Burkina Faso","date":"2024-04-01"},{"id":"20240410_l8elasrk0rn5j9cojevge0n8ng","status":"confirmed","summary":"Eid al-Fitr","region":"Burkina Faso","date":"2024-04-10"},{"id":"20240501_3ae59r6jgg1hrg3a0auabqvnl8","status":"confirmed","summary":"Labour Day","region":"Burkina Faso","date":"2024-05-01"},{"id":"20240509_24tbbinglbupmb6cii7rcb7k54","status":"confirmed","summary":"Ascension Day","region":"Burkina Faso","date":"2024-05-09"},{"id":"20240515_0cpjlqs93khs90q4vdc6vd5dfc","status":"confirmed","summary":"Day of Customs and Traditions","region":"Burkina Faso","date":"2024-05-15"},{"id":"20240617_pu8ae81n2uo8sgi1ph2hic5t78","status":"confirmed","summary":"Eid al-Adha","region":"Burkina Faso","date":"2024-06-17"},{"id":"20240805_ohbjp0hrav5f37e9hhll5tcmtk","status":"confirmed","summary":"National Day","region":"Burkina Faso","date":"2024-08-05"},{"id":"20240815_knvlrnijvto0s24qd16vrgv514","status":"confirmed","summary":"Assumption of Mary","region":"Burkina Faso","date":"2024-08-15"},{"id":"20240916_g8i4lhr79203imscqoer6ojji8","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Burkina Faso","date":"2024-09-16"},{"id":"20241031_lp5r1c4bupnbp927mqu6va0j7k","status":"confirmed","summary":"Martyrs\' Day","region":"Burkina Faso","date":"2024-10-31"},{"id":"20241101_6o4tks3vcc49ld92ibksocbsf0","status":"confirmed","summary":"All Saints’ Day","region":"Burkina Faso","date":"2024-11-01"},{"id":"20241211_vf2960spoq1ep7f8ena4mdphdg","status":"confirmed","summary":"Proclamation of Independence Day","region":"Burkina Faso","date":"2024-12-11"},{"id":"20241225_5kepc4jhr7fqkrjktk2kpksru8","status":"confirmed","summary":"Christmas Day","region":"Burkina Faso","date":"2024-12-25"},{"id":"20250101_adbo5tb7qh149of9mtj3r7pu4k","status":"confirmed","summary":"New Year","region":"Burkina Faso","date":"2025-01-01"},{"id":"20250103_0jso9ajfe1h1l5a2o38a5mh2cg","status":"confirmed","summary":"Burkina Faso Popular Uprising Day","region":"Burkina Faso","date":"2025-01-03"},{"id":"20250301_kulhof58kho7jq45ebbsh8r37c","status":"confirmed","summary":"Ramadan Start","region":"Burkina Faso","date":"2025-03-01"},{"id":"20250308_6mgqs4cvibuv6bt50vfhhl0fk8","status":"confirmed","summary":"International Women\'s Day","region":"Burkina Faso","date":"2025-03-08"},{"id":"20250331_98jd9e9vndch8g31p2lk82c20c","status":"confirmed","summary":"Eid al-Fitr","region":"Burkina Faso","date":"2025-03-31"},{"id":"20250421_7j7cl6djl1qfcphcdcv1maa8ac","status":"confirmed","summary":"Easter Monday","region":"Burkina Faso","date":"2025-04-21"},{"id":"20250501_52iai1675mgg6geh292554ota4","status":"confirmed","summary":"Labour Day","region":"Burkina Faso","date":"2025-05-01"},{"id":"20250515_2mnh706l30kaahao4p2no6u5pg","status":"confirmed","summary":"Day of Customs and Traditions","region":"Burkina Faso","date":"2025-05-15"},{"id":"20250529_9v6mgbv7u52dvkl94bkuf7do64","status":"confirmed","summary":"Ascension Day","region":"Burkina Faso","date":"2025-05-29"},{"id":"20250607_jbqu0lasnjso1bonoggr5fe984","status":"confirmed","summary":"Eid al-Adha","region":"Burkina Faso","date":"2025-06-07"},{"id":"20250805_cgkaje2u66taicdl9l156ufu24","status":"confirmed","summary":"National Day","region":"Burkina Faso","date":"2025-08-05"},{"id":"20250815_ob7rfi23k3lfiif536rhr88r20","status":"confirmed","summary":"Assumption of Mary","region":"Burkina Faso","date":"2025-08-15"},{"id":"20250905_vpnnmepjr0qo1b0t0tgj45e86c","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Burkina Faso","date":"2025-09-05"},{"id":"20251031_q566p8u7hti1i4qe72cffuqvfg","status":"confirmed","summary":"Martyrs\' Day","region":"Burkina Faso","date":"2025-10-31"},{"id":"20251101_r6nsoa8mc62grc6vnrsou39klc","status":"confirmed","summary":"All Saints’ Day","region":"Burkina Faso","date":"2025-11-01"},{"id":"20251211_std60ods5eerg0f3t2k15h2g10","status":"confirmed","summary":"Proclamation of Independence Day","region":"Burkina Faso","date":"2025-12-11"},{"id":"20251225_bv8obl45vgplu61dka2ogrdkrg","status":"confirmed","summary":"Christmas Day","region":"Burkina Faso","date":"2025-12-25"}],"Bahrain":[{"id":"20240101_m18cdtjv1i7secdgb3v8954q60","status":"confirmed","summary":"New Year","region":"Bahrain","date":"2024-01-01"},{"id":"20240311_1lfu5m47gp93hariqc6v4rfig4","status":"confirmed","summary":"Ramadan Start","region":"Bahrain","date":"2024-03-11"},{"id":"20240410_upe1mjglu3921qf3qkpv7selmk","status":"confirmed","summary":"Eid al-Fitr","region":"Bahrain","date":"2024-04-10"},{"id":"20240411_7qm1q1bt2fte5lg8p6beo4mtc0","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Bahrain","date":"2024-04-11"},{"id":"20240412_92u5bctai17jfoaul9k1civc9o","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Bahrain","date":"2024-04-12"},{"id":"20240501_hco7pufrpmltpfsu3pbt9kqjug","status":"confirmed","summary":"May Day","region":"Bahrain","date":"2024-05-01"},{"id":"20240616_vcrln0i9ltdm58j1sek5p6dbkc","status":"confirmed","summary":"Arafat Day","region":"Bahrain","date":"2024-06-16"},{"id":"20240617_ba7o8202quunjj2htpqnedc6g8","status":"confirmed","summary":"Eid al-Adha","region":"Bahrain","date":"2024-06-17"},{"id":"20240618_q3hcrmnp450n457bcqqjtju608","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Bahrain","date":"2024-06-18"},{"id":"20240619_3ti3ie95d1hld9ipttifujq790","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Bahrain","date":"2024-06-19"},{"id":"20240708_qprkmh8tqi8d6pj3ogeo5kesh4","status":"confirmed","summary":"Muharram","region":"Bahrain","date":"2024-07-08"},{"id":"20240717_hn10j6lthatq8q56knbanjgsqs","status":"confirmed","summary":"Ashoora","region":"Bahrain","date":"2024-07-17"},{"id":"20240718_50h27lq2c123f85ucdh5ohoo18","status":"confirmed","summary":"Ashoora Holiday","region":"Bahrain","date":"2024-07-18"},{"id":"20240916_qlqqfkgr2gupu1n63kcgti10ok","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Bahrain","date":"2024-09-16"},{"id":"20241216_ee13kdlqetkh9q623pjdrra71c","status":"confirmed","summary":"National Day","region":"Bahrain","date":"2024-12-16"},{"id":"20241217_nt91j3p5qsfvvf2bn0t8b1ivns","status":"confirmed","summary":"National Day (second day)","region":"Bahrain","date":"2024-12-17"},{"id":"20250101_tmfp2jo6jdre60mtpmf65qenro","status":"confirmed","summary":"New Year","region":"Bahrain","date":"2025-01-01"},{"id":"20250301_n03c2mpcc6bahrf9k718p98lgs","status":"confirmed","summary":"Ramadan Start","region":"Bahrain","date":"2025-03-01"},{"id":"20250331_mh46rfa8pl5cju9vmj02tmrvts","status":"confirmed","summary":"Eid al-Fitr","region":"Bahrain","date":"2025-03-31"},{"id":"20250401_tsca56b5umsgr554gn4gp015bg","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Bahrain","date":"2025-04-01"},{"id":"20250402_f5hh37lau2bjj3sqjdjrs02q0k","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Bahrain","date":"2025-04-02"},{"id":"20250501_pb2crt8bcgsjmm7em0mgcochio","status":"confirmed","summary":"May Day","region":"Bahrain","date":"2025-05-01"},{"id":"20250606_qo0g5r0sfjl903ui2uvofp31t4","status":"confirmed","summary":"Arafat Day","region":"Bahrain","date":"2025-06-06"},{"id":"20250607_adm2en555vj34dks3r7542nark","status":"confirmed","summary":"Eid al-Adha","region":"Bahrain","date":"2025-06-07"},{"id":"20250608_n1ml03ehi3hu0fn76ro21b7iug","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Bahrain","date":"2025-06-08"},{"id":"20250609_1r2tg9vg79lvkm80mh6n48ncso","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Bahrain","date":"2025-06-09"},{"id":"20250627_l89mlq663eoomlqm4jmgkcg9d4","status":"confirmed","summary":"Muharram","region":"Bahrain","date":"2025-06-27"},{"id":"20250706_s8h9ceq876hbdg59e5ekucq1hk","status":"confirmed","summary":"Ashoora","region":"Bahrain","date":"2025-07-06"},{"id":"20250707_vqrk89surqkl25a1f2fe5i5lm4","status":"confirmed","summary":"Ashoora Holiday","region":"Bahrain","date":"2025-07-07"},{"id":"20250905_7naka3hcgpfb6igmlb4dvuais0","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Bahrain","date":"2025-09-05"},{"id":"20251216_sa46fj0c4c6iuaiucmj3cmp5b8","status":"confirmed","summary":"National Day","region":"Bahrain","date":"2025-12-16"},{"id":"20251217_kqv4b65tlgbhavb6hp0fuim75k","status":"confirmed","summary":"National Day (second day)","region":"Bahrain","date":"2025-12-17"}],"Burundi":[{"id":"20240101_rdeaq24fethsrcfl0ckvd2gnuo","status":"confirmed","summary":"New Year","region":"Burundi","date":"2024-01-01"},{"id":"20240205_1528a9424g46bvic70c905fgb8","status":"confirmed","summary":"Unity Day","region":"Burundi","date":"2024-02-05"},{"id":"20240311_16q33e52qia91tedkqjin7qmbc","status":"confirmed","summary":"Ramadan Start","region":"Burundi","date":"2024-03-11"},{"id":"20240406_hrba5e2ot3phihnsqrj7trh5lc","status":"confirmed","summary":"President Ntaryamira Day","region":"Burundi","date":"2024-04-06"},{"id":"20240410_mv8vnmegedc0o2hbvkqspu472s","status":"confirmed","summary":"Eid ul Fitr","region":"Burundi","date":"2024-04-10"},{"id":"20240501_53o7au7or4k4pr77j6l9q1r4d0","status":"confirmed","summary":"Labour Day","region":"Burundi","date":"2024-05-01"},{"id":"20240509_4rrlm165m8vs05i3quf5novt58","status":"confirmed","summary":"Ascension Day","region":"Burundi","date":"2024-05-09"},{"id":"20240608_etl73962j353p04sdt3asd1sgo","status":"confirmed","summary":"President Pierre Nkurunziza Day","region":"Burundi","date":"2024-06-08"},{"id":"20240617_pbcuspflerik8vtlj6e3u67tl8","status":"confirmed","summary":"Eid al-Adha","region":"Burundi","date":"2024-06-17"},{"id":"20240701_h0gebggrm8t7ink4levfv8p4l4","status":"confirmed","summary":"Independence Day","region":"Burundi","date":"2024-07-01"},{"id":"20240815_30t6bp2ob8jcg5gu4g580v9ea8","status":"confirmed","summary":"Assumption of Mary","region":"Burundi","date":"2024-08-15"},{"id":"20241013_tfhh93u6svtui9sj8jp1m3rmp8","status":"confirmed","summary":"Prince Louis Rwagasore Day","region":"Burundi","date":"2024-10-13"},{"id":"20241014_q2q6drkounalsg1eol4q8ej8l0","status":"confirmed","summary":"Day off for Prince Louis Rwagasore Day","region":"Burundi","date":"2024-10-14"},{"id":"20241021_tn546b89g5nsqvus082v731gq0","status":"confirmed","summary":"President Ndadaye\'s Day","region":"Burundi","date":"2024-10-21"},{"id":"20241101_hc6m1f3t8lfhcviul6m4iv78ds","status":"confirmed","summary":"All Saints\' Day","region":"Burundi","date":"2024-11-01"},{"id":"20241225_kd4v8pvf5fh9n9fr0vs8qs8q3g","status":"confirmed","summary":"Christmas Day","region":"Burundi","date":"2024-12-25"},{"id":"20250101_uq9jpg4g7uipiijpkdhi45h65s","status":"confirmed","summary":"New Year","region":"Burundi","date":"2025-01-01"},{"id":"20250205_002o80vfhu579rb3lrbv06ab90","status":"confirmed","summary":"Unity Day","region":"Burundi","date":"2025-02-05"},{"id":"20250301_p34do4hgj7jifq3ch0ntoj8csc","status":"confirmed","summary":"Ramadan Start","region":"Burundi","date":"2025-03-01"},{"id":"20250331_glbfd1ueirbl5bl4uf9dg22ouk","status":"confirmed","summary":"Eid ul Fitr","region":"Burundi","date":"2025-03-31"},{"id":"20250406_5bd2u13duks8vclk1do135dve0","status":"confirmed","summary":"President Ntaryamira Day","region":"Burundi","date":"2025-04-06"},{"id":"20250407_9g9ftsfpuf0pmsqr8kk6q75rmo","status":"confirmed","summary":"Day off for President Ntaryamira Day","region":"Burundi","date":"2025-04-07"},{"id":"20250501_8ulp1rs4libdrrubgaai0f09eg","status":"confirmed","summary":"Labour Day","region":"Burundi","date":"2025-05-01"},{"id":"20250529_610fb1rgjd0hu9908ebf8vbr0c","status":"confirmed","summary":"Ascension Day","region":"Burundi","date":"2025-05-29"},{"id":"20250607_ilp9slb49hgd5lklc86pts78p4","status":"confirmed","summary":"Eid al-Adha","region":"Burundi","date":"2025-06-07"},{"id":"20250608_9gfb7jns4cfdpphrdsuc6226hk","status":"confirmed","summary":"President Pierre Nkurunziza Day","region":"Burundi","date":"2025-06-08"},{"id":"20250609_4ss38eo3h8m61e9cfdfikgh8l4","status":"confirmed","summary":"Day off for President Pierre Nkurunziza Day","region":"Burundi","date":"2025-06-09"},{"id":"20250701_8pr6dvm964b007oouftsjed584","status":"confirmed","summary":"Independence Day","region":"Burundi","date":"2025-07-01"},{"id":"20250815_457bqp7t6dvf3ev0siq7o1ql74","status":"confirmed","summary":"Assumption of Mary","region":"Burundi","date":"2025-08-15"},{"id":"20251013_rkv369em2cgn39unk7ovghfcu0","status":"confirmed","summary":"Prince Louis Rwagasore Day","region":"Burundi","date":"2025-10-13"},{"id":"20251021_7j76am23skh44aga9stpg12gbs","status":"confirmed","summary":"President Ndadaye\'s Day","region":"Burundi","date":"2025-10-21"},{"id":"20251101_9dugcj63giqsafh30td4qamb8g","status":"confirmed","summary":"All Saints\' Day","region":"Burundi","date":"2025-11-01"},{"id":"20251225_qfauonblaoqfa0ruaaj7pk33vk","status":"confirmed","summary":"Christmas Day","region":"Burundi","date":"2025-12-25"}],"Benin":[{"id":"20240101_ac487bmakrnjhdusf2fn9nrob4","status":"confirmed","summary":"New Year","region":"Benin","date":"2024-01-01"},{"id":"20240110_aj65i1341sii19trsc34jele0c","status":"confirmed","summary":"Vodoun Festival","region":"Benin","date":"2024-01-10"},{"id":"20240116_jophmgqve70ji5d3im8rsp2k74","status":"confirmed","summary":"Day of Remembrance","region":"Benin","date":"2024-01-16"},{"id":"20240228_fdl07gnfhtbdelrg2dgultgsag","status":"confirmed","summary":"People\'s Sovereignty Day","region":"Benin","date":"2024-02-28"},{"id":"20240308_jms1ef86p3o2f711tmmoepbkto","status":"confirmed","summary":"Women\'s Day","region":"Benin","date":"2024-03-08"},{"id":"20240311_1us492ob55bv85d816b1rvojvo","status":"confirmed","summary":"Ramadan Start","region":"Benin","date":"2024-03-11"},{"id":"20240401_b50oj8trkssnkdhq0853sr9ias","status":"confirmed","summary":"Easter Monday","region":"Benin","date":"2024-04-01"},{"id":"20240410_145hs7mm7q10hkv34f82s6adis","status":"confirmed","summary":"Korité","region":"Benin","date":"2024-04-10"},{"id":"20240501_k57fm6madm7k66c5l0oub044tk","status":"confirmed","summary":"Labour Day","region":"Benin","date":"2024-05-01"},{"id":"20240509_hsvhldulk82qd63ghoeekhlvvs","status":"confirmed","summary":"Ascension Day","region":"Benin","date":"2024-05-09"},{"id":"20240512_prn7votfos0hblcj2elljqjvl0","status":"confirmed","summary":"Mother\'s Day","region":"Benin","date":"2024-05-12"},{"id":"20240520_13fc4pqghbhugfaajrha3vt1u8","status":"confirmed","summary":"Whit Monday","region":"Benin","date":"2024-05-20"},{"id":"20240616_l63oe5rugjdf9hm0gokvs8f6gk","status":"confirmed","summary":"Father\'s Day","region":"Benin","date":"2024-06-16"},{"id":"20240617_622bqe5hr3surujuva8j6rneqc","status":"confirmed","summary":"Tabaski","region":"Benin","date":"2024-06-17"},{"id":"20240801_fh2v4ujpg4omgdont98ghuqqn4","status":"confirmed","summary":"Independence Day","region":"Benin","date":"2024-08-01"},{"id":"20240815_rui2eenvqqqqp8ji490b17agqc","status":"confirmed","summary":"Assumption of Mary","region":"Benin","date":"2024-08-15"},{"id":"20240916_ufjub0mq9un6u762if7lr81img","status":"confirmed","summary":"Maouloud","region":"Benin","date":"2024-09-16"},{"id":"20241101_igf6f5vj6tatofv8oq72755bmo","status":"confirmed","summary":"All Saints\' Day","region":"Benin","date":"2024-11-01"},{"id":"20241225_62o72t6203m23u44i17c5kogd4","status":"confirmed","summary":"Christmas Day","region":"Benin","date":"2024-12-25"},{"id":"20250101_5bv3gluqmu9ce8s1babj6838ug","status":"confirmed","summary":"New Year","region":"Benin","date":"2025-01-01"},{"id":"20250110_sjgh2ue99m05frvgu00ovcmpak","status":"confirmed","summary":"Vodoun Festival","region":"Benin","date":"2025-01-10"},{"id":"20250116_23jlbpvac7be2p1r236ttaj85g","status":"confirmed","summary":"Day of Remembrance","region":"Benin","date":"2025-01-16"},{"id":"20250228_jt11tdmja9ueeov1juturlhke4","status":"confirmed","summary":"People\'s Sovereignty Day","region":"Benin","date":"2025-02-28"},{"id":"20250301_it41bve75guqgha93dtr5cpu0s","status":"confirmed","summary":"Ramadan Start","region":"Benin","date":"2025-03-01"},{"id":"20250308_7h15lgpl0f91ccomrnutird5c0","status":"confirmed","summary":"Women\'s Day","region":"Benin","date":"2025-03-08"},{"id":"20250331_89b306mj38c0qnnp1bljkmm3nc","status":"confirmed","summary":"Korité","region":"Benin","date":"2025-03-31"},{"id":"20250421_nkivl599519825cvd11io9mds0","status":"confirmed","summary":"Easter Monday","region":"Benin","date":"2025-04-21"},{"id":"20250501_ifuk0s8a76jn3k0iicc8qdbkeg","status":"confirmed","summary":"Labour Day","region":"Benin","date":"2025-05-01"},{"id":"20250511_jponoqpgnu03getotj317av7lk","status":"confirmed","summary":"Mother\'s Day","region":"Benin","date":"2025-05-11"},{"id":"20250529_bcetaea9ndjnpgpum1p9g0bisk","status":"confirmed","summary":"Ascension Day","region":"Benin","date":"2025-05-29"},{"id":"20250607_i3f3gkuchkiftkcc6eq6n6vs9s","status":"confirmed","summary":"Tabaski","region":"Benin","date":"2025-06-07"},{"id":"20250609_hcaarn8v5mfk3bqtv1eouugk90","status":"confirmed","summary":"Whit Monday","region":"Benin","date":"2025-06-09"},{"id":"20250615_m1aate2v7uvsdam5aebuqoju98","status":"confirmed","summary":"Father\'s Day","region":"Benin","date":"2025-06-15"},{"id":"20250801_vns46fret885d53hlmmleauft8","status":"confirmed","summary":"Independence Day","region":"Benin","date":"2025-08-01"},{"id":"20250815_on9vecpjeunj6nv9aeeeg9hdh8","status":"confirmed","summary":"Assumption of Mary","region":"Benin","date":"2025-08-15"},{"id":"20250905_ktmniovjsflm4b08ouitrg6vjc","status":"confirmed","summary":"Maouloud","region":"Benin","date":"2025-09-05"},{"id":"20251101_o7ssaaep0aiigfkqicc0vphtj4","status":"confirmed","summary":"All Saints\' Day","region":"Benin","date":"2025-11-01"},{"id":"20251225_78ef6e9irkfgpih8f585m1qmm0","status":"confirmed","summary":"Christmas Day","region":"Benin","date":"2025-12-25"}],"St. Barthélemy":[{"id":"20240101_vbmjeuva3s98t858oh4kk5g5os","status":"confirmed","summary":"New Year\'s Day","region":"St. Barthélemy","date":"2024-01-01"},{"id":"20240212_u4hki5jm65t0uac42c53f6mq4c","status":"confirmed","summary":"Carnival / Shrove Monday","region":"St. Barthélemy","date":"2024-02-12"},{"id":"20240213_rp2ta9gooj1i90m31jtms5679k","status":"confirmed","summary":"Carnival / Shrove Tuesday","region":"St. Barthélemy","date":"2024-02-13"},{"id":"20240214_8vcg6nqu0t76uu95qi1i5b1210","status":"confirmed","summary":"Carnival / Ash Wednesday","region":"St. Barthélemy","date":"2024-02-14"},{"id":"20240329_dp5nth77sdqromrhumlhute4ho","status":"confirmed","summary":"Good Friday","region":"St. Barthélemy","date":"2024-03-29"},{"id":"20240331_0apdi83bqdd56chac41df7s630","status":"confirmed","summary":"Easter Sunday","region":"St. Barthélemy","date":"2024-03-31"},{"id":"20240401_qr9pntsifmgaj9uo72j2scklhg","status":"confirmed","summary":"Easter Monday","region":"St. Barthélemy","date":"2024-04-01"},{"id":"20240501_nvp48hb5d3rktb83l8drdg2934","status":"confirmed","summary":"Labor Day / May Day","region":"St. Barthélemy","date":"2024-05-01"},{"id":"20240508_kv4g4j7dqoq2gbmk2k23pnh0kg","status":"confirmed","summary":"Victory Day","region":"St. Barthélemy","date":"2024-05-08"},{"id":"20240509_7uor1nk06eehvn6gcbr7qkvmhc","status":"confirmed","summary":"Ascension Day","region":"St. Barthélemy","date":"2024-05-09"},{"id":"20240520_2pdv9b6k45v4c4o2b9h0l0780k","status":"confirmed","summary":"Whit Monday","region":"St. Barthélemy","date":"2024-05-20"},{"id":"20240714_h2rhf0526qhubcklho8lp30i7g","status":"confirmed","summary":"French National Day","region":"St. Barthélemy","date":"2024-07-14"},{"id":"20240815_374q44n1p16crb5t9q7santcdc","status":"confirmed","summary":"Assumption of Mary","region":"St. Barthélemy","date":"2024-08-15"},{"id":"20241009_d2froh6rdmso9e9c2r55r3842s","status":"confirmed","summary":"Abolition Day","region":"St. Barthélemy","date":"2024-10-09"},{"id":"20241101_74uaf9vjee35gnn5i5pgpvr3ss","status":"confirmed","summary":"All Saints\' Day","region":"St. Barthélemy","date":"2024-11-01"},{"id":"20241111_5ije18r503mfkhl0eofn1uftc8","status":"confirmed","summary":"Armistice Day","region":"St. Barthélemy","date":"2024-11-11"},{"id":"20241225_uo4ulqucqhng7tn5bku18gv35k","status":"confirmed","summary":"Christmas Day","region":"St. Barthélemy","date":"2024-12-25"},{"id":"20241226_nqjggoip1iclau8vktjq78p6c4","status":"confirmed","summary":"Boxing Day","region":"St. Barthélemy","date":"2024-12-26"},{"id":"20250101_hkdup0l3ik53c5hjqhmu0s22jc","status":"confirmed","summary":"New Year\'s Day","region":"St. Barthélemy","date":"2025-01-01"},{"id":"20250303_9muj0s3j139mud7ut4civ0sgk4","status":"confirmed","summary":"Carnival / Shrove Monday","region":"St. Barthélemy","date":"2025-03-03"},{"id":"20250304_sn50on7i09mssjkjciga10gb90","status":"confirmed","summary":"Carnival / Shrove Tuesday","region":"St. Barthélemy","date":"2025-03-04"},{"id":"20250305_d7gh7dtnog7l7pcenpnqf7hpfg","status":"confirmed","summary":"Carnival / Ash Wednesday","region":"St. Barthélemy","date":"2025-03-05"},{"id":"20250418_3ihrog3s66eh11pjscj2gumj5k","status":"confirmed","summary":"Good Friday","region":"St. Barthélemy","date":"2025-04-18"},{"id":"20250420_k2lh4n3v253au4afl7t8cohtrs","status":"confirmed","summary":"Easter Sunday","region":"St. Barthélemy","date":"2025-04-20"},{"id":"20250421_q4k3anvvfmcd3hkshjv2r4amps","status":"confirmed","summary":"Easter Monday","region":"St. Barthélemy","date":"2025-04-21"},{"id":"20250501_bivti4audtbukpjvpks5a8c0mo","status":"confirmed","summary":"Labor Day / May Day","region":"St. Barthélemy","date":"2025-05-01"},{"id":"20250508_ldrf5g23kja8bakcoj3e8qpclo","status":"confirmed","summary":"Victory Day","region":"St. Barthélemy","date":"2025-05-08"},{"id":"20250529_56427uqusqtud16v14a7m391u0","status":"confirmed","summary":"Ascension Day","region":"St. Barthélemy","date":"2025-05-29"},{"id":"20250609_gfpdlcik31uoleqtkf96mgksac","status":"confirmed","summary":"Whit Monday","region":"St. Barthélemy","date":"2025-06-09"},{"id":"20250714_kluil7mu785grbcjrbbb9thp7o","status":"confirmed","summary":"French National Day","region":"St. Barthélemy","date":"2025-07-14"},{"id":"20250815_gnet1pg1um23muo4rjv47hqg38","status":"confirmed","summary":"Assumption of Mary","region":"St. Barthélemy","date":"2025-08-15"},{"id":"20251009_nlmue1i3kfqu52v0cvciqchdlg","status":"confirmed","summary":"Abolition Day","region":"St. Barthélemy","date":"2025-10-09"},{"id":"20251101_alu6pvncvq62d0606h1c7uco70","status":"confirmed","summary":"All Saints\' Day","region":"St. Barthélemy","date":"2025-11-01"},{"id":"20251111_4ivhi42kntfvksc36ho30a5n28","status":"confirmed","summary":"Armistice Day","region":"St. Barthélemy","date":"2025-11-11"},{"id":"20251225_79u9g42q13vs0h36qsvv4c87us","status":"confirmed","summary":"Christmas Day","region":"St. Barthélemy","date":"2025-12-25"},{"id":"20251226_3su8vh091j1vucicdphpiief7c","status":"confirmed","summary":"Boxing Day","region":"St. Barthélemy","date":"2025-12-26"}],"Bermuda":[{"id":"20240101_okhehkjq5n08r4nqlvg4l96l6g","status":"confirmed","summary":"New Year\'s Day","region":"Bermuda","date":"2024-01-01"},{"id":"20240214_nqag33hm22jjmarbs0r36uj4r8","status":"confirmed","summary":"Valentine\'s Day","region":"Bermuda","date":"2024-02-14"},{"id":"20240310_lhsi2jj4mkuqka07i9n3ltf9vo","status":"confirmed","summary":"Daylight Saving Time starts","region":"Bermuda","date":"2024-03-10"},{"id":"20240329_0sr33l8jt6o6pbv90tc5n9pakg","status":"confirmed","summary":"Good Friday","region":"Bermuda","date":"2024-03-29"},{"id":"20240331_jn6g4e379vl43kromsrj727sek","status":"confirmed","summary":"Easter Sunday","region":"Bermuda","date":"2024-03-31"},{"id":"20240512_ujugba50a6b48nat22257bmep8","status":"confirmed","summary":"Mothers\' Day","region":"Bermuda","date":"2024-05-12"},{"id":"20240524_eeure98hecmhrfdd61d07i6oh0","status":"confirmed","summary":"Bermuda Day","region":"Bermuda","date":"2024-05-24"},{"id":"20240616_ie8utt0rqdipjrlmdk1mdck18k","status":"confirmed","summary":"Fathers\' Day","region":"Bermuda","date":"2024-06-16"},{"id":"20240617_a4vr2mdua0bjdomh0lit646jls","status":"confirmed","summary":"National Heroes Day","region":"Bermuda","date":"2024-06-17"},{"id":"20240801_g3elnqipvg7u4acf9mc94olgbs","status":"confirmed","summary":"Emancipation Day","region":"Bermuda","date":"2024-08-01"},{"id":"20240802_l6qok0uhsfdcn9tcp91mooqtvc","status":"confirmed","summary":"Mary Prince Day","region":"Bermuda","date":"2024-08-02"},{"id":"20240902_fgksnc73pocgvs7ffa0f2og2uc","status":"confirmed","summary":"Labour Day","region":"Bermuda","date":"2024-09-02"},{"id":"20241031_2qtdk8qcnc9k1nlq6kmgtdo2jg","status":"confirmed","summary":"Halloween","region":"Bermuda","date":"2024-10-31"},{"id":"20241103_7qf3gtqe6d4rbvh0lcirajumbg","status":"confirmed","summary":"Daylight Saving Time ends","region":"Bermuda","date":"2024-11-03"},{"id":"20241111_rnvnaish68a0pu2seomjo665dk","status":"confirmed","summary":"Remembrance Day","region":"Bermuda","date":"2024-11-11"},{"id":"20241224_m6tgns5kgamc03ttnoi8n3ru7c","status":"confirmed","summary":"Christmas Eve","region":"Bermuda","date":"2024-12-24"},{"id":"20241225_lvr4pr37r97insl46tkslkvhbg","status":"confirmed","summary":"Christmas Day","region":"Bermuda","date":"2024-12-25"},{"id":"20241226_ocmh4a349f4q5483e7k4kb2t14","status":"confirmed","summary":"Boxing Day","region":"Bermuda","date":"2024-12-26"},{"id":"20241231_j9ae348murm7cublb5d04o5tp4","status":"confirmed","summary":"New Year\'s Eve","region":"Bermuda","date":"2024-12-31"},{"id":"20250101_0ris2bvug48fa4rj0rhe3knipg","status":"confirmed","summary":"New Year\'s Day","region":"Bermuda","date":"2025-01-01"},{"id":"20250214_sof47h13mk97u1plr5g1fdg41c","status":"confirmed","summary":"Valentine\'s Day","region":"Bermuda","date":"2025-02-14"},{"id":"20250309_ja7gn5h5ab902cuurn9lg0bbm0","status":"confirmed","summary":"Daylight Saving Time starts","region":"Bermuda","date":"2025-03-09"},{"id":"20250418_r1jk9kn9h6q3g2nutuc4ohtt28","status":"confirmed","summary":"Good Friday","region":"Bermuda","date":"2025-04-18"},{"id":"20250420_rum5sq4e804qglvickhautkpo4","status":"confirmed","summary":"Easter Sunday","region":"Bermuda","date":"2025-04-20"},{"id":"20250511_rmcacgoqaclkb1ul40rar3391g","status":"confirmed","summary":"Mothers\' Day","region":"Bermuda","date":"2025-05-11"},{"id":"20250523_p4so05c08ejbbivsnvc65a99vo","status":"confirmed","summary":"Bermuda Day","region":"Bermuda","date":"2025-05-23"},{"id":"20250615_pfs3ejr4tksircm43n7hreu9jc","status":"confirmed","summary":"Fathers\' Day","region":"Bermuda","date":"2025-06-15"},{"id":"20250616_l8b5dnb9gtdlctn2vp8j9q82hg","status":"confirmed","summary":"National Heroes Day","region":"Bermuda","date":"2025-06-16"},{"id":"20250731_d4vb05adlm5assdgjn3k8tski0","status":"confirmed","summary":"Emancipation Day","region":"Bermuda","date":"2025-07-31"},{"id":"20250801_al457a75u9ikjk1v1ruefrk2p8","status":"confirmed","summary":"Mary Prince Day","region":"Bermuda","date":"2025-08-01"},{"id":"20250901_kn8es7klbfo7indgqcvpggi1gs","status":"confirmed","summary":"Labour Day","region":"Bermuda","date":"2025-09-01"},{"id":"20251031_d7ts0e6c253cdq223fqoaii5gg","status":"confirmed","summary":"Halloween","region":"Bermuda","date":"2025-10-31"},{"id":"20251102_bu6viupfl4cqca7bo1t68ab20c","status":"confirmed","summary":"Daylight Saving Time ends","region":"Bermuda","date":"2025-11-02"},{"id":"20251111_62c077i643faqu7bcsdv5p3e1c","status":"confirmed","summary":"Remembrance Day","region":"Bermuda","date":"2025-11-11"},{"id":"20251224_i92pblh0vld1nspjt8r6uj69ak","status":"confirmed","summary":"Christmas Eve","region":"Bermuda","date":"2025-12-24"},{"id":"20251225_lr8ngi3th1ek0cuga3j8p2e8p8","status":"confirmed","summary":"Christmas Day","region":"Bermuda","date":"2025-12-25"},{"id":"20251226_vme6jach55i4ltjqthnl1vaok4","status":"confirmed","summary":"Boxing Day","region":"Bermuda","date":"2025-12-26"},{"id":"20251231_6acstc4hnjic8gu72cdo8c8vcc","status":"confirmed","summary":"New Year\'s Eve","region":"Bermuda","date":"2025-12-31"}],"Brunei":[{"id":"20240101_4fuaujpv9dl9cie02m6c3rfrb4","status":"confirmed","summary":"New Year\'s Day","region":"Brunei","date":"2024-01-01"},{"id":"20240208_2c9434krjq695qrdnuk02bknv0","status":"confirmed","summary":"Isra and Mi\'raj","region":"Brunei","date":"2024-02-08"},{"id":"20240210_is4v5r1jitd3mfhbrt246hrtu4","status":"confirmed","summary":"Lunar New Year","region":"Brunei","date":"2024-02-10"},{"id":"20240223_jbbso4qn9cq0njkio5rlsqdlmk","status":"confirmed","summary":"National Day","region":"Brunei","date":"2024-02-23"},{"id":"20240224_59t1esdfa6smla9hocnmkotq6o","status":"confirmed","summary":"Day off for National Day","region":"Brunei","date":"2024-02-24"},{"id":"20240312_0m4ao360id8cflhhp2382uovv4","status":"confirmed","summary":"Ramadan begins","region":"Brunei","date":"2024-03-12"},{"id":"20240328_1qr6ei25rpjrua8grju7aamleg","status":"confirmed","summary":"Nuzul Al-Qur\'an","region":"Brunei","date":"2024-03-28"},{"id":"20240410_i2qubf21r1e3lc96272p192qj0","status":"confirmed","summary":"Eid al-Fitr","region":"Brunei","date":"2024-04-10"},{"id":"20240411_mbp7dq1nt6144u0d83nq07gchg","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Brunei","date":"2024-04-11"},{"id":"20240412_lcsfvqfct1pj5rh1nh2eoerhh0","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Brunei","date":"2024-04-12"},{"id":"20240413_1m0s6o8re3susr0smie9hcjek8","status":"confirmed","summary":"Eid al-Fitr Holiday observed","region":"Brunei","date":"2024-04-13"},{"id":"20240531_mjihgr70ehjievrr9j38oc9rus","status":"confirmed","summary":"Royal Brunei Armed Forces Day","region":"Brunei","date":"2024-05-31"},{"id":"20240601_s4n8601s01q4g1pcvtm1g9lr44","status":"confirmed","summary":"Day off for Royal Brunei Armed Forces Day","region":"Brunei","date":"2024-06-01"},{"id":"20240617_qhuljblu5vdbcbc192l7vl301c","status":"confirmed","summary":"Eid al-Adha","region":"Brunei","date":"2024-06-17"},{"id":"20240707_vntnoa1aj9mebboetk4hehtfio","status":"confirmed","summary":"Muharram (Muslim New Year)","region":"Brunei","date":"2024-07-07"},{"id":"20240708_go5msv5069994rp507nsq3qvtc","status":"confirmed","summary":"Day off for Muharram (Muslim New Year)","region":"Brunei","date":"2024-07-08"},{"id":"20240715_b0oun3nm2ekto064uf5k7ecue0","status":"confirmed","summary":"Sultan\'s Birthday","region":"Brunei","date":"2024-07-15"},{"id":"20240916_fpjatnmouqoupovl7k11ur5fm4","status":"confirmed","summary":"Milad un Nabi (Mawlid)","region":"Brunei","date":"2024-09-16"},{"id":"20241225_31jkmrnj4kpa1fs04ut3u7v8p0","status":"confirmed","summary":"Christmas Day","region":"Brunei","date":"2024-12-25"},{"id":"20250101_asp5mod25e12un8e99srltp8ho","status":"confirmed","summary":"New Year\'s Day","region":"Brunei","date":"2025-01-01"},{"id":"20250127_jt55gk9dptfic87uc4i14rprjc","status":"confirmed","summary":"Isra and Mi\'raj","region":"Brunei","date":"2025-01-27"},{"id":"20250129_5hgep2hri4uktqmq5qciatnr08","status":"confirmed","summary":"Lunar New Year","region":"Brunei","date":"2025-01-29"},{"id":"20250223_gcbujb0mc7r65vvcp8hv3pgvjs","status":"confirmed","summary":"National Day","region":"Brunei","date":"2025-02-23"},{"id":"20250224_po4lq663jgc0chkjp4bpveq7ic","status":"confirmed","summary":"Day off for National Day","region":"Brunei","date":"2025-02-24"},{"id":"20250301_5sjj47bi9fui4b0prih3h6vna0","status":"confirmed","summary":"Ramadan begins","region":"Brunei","date":"2025-03-01"},{"id":"20250317_dib83ra5iqiptjp5vhtsv7vqvs","status":"confirmed","summary":"Nuzul Al-Qur\'an","region":"Brunei","date":"2025-03-17"},{"id":"20250331_f93b6fst52s59r7hokii25vldg","status":"confirmed","summary":"Eid al-Fitr","region":"Brunei","date":"2025-03-31"},{"id":"20250401_bhldttnmuskhauqiadbars52h4","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Brunei","date":"2025-04-01"},{"id":"20250402_k859o7bvnc0b8ngrkn6p1mdp68","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Brunei","date":"2025-04-02"},{"id":"20250531_m34d9t16ni30jtqtediedslsgs","status":"confirmed","summary":"Royal Brunei Armed Forces Day","region":"Brunei","date":"2025-05-31"},{"id":"20250607_sakdjpgrs55crio204c4sftnj0","status":"confirmed","summary":"Eid al-Adha","region":"Brunei","date":"2025-06-07"},{"id":"20250627_ftcq16018ihnneq85hr1n1vfng","status":"confirmed","summary":"Muharram (Muslim New Year)","region":"Brunei","date":"2025-06-27"},{"id":"20250628_9d4um7oe51mgif5q7ap982b2is","status":"confirmed","summary":"Day off for Muharram (Muslim New Year)","region":"Brunei","date":"2025-06-28"},{"id":"20250715_8m2pmk54j3sdni7i23a252o66k","status":"confirmed","summary":"Sultan\'s Birthday","region":"Brunei","date":"2025-07-15"},{"id":"20250905_0pdumhi99aqu1rf4v59i0i2u8o","status":"confirmed","summary":"Milad un Nabi (Mawlid)","region":"Brunei","date":"2025-09-05"},{"id":"20250906_l1rmo50snmakr0r04injolrh94","status":"confirmed","summary":"Milad un Nabi (Mawlid) observed","region":"Brunei","date":"2025-09-06"},{"id":"20251225_kkahq4cbqcgu9s0tmfbcoatrbs","status":"confirmed","summary":"Christmas Day","region":"Brunei","date":"2025-12-25"}],"Bolivia":[{"id":"20240101_h3sm7fft4jsa14qcv24dvff25s","status":"confirmed","summary":"New Year\'s Day","region":"Bolivia","date":"2024-01-01"},{"id":"20240106_5bckgtbn7ms8crcv35vs03huic","status":"confirmed","summary":"Epiphany","region":"Bolivia","date":"2024-01-06"},{"id":"20240122_im68kgapdp5mc3c38n6jd8qhv4","status":"confirmed","summary":"Plurinational State Foundation Day","region":"Bolivia","date":"2024-01-22"},{"id":"20240202_1nos6r5ecqbqfmqte8m3u2d6s0","status":"confirmed","summary":"Feast of Candelaria","region":"Bolivia","date":"2024-02-02"},{"id":"20240212_1ahhi5dqsi0822ur6jmoo8fpe4","status":"confirmed","summary":"Carnival / Shrove Monday","region":"Bolivia","date":"2024-02-12"},{"id":"20240213_stcisliqomaepvlo1ota4b30do","status":"confirmed","summary":"Carnival / Shrove Tuesday / Pancake Day","region":"Bolivia","date":"2024-02-13"},{"id":"20240319_gcnjk09idj9q7d8pa4comuu9jo","status":"confirmed","summary":"Father Day","region":"Bolivia","date":"2024-03-19"},{"id":"20240323_pdc492pgf9t36u6mu9thpcpa5g","status":"confirmed","summary":"Day of the Sea","region":"Bolivia","date":"2024-03-23"},{"id":"20240328_lucmi165a205fqce2fsb09vu0s","status":"confirmed","summary":"Maundy Thursday","region":"Bolivia","date":"2024-03-28"},{"id":"20240329_2solfimhum6tdh11rifcuoog98","status":"confirmed","summary":"Good Friday","region":"Bolivia","date":"2024-03-29"},{"id":"20240412_6d7ahsqmaceob5gaolr5r4d98o","status":"confirmed","summary":"Children\'s Day","region":"Bolivia","date":"2024-04-12"},{"id":"20240501_6cljhhffn0aojttpsvv5m2o17o","status":"confirmed","summary":"Labor Day / May Day","region":"Bolivia","date":"2024-05-01"},{"id":"20240527_eaf4u7n8fvehor1ug2fo02eajo","status":"confirmed","summary":"Mother\'s Day","region":"Bolivia","date":"2024-05-27"},{"id":"20240530_5hb4r2tr7nnss4d71vigqsct80","status":"confirmed","summary":"Corpus Christi","region":"Bolivia","date":"2024-05-30"},{"id":"20240621_ql5j14dj07cnebvu0jp4mqnpj4","status":"confirmed","summary":"Aymara New Year Day","region":"Bolivia","date":"2024-06-21"},{"id":"20240806_l0tqu8v3mrelaetenmau5srp0o","status":"confirmed","summary":"Independence Day","region":"Bolivia","date":"2024-08-06"},{"id":"20240817_008usl50hptabd36vg97vmmu5c","status":"confirmed","summary":"Flag Day","region":"Bolivia","date":"2024-08-17"},{"id":"20241011_pr8nrbreu9onhfmskd3ackk8us","status":"confirmed","summary":"Bolivian Women\'s Day","region":"Bolivia","date":"2024-10-11"},{"id":"20241012_pka9m0f9l83iko07tbc8oahssg","status":"confirmed","summary":"Day of Decolonization","region":"Bolivia","date":"2024-10-12"},{"id":"20241017_641et9l0kl2ntnva7vfh24p6j4","status":"confirmed","summary":"Day of Dignity","region":"Bolivia","date":"2024-10-17"},{"id":"20241102_6og08gtkepca31h6ovuuvgogc0","status":"confirmed","summary":"All Saints Day","region":"Bolivia","date":"2024-11-02"},{"id":"20241225_p9jlig648ivrdc7fv4fjf5jirk","status":"confirmed","summary":"Christmas Day","region":"Bolivia","date":"2024-12-25"},{"id":"20250101_giimt2sjqkutttomfq5af927vk","status":"confirmed","summary":"New Year\'s Day","region":"Bolivia","date":"2025-01-01"},{"id":"20250106_mnminjfj1fvio2560oepr4cr5g","status":"confirmed","summary":"Epiphany","region":"Bolivia","date":"2025-01-06"},{"id":"20250122_osuoa8ge8spn2va88puche8iqg","status":"confirmed","summary":"Plurinational State Foundation Day","region":"Bolivia","date":"2025-01-22"},{"id":"20250202_n040gh6cu880em6uiaignp52io","status":"confirmed","summary":"Feast of Candelaria","region":"Bolivia","date":"2025-02-02"},{"id":"20250303_ne5lgff970aepj18po4smfv74c","status":"confirmed","summary":"Carnival / Shrove Monday","region":"Bolivia","date":"2025-03-03"},{"id":"20250304_jagqjtkdub0q6ttqje2vln7748","status":"confirmed","summary":"Carnival / Shrove Tuesday / Pancake Day","region":"Bolivia","date":"2025-03-04"},{"id":"20250319_gjvpdb3keauodnstqt38t2s1rc","status":"confirmed","summary":"Father Day","region":"Bolivia","date":"2025-03-19"},{"id":"20250323_kktgitsmr60r91j8rlc5dk5scs","status":"confirmed","summary":"Day of the Sea","region":"Bolivia","date":"2025-03-23"},{"id":"20250412_32g3d0d2co4tegatgulhm9kaio","status":"confirmed","summary":"Children\'s Day","region":"Bolivia","date":"2025-04-12"},{"id":"20250417_3ofu8qk7b27vmo2b12ecmtajgc","status":"confirmed","summary":"Maundy Thursday","region":"Bolivia","date":"2025-04-17"},{"id":"20250418_3cj061ffbqprqi7c6d0o50t58o","status":"confirmed","summary":"Good Friday","region":"Bolivia","date":"2025-04-18"},{"id":"20250501_ufaqd8ebgp7ikjbd09l2jncknc","status":"confirmed","summary":"Labor Day / May Day","region":"Bolivia","date":"2025-05-01"},{"id":"20250527_eeqjk3t3vj3kjm7aiul1td9vf0","status":"confirmed","summary":"Mother\'s Day","region":"Bolivia","date":"2025-05-27"},{"id":"20250619_bjsu3101pietq4cn5mpuq7o2c0","status":"confirmed","summary":"Corpus Christi","region":"Bolivia","date":"2025-06-19"},{"id":"20250621_mnolv1s2e3htakba0sv6ttmoic","status":"confirmed","summary":"Aymara New Year Day","region":"Bolivia","date":"2025-06-21"},{"id":"20250806_b9s5s76jrotrqbpuci35g5iedo","status":"confirmed","summary":"Independence Day","region":"Bolivia","date":"2025-08-06"},{"id":"20250817_c8hl3heo45k5gbg8upvrtuico4","status":"confirmed","summary":"Flag Day","region":"Bolivia","date":"2025-08-17"},{"id":"20251011_30p61i2apk6mgukitlea7u1nm0","status":"confirmed","summary":"Bolivian Women\'s Day","region":"Bolivia","date":"2025-10-11"},{"id":"20251012_r3bj3d9q4m7gj1iq8gn78fpbkc","status":"confirmed","summary":"Day of Decolonization","region":"Bolivia","date":"2025-10-12"},{"id":"20251017_vbr7t2n1ietf1ntgh7k1nl35ak","status":"confirmed","summary":"Day of Dignity","region":"Bolivia","date":"2025-10-17"},{"id":"20251102_fm84p6e5iqqfri5ajrkf7i0fvg","status":"confirmed","summary":"All Saints Day","region":"Bolivia","date":"2025-11-02"},{"id":"20251225_gmfh30t8s56fbi1i2ub3e2aklo","status":"confirmed","summary":"Christmas Day","region":"Bolivia","date":"2025-12-25"}],"Brazil":[{"id":"20240101_eo22s517uvlca08ilflj6h3qis","status":"confirmed","summary":"New Year\'s Day","region":"Brazil","date":"2024-01-01"},{"id":"20240209_9ds2itej784fbafp6qlft0jlt8","status":"confirmed","summary":"Carnival Friday","region":"Brazil","date":"2024-02-09"},{"id":"20240210_c19bpj3vc71uq8rjjan4o6q500","status":"confirmed","summary":"Carnival Saturday","region":"Brazil","date":"2024-02-10"},{"id":"20240211_67jadd6fgbvjm4v5ei4ifejkdo","status":"confirmed","summary":"Carnival Sunday","region":"Brazil","date":"2024-02-11"},{"id":"20240212_pjraq4j4bno91qop8bj09bc2f0","status":"confirmed","summary":"Carnival Monday","region":"Brazil","date":"2024-02-12"},{"id":"20240213_vdqinluitvuihiguaov17obfdg","status":"confirmed","summary":"Carnival Tuesday","region":"Brazil","date":"2024-02-13"},{"id":"20240214_58jppu6p6k3gkbi0v5qontgsl8","status":"confirmed","summary":"Carnival end (until 2pm)","region":"Brazil","date":"2024-02-14"},{"id":"20240329_0mjbr5lag1vs2hp5it51shgtf8","status":"confirmed","summary":"Good Friday","region":"Brazil","date":"2024-03-29"},{"id":"20240331_63j6ks8efl3m9s3ossnqt7fig4","status":"confirmed","summary":"Easter Sunday","region":"Brazil","date":"2024-03-31"},{"id":"20240421_h9ol0hck7l1t805dt7cqbt869g","status":"confirmed","summary":"Tiradentes Day","region":"Brazil","date":"2024-04-21"},{"id":"20240501_qougsiqvplc02tvaf8bmntth08","status":"confirmed","summary":"Labor Day / May Day","region":"Brazil","date":"2024-05-01"},{"id":"20240512_94qtvfenn5j9bc39hvljctlt9c","status":"confirmed","summary":"Mother\'s Day","region":"Brazil","date":"2024-05-12"},{"id":"20240530_c7n6rugq33ql034sfkb2ta2km8","status":"confirmed","summary":"Corpus Christi","region":"Brazil","date":"2024-05-30"},{"id":"20240607_dc00qnoohskpguelo3uaimda9g","status":"confirmed","summary":"National Press Freedom Day","region":"Brazil","date":"2024-06-07"},{"id":"20240612_pg6htvkqke1ugta4e7u640m60o","status":"confirmed","summary":"Brazilian Valentine\'s Day","region":"Brazil","date":"2024-06-12"},{"id":"20240725_hjeo0h3ltps5hebl1kvrva1sc8","status":"confirmed","summary":"Latin and Caribbean Black Women Day","region":"Brazil","date":"2024-07-25"},{"id":"20240811_0jejt6th6golt5af1412888ang","status":"confirmed","summary":"Father\'s Day","region":"Brazil","date":"2024-08-11"},{"id":"20240907_lgp4b7t5qdk89osvp8t3qjug38","status":"confirmed","summary":"Independence Day","region":"Brazil","date":"2024-09-07"},{"id":"20241012_n013oo3tek8f828hrmsi4n0b9g","status":"confirmed","summary":"Our Lady of Aparecida / Children\'s Day","region":"Brazil","date":"2024-10-12"},{"id":"20241015_oqpbf92qnsjb7mussetttp29ps","status":"confirmed","summary":"Teacher\'s Day","region":"Brazil","date":"2024-10-15"},{"id":"20241028_vq297ka67o64mh6e729gnjk27k","status":"confirmed","summary":"Public Service Holiday","region":"Brazil","date":"2024-10-28"},{"id":"20241031_h5lei39ck3f3g7d32im6d5of9o","status":"confirmed","summary":"Saci Day","region":"Brazil","date":"2024-10-31"},{"id":"20241102_v98p9gfv9ob7ipotktv1uikpa0","status":"confirmed","summary":"All Souls\' Day","region":"Brazil","date":"2024-11-02"},{"id":"20241115_g67kq1eirdka8gdhlaklg0umv4","status":"confirmed","summary":"Republic Proclamation Day","region":"Brazil","date":"2024-11-15"},{"id":"20241120_48qj1ds58uem7qb8g0fh7asrgg","status":"confirmed","summary":"Black Awareness Day","region":"Brazil","date":"2024-11-20"},{"id":"20241224_uob20vnpa05a8emqg8f1d39i28","status":"confirmed","summary":"Christmas Eve (from 2pm)","region":"Brazil","date":"2024-12-24"},{"id":"20241225_u4molgrm3vqlj71kaog9a0bfdk","status":"confirmed","summary":"Christmas Day","region":"Brazil","date":"2024-12-25"},{"id":"20241231_482obj8op4dh2d46j75p0d1coc","status":"confirmed","summary":"New Year\'s Eve (from 2pm)","region":"Brazil","date":"2024-12-31"},{"id":"20250101_e58j2b8ljhkeq6p6vfnnhvtfck","status":"confirmed","summary":"New Year\'s Day","region":"Brazil","date":"2025-01-01"},{"id":"20250228_8mb0ai09cn6k0mjo42nuq3cdc8","status":"confirmed","summary":"Carnival Friday","region":"Brazil","date":"2025-02-28"},{"id":"20250301_pkg46btu1tvkkhujim82139mj4","status":"confirmed","summary":"Carnival Saturday","region":"Brazil","date":"2025-03-01"},{"id":"20250302_hq5mj030rb5tir4caecn5rkoh0","status":"confirmed","summary":"Carnival Sunday","region":"Brazil","date":"2025-03-02"},{"id":"20250303_7qv5gcifg7oor41f02gb741dng","status":"confirmed","summary":"Carnival Monday","region":"Brazil","date":"2025-03-03"},{"id":"20250304_tr6vb5blfl31sm1411uc2iaq1c","status":"confirmed","summary":"Carnival Tuesday","region":"Brazil","date":"2025-03-04"},{"id":"20250305_nvjn5qkegp4nrmu8gasljrrnvo","status":"confirmed","summary":"Carnival end (until 2pm)","region":"Brazil","date":"2025-03-05"},{"id":"20250418_qe020lci34mdrq8f32iaqgo9ko","status":"confirmed","summary":"Good Friday","region":"Brazil","date":"2025-04-18"},{"id":"20250420_2seuhofhqppk4hsg0vdasps43g","status":"confirmed","summary":"Easter Sunday","region":"Brazil","date":"2025-04-20"},{"id":"20250421_4f7hqkdpqhijdodtammvv7ke9o","status":"confirmed","summary":"Tiradentes Day","region":"Brazil","date":"2025-04-21"},{"id":"20250501_h69q7sb26qe0npdinauf2kp6tk","status":"confirmed","summary":"Labor Day / May Day","region":"Brazil","date":"2025-05-01"},{"id":"20250511_66kbmnictphel80t98elgh7h1c","status":"confirmed","summary":"Mother\'s Day","region":"Brazil","date":"2025-05-11"},{"id":"20250607_u480qbis4335glp5dcv208ulno","status":"confirmed","summary":"National Press Freedom Day","region":"Brazil","date":"2025-06-07"},{"id":"20250612_9thhqcua67v4ivuqvsod7qmm60","status":"confirmed","summary":"Brazilian Valentine\'s Day","region":"Brazil","date":"2025-06-12"},{"id":"20250619_pvoa5lvkujek32mkrndc7bdmuk","status":"confirmed","summary":"Corpus Christi","region":"Brazil","date":"2025-06-19"},{"id":"20250725_q840m2rnl5sp49o8tcp4aa1g38","status":"confirmed","summary":"Latin and Caribbean Black Women Day","region":"Brazil","date":"2025-07-25"},{"id":"20250810_5ln5vl2s4gg7vi76cfko6d32h4","status":"confirmed","summary":"Father\'s Day","region":"Brazil","date":"2025-08-10"},{"id":"20250907_6829j66t776h2b0e4dgq53ji0c","status":"confirmed","summary":"Independence Day","region":"Brazil","date":"2025-09-07"},{"id":"20251012_ep8166o5nlpg4dqlsr4a58bn9g","status":"confirmed","summary":"Our Lady of Aparecida / Children\'s Day","region":"Brazil","date":"2025-10-12"},{"id":"20251015_agfipn829c7rfavk59aq6toaak","status":"confirmed","summary":"Teacher\'s Day","region":"Brazil","date":"2025-10-15"},{"id":"20251028_6249ipelfop2n42cg0nko052sc","status":"confirmed","summary":"Public Service Holiday","region":"Brazil","date":"2025-10-28"},{"id":"20251031_gh3urahhncqbukltusbbac0mm8","status":"confirmed","summary":"Saci Day","region":"Brazil","date":"2025-10-31"},{"id":"20251102_tf3n2b8ppbeo9fsh9usi6do3u8","status":"confirmed","summary":"All Souls\' Day","region":"Brazil","date":"2025-11-02"},{"id":"20251115_g0dcipq5o9b5cb59i6gdc94fjg","status":"confirmed","summary":"Republic Proclamation Day","region":"Brazil","date":"2025-11-15"},{"id":"20251120_upbg1tdfmbmdt4tls9601v1lvs","status":"confirmed","summary":"Black Awareness Day","region":"Brazil","date":"2025-11-20"},{"id":"20251224_p5rsomar1ru5hefd5iohrrsbr0","status":"confirmed","summary":"Christmas Eve (from 2pm)","region":"Brazil","date":"2025-12-24"},{"id":"20251225_um7e4dr2pgsjime519mckuau5s","status":"confirmed","summary":"Christmas Day","region":"Brazil","date":"2025-12-25"},{"id":"20251231_nqrmoqmkrbksvg6nt7op96klu4","status":"confirmed","summary":"New Year\'s Eve (from 2pm)","region":"Brazil","date":"2025-12-31"}],"Bahamas":[{"id":"20240101_9evl4htf3flfi8n7b59juv52i8","status":"confirmed","summary":"New Year\'s Day","region":"Bahamas","date":"2024-01-01"},{"id":"20240110_itetl3ac8e8o05u50tkoo0eu00","status":"confirmed","summary":"Majority Rule Day","region":"Bahamas","date":"2024-01-10"},{"id":"20240214_3p6jp8nqmcu2t9j6kstbav10co","status":"confirmed","summary":"Valentine\'s Day","region":"Bahamas","date":"2024-02-14"},{"id":"20240310_vsgfl3n3a9s6pik8g6ef2g3914","status":"confirmed","summary":"Daylight Saving Time starts","region":"Bahamas","date":"2024-03-10"},{"id":"20240329_f8vrrtke31scs8lfkkph6okoag","status":"confirmed","summary":"Good Friday","region":"Bahamas","date":"2024-03-29"},{"id":"20240331_ah64r2n68vb269ohis2d687lp4","status":"confirmed","summary":"Easter Sunday","region":"Bahamas","date":"2024-03-31"},{"id":"20240401_4kh275uag65a99p8p09dvbqrdg","status":"confirmed","summary":"Easter Monday","region":"Bahamas","date":"2024-04-01"},{"id":"20240512_cq0o6kmolf259k9mtv6tok1bn8","status":"confirmed","summary":"Mothers\' Day","region":"Bahamas","date":"2024-05-12"},{"id":"20240519_u6p613ffn1l1qauqdac5f89jus","status":"confirmed","summary":"Whit Sunday","region":"Bahamas","date":"2024-05-19"},{"id":"20240520_34r4brek7lp3reg974kduugok4","status":"confirmed","summary":"Whit Monday","region":"Bahamas","date":"2024-05-20"},{"id":"20240607_mhrs03sceh5e1lt0m9fka4utso","status":"confirmed","summary":"Randol Fawkes Labour Day","region":"Bahamas","date":"2024-06-07"},{"id":"20240616_mqul20lrr4dl4man3c19i9avhg","status":"confirmed","summary":"Fathers\' Day","region":"Bahamas","date":"2024-06-16"},{"id":"20240710_lciu7tie1o1j0n46i87k1hv64c","status":"confirmed","summary":"Independence Day","region":"Bahamas","date":"2024-07-10"},{"id":"20240805_g3guek4ctq8idd2cs7tq5v31v4","status":"confirmed","summary":"Emancipation Day","region":"Bahamas","date":"2024-08-05"},{"id":"20241014_b6nk3l8droou1c5oqlv00gita4","status":"confirmed","summary":"National Heroes Day","region":"Bahamas","date":"2024-10-14"},{"id":"20241103_h71lj7m1hqabbp725d9n1pmkac","status":"confirmed","summary":"Daylight Saving Time ends","region":"Bahamas","date":"2024-11-03"},{"id":"20241224_ahs1s56o6hlaqnshrdsgurptro","status":"confirmed","summary":"Christmas Eve","region":"Bahamas","date":"2024-12-24"},{"id":"20241225_106ea8um6edal5ogc03mgvjrqk","status":"confirmed","summary":"Christmas Day","region":"Bahamas","date":"2024-12-25"},{"id":"20241226_0rki7rm13g0p2adlujregb2580","status":"confirmed","summary":"Boxing Day","region":"Bahamas","date":"2024-12-26"},{"id":"20241231_2jpm74hgc11taai01vn5g4ea5g","status":"confirmed","summary":"New Year\'s Eve","region":"Bahamas","date":"2024-12-31"},{"id":"20250101_g2e364880flthmvh1rvtm1bv40","status":"confirmed","summary":"New Year\'s Day","region":"Bahamas","date":"2025-01-01"},{"id":"20250110_tfl0vhor8bvnr8c08u48qgamug","status":"confirmed","summary":"Majority Rule Day","region":"Bahamas","date":"2025-01-10"},{"id":"20250214_vo5m7e956btu605q7bv1nbrqt8","status":"confirmed","summary":"Valentine\'s Day","region":"Bahamas","date":"2025-02-14"},{"id":"20250309_ec2mksdkr83fi8fjqa527821fo","status":"confirmed","summary":"Daylight Saving Time starts","region":"Bahamas","date":"2025-03-09"},{"id":"20250418_oljrlqgdb9jvnhdm8f91ljjrac","status":"confirmed","summary":"Good Friday","region":"Bahamas","date":"2025-04-18"},{"id":"20250420_thr7e0lh57532c2n6neq72cjv0","status":"confirmed","summary":"Easter Sunday","region":"Bahamas","date":"2025-04-20"},{"id":"20250421_tri7696f0b9cf5b4q1744pb0do","status":"confirmed","summary":"Easter Monday","region":"Bahamas","date":"2025-04-21"},{"id":"20250511_6aldk0ksfjroo6smt1niaft5dc","status":"confirmed","summary":"Mothers\' Day","region":"Bahamas","date":"2025-05-11"},{"id":"20250606_ok9u03ij02ffol7musu3h5ovgg","status":"confirmed","summary":"Randol Fawkes Labour Day","region":"Bahamas","date":"2025-06-06"},{"id":"20250608_9taot75127rtlp0lvljjn5rpbg","status":"confirmed","summary":"Whit Sunday","region":"Bahamas","date":"2025-06-08"},{"id":"20250609_a1bnctkoroevc9b00cl2m7pi6k","status":"confirmed","summary":"Whit Monday","region":"Bahamas","date":"2025-06-09"},{"id":"20250615_s7qlviiitgor5qsl008n3amjkc","status":"confirmed","summary":"Fathers\' Day","region":"Bahamas","date":"2025-06-15"},{"id":"20250710_8tdp02rsb895i89ruak1i4vgds","status":"confirmed","summary":"Independence Day","region":"Bahamas","date":"2025-07-10"},{"id":"20250804_op7mqfp00aib2inl6cbelivi10","status":"confirmed","summary":"Emancipation Day","region":"Bahamas","date":"2025-08-04"},{"id":"20251013_04t4dgr4tr1p45j9inp7tontmo","status":"confirmed","summary":"National Heroes Day","region":"Bahamas","date":"2025-10-13"},{"id":"20251102_duqtvbvf1cq67v7qdrvfaouqpg","status":"confirmed","summary":"Daylight Saving Time ends","region":"Bahamas","date":"2025-11-02"},{"id":"20251224_g5j3875s6linedulauhglnjl4o","status":"confirmed","summary":"Christmas Eve","region":"Bahamas","date":"2025-12-24"},{"id":"20251225_5h3ffj9h6efbulfqj52vnftoi0","status":"confirmed","summary":"Christmas Day","region":"Bahamas","date":"2025-12-25"},{"id":"20251226_37bv38vlinmvqut87r7h9rmobg","status":"confirmed","summary":"Boxing Day","region":"Bahamas","date":"2025-12-26"},{"id":"20251231_13n2a9d1ihpcarjmff215t48qo","status":"confirmed","summary":"New Year\'s Eve","region":"Bahamas","date":"2025-12-31"}],"Bhutan":[{"id":"20240103_kthpbtvdkbqg3lbp3kireghhlc","status":"confirmed","summary":"Winter Solstice (Nyilo)","region":"Bhutan","date":"2024-01-03"},{"id":"20240112_ifn0p9pp18fodetqk6h68oaqag","status":"confirmed","summary":"Traditional Day of Offerings","region":"Bhutan","date":"2024-01-12"},{"id":"20240210_ddr533m9llt8fpiqk691robi18","status":"confirmed","summary":"Losar (New Year)","region":"Bhutan","date":"2024-02-10"},{"id":"20240211_ck7u4m5i187hfd91ve08a8gi5o","status":"confirmed","summary":"Losar Holiday","region":"Bhutan","date":"2024-02-11"},{"id":"20240221_okhlghtc09rdjm7spvb3dt9i58","status":"confirmed","summary":"King\'s Birthday","region":"Bhutan","date":"2024-02-21"},{"id":"20240222_s0kh3fqc90lni7l9a2klips8ag","status":"confirmed","summary":"King\'s Birthday Holiday","region":"Bhutan","date":"2024-02-22"},{"id":"20240223_ljcs6vbg3v5uvdjbabvhc0pe4o","status":"confirmed","summary":"King\'s Birthday Holiday","region":"Bhutan","date":"2024-02-23"},{"id":"20240418_cmp6q3l8ke232hdvngjtkr3t3s","status":"confirmed","summary":"Death Anniversary of Zhabdrung (Zhabdrung Kuchoe)","region":"Bhutan","date":"2024-04-18"},{"id":"20240502_4pq5e8igqrbicn6nh3it2ha6fg","status":"confirmed","summary":"Birth Anniversary of Third Druk Gyalpo","region":"Bhutan","date":"2024-05-02"},{"id":"20240523_aoldunrofn2ionvtcnoocjs6u0","status":"confirmed","summary":"Buddha\'s Parinirvana","region":"Bhutan","date":"2024-05-23"},{"id":"20240616_hi91lvvpunbn52kikg6nv7g6gk","status":"confirmed","summary":"Birth Anniversary of Guru Rinpoche","region":"Bhutan","date":"2024-06-16"},{"id":"20240710_7lmr5vc69gost9adulqujqvia4","status":"confirmed","summary":"Buddha\'s First Sermon","region":"Bhutan","date":"2024-07-10"},{"id":"20240923_lgkpqpame4744f5ural4jp1r3k","status":"confirmed","summary":"Blessed Rainy Day","region":"Bhutan","date":"2024-09-23"},{"id":"20241012_k5ccgqhqn5it2ieka47ub6fljo","status":"confirmed","summary":"Dashain","region":"Bhutan","date":"2024-10-12"},{"id":"20241101_kiu6jf357o11iu8d3rl8geiq2o","status":"confirmed","summary":"King Jigme Khesar Namgyel\'s Coronation","region":"Bhutan","date":"2024-11-01"},{"id":"20241111_e8m4gj75t3tlfl1qn7bb82hfqs","status":"confirmed","summary":"Birth Anniversary of the Fourth Druk Gyalpo","region":"Bhutan","date":"2024-11-11"},{"id":"20241122_043uqdc0tnh478r532jltpp8gs","status":"confirmed","summary":"Descending Day of Lord Buddha","region":"Bhutan","date":"2024-11-22"},{"id":"20241217_p9fob2guhdvmqmhcusijmbophc","status":"confirmed","summary":"National Day","region":"Bhutan","date":"2024-12-17"}],"Bulgaria":[{"id":"20240101_0euhpjkrnafrao7flnl1c8vdh8","status":"confirmed","summary":"New Year\'s Day","region":"Bulgaria","date":"2024-01-01"},{"id":"20240201_rqfogmpnm10pblqdh6tl0ffb14","status":"confirmed","summary":"Day of Remembrance and Respect to Victims of the Communist Regime","region":"Bulgaria","date":"2024-02-01"},{"id":"20240301_780ijgmnacruqgfh34g0iahla4","status":"confirmed","summary":"Baba Marta","region":"Bulgaria","date":"2024-03-01"},{"id":"20240303_8b3737j2mf2ri7rbn9te77v7rc","status":"confirmed","summary":"Liberation Day","region":"Bulgaria","date":"2024-03-03"},{"id":"20240304_a7v4tnmq07bit3ep135jhikrk8","status":"confirmed","summary":"Day off for Liberation Day","region":"Bulgaria","date":"2024-03-04"},{"id":"20240308_cohfgogljfkhlep8egc9tnj9nk","status":"confirmed","summary":"Mother’s Day","region":"Bulgaria","date":"2024-03-08"},{"id":"20240331_grt4c03nvcs1avfeee0efn62u8","status":"confirmed","summary":"Daylight Saving Time starts","region":"Bulgaria","date":"2024-03-31"},{"id":"20240501_liglrt059oekg1vb4q993i4504","status":"confirmed","summary":"Labor Day","region":"Bulgaria","date":"2024-05-01"},{"id":"20240503_s8llgkrh63ng5cgp74gdpj7oi8","status":"confirmed","summary":"Good Friday","region":"Bulgaria","date":"2024-05-03"},{"id":"20240504_2j71j5ch4o5ev2dg0k1bshavns","status":"confirmed","summary":"Holy Saturday","region":"Bulgaria","date":"2024-05-04"},{"id":"20240505_gq9q9e7518esmqbnklsg3fvn68","status":"confirmed","summary":"Easter Sunday","region":"Bulgaria","date":"2024-05-05"},{"id":"20240506_aollvmfdg3sqsua6m6g1jp80a8","status":"confirmed","summary":"Easter Monday","region":"Bulgaria","date":"2024-05-06"},{"id":"20240506_kt33dhff5ocoi60ratu4p85tfk","status":"confirmed","summary":"St. George\'s Day","region":"Bulgaria","date":"2024-05-06"},{"id":"20240524_v81ktjb4ioejo16mmbqf52tg6o","status":"confirmed","summary":"Culture and Literacy Day","region":"Bulgaria","date":"2024-05-24"},{"id":"20240701_ti0g27pqiegcjjq1bg3t0cnk64","status":"confirmed","summary":"July Morning","region":"Bulgaria","date":"2024-07-01"},{"id":"20240906_qofvacsfo23b0pt1p6bgrmt8m4","status":"confirmed","summary":"Unification Day","region":"Bulgaria","date":"2024-09-06"},{"id":"20240922_v5s2au3um995jem5l38gr8s0b4","status":"confirmed","summary":"Independence Day","region":"Bulgaria","date":"2024-09-22"},{"id":"20240923_412b26f2pnppi0me53tr6h4v34","status":"confirmed","summary":"Day off for Independence Day","region":"Bulgaria","date":"2024-09-23"},{"id":"20241027_fvr3j41qfprn45ndk4ctjm63gg","status":"confirmed","summary":"Daylight Saving Time ends","region":"Bulgaria","date":"2024-10-27"},{"id":"20241101_djnljf97i4clobri7u1qnpmcng","status":"confirmed","summary":"Revival Day","region":"Bulgaria","date":"2024-11-01"},{"id":"20241224_tj45h84et8i8pk3d6nkahnsni0","status":"confirmed","summary":"Christmas Eve","region":"Bulgaria","date":"2024-12-24"},{"id":"20241225_gm3n8a70gjbb0ilv87v69nat34","status":"confirmed","summary":"Christmas Day","region":"Bulgaria","date":"2024-12-25"},{"id":"20241226_bemn85kidbtq4b0735gtf99rco","status":"confirmed","summary":"Second day of Christmas","region":"Bulgaria","date":"2024-12-26"},{"id":"20241226_ufb62htfigqr3phudt6ckgq9n0","status":"confirmed","summary":"Father’s Day","region":"Bulgaria","date":"2024-12-26"},{"id":"20250101_er21r6mob2rp75mtc4jn1g2quk","status":"confirmed","summary":"New Year\'s Day","region":"Bulgaria","date":"2025-01-01"},{"id":"20250201_gup8qdi2lm5842b4k0te7809tk","status":"confirmed","summary":"Day of Remembrance and Respect to Victims of the Communist Regime","region":"Bulgaria","date":"2025-02-01"},{"id":"20250301_u0ab1cbmrvou7ek17gv3ui17mc","status":"confirmed","summary":"Baba Marta","region":"Bulgaria","date":"2025-03-01"},{"id":"20250303_emb35l88ienqupnds833n94fik","status":"confirmed","summary":"Liberation Day","region":"Bulgaria","date":"2025-03-03"},{"id":"20250308_ge2scbc1f1cs9c95vhofva0vq0","status":"confirmed","summary":"Mother’s Day","region":"Bulgaria","date":"2025-03-08"},{"id":"20250330_dea8nr701oqlf00jehbfl4sf3o","status":"confirmed","summary":"Daylight Saving Time starts","region":"Bulgaria","date":"2025-03-30"},{"id":"20250418_nrfbr7na11durq0dk8h3q1qjoc","status":"confirmed","summary":"Good Friday","region":"Bulgaria","date":"2025-04-18"},{"id":"20250419_776ivijfsd7ju38cih3iqdfbog","status":"confirmed","summary":"Holy Saturday","region":"Bulgaria","date":"2025-04-19"},{"id":"20250420_24tmgqaebpam5itussjf6d2jls","status":"confirmed","summary":"Easter Sunday","region":"Bulgaria","date":"2025-04-20"},{"id":"20250421_ln2bgvi8vjqv9iv2cg0cdmo634","status":"confirmed","summary":"Easter Monday","region":"Bulgaria","date":"2025-04-21"},{"id":"20250501_o811979q4lf0ee4ckhlucpm4dg","status":"confirmed","summary":"Labor Day","region":"Bulgaria","date":"2025-05-01"},{"id":"20250506_25rvtvtt8o2rtp7oosp9qnl1pc","status":"confirmed","summary":"St. George\'s Day","region":"Bulgaria","date":"2025-05-06"},{"id":"20250524_0o9hfbp3202nt4cjadkqkai95k","status":"confirmed","summary":"Culture and Literacy Day","region":"Bulgaria","date":"2025-05-24"},{"id":"20250526_vgmar5k97d2uvp8p36qv1pglog","status":"confirmed","summary":"Day off for Culture and Literacy Day","region":"Bulgaria","date":"2025-05-26"},{"id":"20250701_t8tos0kq95n533l99s6lo4hk0g","status":"confirmed","summary":"July Morning","region":"Bulgaria","date":"2025-07-01"},{"id":"20250906_26ob2eck4frh8uabfqgj0jeba4","status":"confirmed","summary":"Unification Day","region":"Bulgaria","date":"2025-09-06"},{"id":"20250908_57e5o9pnnvgnrsrq3tmvr2pt7k","status":"confirmed","summary":"Day off for Unification Day","region":"Bulgaria","date":"2025-09-08"},{"id":"20250922_ptu28imhc9075jt9tjdt3ni92c","status":"confirmed","summary":"Independence Day","region":"Bulgaria","date":"2025-09-22"},{"id":"20251026_4jck78fh49b2nsunspr8phmh2k","status":"confirmed","summary":"Daylight Saving Time ends","region":"Bulgaria","date":"2025-10-26"},{"id":"20251101_i4csds40b5j8iohmqdmldlh37k","status":"confirmed","summary":"Revival Day","region":"Bulgaria","date":"2025-11-01"},{"id":"20251224_v0k5qh5sau1qqp5ta5asb8hi0g","status":"confirmed","summary":"Christmas Eve","region":"Bulgaria","date":"2025-12-24"},{"id":"20251225_huo7gdsn8jjnn0v2tjg5tn8l6g","status":"confirmed","summary":"Christmas Day","region":"Bulgaria","date":"2025-12-25"},{"id":"20251226_1mcn2tih5b5dupigab4ra9q0rs","status":"confirmed","summary":"Father’s Day","region":"Bulgaria","date":"2025-12-26"},{"id":"20251226_ccjcq58rd3a5mochvo0dik1oc0","status":"confirmed","summary":"Second day of Christmas","region":"Bulgaria","date":"2025-12-26"}],"Botswana":[{"id":"20240101_bj4udrose38br52ndii221lig8","status":"confirmed","summary":"New Year\'s Day","region":"Botswana","date":"2024-01-01"},{"id":"20240102_ve54u79lv7arhaall50l7j7bjg","status":"confirmed","summary":"New Year Holiday","region":"Botswana","date":"2024-01-02"},{"id":"20240329_1ci7ajkisevgvcpi6biq0kg00g","status":"confirmed","summary":"Good Friday","region":"Botswana","date":"2024-03-29"},{"id":"20240330_vlch1qfsppu6emb77v7f63o57k","status":"confirmed","summary":"Holy Saturday","region":"Botswana","date":"2024-03-30"},{"id":"20240401_t2iv8jvi90nnd55ggtlilonpe8","status":"confirmed","summary":"Easter Monday","region":"Botswana","date":"2024-04-01"},{"id":"20240501_omcasa5hnb7vftnbujqmg9gklg","status":"confirmed","summary":"Labour Day","region":"Botswana","date":"2024-05-01"},{"id":"20240509_1ubao146e5rldmtekog55d09s8","status":"confirmed","summary":"Ascension Day","region":"Botswana","date":"2024-05-09"},{"id":"20240512_d18qjpiplrns9fnus446e3mq2o","status":"confirmed","summary":"Mother\'s Day","region":"Botswana","date":"2024-05-12"},{"id":"20240616_n9uelj1f4sdagf8sliq1haq76k","status":"confirmed","summary":"Father\'s Day","region":"Botswana","date":"2024-06-16"},{"id":"20240701_b33a4a0bbvursm5jm8066u3ejc","status":"confirmed","summary":"Sir Seretse Khama Day","region":"Botswana","date":"2024-07-01"},{"id":"20240715_80eqsao275m6ua3qrp7825p258","status":"confirmed","summary":"President\'s Day","region":"Botswana","date":"2024-07-15"},{"id":"20240716_jvv1ak17insovi5s869ai6f27s","status":"confirmed","summary":"President\'s Day Holiday","region":"Botswana","date":"2024-07-16"},{"id":"20240930_fgub21bf9gqkpevgnrkup0msl0","status":"confirmed","summary":"Botswana Day","region":"Botswana","date":"2024-09-30"},{"id":"20241001_mbihfg0p1u8nu05q1c00rm8j3c","status":"confirmed","summary":"Botswana Day Holiday","region":"Botswana","date":"2024-10-01"},{"id":"20241225_1ibl4t7cqvbnqu7jn7h2h2jdhc","status":"confirmed","summary":"Christmas Day","region":"Botswana","date":"2024-12-25"},{"id":"20241226_fn8nqkar0a84ro9dq4eaostp9k","status":"confirmed","summary":"Boxing Day","region":"Botswana","date":"2024-12-26"},{"id":"20250101_lr6af91vig65tdkhi6m1mlnr1o","status":"confirmed","summary":"New Year\'s Day","region":"Botswana","date":"2025-01-01"},{"id":"20250102_9b0lc90m5o4oc8ig6g21sqump8","status":"confirmed","summary":"New Year Holiday","region":"Botswana","date":"2025-01-02"},{"id":"20250418_36pdbsef5g6l9s7aqf14f8apto","status":"confirmed","summary":"Good Friday","region":"Botswana","date":"2025-04-18"},{"id":"20250419_2gdatoocmogue4eqmbv5t7h2co","status":"confirmed","summary":"Holy Saturday","region":"Botswana","date":"2025-04-19"},{"id":"20250421_ndl4b39471baqh6hcjv9fddpes","status":"confirmed","summary":"Easter Monday","region":"Botswana","date":"2025-04-21"},{"id":"20250501_u3qg1bminjg27k87f695cecf2c","status":"confirmed","summary":"Labour Day","region":"Botswana","date":"2025-05-01"},{"id":"20250511_taa134shcgskammoplp33l50rs","status":"confirmed","summary":"Mother\'s Day","region":"Botswana","date":"2025-05-11"},{"id":"20250529_mvm4jovbc677ro7l2uon4iqd88","status":"confirmed","summary":"Ascension Day","region":"Botswana","date":"2025-05-29"},{"id":"20250615_bfsa865p3hukp85q1qo6mlggro","status":"confirmed","summary":"Father\'s Day","region":"Botswana","date":"2025-06-15"},{"id":"20250701_8boa6e71lasbcrehr56cjdgglc","status":"confirmed","summary":"Sir Seretse Khama Day","region":"Botswana","date":"2025-07-01"},{"id":"20250721_k3eoit0f61moi8l59qti1mksv0","status":"confirmed","summary":"President\'s Day","region":"Botswana","date":"2025-07-21"},{"id":"20250722_1btmprbhtq6kapk9eg8n67rhkg","status":"confirmed","summary":"President\'s Day Holiday","region":"Botswana","date":"2025-07-22"},{"id":"20250930_snvgkverkj1kq4jk1rj29jht0g","status":"confirmed","summary":"Botswana Day","region":"Botswana","date":"2025-09-30"},{"id":"20251001_bnbg15kct39v1fjpeieikoc7us","status":"confirmed","summary":"Botswana Day Holiday","region":"Botswana","date":"2025-10-01"},{"id":"20251225_kavmrml1nc24dtddsbo7ckjnhs","status":"confirmed","summary":"Christmas Day","region":"Botswana","date":"2025-12-25"},{"id":"20251226_14k0ila7talnh84gdju72tqjso","status":"confirmed","summary":"Boxing Day","region":"Botswana","date":"2025-12-26"}],"Belarus":[{"id":"20240101_anututc750gj3vf7icj1ascjvo","status":"confirmed","summary":"New Year\'s Day","region":"Belarus","date":"2024-01-01"},{"id":"20240102_thdmvsjmuqvmevbu89cb1dvvco","status":"confirmed","summary":"New Year Holiday","region":"Belarus","date":"2024-01-02"},{"id":"20240107_h66rt5jqmtbn4ltu6v9oat99b8","status":"confirmed","summary":"Orthodox Christmas Day","region":"Belarus","date":"2024-01-07"},{"id":"20240223_jjkhiiv3c042hs8o427n2v4gus","status":"confirmed","summary":"Defender of the Fatherland Day","region":"Belarus","date":"2024-02-23"},{"id":"20240308_orq7bfr0di6k12ic27avugouec","status":"confirmed","summary":"Women\'s Day","region":"Belarus","date":"2024-03-08"},{"id":"20240315_i6p5bkll0n955qghnvtd4pj2kk","status":"confirmed","summary":"Constitution Day","region":"Belarus","date":"2024-03-15"},{"id":"20240331_e4nhdbp8h8q7norib8vtpg87d4","status":"confirmed","summary":"Catholic Easter Sunday","region":"Belarus","date":"2024-03-31"},{"id":"20240402_5n09k9eem8ng41vrh3m0hphtog","status":"confirmed","summary":"Union Day of Belarus and Russia","region":"Belarus","date":"2024-04-02"},{"id":"20240426_cd56n78uuj0lijl2sn6dkk4lgo","status":"confirmed","summary":"Day of Remembrance of the Chernobyl Tragedy","region":"Belarus","date":"2024-04-26"},{"id":"20240501_tej8rdnug933qnki39t0d1ul1g","status":"confirmed","summary":"Labour Day","region":"Belarus","date":"2024-05-01"},{"id":"20240505_tl1skbf0q8hh082mcpro2id034","status":"confirmed","summary":"Orthodox Easter Sunday","region":"Belarus","date":"2024-05-05"},{"id":"20240509_r30urho5erc7ph7kssn6u0trpg","status":"confirmed","summary":"Victory Day","region":"Belarus","date":"2024-05-09"},{"id":"20240512_radkk9n26ueqs365l9e411gvbk","status":"confirmed","summary":"Day of the National Emblem and Flag of Belarus","region":"Belarus","date":"2024-05-12"},{"id":"20240514_07ijg2mu9plul09ejofoitdgao","status":"confirmed","summary":"Radonitsa","region":"Belarus","date":"2024-05-14"},{"id":"20240622_m3u3beichmsj6s7k7mub8092ic","status":"confirmed","summary":"Remembrance Day of Victims of the Great Patriotic War","region":"Belarus","date":"2024-06-22"},{"id":"20240703_ib163b4ohtrpdmgqpedbfd677k","status":"confirmed","summary":"Independence Day of the Republic of Belarus","region":"Belarus","date":"2024-07-03"},{"id":"20240706_b4ngt4j3kfg18da0jo7uk0apgg","status":"confirmed","summary":"Kupalle (Day 1)","region":"Belarus","date":"2024-07-06"},{"id":"20240707_jhsjp05abcsnu36hfud7ipqdvo","status":"confirmed","summary":"Kupalle (Day 2)","region":"Belarus","date":"2024-07-07"},{"id":"20240917_3qghrtef4cu68bnpd7quk3ml8k","status":"confirmed","summary":"National Unity Day","region":"Belarus","date":"2024-09-17"},{"id":"20241021_0imc3hfpoi9q9808t3qofnisf0","status":"confirmed","summary":"Fathers\' Day","region":"Belarus","date":"2024-10-21"},{"id":"20241102_dhedk8p7i0hjfi8gdpssme5mvo","status":"confirmed","summary":"Remembrance Day","region":"Belarus","date":"2024-11-02"},{"id":"20241107_664boasdmn2b9icios0ntktcpo","status":"confirmed","summary":"October Revolution Day","region":"Belarus","date":"2024-11-07"},{"id":"20241225_o2tgk3vsurgvjf30kvgo4c3nus","status":"confirmed","summary":"Catholic Christmas Day","region":"Belarus","date":"2024-12-25"},{"id":"20241231_7qcgr1umbp3soc8tiaic9bq3cg","status":"confirmed","summary":"New Year\'s Eve","region":"Belarus","date":"2024-12-31"},{"id":"20250101_pqsv7hiinq26vvg7r2e4l1p5fc","status":"confirmed","summary":"New Year\'s Day","region":"Belarus","date":"2025-01-01"},{"id":"20250102_nt7nnnoipffugv01fsqr25g11g","status":"confirmed","summary":"New Year Holiday","region":"Belarus","date":"2025-01-02"},{"id":"20250107_mgmbepsaa2a2dgo8cn2q4ean5g","status":"confirmed","summary":"Orthodox Christmas Day","region":"Belarus","date":"2025-01-07"},{"id":"20250223_j9ghj7jlg3pjt70o9mtj8ins9k","status":"confirmed","summary":"Defender of the Fatherland Day","region":"Belarus","date":"2025-02-23"},{"id":"20250308_pmbtdqgon05v1813cbh1c5j28o","status":"confirmed","summary":"Women\'s Day","region":"Belarus","date":"2025-03-08"},{"id":"20250315_4mb40k8q3cnj1ogd5fdijif5ec","status":"confirmed","summary":"Constitution Day","region":"Belarus","date":"2025-03-15"},{"id":"20250402_g4g9f0g10nesuht4up5qv8svqk","status":"confirmed","summary":"Union Day of Belarus and Russia","region":"Belarus","date":"2025-04-02"},{"id":"20250420_14pi3835p2abnul5a86upklvfo","status":"confirmed","summary":"Orthodox Easter Sunday","region":"Belarus","date":"2025-04-20"},{"id":"20250420_7nmj106tebsr0ljipfr7valkuo","status":"confirmed","summary":"Catholic Easter Sunday","region":"Belarus","date":"2025-04-20"},{"id":"20250426_ogbgcdba6kot6pv16biamrp55k","status":"confirmed","summary":"Day of Remembrance of the Chernobyl Tragedy","region":"Belarus","date":"2025-04-26"},{"id":"20250501_sevutass4uljv2hjujog23bf6s","status":"confirmed","summary":"Labour Day","region":"Belarus","date":"2025-05-01"},{"id":"20250509_j7djh1bj6tfpd4va9r528vdmes","status":"confirmed","summary":"Victory Day","region":"Belarus","date":"2025-05-09"},{"id":"20250511_porf9q42t4ummn9jqaqf396cts","status":"confirmed","summary":"Day of the National Emblem and Flag of Belarus","region":"Belarus","date":"2025-05-11"},{"id":"20250622_4v16pnvsnj9uaektiul4d3i2ck","status":"confirmed","summary":"Remembrance Day of Victims of the Great Patriotic War","region":"Belarus","date":"2025-06-22"},{"id":"20250703_86as6eembuu30fegir783dic3g","status":"confirmed","summary":"Independence Day of the Republic of Belarus","region":"Belarus","date":"2025-07-03"},{"id":"20250706_4kql5445io88kechja7cdnbklg","status":"confirmed","summary":"Kupalle (Day 1)","region":"Belarus","date":"2025-07-06"},{"id":"20250707_f1pf7n4k18nd2t252bd9fb77j0","status":"confirmed","summary":"Kupalle (Day 2)","region":"Belarus","date":"2025-07-07"},{"id":"20250917_tnip5rthi5ppq73g1ma66548ro","status":"confirmed","summary":"National Unity Day","region":"Belarus","date":"2025-09-17"},{"id":"20251021_1cq4c5j5smp08g5n22pq2ajftc","status":"confirmed","summary":"Fathers\' Day","region":"Belarus","date":"2025-10-21"},{"id":"20251102_v7ank97msvfds7v050k19n824s","status":"confirmed","summary":"Remembrance Day","region":"Belarus","date":"2025-11-02"},{"id":"20251107_1od6h904eqft48hjqgpvhb8n88","status":"confirmed","summary":"October Revolution Day","region":"Belarus","date":"2025-11-07"},{"id":"20251225_9ajqoque6j14aeqgjuoe21j0vg","status":"confirmed","summary":"Catholic Christmas Day","region":"Belarus","date":"2025-12-25"},{"id":"20251231_esu01be97ot8mu0rdnkkf2kc0o","status":"confirmed","summary":"New Year\'s Eve","region":"Belarus","date":"2025-12-31"}],"Belize":[{"id":"20240101_qca2aa2cotebhsmg57ht9ckn54","status":"confirmed","summary":"New Year\'s Day","region":"Belize","date":"2024-01-01"},{"id":"20240115_qq8btugd93nqvlqesq575rq960","status":"confirmed","summary":"George Price Day","region":"Belize","date":"2024-01-15"},{"id":"20240309_dm31l341ct57cgv9lr55aauip0","status":"confirmed","summary":"National Heroes and Benefactors Day","region":"Belize","date":"2024-03-09"},{"id":"20240311_p4dr8irq38inq9asq5tn8p483k","status":"confirmed","summary":"Day off for National Heroes and Benefactors Day","region":"Belize","date":"2024-03-11"},{"id":"20240329_7kg2mdjbtrp5roja6s7d8l2c7o","status":"confirmed","summary":"Good Friday","region":"Belize","date":"2024-03-29"},{"id":"20240330_cmncub1eg7q61qqum4445lmadc","status":"confirmed","summary":"Holy Saturday","region":"Belize","date":"2024-03-30"},{"id":"20240331_qdvob2k8u3qcg2o20bljnekhb8","status":"confirmed","summary":"Easter Sunday","region":"Belize","date":"2024-03-31"},{"id":"20240401_nbebj42btoiir80o53n54ibm28","status":"confirmed","summary":"Easter Monday","region":"Belize","date":"2024-04-01"},{"id":"20240429_n8editajjdpkb16tq6afaoe8cc","status":"confirmed","summary":"Day off for Labor Day / May Day","region":"Belize","date":"2024-04-29"},{"id":"20240501_kfnf245nom01khjbeadki6bcr0","status":"confirmed","summary":"Labor Day / May Day","region":"Belize","date":"2024-05-01"},{"id":"20240801_ps770i56m9po1ss9vmkoo3fn68","status":"confirmed","summary":"Emancipation Day","region":"Belize","date":"2024-08-01"},{"id":"20240910_ma1h91moipbvor8kiivbonjkhg","status":"confirmed","summary":"St. George\'s Caye Day","region":"Belize","date":"2024-09-10"},{"id":"20240921_48lf8n5i84r25jcjsfa06ga8io","status":"confirmed","summary":"Independence Day","region":"Belize","date":"2024-09-21"},{"id":"20241012_ehee2dub55ct384bodfmurrm44","status":"confirmed","summary":"El Día de la Raza","region":"Belize","date":"2024-10-12"},{"id":"20241014_1er88d8gllobkdpv6rsop2ulqo","status":"confirmed","summary":"Day off for El Día de la Raza","region":"Belize","date":"2024-10-14"},{"id":"20241119_h4tksjg6crs6472mvejersji78","status":"confirmed","summary":"Garifuna Settlement Day","region":"Belize","date":"2024-11-19"},{"id":"20241225_bbhsivtekndiq2fastgd4234n0","status":"confirmed","summary":"Christmas Day","region":"Belize","date":"2024-12-25"},{"id":"20241226_hhe1ks6phk9qcjau5sigeu2ctk","status":"confirmed","summary":"Boxing Day","region":"Belize","date":"2024-12-26"},{"id":"20250101_1e7g16vqek53mtinefnuccv8d4","status":"confirmed","summary":"New Year\'s Day","region":"Belize","date":"2025-01-01"},{"id":"20250115_ouojahq3evomei26099njlumeg","status":"confirmed","summary":"George Price Day","region":"Belize","date":"2025-01-15"},{"id":"20250309_skli3svnh8tnpjssrohccbcuuo","status":"confirmed","summary":"National Heroes and Benefactors Day","region":"Belize","date":"2025-03-09"},{"id":"20250310_4ht0i3nibj5num8rutonb1jeq4","status":"confirmed","summary":"Day off for National Heroes and Benefactors Day","region":"Belize","date":"2025-03-10"},{"id":"20250418_6ths0gh5c815ulspn2d37pme1s","status":"confirmed","summary":"Good Friday","region":"Belize","date":"2025-04-18"},{"id":"20250419_j5j0p5h42qopmi6ltl6m54ef0g","status":"confirmed","summary":"Holy Saturday","region":"Belize","date":"2025-04-19"},{"id":"20250420_dfb7l5m9f2rfhqcbuh8palho6o","status":"confirmed","summary":"Easter Sunday","region":"Belize","date":"2025-04-20"},{"id":"20250421_46fd8a8hn42p15h5nhfi3ano7k","status":"confirmed","summary":"Easter Monday","region":"Belize","date":"2025-04-21"},{"id":"20250501_d9013rihb1viq0dtml80tcon0k","status":"confirmed","summary":"Labor Day / May Day","region":"Belize","date":"2025-05-01"},{"id":"20250801_7j059vnnacqd8t5h4sr21tr4ck","status":"confirmed","summary":"Emancipation Day","region":"Belize","date":"2025-08-01"},{"id":"20250910_tm4c1errrmmg1u39vhfunr5ltc","status":"confirmed","summary":"St. George\'s Caye Day","region":"Belize","date":"2025-09-10"},{"id":"20250921_v8j0ob7cft3290aqupdeakdsd0","status":"confirmed","summary":"Independence Day","region":"Belize","date":"2025-09-21"},{"id":"20250922_eaq6e2lr7klkkfu5m605f2vdck","status":"confirmed","summary":"Day off for Independence Day","region":"Belize","date":"2025-09-22"},{"id":"20251012_0mq49k01renel6k1kerp35mvlk","status":"confirmed","summary":"El Día de la Raza","region":"Belize","date":"2025-10-12"},{"id":"20251013_d30c9vvrqke2co8343pg3isq1g","status":"confirmed","summary":"Day off for El Día de la Raza","region":"Belize","date":"2025-10-13"},{"id":"20251119_7hm4151nclp37cmkk3u5lokf3o","status":"confirmed","summary":"Garifuna Settlement Day","region":"Belize","date":"2025-11-19"},{"id":"20251225_vdsprrcc3eh3ru6dhucgqbqrl0","status":"confirmed","summary":"Christmas Day","region":"Belize","date":"2025-12-25"},{"id":"20251226_hu334ga5vek59pi52q9cgk46ho","status":"confirmed","summary":"Boxing Day","region":"Belize","date":"2025-12-26"}],"Canada":[{"id":"20240101_75pln2e050g6durnamivsu4doo","status":"confirmed","summary":"New Year\'s Day","region":"Canada","date":"2024-01-01"},{"id":"20240102_fo5f4cdl9uhlqhmhqg2a8ksj6k","status":"confirmed","summary":"Day After New Year’s Day (Quebec)","region":"Canada","date":"2024-01-02"},{"id":"20240106_i6nt55t7aq68v3sds1pgege094","status":"confirmed","summary":"Epiphany","region":"Canada","date":"2024-01-06"},{"id":"20240202_mdinl6hhs9bh78nkp2g795jgps","status":"confirmed","summary":"Groundhog Day","region":"Canada","date":"2024-02-02"},{"id":"20240214_udqr87m15ls3i06irejev34ppk","status":"confirmed","summary":"Valentine\'s Day","region":"Canada","date":"2024-02-14"},{"id":"20240219_2kskhee7olupmkmqdhphv63ko0","status":"confirmed","summary":"Family Day (regional holiday)","region":"Canada","date":"2024-02-19"},{"id":"20240219_9tmq5snr8iem1ch47viuhm5340","status":"confirmed","summary":"Islander Day (Prince Edward Island)","region":"Canada","date":"2024-02-19"},{"id":"20240219_bb0obgr2trp5vleou9f7qgm1ic","status":"confirmed","summary":"Nova Scotia Heritage Day (Nova Scotia)","region":"Canada","date":"2024-02-19"},{"id":"20240219_d2ou3rb3fsimv2m2jjombqfp60","status":"confirmed","summary":"Louis Riel Day (Manitoba)","region":"Canada","date":"2024-02-19"},{"id":"20240223_a5v2unhbe36nbsbji2ir2229i4","status":"confirmed","summary":"Yukon Heritage Day (Yukon)","region":"Canada","date":"2024-02-23"},{"id":"20240310_b3tdvditltqqa2gu66pr02o4ag","status":"confirmed","summary":"Daylight Saving Time starts","region":"Canada","date":"2024-03-10"},{"id":"20240311_upiieso13b5atnok3q7tou5v7k","status":"confirmed","summary":"Commonwealth Day","region":"Canada","date":"2024-03-11"},{"id":"20240317_kd1038ck5skm0p1nsebaoe5bfk","status":"confirmed","summary":"St. Patrick\'s Day","region":"Canada","date":"2024-03-17"},{"id":"20240318_0nu2oriuhlnd738k9o48g53kd8","status":"confirmed","summary":"St. Patrick\'s Day (Newfoundland and Labrador)","region":"Canada","date":"2024-03-18"},{"id":"20240329_l06os1hs0h06euekeal9t2trkk","status":"confirmed","summary":"Good Friday","region":"Canada","date":"2024-03-29"},{"id":"20240331_p0punhe7nedv9mlgnum9u2oeas","status":"confirmed","summary":"Easter Sunday (regional holiday)","region":"Canada","date":"2024-03-31"},{"id":"20240401_t2qud387ll2a3ckqsd3oapsjao","status":"confirmed","summary":"Easter Monday (regional holiday)","region":"Canada","date":"2024-04-01"},{"id":"20240406_57cp8f2ceol45tihtjosrh5i04","status":"confirmed","summary":"Tartan Day","region":"Canada","date":"2024-04-06"},{"id":"20240409_itumchodk64qurmjjc9kcqh798","status":"confirmed","summary":"Vimy Ridge Day","region":"Canada","date":"2024-04-09"},{"id":"20240422_vceedvkjmi9327cchcl9vn2g4k","status":"confirmed","summary":"St. George\'s Day (Newfoundland and Labrador)","region":"Canada","date":"2024-04-22"},{"id":"20240512_k6henh8c78tsdlnshjm1dcdpp4","status":"confirmed","summary":"Mothers\' Day","region":"Canada","date":"2024-05-12"},{"id":"20240520_3u7i33o2oojkkeiir49kcbpu98","status":"confirmed","summary":"National Patriots\' Day (Quebec)","region":"Canada","date":"2024-05-20"},{"id":"20240520_qcgsmuc9hpgl77i2fc5pf961s0","status":"confirmed","summary":"Victoria Day (regional holiday)","region":"Canada","date":"2024-05-20"},{"id":"20240616_8fjlh9q56v3a8b5fna45nmu0qg","status":"confirmed","summary":"Fathers\' Day","region":"Canada","date":"2024-06-16"},{"id":"20240621_tvt3d4uhicrj8g28t1ei96g0j4","status":"confirmed","summary":"National Indigenous Peoples Day (regional holiday)","region":"Canada","date":"2024-06-21"},{"id":"20240624_33htbnut228vtct49i2mvsug6k","status":"confirmed","summary":"St. Jean Baptiste Day (Quebec)","region":"Canada","date":"2024-06-24"},{"id":"20240624_rve5u178fjkkiab6vsghotdahs","status":"confirmed","summary":"June Holiday (Newfoundland and Labrador)","region":"Canada","date":"2024-06-24"},{"id":"20240701_5rn61rnjart6e391sak7aqp9o0","status":"confirmed","summary":"Canada Day","region":"Canada","date":"2024-07-01"},{"id":"20240701_d5imo1p6pgsepnna3bilrk36q0","status":"confirmed","summary":"Memorial Day (Newfoundland and Labrador)","region":"Canada","date":"2024-07-01"},{"id":"20240709_40nje1mgg9l7ie9hks3usuvr84","status":"confirmed","summary":"Nunavut Day (Nunavut)","region":"Canada","date":"2024-07-09"},{"id":"20240715_boj9hlj51ccr2f46qga77b6sj8","status":"confirmed","summary":"Orangemen\'s Day (Newfoundland and Labrador)","region":"Canada","date":"2024-07-15"},{"id":"20240805_5q6imumbih8rjn7cgl9r6e650k","status":"confirmed","summary":"New Brunswick Day (New Brunswick)","region":"Canada","date":"2024-08-05"},{"id":"20240805_atb8e70f6dpmaboq6enm0hk90k","status":"confirmed","summary":"Heritage Day (Alberta)","region":"Canada","date":"2024-08-05"},{"id":"20240805_mk6l9k0allaraadtrtgr4ito8o","status":"confirmed","summary":"Saskatchewan Day (Saskatchewan)","region":"Canada","date":"2024-08-05"},{"id":"20240805_n8bkjhln25kj6ds47qpuua9f64","status":"confirmed","summary":"Natal Day (Nova Scotia)","region":"Canada","date":"2024-08-05"},{"id":"20240805_shovlfqlb405d9d8gpjqvkq2co","status":"confirmed","summary":"Civic/Provincial Day (regional holiday)","region":"Canada","date":"2024-08-05"},{"id":"20240805_takq3uhf9distljpjka8377uls","status":"confirmed","summary":"British Columbia Day (British Columbia)","region":"Canada","date":"2024-08-05"},{"id":"20240807_j5rp9s1a91g2nkvo9ickbthkoo","status":"confirmed","summary":"The Royal St John\'s Regatta (Regatta Day) (Newfoundland and Labrador)","region":"Canada","date":"2024-08-07"},{"id":"20240816_p08j03bb6bk9p3o93hkd5f8cb0","status":"confirmed","summary":"Gold Cup Parade (Prince Edward Island)","region":"Canada","date":"2024-08-16"},{"id":"20240819_ts5uk4unqoo27q8cla4e2si5hc","status":"confirmed","summary":"Discovery Day (Yukon)","region":"Canada","date":"2024-08-19"},{"id":"20240902_9n1eund9r1vmdmi6jp4up0ep08","status":"confirmed","summary":"Labour Day","region":"Canada","date":"2024-09-02"},{"id":"20240930_5ci7ro2c8o84mfd18ci24mgjko","status":"confirmed","summary":"National Day for Truth and Reconciliation (regional holiday)","region":"Canada","date":"2024-09-30"},{"id":"20241014_iqd1aee62apgttb1uhtre5jg0k","status":"confirmed","summary":"Thanksgiving Day (regional holiday)","region":"Canada","date":"2024-10-14"},{"id":"20241031_0fkdbu9ol6dgcbftftd93opbvc","status":"confirmed","summary":"Halloween","region":"Canada","date":"2024-10-31"},{"id":"20241103_18m5opu5gg4uoab60ioad050k8","status":"confirmed","summary":"Daylight Saving Time ends","region":"Canada","date":"2024-11-03"},{"id":"20241111_8v87evs0q7d4pqghjr3i9hiiik","status":"confirmed","summary":"Remembrance Day (regional holiday)","region":"Canada","date":"2024-11-11"},{"id":"20241211_3ohdu8igb9qtanomuhop30rjl0","status":"confirmed","summary":"Anniversary of the Statute of Westminster","region":"Canada","date":"2024-12-11"},{"id":"20241224_k0478dpnc7fcdcqmdkd2frabos","status":"confirmed","summary":"Christmas Eve (New Brunswick)","region":"Canada","date":"2024-12-24"},{"id":"20241225_0nh6241tihia7isjqdmi4t7nt8","status":"confirmed","summary":"Christmas Day","region":"Canada","date":"2024-12-25"},{"id":"20241226_7hbpq3t2c7avb534l9qd36o9k8","status":"confirmed","summary":"Boxing Day (regional holiday)","region":"Canada","date":"2024-12-26"},{"id":"20241231_9tdvv20tiphlr4phmklmbo6m5s","status":"confirmed","summary":"New Year\'s Eve","region":"Canada","date":"2024-12-31"},{"id":"20250101_ug8crb7f11ni47sgt3ruacqsv4","status":"confirmed","summary":"New Year\'s Day","region":"Canada","date":"2025-01-01"},{"id":"20250102_4rlprsvgci6m4cnfi1vtbi535g","status":"confirmed","summary":"Day After New Year’s Day (Quebec)","region":"Canada","date":"2025-01-02"},{"id":"20250106_9nd884tisofp49715su0n210ac","status":"confirmed","summary":"Epiphany","region":"Canada","date":"2025-01-06"},{"id":"20250202_5mf1qfvrndsa9fredsh7ttijd4","status":"confirmed","summary":"Groundhog Day","region":"Canada","date":"2025-02-02"},{"id":"20250214_ld9qehqf3ag6qbssdahvvhp6i0","status":"confirmed","summary":"Valentine\'s Day","region":"Canada","date":"2025-02-14"},{"id":"20250217_0kaboiq7dhka2e8nmb13a3uc5k","status":"confirmed","summary":"Louis Riel Day (Manitoba)","region":"Canada","date":"2025-02-17"},{"id":"20250217_0kolfakukhtqorqg9dbdqivibg","status":"confirmed","summary":"Islander Day (Prince Edward Island)","region":"Canada","date":"2025-02-17"},{"id":"20250217_m14kce8pok4hlbeugdgkp0hrbs","status":"confirmed","summary":"Nova Scotia Heritage Day (Nova Scotia)","region":"Canada","date":"2025-02-17"},{"id":"20250217_vag60uk0svmcco8vdc40k4vuuo","status":"confirmed","summary":"Family Day (regional holiday)","region":"Canada","date":"2025-02-17"},{"id":"20250221_ivptd0e55p55lbomskc4goca9k","status":"confirmed","summary":"Yukon Heritage Day (Yukon)","region":"Canada","date":"2025-02-21"},{"id":"20250309_08mdng0mn8upd5gjt0gabts2n0","status":"confirmed","summary":"Daylight Saving Time starts","region":"Canada","date":"2025-03-09"},{"id":"20250310_21vvopgjrjia9fnjerlomqm3jg","status":"confirmed","summary":"Commonwealth Day","region":"Canada","date":"2025-03-10"},{"id":"20250317_5904p7jjf957l5s06r4l343k28","status":"confirmed","summary":"St. Patrick\'s Day (Newfoundland and Labrador)","region":"Canada","date":"2025-03-17"},{"id":"20250406_ag899d82orel3utrupbdsvvecs","status":"confirmed","summary":"Tartan Day","region":"Canada","date":"2025-04-06"},{"id":"20250409_u3v7tnq3kshvd2h2mpepa1mcj4","status":"confirmed","summary":"Vimy Ridge Day","region":"Canada","date":"2025-04-09"},{"id":"20250418_6l1cg4uobmrrv65f6sgn1qko1o","status":"confirmed","summary":"Good Friday","region":"Canada","date":"2025-04-18"},{"id":"20250420_sja5r6lruto0jt6pj7nd6m7skc","status":"confirmed","summary":"Easter Sunday (regional holiday)","region":"Canada","date":"2025-04-20"},{"id":"20250421_84fjf0inrgsgsdaj6hdgr5pq1o","status":"confirmed","summary":"St. George\'s Day (Newfoundland and Labrador)","region":"Canada","date":"2025-04-21"},{"id":"20250421_j6o55cqevon9uu4nlfl3i4pm70","status":"confirmed","summary":"Easter Monday (regional holiday)","region":"Canada","date":"2025-04-21"},{"id":"20250511_96v5vimu3qv5nvk0k91nsk1sp4","status":"confirmed","summary":"Mothers\' Day","region":"Canada","date":"2025-05-11"},{"id":"20250519_c2tg2i3smqd60i1jokjlt0m674","status":"confirmed","summary":"National Patriots\' Day (Quebec)","region":"Canada","date":"2025-05-19"},{"id":"20250519_mh31je8sogu360s0l5oqfcrkog","status":"confirmed","summary":"Victoria Day (regional holiday)","region":"Canada","date":"2025-05-19"},{"id":"20250615_n3dks384eps6012pbnpdoq6hks","status":"confirmed","summary":"Fathers\' Day","region":"Canada","date":"2025-06-15"},{"id":"20250621_k60imhfhleea5p6puf71d2s808","status":"confirmed","summary":"National Indigenous Peoples Day (regional holiday)","region":"Canada","date":"2025-06-21"},{"id":"20250623_k0ite7im676qv8ed0lm972mda0","status":"confirmed","summary":"June Holiday (Newfoundland and Labrador)","region":"Canada","date":"2025-06-23"},{"id":"20250624_q5gg3ig9rnhvsgfrmtruamt9tg","status":"confirmed","summary":"St. Jean Baptiste Day (Quebec)","region":"Canada","date":"2025-06-24"},{"id":"20250701_cvh3qvktr7gig0or7pm856os3o","status":"confirmed","summary":"Canada Day","region":"Canada","date":"2025-07-01"},{"id":"20250701_gncitkev1va595hpr57eetaa48","status":"confirmed","summary":"Memorial Day (Newfoundland and Labrador)","region":"Canada","date":"2025-07-01"},{"id":"20250709_14mj6lttjjab1m5npgv8h40has","status":"confirmed","summary":"Nunavut Day (Nunavut)","region":"Canada","date":"2025-07-09"},{"id":"20250714_18btt6n6blqqg9mcrs3a9kutcg","status":"confirmed","summary":"Orangemen\'s Day (Newfoundland and Labrador)","region":"Canada","date":"2025-07-14"},{"id":"20250804_5cfpnvok39f2i2ke2k0grulen8","status":"confirmed","summary":"Natal Day (Nova Scotia)","region":"Canada","date":"2025-08-04"},{"id":"20250804_76si2cud92ckh413l4mof5odo0","status":"confirmed","summary":"Saskatchewan Day (Saskatchewan)","region":"Canada","date":"2025-08-04"},{"id":"20250804_9eulvj4asl24cunedm30cd776s","status":"confirmed","summary":"Civic/Provincial Day (regional holiday)","region":"Canada","date":"2025-08-04"},{"id":"20250804_bggi7r95mju0jgcd7svl9acbh4","status":"confirmed","summary":"Heritage Day (Alberta)","region":"Canada","date":"2025-08-04"},{"id":"20250804_lt893kct43g8vrm4e390pgpen4","status":"confirmed","summary":"New Brunswick Day (New Brunswick)","region":"Canada","date":"2025-08-04"},{"id":"20250804_r8gtq27vna2v1oiatjv9hiq23s","status":"confirmed","summary":"British Columbia Day (British Columbia)","region":"Canada","date":"2025-08-04"},{"id":"20250806_rgji711f39etml63k3sb1l8s28","status":"confirmed","summary":"The Royal St John\'s Regatta (Regatta Day) (Newfoundland and Labrador)","region":"Canada","date":"2025-08-06"},{"id":"20250815_3i1o5lppqugfk9isp298144ct0","status":"confirmed","summary":"Gold Cup Parade (Prince Edward Island)","region":"Canada","date":"2025-08-15"},{"id":"20250818_me1tcg25b2qretvm2ehook583s","status":"confirmed","summary":"Discovery Day (Yukon)","region":"Canada","date":"2025-08-18"},{"id":"20250901_3hncp7pihfsr9ueoag8mvacnpk","status":"confirmed","summary":"Labour Day","region":"Canada","date":"2025-09-01"},{"id":"20250930_k105ngjsjhsjdhnl6v6i3je28c","status":"confirmed","summary":"National Day for Truth and Reconciliation (regional holiday)","region":"Canada","date":"2025-09-30"},{"id":"20251013_qop5r7ceq14t9skloc7sjotaq8","status":"confirmed","summary":"Thanksgiving Day (regional holiday)","region":"Canada","date":"2025-10-13"},{"id":"20251031_f8souvmfdb66mpnarbkvpnrmvk","status":"confirmed","summary":"Halloween","region":"Canada","date":"2025-10-31"},{"id":"20251102_80mk1laq33jjk2mskk3f3b0uoc","status":"confirmed","summary":"Daylight Saving Time ends","region":"Canada","date":"2025-11-02"},{"id":"20251111_l6ckd0ecl63307itf6vhq66shg","status":"confirmed","summary":"Remembrance Day (regional holiday)","region":"Canada","date":"2025-11-11"},{"id":"20251211_0pptf21r5mvl70tbf0t5dbeirs","status":"confirmed","summary":"Anniversary of the Statute of Westminster","region":"Canada","date":"2025-12-11"},{"id":"20251224_l0pq8teb2kftmfq3qvc04rsbrg","status":"confirmed","summary":"Christmas Eve (New Brunswick)","region":"Canada","date":"2025-12-24"},{"id":"20251225_vo0meg1fk3fvl0oooje7qrms0s","status":"confirmed","summary":"Christmas Day","region":"Canada","date":"2025-12-25"},{"id":"20251226_i63dgoqkkgj376s03l4v0mjepo","status":"confirmed","summary":"Boxing Day (regional holiday)","region":"Canada","date":"2025-12-26"},{"id":"20251231_1504jiqpssg01f42jd9ftqvfbo","status":"confirmed","summary":"New Year\'s Eve","region":"Canada","date":"2025-12-31"}],"Congo - Kinshasa":[{"id":"20240101_5dbs5q77gkulqpea8mff1in2to","status":"confirmed","summary":"New Year\'s Day","region":"Congo - Kinshasa","date":"2024-01-01"},{"id":"20240104_pdbaa90qvjkrcd28q2aer0nmfg","status":"confirmed","summary":"Martyrs of Independence Day","region":"Congo - Kinshasa","date":"2024-01-04"},{"id":"20240116_42lvmgnbvqihvrkhuj121luqdk","status":"confirmed","summary":"Anniversary of President Laurent Kabila’s Assassination","region":"Congo - Kinshasa","date":"2024-01-16"},{"id":"20240117_sp0456op7o4e86a73i9j23ddg8","status":"confirmed","summary":"Anniversary of Prime Minister Patrice Emery Lumumba’s Assassination","region":"Congo - Kinshasa","date":"2024-01-17"},{"id":"20240214_eb243nvo4t5iidtifal3k7qi9g","status":"confirmed","summary":"Valentine\'s Day","region":"Congo - Kinshasa","date":"2024-02-14"},{"id":"20240308_jsk5e7m6pbc7bef06nk5e077ls","status":"confirmed","summary":"International Women\'s Day","region":"Congo - Kinshasa","date":"2024-03-08"},{"id":"20240320_l874qan6v5vl07n4o8ct381l78","status":"confirmed","summary":"International Francophonie Day","region":"Congo - Kinshasa","date":"2024-03-20"},{"id":"20240430_pat5qisoa0k9ho7ubsshp2mbok","status":"confirmed","summary":"Education Day","region":"Congo - Kinshasa","date":"2024-04-30"},{"id":"20240501_vetttguop9a25rvjkfn1h3d93g","status":"confirmed","summary":"May Day","region":"Congo - Kinshasa","date":"2024-05-01"},{"id":"20240517_6dmq2mdf0iaom6ni62s11svsu4","status":"confirmed","summary":"Liberation Day","region":"Congo - Kinshasa","date":"2024-05-17"},{"id":"20240621_1d49j2vg1jdvnts68venl4ludo","status":"confirmed","summary":"Music Festival","region":"Congo - Kinshasa","date":"2024-06-21"},{"id":"20240629_mtq78sscr85b6s13ukcfc51ssc","status":"confirmed","summary":"Independence Day observed","region":"Congo - Kinshasa","date":"2024-06-29"},{"id":"20240630_b7cbb2pg8bsp88pr7t79rbveig","status":"confirmed","summary":"Independence Day","region":"Congo - Kinshasa","date":"2024-06-30"},{"id":"20240801_21ja6fb0f7tepfof9ad1sf6r9k","status":"confirmed","summary":"Parents\' Day","region":"Congo - Kinshasa","date":"2024-08-01"},{"id":"20240927_vlcaj2b2ilflcp7ne5c7rjsbkk","status":"confirmed","summary":"World Tourism Day","region":"Congo - Kinshasa","date":"2024-09-27"},{"id":"20241224_6f770sa1adtfo076rbuluqv7a0","status":"confirmed","summary":"Christmas Eve","region":"Congo - Kinshasa","date":"2024-12-24"},{"id":"20241225_p128cqq2tgciqqfl5052ao8qk8","status":"confirmed","summary":"Christmas Day","region":"Congo - Kinshasa","date":"2024-12-25"},{"id":"20241231_gbvos796tmpc1oveuv3prpmmb8","status":"confirmed","summary":"New Year\'s Eve","region":"Congo - Kinshasa","date":"2024-12-31"},{"id":"20250101_41f8lu6s263ggg9h1pl9t4dft4","status":"confirmed","summary":"New Year\'s Day","region":"Congo - Kinshasa","date":"2025-01-01"},{"id":"20250104_8ltoa94qf6qem64mpkrar9o618","status":"confirmed","summary":"Martyrs of Independence Day","region":"Congo - Kinshasa","date":"2025-01-04"},{"id":"20250116_f3crprmcmib5vtlk2r4go1fb2c","status":"confirmed","summary":"Anniversary of President Laurent Kabila’s Assassination","region":"Congo - Kinshasa","date":"2025-01-16"},{"id":"20250117_oub1u9moj5u1pqtct50b9nqor0","status":"confirmed","summary":"Anniversary of Prime Minister Patrice Emery Lumumba’s Assassination","region":"Congo - Kinshasa","date":"2025-01-17"},{"id":"20250214_3pb75ffimn56b6ppb71dhf1bkc","status":"confirmed","summary":"Valentine\'s Day","region":"Congo - Kinshasa","date":"2025-02-14"},{"id":"20250308_fja84nasm07bfsehj6om4fep8o","status":"confirmed","summary":"International Women\'s Day","region":"Congo - Kinshasa","date":"2025-03-08"},{"id":"20250320_a6cad8nnq2rvdbkqelsbl3v284","status":"confirmed","summary":"International Francophonie Day","region":"Congo - Kinshasa","date":"2025-03-20"},{"id":"20250430_4lakld9sbdrv6tenogbl4392p8","status":"confirmed","summary":"Education Day","region":"Congo - Kinshasa","date":"2025-04-30"},{"id":"20250501_lfoe0f1l1h12ce7r20d2ebt98g","status":"confirmed","summary":"May Day","region":"Congo - Kinshasa","date":"2025-05-01"},{"id":"20250517_fsb1j5dm827hksc1s0oe4mfn0o","status":"confirmed","summary":"Liberation Day","region":"Congo - Kinshasa","date":"2025-05-17"},{"id":"20250621_e17mrifkdl9rd8bepu6j36u26k","status":"confirmed","summary":"Music Festival","region":"Congo - Kinshasa","date":"2025-06-21"},{"id":"20250630_dqk541lraicp65so3n7mo31v64","status":"confirmed","summary":"Independence Day","region":"Congo - Kinshasa","date":"2025-06-30"},{"id":"20250801_cjvske4ttcnrjf3817ds4kahs4","status":"confirmed","summary":"Parents\' Day","region":"Congo - Kinshasa","date":"2025-08-01"},{"id":"20250927_1qirb01fe10v6i74jdrgd10g1c","status":"confirmed","summary":"World Tourism Day","region":"Congo - Kinshasa","date":"2025-09-27"},{"id":"20251224_ja1819l18jfsqdmaqn1gfifsfk","status":"confirmed","summary":"Christmas Eve","region":"Congo - Kinshasa","date":"2025-12-24"},{"id":"20251225_i73q93h0a3bp665jdtalh6lmc4","status":"confirmed","summary":"Christmas Day","region":"Congo - Kinshasa","date":"2025-12-25"},{"id":"20251231_b45rdnlclvjciroqs5k5495p4s","status":"confirmed","summary":"New Year\'s Eve","region":"Congo - Kinshasa","date":"2025-12-31"}],"Central African Republic":[{"id":"20240101_kj5sr79rmc75emf6ha154ngqj4","status":"confirmed","summary":"New Year","region":"Central African Republic","date":"2024-01-01"},{"id":"20240311_m1l5t8an8tu02rlrr9e1e5pjts","status":"confirmed","summary":"Ramadan Start","region":"Central African Republic","date":"2024-03-11"},{"id":"20240329_39o9fl05lohgb0psl1c29n229g","status":"confirmed","summary":"Commemoration of Boganda","region":"Central African Republic","date":"2024-03-29"},{"id":"20240401_vkqdgf2n5s80lu99b1oi4de0a4","status":"confirmed","summary":"Easter Monday","region":"Central African Republic","date":"2024-04-01"},{"id":"20240410_kdmnjhonmgaeoeb34k99jne840","status":"confirmed","summary":"Eid al-Fitr","region":"Central African Republic","date":"2024-04-10"},{"id":"20240501_can1p2mik6q14cr82s2oae60mo","status":"confirmed","summary":"Labour Day","region":"Central African Republic","date":"2024-05-01"},{"id":"20240509_r2mt8tc858ntlidvhihisk6il8","status":"confirmed","summary":"Ascension Day","region":"Central African Republic","date":"2024-05-09"},{"id":"20240520_chpvldqj0nipdtasmi3rsaof4o","status":"confirmed","summary":"Whit Monday","region":"Central African Republic","date":"2024-05-20"},{"id":"20240617_bklbvd31c4lqgfrvooo9mpr538","status":"confirmed","summary":"Eid al-Adha","region":"Central African Republic","date":"2024-06-17"},{"id":"20240630_5s13r5fhmnlok40gjphto45o9s","status":"confirmed","summary":"National Payer Day","region":"Central African Republic","date":"2024-06-30"},{"id":"20240813_giia0lar913oefbulbji1278i8","status":"confirmed","summary":"Independence Day","region":"Central African Republic","date":"2024-08-13"},{"id":"20240815_9o8kd92j0bgum0k7j21eiodg3s","status":"confirmed","summary":"Assumption of Mary","region":"Central African Republic","date":"2024-08-15"},{"id":"20241101_dj1ho0gmkgi47a4lphbd9o1ud8","status":"confirmed","summary":"All Saints\' Day","region":"Central African Republic","date":"2024-11-01"},{"id":"20241201_2v342pupu0kg2m8sp9qdk96h30","status":"confirmed","summary":"Republic Day","region":"Central African Republic","date":"2024-12-01"},{"id":"20241225_8dhj2e3qdp939vpuj9g4565pnc","status":"confirmed","summary":"Christmas Day","region":"Central African Republic","date":"2024-12-25"},{"id":"20250101_s3icog7fju835907tpap329r9g","status":"confirmed","summary":"New Year","region":"Central African Republic","date":"2025-01-01"},{"id":"20250301_2qm8ho7mp7ui70f8tgcok2teds","status":"confirmed","summary":"Ramadan Start","region":"Central African Republic","date":"2025-03-01"},{"id":"20250329_hrs7sqgtbdedtg7ojrct43sn78","status":"confirmed","summary":"Commemoration of Boganda","region":"Central African Republic","date":"2025-03-29"},{"id":"20250331_9peo29c7qrg9bklo66cq33agos","status":"confirmed","summary":"Eid al-Fitr","region":"Central African Republic","date":"2025-03-31"},{"id":"20250421_s35tg8r4hobugtkc5ig53ue4nk","status":"confirmed","summary":"Easter Monday","region":"Central African Republic","date":"2025-04-21"},{"id":"20250501_86l47dho6qmt3ri0pugbs8b5b8","status":"confirmed","summary":"Labour Day","region":"Central African Republic","date":"2025-05-01"},{"id":"20250529_o1p9up1l481507lv5a6i8rrrjo","status":"confirmed","summary":"Ascension Day","region":"Central African Republic","date":"2025-05-29"},{"id":"20250607_8jg11n3o1lct3rhlmonkaknjqc","status":"confirmed","summary":"Eid al-Adha","region":"Central African Republic","date":"2025-06-07"},{"id":"20250609_1cer7n4gahcoqd24iac4376dks","status":"confirmed","summary":"Whit Monday","region":"Central African Republic","date":"2025-06-09"},{"id":"20250630_ep7jhgeji4jj9smngn7a7uuvho","status":"confirmed","summary":"National Payer Day","region":"Central African Republic","date":"2025-06-30"},{"id":"20250813_j7t4i5kmnsd9etjmuvnjvbnnts","status":"confirmed","summary":"Independence Day","region":"Central African Republic","date":"2025-08-13"},{"id":"20250815_3n7dc8o2v7khfp43vcvks40ajs","status":"confirmed","summary":"Assumption of Mary","region":"Central African Republic","date":"2025-08-15"},{"id":"20251101_q3grafc3t971o5ns9uaanfb2qc","status":"confirmed","summary":"All Saints\' Day","region":"Central African Republic","date":"2025-11-01"},{"id":"20251201_a8jaeovg3md9de31rkgh74vfig","status":"confirmed","summary":"Republic Day","region":"Central African Republic","date":"2025-12-01"},{"id":"20251225_edv1sodcamap94gqkq1p19gkmk","status":"confirmed","summary":"Christmas Day","region":"Central African Republic","date":"2025-12-25"}],"Congo - Brazzaville":[{"id":"20240101_96fhsom79noiihkcrn4vh676do","status":"confirmed","summary":"New Year","region":"Congo - Brazzaville","date":"2024-01-01"},{"id":"20240331_dtmbb0fd2eu6l1vidmpn1kq5r4","status":"confirmed","summary":"Easter Sunday","region":"Congo - Brazzaville","date":"2024-03-31"},{"id":"20240401_052vs69i48bm15ghgtsbkpks0c","status":"confirmed","summary":"Easter Monday","region":"Congo - Brazzaville","date":"2024-04-01"},{"id":"20240501_i3crichm8paaf2ef67du8m9s74","status":"confirmed","summary":"Labour Day","region":"Congo - Brazzaville","date":"2024-05-01"},{"id":"20240509_iqe8k88uocv9n3cnr9felshkv8","status":"confirmed","summary":"Ascension Day","region":"Congo - Brazzaville","date":"2024-05-09"},{"id":"20240512_d9a1ht82akmgdo8g881og94j1k","status":"confirmed","summary":"Mother\'s Day","region":"Congo - Brazzaville","date":"2024-05-12"},{"id":"20240520_dt0cltuu3ou91jmm1dtm2kdc3c","status":"confirmed","summary":"Whit Monday","region":"Congo - Brazzaville","date":"2024-05-20"},{"id":"20240610_4aff09m11ifu6e0g0hsqjluaq8","status":"confirmed","summary":"Reconciliation Day","region":"Congo - Brazzaville","date":"2024-06-10"},{"id":"20240616_jbf5rftqh07crk7g82mm0rbo60","status":"confirmed","summary":"Father\'s Day","region":"Congo - Brazzaville","date":"2024-06-16"},{"id":"20240815_hi6c5aevdaivgjmd142414nvi8","status":"confirmed","summary":"Independence Day","region":"Congo - Brazzaville","date":"2024-08-15"},{"id":"20241101_11suq0dgtjnob1ui9mp1q1c8q0","status":"confirmed","summary":"All Saints\' Day","region":"Congo - Brazzaville","date":"2024-11-01"},{"id":"20241128_72ek617u072k99j6ujaii9cof8","status":"confirmed","summary":"Republic Day","region":"Congo - Brazzaville","date":"2024-11-28"},{"id":"20241225_hhu88svb0s0ib4uljgfihdn1oo","status":"confirmed","summary":"Christmas Day","region":"Congo - Brazzaville","date":"2024-12-25"},{"id":"20250101_v03cttakngifonqajcf282fics","status":"confirmed","summary":"New Year","region":"Congo - Brazzaville","date":"2025-01-01"},{"id":"20250420_hcgj0p5q6nkaqt1p2abbuevifc","status":"confirmed","summary":"Easter Sunday","region":"Congo - Brazzaville","date":"2025-04-20"},{"id":"20250421_7pmbpv05qt66cu27nr26371vmc","status":"confirmed","summary":"Easter Monday","region":"Congo - Brazzaville","date":"2025-04-21"},{"id":"20250501_tbp549olvhpl6h186nmngqggfk","status":"confirmed","summary":"Labour Day","region":"Congo - Brazzaville","date":"2025-05-01"},{"id":"20250511_8c0mbp4rg8554tvnp8pofa59kk","status":"confirmed","summary":"Mother\'s Day","region":"Congo - Brazzaville","date":"2025-05-11"},{"id":"20250529_5e06kff13nc5sdbr9bj949snp0","status":"confirmed","summary":"Ascension Day","region":"Congo - Brazzaville","date":"2025-05-29"},{"id":"20250609_gkm9112m9n94f916juqkchhh28","status":"confirmed","summary":"Whit Monday","region":"Congo - Brazzaville","date":"2025-06-09"},{"id":"20250610_c3fsr5n8fgsilh34bt2b7bqmhg","status":"confirmed","summary":"Reconciliation Day","region":"Congo - Brazzaville","date":"2025-06-10"},{"id":"20250615_a4lmlq2il0nilfed2aoksnibm4","status":"confirmed","summary":"Father\'s Day","region":"Congo - Brazzaville","date":"2025-06-15"},{"id":"20250815_ipapg58e2lht4blf6d12ppnh1s","status":"confirmed","summary":"Independence Day","region":"Congo - Brazzaville","date":"2025-08-15"},{"id":"20251101_tdrn8epg9j0qe8i1k7oim08q2k","status":"confirmed","summary":"All Saints\' Day","region":"Congo - Brazzaville","date":"2025-11-01"},{"id":"20251128_i9v2j5bld5qh54u3hn9niibjps","status":"confirmed","summary":"Republic Day","region":"Congo - Brazzaville","date":"2025-11-28"},{"id":"20251225_rfcvvosudlgk3qmfecoe4uppt0","status":"confirmed","summary":"Christmas Day","region":"Congo - Brazzaville","date":"2025-12-25"}],"Switzerland":[{"id":"20240101_e0urvlf9pubd4e7fke8eorgut8","status":"confirmed","summary":"New Year\'s Day (regional holiday)","region":"Switzerland","date":"2024-01-01"},{"id":"20240102_rceo8ur3c3120f6bupp9venjho","status":"confirmed","summary":"Berchtold Day (regional holiday)","region":"Switzerland","date":"2024-01-02"},{"id":"20240106_2kn0hfl55ai31nha68m9ga4p94","status":"confirmed","summary":"Epiphany (regional holiday)","region":"Switzerland","date":"2024-01-06"},{"id":"20240214_ovmg9eqq8qm4hn9d2lcv1idq34","status":"confirmed","summary":"Valentine\'s Day","region":"Switzerland","date":"2024-02-14"},{"id":"20240301_l26idnu8msb005gtuo520l9erk","status":"confirmed","summary":"Republic Day (Neuchâtel)","region":"Switzerland","date":"2024-03-01"},{"id":"20240319_tlv13m1ot1qd4d6ik4pi8722p4","status":"confirmed","summary":"Saint Joseph\'s Day (regional holiday)","region":"Switzerland","date":"2024-03-19"},{"id":"20240329_hqdhj48lr4q28249sss6sl5s0g","status":"confirmed","summary":"Good Friday (regional holiday)","region":"Switzerland","date":"2024-03-29"},{"id":"20240331_hd6dlut7gojr83m7m6nvegee4s","status":"confirmed","summary":"Daylight Saving Time starts","region":"Switzerland","date":"2024-03-31"},{"id":"20240331_kgf43lgo0fagdls203jn4ks86k","status":"confirmed","summary":"Easter Sunday","region":"Switzerland","date":"2024-03-31"},{"id":"20240401_0okqtae8phvkupseb4avdl1ghc","status":"confirmed","summary":"Easter Monday (regional holiday)","region":"Switzerland","date":"2024-04-01"},{"id":"20240404_1uuqr5e1fkdllaarf9pdi40h00","status":"confirmed","summary":"Näfels Procession (Glarus)","region":"Switzerland","date":"2024-04-04"},{"id":"20240415_d1thsheu7vf6om9tua7qb5tpmo","status":"confirmed","summary":"Sechseläuten (Zurich)","region":"Switzerland","date":"2024-04-15"},{"id":"20240501_ff808nm1qudni4531mh95fjlhs","status":"confirmed","summary":"May Day (Half-Day) (regional holiday)","region":"Switzerland","date":"2024-05-01"},{"id":"20240501_fuka9mf7632lf67cce2i40g0mk","status":"confirmed","summary":"May Day (regional holiday)","region":"Switzerland","date":"2024-05-01"},{"id":"20240509_d8sk7s9eag3bc3e8vutcalig3c","status":"confirmed","summary":"Ascension Day (regional holiday)","region":"Switzerland","date":"2024-05-09"},{"id":"20240512_1nopji1nlgt553hpv4gb3j3fbc","status":"confirmed","summary":"Mothers\' Day","region":"Switzerland","date":"2024-05-12"},{"id":"20240519_n1lpc343ok8fdf5jdib6f2kl7c","status":"confirmed","summary":"Pentecost (regional holiday)","region":"Switzerland","date":"2024-05-19"},{"id":"20240520_7b0d4po2g95ttgadjrcn0vq4c8","status":"confirmed","summary":"Pentecost Monday (regional holiday)","region":"Switzerland","date":"2024-05-20"},{"id":"20240530_rgre2np9nimcr24fgc0ru0qtk4","status":"confirmed","summary":"Corpus Christi (regional holiday)","region":"Switzerland","date":"2024-05-30"},{"id":"20240602_nm9o3m4pj0lhlrgqrt1rjr193c","status":"confirmed","summary":"Fathers\' Day","region":"Switzerland","date":"2024-06-02"},{"id":"20240623_fm4scr1kekp2ajirlb1t5e6e9s","status":"confirmed","summary":"Jura Independence Day (Jura)","region":"Switzerland","date":"2024-06-23"},{"id":"20240629_msk0e487h8i37ont3m71mdcn74","status":"confirmed","summary":"St. Peter and St. Paul (Ticino)","region":"Switzerland","date":"2024-06-29"},{"id":"20240801_odelc3f1jc5avjd2klod0n57fk","status":"confirmed","summary":"Swiss National Day","region":"Switzerland","date":"2024-08-01"},{"id":"20240815_e9lpa53a7h4g7v7ueces2qq63k","status":"confirmed","summary":"Assumption of Mary (regional holiday)","region":"Switzerland","date":"2024-08-15"},{"id":"20240905_pq63d0guo7pqt0ehn908ijq3m0","status":"confirmed","summary":"Genevese Fast (Geneva)","region":"Switzerland","date":"2024-09-05"},{"id":"20240907_jhqr023heq9ji0mufih9qb8gac","status":"confirmed","summary":"Knabenschiessen (Zurich)","region":"Switzerland","date":"2024-09-07"},{"id":"20240908_oqmefs4gpd11oldio2ij9jhlg4","status":"confirmed","summary":"Knabenschiessen (Zurich)","region":"Switzerland","date":"2024-09-08"},{"id":"20240909_u7cntsknjruon5931549r10rcc","status":"confirmed","summary":"Knabenschiessen (Zurich)","region":"Switzerland","date":"2024-09-09"},{"id":"20240915_ig13h1vrqvpe64b5f3ihkmvl40","status":"confirmed","summary":"Swiss Federal Fast (regional holiday)","region":"Switzerland","date":"2024-09-15"},{"id":"20240916_pk3slf8nc1hvnerdfip7l9oimk","status":"confirmed","summary":"Federal Fast Monday (regional holiday)","region":"Switzerland","date":"2024-09-16"},{"id":"20240922_0banvo3pi41oitklvfklt8g0r4","status":"confirmed","summary":"Mauritius Day (Appenzell Innerrhoden)","region":"Switzerland","date":"2024-09-22"},{"id":"20240925_2ged9kkqantjpop5l4v8tljevk","status":"confirmed","summary":"St. Nicholas of Flüe (Obwalden)","region":"Switzerland","date":"2024-09-25"},{"id":"20241027_9s4bbtg7nb1p1ehhm2ascuok90","status":"confirmed","summary":"Daylight Saving Time ends","region":"Switzerland","date":"2024-10-27"},{"id":"20241101_e873f17om2fuppj3nsan7kg900","status":"confirmed","summary":"All Saints\' Day (regional holiday)","region":"Switzerland","date":"2024-11-01"},{"id":"20241208_qtcb3ubflbh0nkmjleh8e8s5vo","status":"confirmed","summary":"Immaculate Conception (regional holiday)","region":"Switzerland","date":"2024-12-08"},{"id":"20241224_jkoe8hv9hhrhhr2eifmqkgf9ek","status":"confirmed","summary":"Christmas Eve","region":"Switzerland","date":"2024-12-24"},{"id":"20241225_n8004f6kp63pu09jcpb4f4h5hs","status":"confirmed","summary":"Christmas Day (regional holiday)","region":"Switzerland","date":"2024-12-25"},{"id":"20241226_p49o2v0t8kd4b7hacdih7ph2oc","status":"confirmed","summary":"St. Stephen\'s Day (regional holiday)","region":"Switzerland","date":"2024-12-26"},{"id":"20241231_t4kq1pi77ipv9tq8he0ovhjos4","status":"confirmed","summary":"Restoration Day (Geneva)","region":"Switzerland","date":"2024-12-31"},{"id":"20241231_tm86lorkjmlil351uv20depa7o","status":"confirmed","summary":"New Year\'s Eve","region":"Switzerland","date":"2024-12-31"},{"id":"20250101_8n5jivbi0fgdkdgslgurtd2uhg","status":"confirmed","summary":"New Year\'s Day (regional holiday)","region":"Switzerland","date":"2025-01-01"},{"id":"20250102_rim47s8mo2pis2gn228v14off0","status":"confirmed","summary":"Berchtold Day (regional holiday)","region":"Switzerland","date":"2025-01-02"},{"id":"20250106_q98u8cje52quah41sh8phf4mm0","status":"confirmed","summary":"Epiphany (regional holiday)","region":"Switzerland","date":"2025-01-06"},{"id":"20250214_t889tkmlsapidm496g235g4dns","status":"confirmed","summary":"Valentine\'s Day","region":"Switzerland","date":"2025-02-14"},{"id":"20250301_lsn5aigcjnv72bna05jsif2hl4","status":"confirmed","summary":"Republic Day (Neuchâtel)","region":"Switzerland","date":"2025-03-01"},{"id":"20250319_q4nfa6ohk4alblkmr3nmaob9sg","status":"confirmed","summary":"Saint Joseph\'s Day (regional holiday)","region":"Switzerland","date":"2025-03-19"},{"id":"20250330_tahjpfd9li9ni22bftmqf80oe0","status":"confirmed","summary":"Daylight Saving Time starts","region":"Switzerland","date":"2025-03-30"},{"id":"20250403_2jknqni89di5md0svur1be0aus","status":"confirmed","summary":"Näfels Procession (Glarus)","region":"Switzerland","date":"2025-04-03"},{"id":"20250418_5le34fnrlcbujpvo9a4ncnkuno","status":"confirmed","summary":"Good Friday (regional holiday)","region":"Switzerland","date":"2025-04-18"},{"id":"20250420_g4p83q9df7rjn2q79k1h1n31mg","status":"confirmed","summary":"Easter Sunday","region":"Switzerland","date":"2025-04-20"},{"id":"20250421_670dl9fcq8kmougcepuf84cabs","status":"confirmed","summary":"Easter Monday (regional holiday)","region":"Switzerland","date":"2025-04-21"},{"id":"20250428_868llth1mmoibt7gr8ncon198k","status":"confirmed","summary":"Sechseläuten (Zurich)","region":"Switzerland","date":"2025-04-28"},{"id":"20250501_n0212kt1dn4ils7fu7ho2j7qog","status":"confirmed","summary":"May Day (Half-Day) (regional holiday)","region":"Switzerland","date":"2025-05-01"},{"id":"20250501_tphofh42ov7t8mlnddlqc4pg58","status":"confirmed","summary":"May Day (regional holiday)","region":"Switzerland","date":"2025-05-01"},{"id":"20250511_qk14u3nnustggr7t43977lavfs","status":"confirmed","summary":"Mothers\' Day","region":"Switzerland","date":"2025-05-11"},{"id":"20250529_7shl8nnnrprfvhdould79bltkc","status":"confirmed","summary":"Ascension Day (regional holiday)","region":"Switzerland","date":"2025-05-29"},{"id":"20250601_r0i1t3tbc6mvhbkhflv6c222tg","status":"confirmed","summary":"Fathers\' Day","region":"Switzerland","date":"2025-06-01"},{"id":"20250608_n1br8gf7g6bc684naf0kbs1o8g","status":"confirmed","summary":"Pentecost (regional holiday)","region":"Switzerland","date":"2025-06-08"},{"id":"20250609_eciuvs4r0vqcn5tut8ac5p7e80","status":"confirmed","summary":"Pentecost Monday (regional holiday)","region":"Switzerland","date":"2025-06-09"},{"id":"20250619_rfl93gr0jkg458c3tu2evlcl1c","status":"confirmed","summary":"Corpus Christi (regional holiday)","region":"Switzerland","date":"2025-06-19"},{"id":"20250623_f4242hd67c5ii8mh57mnm5163c","status":"confirmed","summary":"Jura Independence Day (Jura)","region":"Switzerland","date":"2025-06-23"},{"id":"20250629_qbkst42nio8k4h2igdj22t31ms","status":"confirmed","summary":"St. Peter and St. Paul (Ticino)","region":"Switzerland","date":"2025-06-29"},{"id":"20250801_o54f8fjprif0u4rdm97i1ui0k8","status":"confirmed","summary":"Swiss National Day","region":"Switzerland","date":"2025-08-01"},{"id":"20250815_upg5dnbebjig0p13pl8dt5cigs","status":"confirmed","summary":"Assumption of Mary (regional holiday)","region":"Switzerland","date":"2025-08-15"},{"id":"20250911_a4f3o5tn99hrfgbl31gpa5qf5c","status":"confirmed","summary":"Genevese Fast (Geneva)","region":"Switzerland","date":"2025-09-11"},{"id":"20250913_c0plleacbdc1j9smstiei3jf7k","status":"confirmed","summary":"Knabenschiessen (Zurich)","region":"Switzerland","date":"2025-09-13"},{"id":"20250914_rm5prgj6qdbrt5686kua96ghv8","status":"confirmed","summary":"Knabenschiessen (Zurich)","region":"Switzerland","date":"2025-09-14"},{"id":"20250915_i1bfkibp2pg7pgeiqq7dd293jg","status":"confirmed","summary":"Knabenschiessen (Zurich)","region":"Switzerland","date":"2025-09-15"},{"id":"20250921_aqrbj6m1649vs58j3t4mls3k94","status":"confirmed","summary":"Swiss Federal Fast (regional holiday)","region":"Switzerland","date":"2025-09-21"},{"id":"20250922_icemee3pejan7145jc6bpeqe94","status":"confirmed","summary":"Mauritius Day (Appenzell Innerrhoden)","region":"Switzerland","date":"2025-09-22"},{"id":"20250922_poetv2trbvpl0kh1fc7ln6lheg","status":"confirmed","summary":"Federal Fast Monday (regional holiday)","region":"Switzerland","date":"2025-09-22"},{"id":"20250925_hk6qoud6qouq6f0tlis7o15ics","status":"confirmed","summary":"St. Nicholas of Flüe (Obwalden)","region":"Switzerland","date":"2025-09-25"},{"id":"20251026_00theu5gv2c1ai4ol39jgc4elo","status":"confirmed","summary":"Daylight Saving Time ends","region":"Switzerland","date":"2025-10-26"},{"id":"20251101_ae58q5aisaommeggqiubv2lbdk","status":"confirmed","summary":"All Saints\' Day (regional holiday)","region":"Switzerland","date":"2025-11-01"},{"id":"20251208_r8fcrhoasrl0dtpsmem2jobcus","status":"confirmed","summary":"Immaculate Conception (regional holiday)","region":"Switzerland","date":"2025-12-08"},{"id":"20251224_ah2rumcm2bl3abn9jpemtd8uas","status":"confirmed","summary":"Christmas Eve","region":"Switzerland","date":"2025-12-24"},{"id":"20251225_3n9i0kf5lrcc1rqaos1h53jv3g","status":"confirmed","summary":"Christmas Day (regional holiday)","region":"Switzerland","date":"2025-12-25"},{"id":"20251226_vttf9f5b112i1h99a4sg4nb5uo","status":"confirmed","summary":"St. Stephen\'s Day (regional holiday)","region":"Switzerland","date":"2025-12-26"},{"id":"20251231_265q7cufu3omt6h8h9i29v2g6g","status":"confirmed","summary":"Restoration Day (Geneva)","region":"Switzerland","date":"2025-12-31"},{"id":"20251231_ev0gjgojfkovjudqrabdi2shng","status":"confirmed","summary":"New Year\'s Eve","region":"Switzerland","date":"2025-12-31"}],"China":[{"id":"20240101_9p9lg1cogf5p95q85tviogq0qs","status":"confirmed","summary":"New Year\'s Day","region":"China","date":"2024-01-01"},{"id":"20240209_j75v4rcnsdtkfv5ulj1u7hislg","status":"confirmed","summary":"Spring Festival Eve","region":"China","date":"2024-02-09"},{"id":"20240210_p02bfkra7ijt0p80jfk3sh92qo","status":"confirmed","summary":"Chinese New Year","region":"China","date":"2024-02-10"},{"id":"20240211_mu73gjk5fhn7f6jkst3s5jjg0c","status":"confirmed","summary":"Spring Festival Golden Week holiday","region":"China","date":"2024-02-11"},{"id":"20240212_pipr0l924cd9alu3ki2cclipa0","status":"confirmed","summary":"Spring Festival Golden Week holiday","region":"China","date":"2024-02-12"},{"id":"20240213_5kneakj0n06r848298806egits","status":"confirmed","summary":"Spring Festival Golden Week holiday","region":"China","date":"2024-02-13"},{"id":"20240214_6496jd03aee0liol5so1pa7k8s","status":"confirmed","summary":"Spring Festival Golden Week holiday","region":"China","date":"2024-02-14"},{"id":"20240215_cc9bp8a0d191a7890kkkgmdv8s","status":"confirmed","summary":"Spring Festival Golden Week holiday","region":"China","date":"2024-02-15"},{"id":"20240216_q53n48do72nqrof4fsisicf4eg","status":"confirmed","summary":"Spring Festival Golden Week holiday","region":"China","date":"2024-02-16"},{"id":"20240217_d8msl09ubf3qdqa581o2foenhc","status":"confirmed","summary":"Spring Festival Golden Week holiday","region":"China","date":"2024-02-17"},{"id":"20240224_g6f3ncieee1f45n3vuuonevkjg","status":"confirmed","summary":"Lantern Festival","region":"China","date":"2024-02-24"},{"id":"20240308_j5oor767thrsu4h67rshgorhek","status":"confirmed","summary":"International Women\'s Day","region":"China","date":"2024-03-08"},{"id":"20240311_b1d9lklervhc5g6h9k8te5vfrc","status":"confirmed","summary":"Zhonghe Festival","region":"China","date":"2024-03-11"},{"id":"20240312_41qf590btn371a8pvqcj6pqae8","status":"confirmed","summary":"Arbor Day","region":"China","date":"2024-03-12"},{"id":"20240404_9otommfg3nokpud70dhcpq7s40","status":"confirmed","summary":"Qing Ming Jie","region":"China","date":"2024-04-04"},{"id":"20240405_ractrecsdsbch79ea4vg0o0pf4","status":"confirmed","summary":"Qing Ming Jie holiday","region":"China","date":"2024-04-05"},{"id":"20240406_vfit8jbd9gsbads408oe2btqcc","status":"confirmed","summary":"Qing Ming Jie holiday","region":"China","date":"2024-04-06"},{"id":"20240501_damka816sd2dkmn8ldi2p7n5hc","status":"confirmed","summary":"Labour Day","region":"China","date":"2024-05-01"},{"id":"20240502_unramqf491puptcg7n897953u0","status":"confirmed","summary":"Labour Day Holiday","region":"China","date":"2024-05-02"},{"id":"20240503_2bmkqtg53tigjhk3qou1j2sm2c","status":"confirmed","summary":"Labour Day Holiday","region":"China","date":"2024-05-03"},{"id":"20240504_8tvvcsn568taiocboah0045slo","status":"confirmed","summary":"Youth Day","region":"China","date":"2024-05-04"},{"id":"20240504_ep0vbd97aj672k3bc2j7fuq41o","status":"confirmed","summary":"Labour Day Holiday","region":"China","date":"2024-05-04"},{"id":"20240505_653ucu23gtm37kdnindgvu7488","status":"confirmed","summary":"Labour Day Holiday","region":"China","date":"2024-05-05"},{"id":"20240610_laeq1lhsu874i8vsbqdnc39gko","status":"confirmed","summary":"Dragon Boat Festival","region":"China","date":"2024-06-10"},{"id":"20240810_1rmggqlm5c9pfr53upp0cju6bc","status":"confirmed","summary":"Chinese Valentine\'s Day","region":"China","date":"2024-08-10"},{"id":"20240818_239guer1qbr2c04j0ibob1v9h4","status":"confirmed","summary":"Spirit Festival","region":"China","date":"2024-08-18"},{"id":"20240910_63mf154lr8i95viengmafl5vm0","status":"confirmed","summary":"Teachers\' Day","region":"China","date":"2024-09-10"},{"id":"20240915_tlihfrh584hl8dcsq2flcl1i8g","status":"confirmed","summary":"Mid-Autumn Festival holiday","region":"China","date":"2024-09-15"},{"id":"20240916_o8b7k6knsdohbkj7e70skrt0ds","status":"confirmed","summary":"Mid-Autumn Festival holiday","region":"China","date":"2024-09-16"},{"id":"20240917_t7pjhem8riuai47qd2bk907uqo","status":"confirmed","summary":"Mid-Autumn Festival","region":"China","date":"2024-09-17"},{"id":"20241001_r01ci0k9kfo8prannq60kdve94","status":"confirmed","summary":"National Day","region":"China","date":"2024-10-01"},{"id":"20241002_jo7qneabik8d1pqhf9ofjsb9qc","status":"confirmed","summary":"National Day Golden Week Holiday","region":"China","date":"2024-10-02"},{"id":"20241003_ch9hartuuorv0jkrvlk3aebbrk","status":"confirmed","summary":"National Day Golden Week holiday","region":"China","date":"2024-10-03"},{"id":"20241004_pp3henh5k2var37q92lle2t8cc","status":"confirmed","summary":"National Day Golden Week holiday","region":"China","date":"2024-10-04"},{"id":"20241005_ioe8f8i7j4df4eorhleohm5no0","status":"confirmed","summary":"National Day Golden Week holiday","region":"China","date":"2024-10-05"},{"id":"20241006_u4emmjvcqvk4nlmdng05o78m94","status":"confirmed","summary":"National Day Golden Week holiday","region":"China","date":"2024-10-06"},{"id":"20241007_n0kb243lqht43dpa94cj10nucc","status":"confirmed","summary":"National Day Golden Week holiday","region":"China","date":"2024-10-07"},{"id":"20241011_bo4uoc87sdi8ra3aodq5v7t0hk","status":"confirmed","summary":"Double Ninth Festival","region":"China","date":"2024-10-11"},{"id":"20241225_4mkosda3ed2l7aju3uap6ehur8","status":"confirmed","summary":"Christmas Day","region":"China","date":"2024-12-25"},{"id":"20250101_9lpgsg3ina99hvq51letvjlpj4","status":"confirmed","summary":"New Year\'s Day","region":"China","date":"2025-01-01"},{"id":"20250128_5ekt99qjeikjn6n6iqu0mhvaok","status":"confirmed","summary":"Spring Festival Eve","region":"China","date":"2025-01-28"},{"id":"20250129_bkuam7ng9k5mjaq18q0c53n208","status":"confirmed","summary":"Chinese New Year","region":"China","date":"2025-01-29"},{"id":"20250130_ah5el7a85gpe570lc632q19bpk","status":"confirmed","summary":"Spring Festival Golden Week holiday","region":"China","date":"2025-01-30"},{"id":"20250131_ksfmn57arrrjrocg5mn4vki0fo","status":"confirmed","summary":"Spring Festival Golden Week holiday","region":"China","date":"2025-01-31"},{"id":"20250201_9sdt07g94bpsnb4vjk9fpbhp14","status":"confirmed","summary":"Spring Festival Golden Week holiday","region":"China","date":"2025-02-01"},{"id":"20250202_1hsnj7kbt147bgfqcihfh8ifug","status":"confirmed","summary":"Spring Festival Golden Week holiday","region":"China","date":"2025-02-02"},{"id":"20250203_orj303nf5nrpg4anf4mjoa611o","status":"confirmed","summary":"Spring Festival Golden Week holiday","region":"China","date":"2025-02-03"},{"id":"20250212_haidr5emhik83bm38bun20qbsk","status":"confirmed","summary":"Lantern Festival","region":"China","date":"2025-02-12"},{"id":"20250301_vi9kguoq9t1h67a7p5g05fb5bg","status":"confirmed","summary":"Zhonghe Festival","region":"China","date":"2025-03-01"},{"id":"20250308_n7lqbncd5ae0kgd9fcbhmoqnj8","status":"confirmed","summary":"International Women\'s Day","region":"China","date":"2025-03-08"},{"id":"20250312_4mjjucoqltcqp150hpfue78c80","status":"confirmed","summary":"Arbor Day","region":"China","date":"2025-03-12"},{"id":"20250405_5kifijfugj7u2k6fm162i43dug","status":"confirmed","summary":"Qing Ming Jie","region":"China","date":"2025-04-05"},{"id":"20250501_g779ofoqgl7ui4hek1ae3n7e6k","status":"confirmed","summary":"Labour Day","region":"China","date":"2025-05-01"},{"id":"20250504_l84tum6bonf0saqhvirfmt5adg","status":"confirmed","summary":"Youth Day","region":"China","date":"2025-05-04"},{"id":"20250531_lbc0cfj1rhhtticpiqv0aifdj8","status":"confirmed","summary":"Dragon Boat Festival","region":"China","date":"2025-05-31"},{"id":"20250829_ul7q6n2ds44ju7gu1gk17jopc0","status":"confirmed","summary":"Chinese Valentine\'s Day","region":"China","date":"2025-08-29"},{"id":"20250906_3cvp04ebp1g2osh26dhhoc9trs","status":"confirmed","summary":"Spirit Festival","region":"China","date":"2025-09-06"},{"id":"20250910_dagek2op6pntnvpe9bollv6nhc","status":"confirmed","summary":"Teachers\' Day","region":"China","date":"2025-09-10"},{"id":"20251001_3pvvqda6nba0see7g177n5r4io","status":"confirmed","summary":"National Day","region":"China","date":"2025-10-01"},{"id":"20251002_kdteobhkhhtil75pgjnb3bskv0","status":"confirmed","summary":"National Day Golden Week Holiday","region":"China","date":"2025-10-02"},{"id":"20251003_8gqjcph6rurbblc9od7n847qv4","status":"confirmed","summary":"National Day Golden Week holiday","region":"China","date":"2025-10-03"},{"id":"20251004_2ngo31v9h4fgd9ji40jdasfh34","status":"confirmed","summary":"National Day Golden Week holiday","region":"China","date":"2025-10-04"},{"id":"20251005_fv8ok70qqfvos93klaa9v7u8bc","status":"confirmed","summary":"National Day Golden Week holiday","region":"China","date":"2025-10-05"},{"id":"20251006_ccncrs131dp2t045d7jnhc4vdc","status":"confirmed","summary":"Mid-Autumn Festival","region":"China","date":"2025-10-06"},{"id":"20251006_vlml5ilpipsqsvs7ht40fv9kt8","status":"confirmed","summary":"National Day Golden Week holiday","region":"China","date":"2025-10-06"},{"id":"20251029_n2mpsb8pahn17vig47hddevfdg","status":"confirmed","summary":"Double Ninth Festival","region":"China","date":"2025-10-29"},{"id":"20251225_jm8ndvkq2fjnmslj22r53mlkks","status":"confirmed","summary":"Christmas Day","region":"China","date":"2025-12-25"}],"Côte d’Ivoire":[{"id":"20240101_gt2a7ghbj5grqofb6aul1p9ofs","status":"confirmed","summary":"New Year","region":"Côte d’Ivoire","date":"2024-01-01"},{"id":"20240212_tr481njhqhuap6c5gn2uq1c9kc","status":"confirmed","summary":"African Cup of Nations Victory","region":"Côte d’Ivoire","date":"2024-02-12"},{"id":"20240311_es3kmsdb9n3mgn2kv631iol3f4","status":"confirmed","summary":"Ramadan Start","region":"Côte d’Ivoire","date":"2024-03-11"},{"id":"20240401_9ghvkd9r5dqkf519fc4dpareic","status":"confirmed","summary":"Easter Monday","region":"Côte d’Ivoire","date":"2024-04-01"},{"id":"20240406_ec1l1s56old2c324mpdd8rvp9s","status":"confirmed","summary":"Day After Laila tou-Kadr","region":"Côte d’Ivoire","date":"2024-04-06"},{"id":"20240410_s3o8ajfmod9hdhkvk89egnn1m8","status":"confirmed","summary":"Aid el-Fitr","region":"Côte d’Ivoire","date":"2024-04-10"},{"id":"20240501_ii95mtqkv0ubgci7i8a1m621dg","status":"confirmed","summary":"Labor Day","region":"Côte d’Ivoire","date":"2024-05-01"},{"id":"20240509_jqst43r8r7i9ieccnf8j1vlngo","status":"confirmed","summary":"Ascension Day","region":"Côte d’Ivoire","date":"2024-05-09"},{"id":"20240520_i3dt5hv87ghj3i1evbgae5f5lo","status":"confirmed","summary":"Whit Monday","region":"Côte d’Ivoire","date":"2024-05-20"},{"id":"20240617_t9c9h93738jn9v10tf386o57qc","status":"confirmed","summary":"Aid el-Kebir","region":"Côte d’Ivoire","date":"2024-06-17"},{"id":"20240807_otlnu2ma7ab3invv4vd43ccvuc","status":"confirmed","summary":"Independence Day","region":"Côte d’Ivoire","date":"2024-08-07"},{"id":"20240815_4pid2n6e572nf2odr98soafbrg","status":"confirmed","summary":"Assumption of Mary","region":"Côte d’Ivoire","date":"2024-08-15"},{"id":"20240916_f2advflepssb3hiegpr904oeuk","status":"confirmed","summary":"The Day After Prophet\'s Birthday","region":"Côte d’Ivoire","date":"2024-09-16"},{"id":"20241101_0mdjv77i6ksi07fpr43km1qnk0","status":"confirmed","summary":"All Saints Day","region":"Côte d’Ivoire","date":"2024-11-01"},{"id":"20241115_570qh3cvf2enct15jeq6sg4gi0","status":"confirmed","summary":"National Peace Day","region":"Côte d’Ivoire","date":"2024-11-15"},{"id":"20241225_3sg5vp56lj23s118c575b19afo","status":"confirmed","summary":"Christmas Day","region":"Côte d’Ivoire","date":"2024-12-25"},{"id":"20250101_ogrlhp9o7o89doak4hr9cf7em8","status":"confirmed","summary":"New Year","region":"Côte d’Ivoire","date":"2025-01-01"},{"id":"20250301_lkiplalndct0h9rpb1gasu96j0","status":"confirmed","summary":"Ramadan Start","region":"Côte d’Ivoire","date":"2025-03-01"},{"id":"20250327_p69dc9lkn1d6te7ff0tpa5sk0s","status":"confirmed","summary":"Day After Laila tou-Kadr","region":"Côte d’Ivoire","date":"2025-03-27"},{"id":"20250331_d4vdnhrf1msdho87qa37b3vnr8","status":"confirmed","summary":"Aid el-Fitr","region":"Côte d’Ivoire","date":"2025-03-31"},{"id":"20250421_bai43r7gm9nqmifjb8i70abi38","status":"confirmed","summary":"Easter Monday","region":"Côte d’Ivoire","date":"2025-04-21"},{"id":"20250501_j9qjskpehgns1sv1go8fuoq4uo","status":"confirmed","summary":"Labor Day","region":"Côte d’Ivoire","date":"2025-05-01"},{"id":"20250529_9had6eu33b8uoesmqu1o9fmbns","status":"confirmed","summary":"Ascension Day","region":"Côte d’Ivoire","date":"2025-05-29"},{"id":"20250607_aaa4uijevjtljoja8edvqg4ru0","status":"confirmed","summary":"Aid el-Kebir","region":"Côte d’Ivoire","date":"2025-06-07"},{"id":"20250609_gdn7n21g9qp7oo3r5rcmae6p50","status":"confirmed","summary":"Whit Monday","region":"Côte d’Ivoire","date":"2025-06-09"},{"id":"20250807_3kes52ajg1ql4gutr23qnd604o","status":"confirmed","summary":"Independence Day","region":"Côte d’Ivoire","date":"2025-08-07"},{"id":"20250815_trcv48vdokqr2nhiemq95b5nmk","status":"confirmed","summary":"Assumption of Mary","region":"Côte d’Ivoire","date":"2025-08-15"},{"id":"20250905_ooakt3o476lv7s2tlpoqg89vo0","status":"confirmed","summary":"The Day After Prophet\'s Birthday","region":"Côte d’Ivoire","date":"2025-09-05"},{"id":"20251101_98ck4eo34sqbevvu2thvroo6l4","status":"confirmed","summary":"All Saints Day","region":"Côte d’Ivoire","date":"2025-11-01"},{"id":"20251115_urrh63qaq26retra7sdrc9nu34","status":"confirmed","summary":"National Peace Day","region":"Côte d’Ivoire","date":"2025-11-15"},{"id":"20251225_sr5k1ftc55qd1fhj66l0keogds","status":"confirmed","summary":"Christmas Day","region":"Côte d’Ivoire","date":"2025-12-25"}],"Cook Islands":[{"id":"20240101_o0das8adkgdn3798udmrsohe3g","status":"confirmed","summary":"New Year\'s Day","region":"Cook Islands","date":"2024-01-01"},{"id":"20240102_7pdot3pal8nl656sbst6bn6ob8","status":"confirmed","summary":"Day After New Year\'s Day","region":"Cook Islands","date":"2024-01-02"},{"id":"20240329_fg5do6epda7bp58fe607slmnd0","status":"confirmed","summary":"Good Friday","region":"Cook Islands","date":"2024-03-29"},{"id":"20240331_ufseu0nt92725orvmm0ur2bdm4","status":"confirmed","summary":"Easter Sunday","region":"Cook Islands","date":"2024-03-31"},{"id":"20240401_7gk52dedn0hq8rqdr62sffih44","status":"confirmed","summary":"Easter Monday","region":"Cook Islands","date":"2024-04-01"},{"id":"20240425_ih8o9d6cm6iea7fcp6uargamj0","status":"confirmed","summary":"ANZAC Day","region":"Cook Islands","date":"2024-04-25"},{"id":"20240603_697pvh5d3us4hoh64hrutvt0so","status":"confirmed","summary":"Sovereign\'s Birthday","region":"Cook Islands","date":"2024-06-03"},{"id":"20240705_tnplveoch0s1ilmo0a7qvpq9r8","status":"confirmed","summary":"Ui Ariki Day","region":"Cook Islands","date":"2024-07-05"},{"id":"20240804_1c6ukl7nma5uhq1inehivub4n8","status":"confirmed","summary":"Constitution Day","region":"Cook Islands","date":"2024-08-04"},{"id":"20240805_apu0fh01gubesbvv3e7o71q4qc","status":"confirmed","summary":"Constitution Day observed","region":"Cook Islands","date":"2024-08-05"},{"id":"20241026_5kfj7q8cuhn80ql87d0q8dg2fc","status":"confirmed","summary":"Gospel Day","region":"Cook Islands","date":"2024-10-26"},{"id":"20241028_5tk3i75cpu0rs4o98jn53jand4","status":"confirmed","summary":"Gospel Day observed","region":"Cook Islands","date":"2024-10-28"},{"id":"20241225_3ugg39p10mndjhe0mlbg1990ko","status":"confirmed","summary":"Christmas Day","region":"Cook Islands","date":"2024-12-25"},{"id":"20241226_8bqeov7bggl03lvf2q6njvrs3g","status":"confirmed","summary":"Boxing Day","region":"Cook Islands","date":"2024-12-26"},{"id":"20250101_9ij927ncuteesv6o8sgv3kuqoo","status":"confirmed","summary":"New Year\'s Day","region":"Cook Islands","date":"2025-01-01"},{"id":"20250102_ptpvuqhbnqq6uq881glattdkek","status":"confirmed","summary":"Day After New Year\'s Day","region":"Cook Islands","date":"2025-01-02"},{"id":"20250418_orns10qf3k1gn92i9ckeg6iufg","status":"confirmed","summary":"Good Friday","region":"Cook Islands","date":"2025-04-18"},{"id":"20250420_cbmg8b406jil7681i7uld4cv5c","status":"confirmed","summary":"Easter Sunday","region":"Cook Islands","date":"2025-04-20"},{"id":"20250421_ebdjispfg2381kqkvsb33p7vpg","status":"confirmed","summary":"Easter Monday","region":"Cook Islands","date":"2025-04-21"},{"id":"20250425_00nnji044qr8m36oo8irrmi0cg","status":"confirmed","summary":"ANZAC Day","region":"Cook Islands","date":"2025-04-25"},{"id":"20250602_2bm9mvo1g74dekn5v5nffpenec","status":"confirmed","summary":"Sovereign\'s Birthday","region":"Cook Islands","date":"2025-06-02"},{"id":"20250704_jdjgpjq1sv0f7svk2glmu9mf04","status":"confirmed","summary":"Ui Ariki Day","region":"Cook Islands","date":"2025-07-04"},{"id":"20250804_t0e54dvlhr3fv5emid4k2kakic","status":"confirmed","summary":"Constitution Day","region":"Cook Islands","date":"2025-08-04"},{"id":"20251026_uqo72eb5fu798b881mgvevfh2g","status":"confirmed","summary":"Gospel Day","region":"Cook Islands","date":"2025-10-26"},{"id":"20251027_s0sj215c59fbhtdo19bug7dcfs","status":"confirmed","summary":"Gospel Day observed","region":"Cook Islands","date":"2025-10-27"},{"id":"20251225_5mqor1k5887an5a8sl4nm0ageg","status":"confirmed","summary":"Christmas Day","region":"Cook Islands","date":"2025-12-25"},{"id":"20251226_af6j0aa88ep30kgguk0mfj8tk4","status":"confirmed","summary":"Boxing Day","region":"Cook Islands","date":"2025-12-26"}],"Chile":[{"id":"20240101_l6qa76c4l6ts1ev4p1k5ibnmf0","status":"confirmed","summary":"New Year\'s Day","region":"Chile","date":"2024-01-01"},{"id":"20240328_8jvf80m9lb4je597jmk1051eh4","status":"confirmed","summary":"Maundy Thursday","region":"Chile","date":"2024-03-28"},{"id":"20240329_icqd02ts8ruuj3qi8mn986tijg","status":"confirmed","summary":"Good Friday","region":"Chile","date":"2024-03-29"},{"id":"20240330_jgsos8qdvkjv5b09j5fbdtpeoc","status":"confirmed","summary":"Holy Saturday","region":"Chile","date":"2024-03-30"},{"id":"20240331_3c4vbilsad638g00g3i0udagjg","status":"confirmed","summary":"Easter Sunday","region":"Chile","date":"2024-03-31"},{"id":"20240501_agrtfsvpgbjr4c3b63dh73s3tg","status":"confirmed","summary":"Labor Day / May Day","region":"Chile","date":"2024-05-01"},{"id":"20240521_gnb4ofi31gaj9ne42l5c2ng440","status":"confirmed","summary":"Navy Day","region":"Chile","date":"2024-05-21"},{"id":"20240530_hbeftms5c2b883df2asto2lock","status":"confirmed","summary":"Corpus Christi","region":"Chile","date":"2024-05-30"},{"id":"20240620_eesevemf3qubcnelvets67rrs8","status":"confirmed","summary":"National Day of Indigenous Peoples","region":"Chile","date":"2024-06-20"},{"id":"20240629_fc88951j4krd9v2r1htqg3o8ps","status":"confirmed","summary":"Saint Peter and Saint Paul","region":"Chile","date":"2024-06-29"},{"id":"20240716_fvdlaphoj1dkut5eqnpo9i4nbc","status":"confirmed","summary":"Our Lady of Mount Carmel","region":"Chile","date":"2024-07-16"},{"id":"20240815_v7ltib5ejnkn9dt0860i18u0h0","status":"confirmed","summary":"Assumption of Mary","region":"Chile","date":"2024-08-15"},{"id":"20240918_3kqo1lfn2q0f539ho3i8od1kik","status":"confirmed","summary":"National Day","region":"Chile","date":"2024-09-18"},{"id":"20240919_v9k0apv9p1cietbu45feo38vs0","status":"confirmed","summary":"Army Day","region":"Chile","date":"2024-09-19"},{"id":"20240920_eislmq8f41jr0121155m15d9ck","status":"confirmed","summary":"Extended National Day Holiday","region":"Chile","date":"2024-09-20"},{"id":"20241012_tmn4ls54h6p54k00bj3tbg118o","status":"confirmed","summary":"Day of the Discovery of Two Worlds","region":"Chile","date":"2024-10-12"},{"id":"20241027_6ls2uj3vp766hj528q4pcpo4us","status":"confirmed","summary":"Local elections","region":"Chile","date":"2024-10-27"},{"id":"20241031_kds9qfo5m9sl55ope4vlgff1cc","status":"confirmed","summary":"Reformation Day","region":"Chile","date":"2024-10-31"},{"id":"20241101_b3oab3f22ucinuv9u5m04farl0","status":"confirmed","summary":"All Saints\' Day","region":"Chile","date":"2024-11-01"},{"id":"20241124_qvv21gni37cjhjnauh6kgov0gk","status":"confirmed","summary":"Second Round Local elections","region":"Chile","date":"2024-11-24"},{"id":"20241208_ra7pamup6kjac192lnhm3caps8","status":"confirmed","summary":"Inmaculate Conception Day","region":"Chile","date":"2024-12-08"},{"id":"20241225_91l8dsdnlg3928qi6ma2i7nr74","status":"confirmed","summary":"Christmas Day","region":"Chile","date":"2024-12-25"},{"id":"20250101_dbu6gotr17u08o9ls7e40fmp80","status":"confirmed","summary":"New Year\'s Day","region":"Chile","date":"2025-01-01"},{"id":"20250417_hngc49294aokp4pm3epdv6mna0","status":"confirmed","summary":"Maundy Thursday","region":"Chile","date":"2025-04-17"},{"id":"20250418_i7bda2cc6vu6usrnpfr59fcpho","status":"confirmed","summary":"Good Friday","region":"Chile","date":"2025-04-18"},{"id":"20250419_5v8c72bo41ekjcfa28906bub8s","status":"confirmed","summary":"Holy Saturday","region":"Chile","date":"2025-04-19"},{"id":"20250420_e4n1pkgjnur8dollfg6og3m88k","status":"confirmed","summary":"Easter Sunday","region":"Chile","date":"2025-04-20"},{"id":"20250501_u8ub9hnipav5ofkgt95cbq3gp8","status":"confirmed","summary":"Labor Day / May Day","region":"Chile","date":"2025-05-01"},{"id":"20250521_07su8l25ijg847q90d0lhvo338","status":"confirmed","summary":"Navy Day","region":"Chile","date":"2025-05-21"},{"id":"20250619_4f17ms653um4gs8ec58c4kbqgs","status":"confirmed","summary":"Corpus Christi","region":"Chile","date":"2025-06-19"},{"id":"20250620_hj9ooqfrmoep39gvg2hja2vjn4","status":"confirmed","summary":"National Day of Indigenous Peoples","region":"Chile","date":"2025-06-20"},{"id":"20250629_51uov0k4si7bojbhjtj25d5cu0","status":"confirmed","summary":"Saint Peter and Saint Paul","region":"Chile","date":"2025-06-29"},{"id":"20250716_3djn3osl9aqa2h87in5ou2fpsk","status":"confirmed","summary":"Our Lady of Mount Carmel","region":"Chile","date":"2025-07-16"},{"id":"20250815_q03htnc6vmnnhjalmtauagenhs","status":"confirmed","summary":"Assumption of Mary","region":"Chile","date":"2025-08-15"},{"id":"20250918_mpdmgdbggvivlcu0f9sc475fso","status":"confirmed","summary":"National Day","region":"Chile","date":"2025-09-18"},{"id":"20250919_blv749capudmoicg4v5bl1bpfs","status":"confirmed","summary":"Army Day","region":"Chile","date":"2025-09-19"},{"id":"20251012_tkhuohj9n03pa03q9i62aktvf8","status":"confirmed","summary":"Day of the Discovery of Two Worlds","region":"Chile","date":"2025-10-12"},{"id":"20251031_p69ssph1sjukp1mte0l9rijbqg","status":"confirmed","summary":"Reformation Day","region":"Chile","date":"2025-10-31"},{"id":"20251101_mdctlngvqo391pt0ob4b2el6g0","status":"confirmed","summary":"All Saints\' Day","region":"Chile","date":"2025-11-01"},{"id":"20251208_4suqo7nic8id3qff5atrqq8ga0","status":"confirmed","summary":"Inmaculate Conception Day","region":"Chile","date":"2025-12-08"},{"id":"20251225_f7vv0u3r5fq3grbt76lv2iamd0","status":"confirmed","summary":"Christmas Day","region":"Chile","date":"2025-12-25"}],"Cameroon":[{"id":"20240101_8cini1iq3b4ajj5i6p9c5nfcgk","status":"confirmed","summary":"New Year\'s Day","region":"Cameroon","date":"2024-01-01"},{"id":"20240211_hrdth8s2f3911a8rf01j1l9ueg","status":"confirmed","summary":"Youth Day","region":"Cameroon","date":"2024-02-11"},{"id":"20240212_j94th2tljd4argqqtvq1ms09dk","status":"confirmed","summary":"Youth Day observed","region":"Cameroon","date":"2024-02-12"},{"id":"20240312_ine26gp62ric080fkaklkrfofo","status":"confirmed","summary":"Ramadan Start","region":"Cameroon","date":"2024-03-12"},{"id":"20240329_ttvji7l6cho1nkhu76t5s36fvs","status":"confirmed","summary":"Good Friday","region":"Cameroon","date":"2024-03-29"},{"id":"20240331_u1a7av7vrvndsnuqufrnocmabk","status":"confirmed","summary":"Easter Sunday","region":"Cameroon","date":"2024-03-31"},{"id":"20240410_df52oalu0au6lqnmcq23v3kb7g","status":"confirmed","summary":"Eid al-Fitr","region":"Cameroon","date":"2024-04-10"},{"id":"20240501_lf5k4i807b4dbaqng4miebrj88","status":"confirmed","summary":"Labour Day","region":"Cameroon","date":"2024-05-01"},{"id":"20240509_0f8l7ni2p1uhidojahtu751d7s","status":"confirmed","summary":"Ascension Day","region":"Cameroon","date":"2024-05-09"},{"id":"20240520_baeqrdg4e399uu6asbbmgm8f5k","status":"confirmed","summary":"National Day","region":"Cameroon","date":"2024-05-20"},{"id":"20240617_2unlreudegg0u3hiuol9g06rgg","status":"confirmed","summary":"Eid al-Adha","region":"Cameroon","date":"2024-06-17"},{"id":"20240815_re8bisdgiga366j55pj0s99aeo","status":"confirmed","summary":"Assumption of Mary","region":"Cameroon","date":"2024-08-15"},{"id":"20240916_ri3sci050k3ek6r11diirskls0","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Cameroon","date":"2024-09-16"},{"id":"20241225_h3d6009dbe7l10viudj12tafac","status":"confirmed","summary":"Christmas Day","region":"Cameroon","date":"2024-12-25"},{"id":"20250101_bh58pebjq3rod6j9eu2b7kg66s","status":"confirmed","summary":"New Year\'s Day","region":"Cameroon","date":"2025-01-01"},{"id":"20250211_30uc6hl33tekmrhin4pgv1r67k","status":"confirmed","summary":"Youth Day","region":"Cameroon","date":"2025-02-11"},{"id":"20250301_5fhole9detfcdgo4gthepna7ok","status":"confirmed","summary":"Ramadan Start","region":"Cameroon","date":"2025-03-01"},{"id":"20250331_af3svdu74q7p938mi7fbec8kl0","status":"confirmed","summary":"Eid al-Fitr","region":"Cameroon","date":"2025-03-31"},{"id":"20250418_4b5jo8us0vl572qj6pkdno3l04","status":"confirmed","summary":"Good Friday","region":"Cameroon","date":"2025-04-18"},{"id":"20250420_mc2c5o6cb82s8fp67ooq59l944","status":"confirmed","summary":"Easter Sunday","region":"Cameroon","date":"2025-04-20"},{"id":"20250501_8ttkl4ta8aj5nu09vsh76tinpc","status":"confirmed","summary":"Labour Day","region":"Cameroon","date":"2025-05-01"},{"id":"20250520_9dcsolb7175sae35onl1ogvhek","status":"confirmed","summary":"National Day","region":"Cameroon","date":"2025-05-20"},{"id":"20250529_ddtef3qipk65ntccf65ov220a4","status":"confirmed","summary":"Ascension Day","region":"Cameroon","date":"2025-05-29"},{"id":"20250607_snc3pcknr0dhnoebae82i271jo","status":"confirmed","summary":"Eid al-Adha","region":"Cameroon","date":"2025-06-07"},{"id":"20250815_cccglq45fe0l7kvs8v3rm2ueoo","status":"confirmed","summary":"Assumption of Mary","region":"Cameroon","date":"2025-08-15"},{"id":"20250905_64dmhajaqi9ncr28kdge4bjlto","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Cameroon","date":"2025-09-05"},{"id":"20251225_5ugfpdfco95qql2nqd8q5ov1p0","status":"confirmed","summary":"Christmas Day","region":"Cameroon","date":"2025-12-25"}],"Colombia":[{"id":"20240101_shhivp2dbr0h1r2hpuasvhiiv4","status":"confirmed","summary":"New Year\'s Day","region":"Colombia","date":"2024-01-01"},{"id":"20240106_jijkeu8evlc57cb0uskgat0vb8","status":"confirmed","summary":"Epiphany","region":"Colombia","date":"2024-01-06"},{"id":"20240108_kaj4dpuqkqk01j1oclhatec5cg","status":"confirmed","summary":"Epiphany","region":"Colombia","date":"2024-01-08"},{"id":"20240308_9j8hp9hjfe2varnuv8al483pp8","status":"confirmed","summary":"Women\'s Day","region":"Colombia","date":"2024-03-08"},{"id":"20240319_tvkahsq63qsokj35abp60gltr4","status":"confirmed","summary":"Saint Joseph\'s Day","region":"Colombia","date":"2024-03-19"},{"id":"20240324_2b19ol7i0gv463fv1hq3j13f9g","status":"confirmed","summary":"Palm Sunday","region":"Colombia","date":"2024-03-24"},{"id":"20240325_2d05sn9s7dp2r3pq4a906lgjn8","status":"confirmed","summary":"Saint Joseph\'s Day","region":"Colombia","date":"2024-03-25"},{"id":"20240328_qam0n1tt2n0v0r51ja85q0dd3c","status":"confirmed","summary":"Maundy Thursday","region":"Colombia","date":"2024-03-28"},{"id":"20240329_3foni9itl2ddlmcsj9g8p76t1o","status":"confirmed","summary":"Good Friday","region":"Colombia","date":"2024-03-29"},{"id":"20240331_ja4gucsq9bbi14vi2u3b91hou4","status":"confirmed","summary":"Easter Sunday","region":"Colombia","date":"2024-03-31"},{"id":"20240423_so070l61jkhlfem47cr9m7v1es","status":"confirmed","summary":"Language Day","region":"Colombia","date":"2024-04-23"},{"id":"20240426_prnh4qoe6o9s3skv3c3ub3sl2s","status":"confirmed","summary":"Secretaries\' Day","region":"Colombia","date":"2024-04-26"},{"id":"20240427_8pmr8dofo5ek1tlrm2dd7e7g70","status":"confirmed","summary":"Children\'s Day","region":"Colombia","date":"2024-04-27"},{"id":"20240429_5jr5d7c5tgn2bc2rigo3rk4o88","status":"confirmed","summary":"Day of Trees","region":"Colombia","date":"2024-04-29"},{"id":"20240501_oci5op94oith8p7t82k8nh35p4","status":"confirmed","summary":"Labor Day / May Day","region":"Colombia","date":"2024-05-01"},{"id":"20240512_tfdakoim3kvg0991kamfloqflk","status":"confirmed","summary":"Mothers\' Day","region":"Colombia","date":"2024-05-12"},{"id":"20240513_sej0kdkdsuu5k6ij084i48sd74","status":"confirmed","summary":"Ascension Day","region":"Colombia","date":"2024-05-13"},{"id":"20240515_i3a0stjhdl5kgm6rvuqeae8j14","status":"confirmed","summary":"Teacher\'s Day","region":"Colombia","date":"2024-05-15"},{"id":"20240530_64btndenhelc2eela4u4q0mu9o","status":"confirmed","summary":"Corpus Christi","region":"Colombia","date":"2024-05-30"},{"id":"20240603_frsmn56hlknet3o5pnrrq57prc","status":"confirmed","summary":"Corpus Christi","region":"Colombia","date":"2024-06-03"},{"id":"20240610_c4namo7c6a51vlvf2j49u0nn3g","status":"confirmed","summary":"Sacred Heart","region":"Colombia","date":"2024-06-10"},{"id":"20240616_1qu7evuumf882naqno64vfnbjs","status":"confirmed","summary":"Fathers\' Day","region":"Colombia","date":"2024-06-16"},{"id":"20240629_m6v63glkh6m79pdvc3p0q915v4","status":"confirmed","summary":"Feast of Saint Peter and Saint Paul","region":"Colombia","date":"2024-06-29"},{"id":"20240701_na0equhr5n85sk5ofojipm9vok","status":"confirmed","summary":"Feast of Saint Peter and Saint Paul","region":"Colombia","date":"2024-07-01"},{"id":"20240720_8p6tmdun5781fkddb9g642l46g","status":"confirmed","summary":"Independence Day","region":"Colombia","date":"2024-07-20"},{"id":"20240807_d8r5u650m02vj0f838lhtn22og","status":"confirmed","summary":"Battle of Boyacá Day","region":"Colombia","date":"2024-08-07"},{"id":"20240815_4us60gf32gesndf6goeuo9riu0","status":"confirmed","summary":"Assumption of Mary","region":"Colombia","date":"2024-08-15"},{"id":"20240819_2s1kvlk4rcd8t4p5mfc8rd8omg","status":"confirmed","summary":"Assumption of Mary","region":"Colombia","date":"2024-08-19"},{"id":"20240921_liuq77j8c025cr9ln0vggnfjgc","status":"confirmed","summary":"Valentine\'s Day","region":"Colombia","date":"2024-09-21"},{"id":"20241012_gr1rrnhmc8ne0gi3blhkemnlg0","status":"confirmed","summary":"Columbus Day","region":"Colombia","date":"2024-10-12"},{"id":"20241014_irppcur1eje76v42kup7mcco7g","status":"confirmed","summary":"Columbus Day","region":"Colombia","date":"2024-10-14"},{"id":"20241031_d32fjm0sd324aom316rvgjfm4g","status":"confirmed","summary":"Halloween","region":"Colombia","date":"2024-10-31"},{"id":"20241101_272cnd6g9hc9602l5fgnfgvpc4","status":"confirmed","summary":"All Saints\' Day","region":"Colombia","date":"2024-11-01"},{"id":"20241104_43ifmst2qhk8h6617r4vdc1rjs","status":"confirmed","summary":"All Saints\' Day","region":"Colombia","date":"2024-11-04"},{"id":"20241111_4vgaktq7ck2v9cbt9vi11v1hd8","status":"confirmed","summary":"Independence of Cartagena","region":"Colombia","date":"2024-11-11"},{"id":"20241114_ihcoki6jhh10ulhrvf8oigaj6c","status":"confirmed","summary":"Colombian Women\'s Day","region":"Colombia","date":"2024-11-14"},{"id":"20241207_8571klnafd7snbcniuso4jkems","status":"confirmed","summary":"Eve of the Feast of the Immaculate Conception","region":"Colombia","date":"2024-12-07"},{"id":"20241208_sf08blmd5creql93ra94eh5ft0","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Colombia","date":"2024-12-08"},{"id":"20241224_vagjebcb4l3smnat00b690ssl8","status":"confirmed","summary":"Christmas Eve","region":"Colombia","date":"2024-12-24"},{"id":"20241225_3onip1kco73ceepoe23uaq7s6c","status":"confirmed","summary":"Christmas Day","region":"Colombia","date":"2024-12-25"},{"id":"20241231_ojkm336t3u01pvj7f8esppvi90","status":"confirmed","summary":"New Year\'s Eve","region":"Colombia","date":"2024-12-31"},{"id":"20250101_o7g9qujoph6ogejl26ltnsbgk8","status":"confirmed","summary":"New Year\'s Day","region":"Colombia","date":"2025-01-01"},{"id":"20250106_0o8o0sbkpg9dssuqvoa05bqhfo","status":"confirmed","summary":"Epiphany","region":"Colombia","date":"2025-01-06"},{"id":"20250308_fvpeg5ci1d8gs63oagq8cfcfno","status":"confirmed","summary":"Women\'s Day","region":"Colombia","date":"2025-03-08"},{"id":"20250319_kcmrjpr5nje83rc9bf0973jga0","status":"confirmed","summary":"Saint Joseph\'s Day","region":"Colombia","date":"2025-03-19"},{"id":"20250324_pdplsbt7s42jajjkf6n1aifrmo","status":"confirmed","summary":"Saint Joseph\'s Day","region":"Colombia","date":"2025-03-24"},{"id":"20250413_gtdkjlvncks09otghjl90qqars","status":"confirmed","summary":"Palm Sunday","region":"Colombia","date":"2025-04-13"},{"id":"20250417_4ibdq2cqgjdgsqaar1vd3eqc24","status":"confirmed","summary":"Maundy Thursday","region":"Colombia","date":"2025-04-17"},{"id":"20250418_1n0u6s5v3pambfcv1bde82nhc0","status":"confirmed","summary":"Good Friday","region":"Colombia","date":"2025-04-18"},{"id":"20250420_e4aregcs776unom537duslspjg","status":"confirmed","summary":"Easter Sunday","region":"Colombia","date":"2025-04-20"},{"id":"20250423_rehh7sf5c1q1la96aefuh2ublc","status":"confirmed","summary":"Language Day","region":"Colombia","date":"2025-04-23"},{"id":"20250426_amqm81fu4rpkalhuua0bscab1g","status":"confirmed","summary":"Children\'s Day","region":"Colombia","date":"2025-04-26"},{"id":"20250426_h42gb68u0ena0v2snqlli02fp4","status":"confirmed","summary":"Secretaries\' Day","region":"Colombia","date":"2025-04-26"},{"id":"20250429_e5k7qdvfub75hk9odt6rsropp0","status":"confirmed","summary":"Day of Trees","region":"Colombia","date":"2025-04-29"},{"id":"20250501_0mgluhtmv9npcurb8brkbbp01s","status":"confirmed","summary":"Labor Day / May Day","region":"Colombia","date":"2025-05-01"},{"id":"20250511_rv63n3j775erjkmtc17usldvk4","status":"confirmed","summary":"Mothers\' Day","region":"Colombia","date":"2025-05-11"},{"id":"20250515_gbler125s28bknlfqhg3vvojhs","status":"confirmed","summary":"Teacher\'s Day","region":"Colombia","date":"2025-05-15"},{"id":"20250602_u9t5ddoka366g45prdg7c2dn3c","status":"confirmed","summary":"Ascension Day","region":"Colombia","date":"2025-06-02"},{"id":"20250615_bfiild2plctlrt100b1cgnme94","status":"confirmed","summary":"Fathers\' Day","region":"Colombia","date":"2025-06-15"},{"id":"20250619_smlgeo3fji3p03n5qjhtn1sk98","status":"confirmed","summary":"Corpus Christi","region":"Colombia","date":"2025-06-19"},{"id":"20250623_jthm72frq31cmaqjhdum8q48d0","status":"confirmed","summary":"Corpus Christi","region":"Colombia","date":"2025-06-23"},{"id":"20250629_3ol8m7p8fl3i5hpur0hqp3kgf4","status":"confirmed","summary":"Feast of Saint Peter and Saint Paul","region":"Colombia","date":"2025-06-29"},{"id":"20250630_6l1cjnj28bikafm159rlmkgjsk","status":"confirmed","summary":"Sacred Heart","region":"Colombia","date":"2025-06-30"},{"id":"20250630_lhcn6c20i5smh27afsvf6at55c","status":"confirmed","summary":"Feast of Saint Peter and Saint Paul","region":"Colombia","date":"2025-06-30"},{"id":"20250720_rl1omcqtnkbsr3altadl2ttfso","status":"confirmed","summary":"Independence Day","region":"Colombia","date":"2025-07-20"},{"id":"20250807_s4c6flt6b85hb1bmjgn6d9t1ug","status":"confirmed","summary":"Battle of Boyacá Day","region":"Colombia","date":"2025-08-07"},{"id":"20250815_qj7jliurh2n753g6fsmvqf3cks","status":"confirmed","summary":"Assumption of Mary","region":"Colombia","date":"2025-08-15"},{"id":"20250818_ahqoaeam3o41bukbnnj7705auo","status":"confirmed","summary":"Assumption of Mary","region":"Colombia","date":"2025-08-18"},{"id":"20250920_0bl8aeimcfnbnm11u20vkiebhk","status":"confirmed","summary":"Valentine\'s Day","region":"Colombia","date":"2025-09-20"},{"id":"20251012_731ltnl2bfq6o3nsc61shqgb30","status":"confirmed","summary":"Columbus Day","region":"Colombia","date":"2025-10-12"},{"id":"20251013_4bdamkfcr8a28q6vbh9f85mtrg","status":"confirmed","summary":"Columbus Day","region":"Colombia","date":"2025-10-13"},{"id":"20251031_k93k4607o17po0eqp0t83rd5lk","status":"confirmed","summary":"Halloween","region":"Colombia","date":"2025-10-31"},{"id":"20251101_jgralk6clp7lf1jk25ibctcao8","status":"confirmed","summary":"All Saints\' Day","region":"Colombia","date":"2025-11-01"},{"id":"20251103_ohkr25varqompqvhfjfprgftuo","status":"confirmed","summary":"All Saints\' Day","region":"Colombia","date":"2025-11-03"},{"id":"20251111_6nt5uam1je2alscqss1orlpg0s","status":"confirmed","summary":"Independence of Cartagena","region":"Colombia","date":"2025-11-11"},{"id":"20251114_b6epfsj61th7dn37c2u8t13080","status":"confirmed","summary":"Colombian Women\'s Day","region":"Colombia","date":"2025-11-14"},{"id":"20251117_em62bqicbhr3n2t3v62pold4hg","status":"confirmed","summary":"Independence of Cartagena","region":"Colombia","date":"2025-11-17"},{"id":"20251207_ep65p3q8kkn8j2k6mnt5qq7tdc","status":"confirmed","summary":"Eve of the Feast of the Immaculate Conception","region":"Colombia","date":"2025-12-07"},{"id":"20251208_3j4diqh2vi6un5da4n34k7a6i0","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Colombia","date":"2025-12-08"},{"id":"20251224_vnpi6509mk5gd3g9e3vg3jjqrs","status":"confirmed","summary":"Christmas Eve","region":"Colombia","date":"2025-12-24"},{"id":"20251225_8iflv0hls5m4hpsi23plgsbg6k","status":"confirmed","summary":"Christmas Day","region":"Colombia","date":"2025-12-25"},{"id":"20251231_u2go9kdvcuab5ghqnn3130ju48","status":"confirmed","summary":"New Year\'s Eve","region":"Colombia","date":"2025-12-31"}],"Costa Rica":[{"id":"20240101_ppdnungbfq94b1kfkqmebhjams","status":"confirmed","summary":"New Year\'s Day","region":"Costa Rica","date":"2024-01-01"},{"id":"20240319_2td6c7soj2plg4adv9g25244mk","status":"confirmed","summary":"Saint Joseph\'s Day","region":"Costa Rica","date":"2024-03-19"},{"id":"20240325_jmh3v20g6muflv8h1cq8ga4280","status":"confirmed","summary":"Public Sector Holiday","region":"Costa Rica","date":"2024-03-25"},{"id":"20240326_c9dv58kkg7to5nammb277kr120","status":"confirmed","summary":"Public Sector Holiday","region":"Costa Rica","date":"2024-03-26"},{"id":"20240327_k6p51i6ja06pmn6ssqbdi7d3v0","status":"confirmed","summary":"Public Sector Holiday","region":"Costa Rica","date":"2024-03-27"},{"id":"20240328_967vnmrceldrud1m3et70tkm1g","status":"confirmed","summary":"Maundy Thursday","region":"Costa Rica","date":"2024-03-28"},{"id":"20240329_nrs1vs8uve2tgsmv6igl3lgm5g","status":"confirmed","summary":"Good Friday","region":"Costa Rica","date":"2024-03-29"},{"id":"20240411_ieo3h8b0h48nr8pcgiiljsf2lc","status":"confirmed","summary":"Battle of Rivas","region":"Costa Rica","date":"2024-04-11"},{"id":"20240415_6280f7gtlmvafs4dfp8r0j2lds","status":"confirmed","summary":"Battle of Rivas","region":"Costa Rica","date":"2024-04-15"},{"id":"20240501_39b7qm1a2panokahd4bkr9fmkg","status":"confirmed","summary":"Labor Day / May Day","region":"Costa Rica","date":"2024-05-01"},{"id":"20240616_t0mbevkv04q954ohl7ldm1olc0","status":"confirmed","summary":"Father\'s Day","region":"Costa Rica","date":"2024-06-16"},{"id":"20240725_6dlnqka5palabm5nkdm3qju544","status":"confirmed","summary":"Annexation of Guanacaste","region":"Costa Rica","date":"2024-07-25"},{"id":"20240802_lutuq3o9n9eobtdfj15h3700ao","status":"confirmed","summary":"Our Lady of Los Ángeles","region":"Costa Rica","date":"2024-08-02"},{"id":"20240815_la40thpkvlat3kvu3ii47bfo74","status":"confirmed","summary":"Mother\'s Day","region":"Costa Rica","date":"2024-08-15"},{"id":"20240824_lpdrtoupgmqs6fj50dnhdkrpao","status":"confirmed","summary":"National Parks Day","region":"Costa Rica","date":"2024-08-24"},{"id":"20240909_pjhhc7pdjva1qh4fc9ldn4gh2s","status":"confirmed","summary":"Children\'s Day","region":"Costa Rica","date":"2024-09-09"},{"id":"20240915_8d7bvi50i5oepf5e3v4h9gug2c","status":"confirmed","summary":"Independence Day","region":"Costa Rica","date":"2024-09-15"},{"id":"20241102_qo26pb2jc3lhrs7hm47qf6npjo","status":"confirmed","summary":"All Souls\' Day","region":"Costa Rica","date":"2024-11-02"},{"id":"20241122_3lhlkg9u275mshjsn70m0b9jkc","status":"confirmed","summary":"Teacher\'s Day","region":"Costa Rica","date":"2024-11-22"},{"id":"20241201_q2lg5e23f9al4ro7f1cb2aq07c","status":"confirmed","summary":"Day of Abolition of the Army","region":"Costa Rica","date":"2024-12-01"},{"id":"20241208_vfmslbn5vt651h01ffkqi0vtac","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Costa Rica","date":"2024-12-08"},{"id":"20241225_hvhncpv5i40up38kttaqtanr7g","status":"confirmed","summary":"Christmas Day","region":"Costa Rica","date":"2024-12-25"},{"id":"20241231_gik93kobk5btlfv5rdod72lcfc","status":"confirmed","summary":"New Year\'s Eve","region":"Costa Rica","date":"2024-12-31"},{"id":"20250101_1tr6hodb933n3k6151mml952f8","status":"confirmed","summary":"New Year\'s Day","region":"Costa Rica","date":"2025-01-01"},{"id":"20250319_n5supk1our864udmbj6s1sbkbs","status":"confirmed","summary":"Saint Joseph\'s Day","region":"Costa Rica","date":"2025-03-19"},{"id":"20250411_r020gcgbd0nr0qcjkr65hed2p4","status":"confirmed","summary":"Battle of Rivas","region":"Costa Rica","date":"2025-04-11"},{"id":"20250417_hbse026qncr6f8tfj82uojqbvk","status":"confirmed","summary":"Maundy Thursday","region":"Costa Rica","date":"2025-04-17"},{"id":"20250418_gif3v4vmlgtni7pjrl4rsc9138","status":"confirmed","summary":"Good Friday","region":"Costa Rica","date":"2025-04-18"},{"id":"20250501_j0h3vdg66lqgldmh1tuqvc1atg","status":"confirmed","summary":"Labor Day / May Day","region":"Costa Rica","date":"2025-05-01"},{"id":"20250615_futg46v8bsi4kvi3gv0vvaflh8","status":"confirmed","summary":"Father\'s Day","region":"Costa Rica","date":"2025-06-15"},{"id":"20250725_vt4sg8q8j4kpkkgbmd9j5k4tmg","status":"confirmed","summary":"Annexation of Guanacaste","region":"Costa Rica","date":"2025-07-25"},{"id":"20250802_e0qiatkipd8t7699qcvqcd5r58","status":"confirmed","summary":"Our Lady of Los Ángeles","region":"Costa Rica","date":"2025-08-02"},{"id":"20250815_h3th1i5cpijj85ig635l0og1ls","status":"confirmed","summary":"Mother\'s Day","region":"Costa Rica","date":"2025-08-15"},{"id":"20250824_bd0vckgrsdmv0bifmm1elarrm4","status":"confirmed","summary":"National Parks Day","region":"Costa Rica","date":"2025-08-24"},{"id":"20250909_6uju634k98uo1fjq4blunjc89c","status":"confirmed","summary":"Children\'s Day","region":"Costa Rica","date":"2025-09-09"},{"id":"20250915_emndldkbgg93rln6k9fnpr7sg0","status":"confirmed","summary":"Independence Day","region":"Costa Rica","date":"2025-09-15"},{"id":"20251102_hf2nr283pv60u011t2sgpq9rok","status":"confirmed","summary":"All Souls\' Day","region":"Costa Rica","date":"2025-11-02"},{"id":"20251122_04n8bfgmivhc61252e3psgp6l8","status":"confirmed","summary":"Teacher\'s Day","region":"Costa Rica","date":"2025-11-22"},{"id":"20251201_2qqoqvg2nef6iddmocragso33s","status":"confirmed","summary":"Day of Abolition of the Army","region":"Costa Rica","date":"2025-12-01"},{"id":"20251208_p00kcsfe7sdd0pa4bsb9d8surg","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Costa Rica","date":"2025-12-08"},{"id":"20251225_55n7a3bj7nae0kpaju5nlsuu3g","status":"confirmed","summary":"Christmas Day","region":"Costa Rica","date":"2025-12-25"},{"id":"20251231_7lagdpvkafjmul72e7j74iu1ng","status":"confirmed","summary":"New Year\'s Eve","region":"Costa Rica","date":"2025-12-31"}],"Croatia":[{"id":"20240101_2ag8e90iakgqm29dju6ff1tv94","status":"confirmed","summary":"New Year\'s Day","region":"Croatia","date":"2024-01-01"},{"id":"20240106_385coq01vrj02ek3a2vv4gru50","status":"confirmed","summary":"Epiphany","region":"Croatia","date":"2024-01-06"},{"id":"20240107_r3pnoud17i8r7ncoqe9mjch7vg","status":"confirmed","summary":"Orthodox Christmas Day","region":"Croatia","date":"2024-01-07"},{"id":"20240109_879v71oeksn5ku9l2ak6pc5910","status":"confirmed","summary":"Međimurje Unification Day","region":"Croatia","date":"2024-01-09"},{"id":"20240115_0325hvf2afvvqlj6tqeomiuqno","status":"confirmed","summary":"Day of Peaceful Reintegration of the Croatian Danube Region","region":"Croatia","date":"2024-01-15"},{"id":"20240115_0teajk2r3eshgo1q441sct9g7g","status":"confirmed","summary":"Day of the International Recognition of the Republic of Croatia","region":"Croatia","date":"2024-01-15"},{"id":"20240311_5e6cidb46trldi3p1bssa9blqg","status":"confirmed","summary":"Ramadan Start","region":"Croatia","date":"2024-03-11"},{"id":"20240315_ckrlomhqv1p4a3rt5kpphd8dgc","status":"confirmed","summary":"Day of the Establishment of the National Protection in the Republic of Croatia","region":"Croatia","date":"2024-03-15"},{"id":"20240319_ebru5q0orfaiqgshrersond6ig","status":"confirmed","summary":"Father’s Day","region":"Croatia","date":"2024-03-19"},{"id":"20240331_nd9gkbas7t2m3ogvhm2v87j25o","status":"confirmed","summary":"Easter Sunday","region":"Croatia","date":"2024-03-31"},{"id":"20240401_1hfrf2p3m0h9444g3u62tq2q5s","status":"confirmed","summary":"Easter Monday","region":"Croatia","date":"2024-04-01"},{"id":"20240410_rga6039qunqdjh0udaogfdqmrs","status":"confirmed","summary":"Ramadan Bayram","region":"Croatia","date":"2024-04-10"},{"id":"20240430_oe8o1k0qbsisuk98lsdujul0u4","status":"confirmed","summary":"Day of the Deaths of Zrinski and Frankopan","region":"Croatia","date":"2024-04-30"},{"id":"20240501_lca5gd41eroc4t6olggkae486o","status":"confirmed","summary":"Labor Day / May Day","region":"Croatia","date":"2024-05-01"},{"id":"20240505_a8m66pc325rg2au5gldolblts0","status":"confirmed","summary":"Orthodox Easter Day","region":"Croatia","date":"2024-05-05"},{"id":"20240506_cbh22mnr4ud1630m1kaes7nb5s","status":"confirmed","summary":"Orthodox Easter Monday","region":"Croatia","date":"2024-05-06"},{"id":"20240509_8kqq1f32ihh25k8foqoi6ba918","status":"confirmed","summary":"Europe Day and Victory Day Over Fascism","region":"Croatia","date":"2024-05-09"},{"id":"20240512_lnetga1ecp0vitc5j0mhf0s7s0","status":"confirmed","summary":"Mother’s Day","region":"Croatia","date":"2024-05-12"},{"id":"20240530_0r12t6uvm5auti28jefrhdists","status":"confirmed","summary":"Statehood Day","region":"Croatia","date":"2024-05-30"},{"id":"20240530_reubug7duef7oeaml5e4hf8jco","status":"confirmed","summary":"Corpus Christi","region":"Croatia","date":"2024-05-30"},{"id":"20240617_6487jhtf2v2g8k9jme7vhov4hk","status":"confirmed","summary":"Kurban Bayram","region":"Croatia","date":"2024-06-17"},{"id":"20240622_7nosqbvceqmlhveafiv8nv1nts","status":"confirmed","summary":"Day of Antifascist Struggle","region":"Croatia","date":"2024-06-22"},{"id":"20240625_okukdbfbr792e5n45uijrbnv8k","status":"confirmed","summary":"Independence Day","region":"Croatia","date":"2024-06-25"},{"id":"20240805_3emerpsg9sdk47hvbrjkk5ebd4","status":"confirmed","summary":"Victory Day","region":"Croatia","date":"2024-08-05"},{"id":"20240815_bu1aqj0map6uk1858nuumiih18","status":"confirmed","summary":"Assumption of Mary","region":"Croatia","date":"2024-08-15"},{"id":"20240823_5041o0ncoqiahcahqg68vg9las","status":"confirmed","summary":"European Day of Remembrance of Victims of Totalitarian and Authoritarian Regimes","region":"Croatia","date":"2024-08-23"},{"id":"20240830_9n1m58bk1tq9vuv49s5ago9qhs","status":"confirmed","summary":"Day of Remembrance of Missing Persons in the Homeland War","region":"Croatia","date":"2024-08-30"},{"id":"20240925_st9pg36jv8f2468mmmfunfv5pc","status":"confirmed","summary":"Unification Day of Istria, Rijeka, Zadar, and the Islands","region":"Croatia","date":"2024-09-25"},{"id":"20241003_eks5hrm23ct7afkm3aq000cmnk","status":"confirmed","summary":"Rosh Hashana","region":"Croatia","date":"2024-10-03"},{"id":"20241008_v8vaf6n5o2h9m8i1muoofiu1m8","status":"confirmed","summary":"Day of the Croatian Parliament","region":"Croatia","date":"2024-10-08"},{"id":"20241012_i4gdflf2bqnm68jab7iije9324","status":"confirmed","summary":"Yom Kippur","region":"Croatia","date":"2024-10-12"},{"id":"20241101_sfufc19u18mlqrsqh32rjjluo0","status":"confirmed","summary":"All Saints\' Day","region":"Croatia","date":"2024-11-01"},{"id":"20241118_91ecrn2tfi8itgl2o6jnbblgi0","status":"confirmed","summary":"Remembrance Day","region":"Croatia","date":"2024-11-18"},{"id":"20241225_dhmsdsql45q68u91c5povh3dcg","status":"confirmed","summary":"Christmas Day","region":"Croatia","date":"2024-12-25"},{"id":"20241226_cr1ihcj119env0gbmfk4mj4e20","status":"confirmed","summary":"St Stephen\'s Day","region":"Croatia","date":"2024-12-26"},{"id":"20250101_tohoj895261caig372ds9gmsfk","status":"confirmed","summary":"New Year\'s Day","region":"Croatia","date":"2025-01-01"},{"id":"20250106_vsuj12mfksl4kuk50qhlcnnm2o","status":"confirmed","summary":"Epiphany","region":"Croatia","date":"2025-01-06"},{"id":"20250107_7ofpfplrvven1lrk3mo1heau0c","status":"confirmed","summary":"Orthodox Christmas Day","region":"Croatia","date":"2025-01-07"},{"id":"20250109_n4og1n96qfsrujjub6bafsp13c","status":"confirmed","summary":"Međimurje Unification Day","region":"Croatia","date":"2025-01-09"},{"id":"20250115_mu2eaqe5u1d23t5bpdto64ul6o","status":"confirmed","summary":"Day of Peaceful Reintegration of the Croatian Danube Region","region":"Croatia","date":"2025-01-15"},{"id":"20250115_uu21p3fs652954tp8fsbjeq30o","status":"confirmed","summary":"Day of the International Recognition of the Republic of Croatia","region":"Croatia","date":"2025-01-15"},{"id":"20250301_4o41na39omspfbqoh11inok2m0","status":"confirmed","summary":"Ramadan Start","region":"Croatia","date":"2025-03-01"},{"id":"20250315_htsm9g1i142nmlh2uj4g98lg0o","status":"confirmed","summary":"Day of the Establishment of the National Protection in the Republic of Croatia","region":"Croatia","date":"2025-03-15"},{"id":"20250319_c7be97uh5nn8kogioq5q7d5l8k","status":"confirmed","summary":"Father’s Day","region":"Croatia","date":"2025-03-19"},{"id":"20250331_8o0erkq7sj1rulk3nnpe9dk6hg","status":"confirmed","summary":"Ramadan Bayram","region":"Croatia","date":"2025-03-31"},{"id":"20250420_6ntq92vs3h3a2tmssnivd0gceo","status":"confirmed","summary":"Easter Sunday","region":"Croatia","date":"2025-04-20"},{"id":"20250420_db82r21aedk2j8q7tpmkikjav0","status":"confirmed","summary":"Orthodox Easter Day","region":"Croatia","date":"2025-04-20"},{"id":"20250421_67vu797mo5a0pp52tm2o1s7d8o","status":"confirmed","summary":"Orthodox Easter Monday","region":"Croatia","date":"2025-04-21"},{"id":"20250421_lhecick04cp6d0h8gdcpdh5amo","status":"confirmed","summary":"Easter Monday","region":"Croatia","date":"2025-04-21"},{"id":"20250430_udferovgjb8a2niv6jugouuh74","status":"confirmed","summary":"Day of the Deaths of Zrinski and Frankopan","region":"Croatia","date":"2025-04-30"},{"id":"20250501_ctt5l5duns1ctb6f4ictri7slc","status":"confirmed","summary":"Labor Day / May Day","region":"Croatia","date":"2025-05-01"},{"id":"20250509_omi1s7du5nmku3ehkfn9ejiegs","status":"confirmed","summary":"Europe Day and Victory Day Over Fascism","region":"Croatia","date":"2025-05-09"},{"id":"20250511_d14pp4901b16n048cklc4ots0k","status":"confirmed","summary":"Mother’s Day","region":"Croatia","date":"2025-05-11"},{"id":"20250530_8i61meh0tsa5psbfn8ckrq9f6c","status":"confirmed","summary":"Statehood Day","region":"Croatia","date":"2025-05-30"},{"id":"20250607_3ah6v8q2hsbmpit77mo75jheqc","status":"confirmed","summary":"Kurban Bayram","region":"Croatia","date":"2025-06-07"},{"id":"20250619_crq8gvjbu0k79tid4i5bgm2eb4","status":"confirmed","summary":"Corpus Christi","region":"Croatia","date":"2025-06-19"},{"id":"20250622_k82lnphjcgi0cfm01ud35qc050","status":"confirmed","summary":"Day of Antifascist Struggle","region":"Croatia","date":"2025-06-22"},{"id":"20250625_n4ignqm0r3ect4uo9f3pltqmjo","status":"confirmed","summary":"Independence Day","region":"Croatia","date":"2025-06-25"},{"id":"20250805_3v086vglub51s8b9jqi37fgjts","status":"confirmed","summary":"Victory Day","region":"Croatia","date":"2025-08-05"},{"id":"20250815_c2qqnump0eisti9grb8luipnb4","status":"confirmed","summary":"Assumption of Mary","region":"Croatia","date":"2025-08-15"},{"id":"20250823_ji8j2f312h9qhs64jp4p8h3dp0","status":"confirmed","summary":"European Day of Remembrance of Victims of Totalitarian and Authoritarian Regimes","region":"Croatia","date":"2025-08-23"},{"id":"20250830_8obmfa4r8rlueej03cr68o6eu8","status":"confirmed","summary":"Day of Remembrance of Missing Persons in the Homeland War","region":"Croatia","date":"2025-08-30"},{"id":"20250923_3spudtim3t2gmcg8sjeq4i01os","status":"confirmed","summary":"Rosh Hashana","region":"Croatia","date":"2025-09-23"},{"id":"20250925_rbl4rpirmcibqllq5q96f4bu8k","status":"confirmed","summary":"Unification Day of Istria, Rijeka, Zadar, and the Islands","region":"Croatia","date":"2025-09-25"},{"id":"20251002_7epvf00389dg2ki3fddpqpq51g","status":"confirmed","summary":"Yom Kippur","region":"Croatia","date":"2025-10-02"},{"id":"20251008_7fn7bm1c3fnh1mqngu5d9gh9g8","status":"confirmed","summary":"Day of the Croatian Parliament","region":"Croatia","date":"2025-10-08"},{"id":"20251101_ic1mtd15mktdiuidvfn469tvsc","status":"confirmed","summary":"All Saints\' Day","region":"Croatia","date":"2025-11-01"},{"id":"20251118_77973acneu8o3bla0r6v833oh0","status":"confirmed","summary":"Remembrance Day","region":"Croatia","date":"2025-11-18"},{"id":"20251225_p9q77kq6mf5qff9sgfb88f3egs","status":"confirmed","summary":"Christmas Day","region":"Croatia","date":"2025-12-25"},{"id":"20251226_a2a88ciiejtkplq5pf9nkl3edo","status":"confirmed","summary":"St Stephen\'s Day","region":"Croatia","date":"2025-12-26"}],"Cuba":[{"id":"20240101_163vqjs6t6kfbg6pdosmngg5ac","status":"confirmed","summary":"Liberation Day","region":"Cuba","date":"2024-01-01"},{"id":"20240102_dkpss70csgocknr9l789a0iuc8","status":"confirmed","summary":"Victory Day","region":"Cuba","date":"2024-01-02"},{"id":"20240106_bkg13hqqti1bgvaoa6966ns5sk","status":"confirmed","summary":"Epiphany","region":"Cuba","date":"2024-01-06"},{"id":"20240128_68sj8afc2t22ni9k3h1jl3djoc","status":"confirmed","summary":"José Martí\'s Birthday Memorial","region":"Cuba","date":"2024-01-28"},{"id":"20240310_sn4b8rotjoom297mk2hcl92mlc","status":"confirmed","summary":"Daylight Saving Time starts","region":"Cuba","date":"2024-03-10"},{"id":"20240324_jjsuscvjcs8l3ijbpk6r6kalso","status":"confirmed","summary":"Palm Sunday","region":"Cuba","date":"2024-03-24"},{"id":"20240328_mnid40h3jr8sokjomg6a8jkdf4","status":"confirmed","summary":"Maundy Thursday","region":"Cuba","date":"2024-03-28"},{"id":"20240329_3bs61f4bfujuhsiccaa1j7jar8","status":"confirmed","summary":"Good Friday","region":"Cuba","date":"2024-03-29"},{"id":"20240501_1vefg4134vest7q5qvgbmn0ea4","status":"confirmed","summary":"Labor Day / May Day","region":"Cuba","date":"2024-05-01"},{"id":"20240512_1atnghtvjfnd3mkortehdceoqs","status":"confirmed","summary":"Mother\'s Day","region":"Cuba","date":"2024-05-12"},{"id":"20240520_6e1iurf92lbqf5tb3mavbdktio","status":"confirmed","summary":"Independence Day","region":"Cuba","date":"2024-05-20"},{"id":"20240725_3o4kh2fp5vbgan6tqbchigqh9g","status":"confirmed","summary":"Revolution Anniversary","region":"Cuba","date":"2024-07-25"},{"id":"20240726_4qfpud3st7f2hbh8vc53hifa2o","status":"confirmed","summary":"Day of the Rebellion","region":"Cuba","date":"2024-07-26"},{"id":"20240727_479v21gu0rf30cdo224npp0ui4","status":"confirmed","summary":"Revolution Anniversary Celebration","region":"Cuba","date":"2024-07-27"},{"id":"20241010_a99m8hc7oopro8ktmeb0n3tl14","status":"confirmed","summary":"Beginning of the War of Independence","region":"Cuba","date":"2024-10-10"},{"id":"20241103_2t83175avpbnv8cglh1rotf3eg","status":"confirmed","summary":"Daylight Saving Time ends","region":"Cuba","date":"2024-11-03"},{"id":"20241225_ehqobtvjl0mos7ij422e2ctjhc","status":"confirmed","summary":"Christmas Day","region":"Cuba","date":"2024-12-25"},{"id":"20241231_4pe45thggq3tenahmhkp5vgk88","status":"confirmed","summary":"New Year\'s Eve","region":"Cuba","date":"2024-12-31"},{"id":"20250101_7uu5q1eq7sdnmagip728uqdrk8","status":"confirmed","summary":"Liberation Day","region":"Cuba","date":"2025-01-01"},{"id":"20250102_9kummtsqe70eih2laf2fsnckcc","status":"confirmed","summary":"Victory Day","region":"Cuba","date":"2025-01-02"},{"id":"20250106_kccs9esaiuj5noa5920u1g21b8","status":"confirmed","summary":"Epiphany","region":"Cuba","date":"2025-01-06"},{"id":"20250128_dffcfedd7t36bb0uousplb3i64","status":"confirmed","summary":"José Martí\'s Birthday Memorial","region":"Cuba","date":"2025-01-28"},{"id":"20250309_idtvsk6tr1748ccn5le71h7emo","status":"confirmed","summary":"Daylight Saving Time starts","region":"Cuba","date":"2025-03-09"},{"id":"20250413_6vrajsaena5va128g1ag917stg","status":"confirmed","summary":"Palm Sunday","region":"Cuba","date":"2025-04-13"},{"id":"20250417_b93snosoev6ofakikqagogbrog","status":"confirmed","summary":"Maundy Thursday","region":"Cuba","date":"2025-04-17"},{"id":"20250418_mktunob3bvmfcfai9cqqeavric","status":"confirmed","summary":"Good Friday","region":"Cuba","date":"2025-04-18"},{"id":"20250501_vdtrikeartt4ag934vnmqip1b4","status":"confirmed","summary":"Labor Day / May Day","region":"Cuba","date":"2025-05-01"},{"id":"20250511_i3qn58bidj8uuaj6356s7otd1o","status":"confirmed","summary":"Mother\'s Day","region":"Cuba","date":"2025-05-11"},{"id":"20250520_fe6pebh77tb8pp791r6g0jq1ns","status":"confirmed","summary":"Independence Day","region":"Cuba","date":"2025-05-20"},{"id":"20250725_tvvukb0n8blfl0fvr0fi1fagjc","status":"confirmed","summary":"Revolution Anniversary","region":"Cuba","date":"2025-07-25"},{"id":"20250726_6lfcur80l37rrbfqo2dsa25ers","status":"confirmed","summary":"Day of the Rebellion","region":"Cuba","date":"2025-07-26"},{"id":"20250727_f4omuomsbseekffqnnd547ats0","status":"confirmed","summary":"Revolution Anniversary Celebration","region":"Cuba","date":"2025-07-27"},{"id":"20251010_uapimvprvvc07t5ur6emsel57s","status":"confirmed","summary":"Beginning of the War of Independence","region":"Cuba","date":"2025-10-10"},{"id":"20251102_qsff6mboa7a2b6i6sr6sm8sd9g","status":"confirmed","summary":"Daylight Saving Time ends","region":"Cuba","date":"2025-11-02"},{"id":"20251225_m3t898oqou5krr0ughe84bgvuc","status":"confirmed","summary":"Christmas Day","region":"Cuba","date":"2025-12-25"},{"id":"20251231_vc3b7r8k6tjuv5l16a910kgp7c","status":"confirmed","summary":"New Year\'s Eve","region":"Cuba","date":"2025-12-31"}],"Cape Verde":[{"id":"20240101_op5u7qs0sdvdg3un48cltgfsig","status":"confirmed","summary":"New Year","region":"Cape Verde","date":"2024-01-01"},{"id":"20240113_4ajhqandoc1ul76ks72ur1pnvk","status":"confirmed","summary":"Freedom and Democracy Day","region":"Cape Verde","date":"2024-01-13"},{"id":"20240120_5l2i6bl3v5g4aplq9evp0ouc84","status":"confirmed","summary":"National Heroes\' Day","region":"Cape Verde","date":"2024-01-20"},{"id":"20240214_omfsj0f3v6ec9cg4gi346149fg","status":"confirmed","summary":"Ash Wednesday","region":"Cape Verde","date":"2024-02-14"},{"id":"20240328_b8l0i44p71eqb60sls24kccu3o","status":"confirmed","summary":"Holy Thursday","region":"Cape Verde","date":"2024-03-28"},{"id":"20240329_31ak0rfbaise9sj44ddih6mvi0","status":"confirmed","summary":"Good Friday","region":"Cape Verde","date":"2024-03-29"},{"id":"20240331_1v8heisdikjklfuqs6j2c3eiak","status":"confirmed","summary":"Easter Sunday","region":"Cape Verde","date":"2024-03-31"},{"id":"20240501_u0mdkkfasmm10nmpir4372ef04","status":"confirmed","summary":"Labour Day","region":"Cape Verde","date":"2024-05-01"},{"id":"20240512_k4q5gfups12frj7cnsfd9l5cfg","status":"confirmed","summary":"Mother\'s Day","region":"Cape Verde","date":"2024-05-12"},{"id":"20240601_vvap1clr9kghai08dtuf9t9jrs","status":"confirmed","summary":"Children\'s Day","region":"Cape Verde","date":"2024-06-01"},{"id":"20240616_fbrf93a2m6t34asejpfmjl7p5s","status":"confirmed","summary":"Father\'s Day","region":"Cape Verde","date":"2024-06-16"},{"id":"20240705_adn8grff630j76k5t6anf8ja40","status":"confirmed","summary":"Independence Day","region":"Cape Verde","date":"2024-07-05"},{"id":"20240815_nkhirducldengv1nh7o10qofsk","status":"confirmed","summary":"Assumption of Mary","region":"Cape Verde","date":"2024-08-15"},{"id":"20241101_uf1h5mlnp4tnutuifnlf290cio","status":"confirmed","summary":"All Saints\' Day","region":"Cape Verde","date":"2024-11-01"},{"id":"20241225_spfafa3kpn425r66e1lmcboes4","status":"confirmed","summary":"Christmas Day","region":"Cape Verde","date":"2024-12-25"},{"id":"20250101_rbfq82ciqn15unutvo3r8b8b9o","status":"confirmed","summary":"New Year","region":"Cape Verde","date":"2025-01-01"},{"id":"20250113_0lke7gnm4a412gns14onrvrdmk","status":"confirmed","summary":"Freedom and Democracy Day","region":"Cape Verde","date":"2025-01-13"},{"id":"20250120_g1u8bqk80n4nj43p3n9ot7fou4","status":"confirmed","summary":"National Heroes\' Day","region":"Cape Verde","date":"2025-01-20"},{"id":"20250305_jae2dvlncsvh5h7c8gopefd830","status":"confirmed","summary":"Ash Wednesday","region":"Cape Verde","date":"2025-03-05"},{"id":"20250417_4p515sa3rvd3ppciaseb8oqgrk","status":"confirmed","summary":"Holy Thursday","region":"Cape Verde","date":"2025-04-17"},{"id":"20250418_oco2nlroak16qo8d7iqo2oe05c","status":"confirmed","summary":"Good Friday","region":"Cape Verde","date":"2025-04-18"},{"id":"20250420_7idq4458n1rdoel578cr0ouebo","status":"confirmed","summary":"Easter Sunday","region":"Cape Verde","date":"2025-04-20"},{"id":"20250501_albitnhamt2jv4c2s3m306rup0","status":"confirmed","summary":"Labour Day","region":"Cape Verde","date":"2025-05-01"},{"id":"20250511_vh6ndgv8g6t5v6hc95gurrpp7g","status":"confirmed","summary":"Mother\'s Day","region":"Cape Verde","date":"2025-05-11"},{"id":"20250601_jlj7cojs91u5hk8t7espoi0t08","status":"confirmed","summary":"Children\'s Day","region":"Cape Verde","date":"2025-06-01"},{"id":"20250615_v92fh7l300b2lqcnqk2avv67i8","status":"confirmed","summary":"Father\'s Day","region":"Cape Verde","date":"2025-06-15"},{"id":"20250705_1mrjf1cidtat4u0df6arlmpe30","status":"confirmed","summary":"Independence Day","region":"Cape Verde","date":"2025-07-05"},{"id":"20250815_q73dmf82uj6ch2usgf1ie2q9do","status":"confirmed","summary":"Assumption of Mary","region":"Cape Verde","date":"2025-08-15"},{"id":"20251101_q3eloa8gub5t708pu5ugi8iv24","status":"confirmed","summary":"All Saints\' Day","region":"Cape Verde","date":"2025-11-01"},{"id":"20251225_kqtgval02ls3abrckpn182ckgo","status":"confirmed","summary":"Christmas Day","region":"Cape Verde","date":"2025-12-25"}],"Curaçao":[{"id":"20240101_rntqc6tgdouh6358k8fcfkv2to","status":"confirmed","summary":"New Year\'s Day","region":"Curaçao","date":"2024-01-01"},{"id":"20240212_ojcj3pefvlidqrc98a772nafn4","status":"confirmed","summary":"Carnival Monday","region":"Curaçao","date":"2024-02-12"},{"id":"20240329_6qqln6q5uq8ue523vavs710rqk","status":"confirmed","summary":"Good Friday","region":"Curaçao","date":"2024-03-29"},{"id":"20240331_ft6u8om9vsmj8t87nvi5u7799k","status":"confirmed","summary":"Easter Sunday","region":"Curaçao","date":"2024-03-31"},{"id":"20240401_oeodvrhmd3apdgfrd2mgar6bi0","status":"confirmed","summary":"Easter Monday","region":"Curaçao","date":"2024-04-01"},{"id":"20240427_dvb0ailo05au1jpali5g06plcc","status":"confirmed","summary":"King\'s Birthday","region":"Curaçao","date":"2024-04-27"},{"id":"20240501_khf2m1s5fg7g6qetrdq7hmu7mk","status":"confirmed","summary":"Labor Day / May Day","region":"Curaçao","date":"2024-05-01"},{"id":"20240509_sq6dmatrjlfsciibiefhh1vnfk","status":"confirmed","summary":"Ascension Day","region":"Curaçao","date":"2024-05-09"},{"id":"20240702_r7cu96pvougmf0mpgm3cl7fem4","status":"confirmed","summary":"Flag Day","region":"Curaçao","date":"2024-07-02"},{"id":"20241010_hdpu8pedt5sjf7ic2cfttkbs5g","status":"confirmed","summary":"Curaçao Day","region":"Curaçao","date":"2024-10-10"},{"id":"20241225_u61htmr8tpuisv9k8ib3ic1mh4","status":"confirmed","summary":"Christmas Day","region":"Curaçao","date":"2024-12-25"},{"id":"20241226_46iie1rhmge0kt4a4avl136528","status":"confirmed","summary":"Boxing Day","region":"Curaçao","date":"2024-12-26"},{"id":"20250101_9fl0ml8sb3fan9pqlmipn5nsns","status":"confirmed","summary":"New Year\'s Day","region":"Curaçao","date":"2025-01-01"},{"id":"20250303_rir5q6becg1c1dp6acgnnb6dpg","status":"confirmed","summary":"Carnival Monday","region":"Curaçao","date":"2025-03-03"},{"id":"20250418_h9l5cipj3ts11v6kaifimt1ld8","status":"confirmed","summary":"Good Friday","region":"Curaçao","date":"2025-04-18"},{"id":"20250420_dgkq0jgq638c6g0493aoett1a8","status":"confirmed","summary":"Easter Sunday","region":"Curaçao","date":"2025-04-20"},{"id":"20250421_ho88bqrj7jfb0aqh0tia8oop00","status":"confirmed","summary":"Easter Monday","region":"Curaçao","date":"2025-04-21"},{"id":"20250427_3u8uhge5u61tegiln0s2q2ia6g","status":"confirmed","summary":"King\'s Birthday","region":"Curaçao","date":"2025-04-27"},{"id":"20250501_3ooiftfuo00erfru1vh428f4os","status":"confirmed","summary":"Labor Day / May Day","region":"Curaçao","date":"2025-05-01"},{"id":"20250529_124c293605l4oq0n6kg7mfl8ss","status":"confirmed","summary":"Ascension Day","region":"Curaçao","date":"2025-05-29"},{"id":"20250702_mj2lvkb8nqcsqer8ji0i3vtfig","status":"confirmed","summary":"Flag Day","region":"Curaçao","date":"2025-07-02"},{"id":"20251010_jjl085o77a7trpvc86nj1ao6bs","status":"confirmed","summary":"Curaçao Day","region":"Curaçao","date":"2025-10-10"},{"id":"20251225_acnhvghrpckcsud216q0ncre8c","status":"confirmed","summary":"Christmas Day","region":"Curaçao","date":"2025-12-25"},{"id":"20251226_fho1bkal64lmm4d2m5kdvuv6gc","status":"confirmed","summary":"Boxing Day","region":"Curaçao","date":"2025-12-26"}],"Cyprus":[{"id":"20240101_3out9e9q6legbtuu74c0sgcll0","status":"confirmed","summary":"New Year\'s Day","region":"Cyprus","date":"2024-01-01"},{"id":"20240106_gqm651agnur11knag37ru4u970","status":"confirmed","summary":"Epiphany","region":"Cyprus","date":"2024-01-06"},{"id":"20240318_vkuulh3v2jf9el16vpv0306dng","status":"confirmed","summary":"Green Monday","region":"Cyprus","date":"2024-03-18"},{"id":"20240325_496qc6so90ha4ecuf0gk7uqrhs","status":"confirmed","summary":"Greek Independence Day","region":"Cyprus","date":"2024-03-25"},{"id":"20240331_qj8fbejei2570aqq9694q4rqs8","status":"confirmed","summary":"Daylight Saving Time starts","region":"Cyprus","date":"2024-03-31"},{"id":"20240401_etkj5dv2sfnjmops6jji4jced0","status":"confirmed","summary":"Cyprus National Holiday","region":"Cyprus","date":"2024-04-01"},{"id":"20240501_rgv4m8mie7e9burt4kn4ib6ri8","status":"confirmed","summary":"Labour Day/May Day","region":"Cyprus","date":"2024-05-01"},{"id":"20240503_ffvf6omo6d4dgrn23gqjigrno4","status":"confirmed","summary":"Good Friday (Orthodox)","region":"Cyprus","date":"2024-05-03"},{"id":"20240504_8qaloi3kilajii9j8q3ikcdklo","status":"confirmed","summary":"Holy Saturday (Orthodox)","region":"Cyprus","date":"2024-05-04"},{"id":"20240505_70n7ip6i24a94djvpga2sdmj4s","status":"confirmed","summary":"Easter Sunday (Orthodox)","region":"Cyprus","date":"2024-05-05"},{"id":"20240506_mh93qd1eci7ue61rk9uotd8qpo","status":"confirmed","summary":"Easter Monday (Orthodox)","region":"Cyprus","date":"2024-05-06"},{"id":"20240624_u9vodt3leio2vmg14pgr5u9toc","status":"confirmed","summary":"Orthodox Pentecost Monday","region":"Cyprus","date":"2024-06-24"},{"id":"20240815_03v48dsns3b8aeh7dsos14d50k","status":"confirmed","summary":"Assumption of the Virgin Mary","region":"Cyprus","date":"2024-08-15"},{"id":"20241001_jl5q90be1gjvdlo4osl4q6jfjo","status":"confirmed","summary":"Cyprus Independence Day","region":"Cyprus","date":"2024-10-01"},{"id":"20241027_mkm3bv7c2nde2tjqs3ad8a56bk","status":"confirmed","summary":"Daylight Saving Time ends","region":"Cyprus","date":"2024-10-27"},{"id":"20241028_5n78idpfrrdfg17vn2o135e5g4","status":"confirmed","summary":"Ochi Day","region":"Cyprus","date":"2024-10-28"},{"id":"20241224_m87t7jnmvg8d83c3lg22vlgahs","status":"confirmed","summary":"Christmas Eve","region":"Cyprus","date":"2024-12-24"},{"id":"20241225_dtidl72n28762626tchtvve0lg","status":"confirmed","summary":"Christmas Day","region":"Cyprus","date":"2024-12-25"},{"id":"20241226_97npr1k6j19himib9lfvan0bv8","status":"confirmed","summary":"Boxing Day","region":"Cyprus","date":"2024-12-26"},{"id":"20241231_fnq3s1nki4d3211ekud5oemeb4","status":"confirmed","summary":"New Year\'s Eve","region":"Cyprus","date":"2024-12-31"},{"id":"20250101_0c2lblcou8dgv23umc1fqcfo8s","status":"confirmed","summary":"New Year\'s Day","region":"Cyprus","date":"2025-01-01"},{"id":"20250106_3uftq6123rh79nkqe56p7q4f94","status":"confirmed","summary":"Epiphany","region":"Cyprus","date":"2025-01-06"},{"id":"20250303_ctkt8do00s9qcno1eh0ppup2l8","status":"confirmed","summary":"Green Monday","region":"Cyprus","date":"2025-03-03"},{"id":"20250325_0ggh383pptcpnql3tt38iuff38","status":"confirmed","summary":"Greek Independence Day","region":"Cyprus","date":"2025-03-25"},{"id":"20250330_9vrce21tqtn5qn144iqqtbledc","status":"confirmed","summary":"Daylight Saving Time starts","region":"Cyprus","date":"2025-03-30"},{"id":"20250401_g11korno27i3hbo586u0m53l0k","status":"confirmed","summary":"Cyprus National Holiday","region":"Cyprus","date":"2025-04-01"},{"id":"20250418_qmaqcet8bf3078o0tmkdes0d4c","status":"confirmed","summary":"Good Friday (Orthodox)","region":"Cyprus","date":"2025-04-18"},{"id":"20250419_8219r2lt1o26aov9v4mhj9svr4","status":"confirmed","summary":"Holy Saturday (Orthodox)","region":"Cyprus","date":"2025-04-19"},{"id":"20250420_30hr32ccdlvuov3766qc25a044","status":"confirmed","summary":"Easter Sunday (Orthodox)","region":"Cyprus","date":"2025-04-20"},{"id":"20250421_f9ui0hmgutkleduk4bd3b1ajhg","status":"confirmed","summary":"Easter Monday (Orthodox)","region":"Cyprus","date":"2025-04-21"},{"id":"20250501_f30qtjuck29j0ivtoo0tcm8ano","status":"confirmed","summary":"Labour Day/May Day","region":"Cyprus","date":"2025-05-01"},{"id":"20250609_4mnqbpgufqiuc8d2u93qfoddi4","status":"confirmed","summary":"Orthodox Pentecost Monday","region":"Cyprus","date":"2025-06-09"},{"id":"20250815_893maj2t34gptdmpkdjj4ft440","status":"confirmed","summary":"Assumption of the Virgin Mary","region":"Cyprus","date":"2025-08-15"},{"id":"20251001_10lo8lrphsbtg2jr30qa5qhd5s","status":"confirmed","summary":"Cyprus Independence Day","region":"Cyprus","date":"2025-10-01"},{"id":"20251026_2k5q1qin793rah7e405jjddebo","status":"confirmed","summary":"Daylight Saving Time ends","region":"Cyprus","date":"2025-10-26"},{"id":"20251028_ckog6jjav9pfcaqshg30eijlls","status":"confirmed","summary":"Ochi Day","region":"Cyprus","date":"2025-10-28"},{"id":"20251224_9v74ok5k019fmm2nl18rmo72sk","status":"confirmed","summary":"Christmas Eve","region":"Cyprus","date":"2025-12-24"},{"id":"20251225_icf24p3ii47ap24tt7a0qpg18k","status":"confirmed","summary":"Christmas Day","region":"Cyprus","date":"2025-12-25"},{"id":"20251226_sp9451ihana3l3p63mhiafoh5s","status":"confirmed","summary":"Boxing Day","region":"Cyprus","date":"2025-12-26"},{"id":"20251231_fkqqk34gg0projn1dvlva4rcos","status":"confirmed","summary":"New Year\'s Eve","region":"Cyprus","date":"2025-12-31"}],"Czechia":[{"id":"20240101_ak3eg3of56nvlvtfn7keuk3pts","status":"confirmed","summary":"New Year\'s Day","region":"Czechia","date":"2024-01-01"},{"id":"20240101_imnbgq7uvplr0caba98l1pgjag","status":"confirmed","summary":"Restoration of the Czech Independence Day","region":"Czechia","date":"2024-01-01"},{"id":"20240214_6067fnp04485chrguthma7qafg","status":"confirmed","summary":"St. Valentine\'s Day","region":"Czechia","date":"2024-02-14"},{"id":"20240308_2ac32d3jpdqlq0rpm8t96f0h90","status":"confirmed","summary":"International Women\'s Day","region":"Czechia","date":"2024-03-08"},{"id":"20240329_k5u6fvp92cgfioqbgoik4517es","status":"confirmed","summary":"Good Friday","region":"Czechia","date":"2024-03-29"},{"id":"20240401_g5h8lhg1piq6fuf7lrc3hvc8pg","status":"confirmed","summary":"Easter Monday","region":"Czechia","date":"2024-04-01"},{"id":"20240501_fn4s689g02nlsjrgshthargc8c","status":"confirmed","summary":"Labor Day / May Day","region":"Czechia","date":"2024-05-01"},{"id":"20240508_9ul8u343m68e018pri4e60afg8","status":"confirmed","summary":"Victory in Europe Day","region":"Czechia","date":"2024-05-08"},{"id":"20240512_g3en74p7cl98q6ghsjvb7lqsc4","status":"confirmed","summary":"Mother\'s Day","region":"Czechia","date":"2024-05-12"},{"id":"20240601_5ohdgq2sr76me5m5cdb5ddi5eo","status":"confirmed","summary":"Children\'s Day","region":"Czechia","date":"2024-06-01"},{"id":"20240616_ndd1198vn4ebaclf33jbvgbjc4","status":"confirmed","summary":"Father\'s Day","region":"Czechia","date":"2024-06-16"},{"id":"20240705_oqmolgh0i2dck6b0sh9am0mefc","status":"confirmed","summary":"Day of Saints Cyril and Methodius","region":"Czechia","date":"2024-07-05"},{"id":"20240706_3bppr4ttnj6pbpb475okng7bl0","status":"confirmed","summary":"Jan Hus Day","region":"Czechia","date":"2024-07-06"},{"id":"20240928_pl3c64ieikviesqe5nfcsdv1c0","status":"confirmed","summary":"St. Wenceslas Day","region":"Czechia","date":"2024-09-28"},{"id":"20241028_qeogak2s67nvil45vkchh64ti0","status":"confirmed","summary":"Independent Czechoslovak State Day","region":"Czechia","date":"2024-10-28"},{"id":"20241117_232ugqshn7mhltjqmfj1vlld70","status":"confirmed","summary":"Struggle for Freedom and Democracy Day","region":"Czechia","date":"2024-11-17"},{"id":"20241224_g5599qo2oofjdhhu18qq015fpc","status":"confirmed","summary":"Christmas Eve","region":"Czechia","date":"2024-12-24"},{"id":"20241225_gkhrg5crsrjfvg4quqgff2a414","status":"confirmed","summary":"Christmas Day","region":"Czechia","date":"2024-12-25"},{"id":"20241226_otra7hdtbu8949c4smf9k5lsgo","status":"confirmed","summary":"St. Stephen\'s Day","region":"Czechia","date":"2024-12-26"},{"id":"20250101_3esrkds0bgag7r0cdmq4rb92sc","status":"confirmed","summary":"New Year\'s Day","region":"Czechia","date":"2025-01-01"},{"id":"20250101_pejs1jokj93vbjpapk6qi89avk","status":"confirmed","summary":"Restoration of the Czech Independence Day","region":"Czechia","date":"2025-01-01"},{"id":"20250214_nmhqo8ve5nml0nk3jb0jq4q908","status":"confirmed","summary":"St. Valentine\'s Day","region":"Czechia","date":"2025-02-14"},{"id":"20250308_mbg2ni6ioshm8k9rag2kia8bo8","status":"confirmed","summary":"International Women\'s Day","region":"Czechia","date":"2025-03-08"},{"id":"20250418_qfv8uokagkmqto5b1mn5k41p0k","status":"confirmed","summary":"Good Friday","region":"Czechia","date":"2025-04-18"},{"id":"20250421_nafulp3j58u3gb66gmqba7hgmk","status":"confirmed","summary":"Easter Monday","region":"Czechia","date":"2025-04-21"},{"id":"20250501_9pca0our5le5mi9hoocfmb0acs","status":"confirmed","summary":"Labor Day / May Day","region":"Czechia","date":"2025-05-01"},{"id":"20250508_i5clh24e2vi0o79iouhp7efips","status":"confirmed","summary":"Victory in Europe Day","region":"Czechia","date":"2025-05-08"},{"id":"20250511_ootsjbd2r56hit31m6okqfgjmo","status":"confirmed","summary":"Mother\'s Day","region":"Czechia","date":"2025-05-11"},{"id":"20250601_7dlds1clfrbjhhu4dce3j6kn7o","status":"confirmed","summary":"Children\'s Day","region":"Czechia","date":"2025-06-01"},{"id":"20250615_qevtasktkvnrc1j5p7u31k7rrs","status":"confirmed","summary":"Father\'s Day","region":"Czechia","date":"2025-06-15"},{"id":"20250705_pdvq45kv4m3orqo1dlf39i2h0g","status":"confirmed","summary":"Day of Saints Cyril and Methodius","region":"Czechia","date":"2025-07-05"},{"id":"20250706_b5fdnpd5od8qg52gvll6ao9a7c","status":"confirmed","summary":"Jan Hus Day","region":"Czechia","date":"2025-07-06"},{"id":"20250928_ka2kp2vdts47cqktsrukpr6qck","status":"confirmed","summary":"St. Wenceslas Day","region":"Czechia","date":"2025-09-28"},{"id":"20251028_7tefsutcb26pb1ptqhtdn7bgsc","status":"confirmed","summary":"Independent Czechoslovak State Day","region":"Czechia","date":"2025-10-28"},{"id":"20251117_ans6pg3sbr5jhhl6p92ud5nc1o","status":"confirmed","summary":"Struggle for Freedom and Democracy Day","region":"Czechia","date":"2025-11-17"},{"id":"20251224_t6athj0lkhkugdribc8lf1s2u0","status":"confirmed","summary":"Christmas Eve","region":"Czechia","date":"2025-12-24"},{"id":"20251225_8mectg798cge10dc3jcf74pvh4","status":"confirmed","summary":"Christmas Day","region":"Czechia","date":"2025-12-25"},{"id":"20251226_37ou5ermc4k1p9v32puf3dfo50","status":"confirmed","summary":"St. Stephen\'s Day","region":"Czechia","date":"2025-12-26"}],"Denmark":[{"id":"20240101_utfr6rfgmfgvihdgvs72r6k4os","status":"confirmed","summary":"New Year\'s Day","region":"Denmark","date":"2024-01-01"},{"id":"20240114_13r3s416ttlmnubcns996ghvn8","status":"confirmed","summary":"Accession of King Frederik X","region":"Denmark","date":"2024-01-14"},{"id":"20240211_thdqvdv27g9bf6abq6rruggpjs","status":"confirmed","summary":"Carnival","region":"Denmark","date":"2024-02-11"},{"id":"20240214_2v2dmpoj5a7n7j13etjr0edhi8","status":"confirmed","summary":"Valentine\'s Day","region":"Denmark","date":"2024-02-14"},{"id":"20240324_k0upm3dsn5l0lihip0ra23lun8","status":"confirmed","summary":"Palm Sunday","region":"Denmark","date":"2024-03-24"},{"id":"20240328_d4bmmud4fk37a29h4ga7cksabk","status":"confirmed","summary":"Maundy Thursday","region":"Denmark","date":"2024-03-28"},{"id":"20240329_riip7avicvcn2lg315cb2okcjo","status":"confirmed","summary":"Good Friday","region":"Denmark","date":"2024-03-29"},{"id":"20240331_ggpbdaamgrft08vs4feujoaaqg","status":"confirmed","summary":"Easter Sunday","region":"Denmark","date":"2024-03-31"},{"id":"20240331_lqthbfh5mff7o0lup7fe836ib4","status":"confirmed","summary":"Daylight Saving Time starts","region":"Denmark","date":"2024-03-31"},{"id":"20240401_rerqv1mh8301upeqrupebl75q0","status":"confirmed","summary":"Easter Monday","region":"Denmark","date":"2024-04-01"},{"id":"20240426_33lpa834bk9o4cpgs2rjjggpak","status":"confirmed","summary":"Great Prayer Day","region":"Denmark","date":"2024-04-26"},{"id":"20240501_7mgc30194hno7hipadd2uueb88","status":"confirmed","summary":"Labor Day / May Day","region":"Denmark","date":"2024-05-01"},{"id":"20240505_9lrcosthjrublb544c212d7r30","status":"confirmed","summary":"Liberation Day","region":"Denmark","date":"2024-05-05"},{"id":"20240509_0ai19phjkv2o7pdmi82hk40pek","status":"confirmed","summary":"Ascension Day","region":"Denmark","date":"2024-05-09"},{"id":"20240512_3i76rnhm1r9j1ipfl08apem3es","status":"confirmed","summary":"Mother’s Day","region":"Denmark","date":"2024-05-12"},{"id":"20240519_nte0tkt702t8pu6b0v9s2dvo0c","status":"confirmed","summary":"Whit Sunday","region":"Denmark","date":"2024-05-19"},{"id":"20240520_dmcjgdji6oa4i99peik5s6msbk","status":"confirmed","summary":"Whit Monday","region":"Denmark","date":"2024-05-20"},{"id":"20240605_7emnc4objtfrfs4ns3q505os2c","status":"confirmed","summary":"Constitution Day","region":"Denmark","date":"2024-06-05"},{"id":"20240605_k0o6gabi3hqccm31g8jb7e2mkg","status":"confirmed","summary":"Father’s Day","region":"Denmark","date":"2024-06-05"},{"id":"20241027_vg6i87910g5eir4m4edb5ft2m8","status":"confirmed","summary":"Daylight Saving Time ends","region":"Denmark","date":"2024-10-27"},{"id":"20241031_n9q0gdl63mnctg3kddpl8uaedk","status":"confirmed","summary":"Halloween","region":"Denmark","date":"2024-10-31"},{"id":"20241224_ovc1lkn6cnat5pa3o14u3kbumg","status":"confirmed","summary":"Christmas Eve","region":"Denmark","date":"2024-12-24"},{"id":"20241225_gafbka8vdjapvj6898adi8dne4","status":"confirmed","summary":"Christmas Day","region":"Denmark","date":"2024-12-25"},{"id":"20241226_ec3mnt7769orlkvrrtkbn8r5j0","status":"confirmed","summary":"2nd Christmas Day","region":"Denmark","date":"2024-12-26"},{"id":"20241231_dm7916mn4dpgbt0p3s8lhdj804","status":"confirmed","summary":"New Year\'s Eve","region":"Denmark","date":"2024-12-31"},{"id":"20250101_2ipibu3pafuq5efu0eu534ad00","status":"confirmed","summary":"New Year\'s Day","region":"Denmark","date":"2025-01-01"},{"id":"20250214_q42fhdrv0nikr49jrm9sto2i7c","status":"confirmed","summary":"Valentine\'s Day","region":"Denmark","date":"2025-02-14"},{"id":"20250302_u86n1u093169nnosncpm76r1hk","status":"confirmed","summary":"Carnival","region":"Denmark","date":"2025-03-02"},{"id":"20250330_85bccuf85tnktlm84igju8vlg8","status":"confirmed","summary":"Daylight Saving Time starts","region":"Denmark","date":"2025-03-30"},{"id":"20250413_i3drstl7hldgeo3cvbhlrt0mc8","status":"confirmed","summary":"Palm Sunday","region":"Denmark","date":"2025-04-13"},{"id":"20250417_odckm18su4361p0aimpn2360r0","status":"confirmed","summary":"Maundy Thursday","region":"Denmark","date":"2025-04-17"},{"id":"20250418_30crpltm270knp3bei3l949d6c","status":"confirmed","summary":"Good Friday","region":"Denmark","date":"2025-04-18"},{"id":"20250420_j3qll8pqi7niib8ea2rrd2lk74","status":"confirmed","summary":"Easter Sunday","region":"Denmark","date":"2025-04-20"},{"id":"20250421_d9c9o0ojr218t78jvhuo561i68","status":"confirmed","summary":"Easter Monday","region":"Denmark","date":"2025-04-21"},{"id":"20250501_sh1hjf0lu7545l0scgvureobrk","status":"confirmed","summary":"Labor Day / May Day","region":"Denmark","date":"2025-05-01"},{"id":"20250505_8984cbm28kslqjnihdubillm58","status":"confirmed","summary":"Liberation Day","region":"Denmark","date":"2025-05-05"},{"id":"20250511_v9sgd71fnnntce8s79if34bdl8","status":"confirmed","summary":"Mother’s Day","region":"Denmark","date":"2025-05-11"},{"id":"20250516_4gbigmubt5m5105armsckhb0mc","status":"confirmed","summary":"Great Prayer Day","region":"Denmark","date":"2025-05-16"},{"id":"20250529_6bv2q1n049c79jflivqpi51mds","status":"confirmed","summary":"Ascension Day","region":"Denmark","date":"2025-05-29"},{"id":"20250605_k35baac7biooe8kmbcv4s914oc","status":"confirmed","summary":"Constitution Day","region":"Denmark","date":"2025-06-05"},{"id":"20250605_lpc14iod31jju697pitele87jo","status":"confirmed","summary":"Father’s Day","region":"Denmark","date":"2025-06-05"},{"id":"20250608_dqpmgu5v162mfg6sd1np029140","status":"confirmed","summary":"Whit Sunday","region":"Denmark","date":"2025-06-08"},{"id":"20250609_9kjmbg88rsujh5prbjv2rul2l0","status":"confirmed","summary":"Whit Monday","region":"Denmark","date":"2025-06-09"},{"id":"20251026_230q5h2oc8kr310r1h2um65974","status":"confirmed","summary":"Daylight Saving Time ends","region":"Denmark","date":"2025-10-26"},{"id":"20251031_n1ahufmcd4rphjp4g1jmllna3g","status":"confirmed","summary":"Halloween","region":"Denmark","date":"2025-10-31"},{"id":"20251224_pagmrir0vft0acsvvqfnv3bk70","status":"confirmed","summary":"Christmas Eve","region":"Denmark","date":"2025-12-24"},{"id":"20251225_i7e514qne2a23eqjvd52sj4ivs","status":"confirmed","summary":"Christmas Day","region":"Denmark","date":"2025-12-25"},{"id":"20251226_tu8uic9f7hcjqb34ie2r3k150g","status":"confirmed","summary":"2nd Christmas Day","region":"Denmark","date":"2025-12-26"},{"id":"20251231_oj8letn27ehi4hq2q7fo7mblik","status":"confirmed","summary":"New Year\'s Eve","region":"Denmark","date":"2025-12-31"}],"Djibouti":[{"id":"20240101_71n1fju05d8t3m41laro5oevck","status":"confirmed","summary":"New Year","region":"Djibouti","date":"2024-01-01"},{"id":"20240208_nqmadct3eqsu0coe6b39ktc38s","status":"confirmed","summary":"Isra and Miraj","region":"Djibouti","date":"2024-02-08"},{"id":"20240311_8cuakq87itg115hjasu4a3tp2g","status":"confirmed","summary":"Ramadan Start","region":"Djibouti","date":"2024-03-11"},{"id":"20240410_q7i9go5c148eivfur6fumbc4vk","status":"confirmed","summary":"Eid al-Fitr","region":"Djibouti","date":"2024-04-10"},{"id":"20240411_m2m91tt7enkpa0ra2he83cmfvg","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Djibouti","date":"2024-04-11"},{"id":"20240501_ido10c9qkhon1f31sufv2pume4","status":"confirmed","summary":"Labor Day / May Day","region":"Djibouti","date":"2024-05-01"},{"id":"20240616_v15vn9abr6besu3lvng8tmehmc","status":"confirmed","summary":"Arafat Day","region":"Djibouti","date":"2024-06-16"},{"id":"20240617_8p6ephvt7rmlpmh1vqs8thuk84","status":"confirmed","summary":"Eid al-Adha","region":"Djibouti","date":"2024-06-17"},{"id":"20240618_r77qkpocmcsre5o5j87b2mgo1g","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Djibouti","date":"2024-06-18"},{"id":"20240627_g27gkiv0plq5c0vsdjkpdknr1k","status":"confirmed","summary":"Independence Day","region":"Djibouti","date":"2024-06-27"},{"id":"20240628_9048pgt5tqme4n0c3sddkiagnc","status":"confirmed","summary":"Independence Day Holiday","region":"Djibouti","date":"2024-06-28"},{"id":"20240708_gn6j8o5f6051porrl6u3egmkj0","status":"confirmed","summary":"Muharram","region":"Djibouti","date":"2024-07-08"},{"id":"20240916_38iv2nn3mglb7un9bf81lr2u1g","status":"confirmed","summary":"Milad un Nabi (Mawlid)","region":"Djibouti","date":"2024-09-16"},{"id":"20250101_b5f0lvmprsh514e9n1lak3ea40","status":"confirmed","summary":"New Year","region":"Djibouti","date":"2025-01-01"},{"id":"20250127_21arddqe3fku4948sip33nf4pk","status":"confirmed","summary":"Isra and Miraj","region":"Djibouti","date":"2025-01-27"},{"id":"20250301_brppdat27t1jgiqiqs2dkj9s88","status":"confirmed","summary":"Ramadan Start","region":"Djibouti","date":"2025-03-01"},{"id":"20250331_mvjn6v8n8626vmqkm66j2ne44s","status":"confirmed","summary":"Eid al-Fitr","region":"Djibouti","date":"2025-03-31"},{"id":"20250401_uvkr8jo9bsnbb24hps8d5a2k74","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Djibouti","date":"2025-04-01"},{"id":"20250501_tb36vj6q03lmj344md3fahf4e8","status":"confirmed","summary":"Labor Day / May Day","region":"Djibouti","date":"2025-05-01"},{"id":"20250606_r7vo8266ktn2ob3m7v2gv0m6qg","status":"confirmed","summary":"Arafat Day","region":"Djibouti","date":"2025-06-06"},{"id":"20250607_ed498rf7ehuqe97ao772tqdndc","status":"confirmed","summary":"Eid al-Adha","region":"Djibouti","date":"2025-06-07"},{"id":"20250608_ebvnfivolv8imf02ghrto35vp0","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Djibouti","date":"2025-06-08"},{"id":"20250627_8jbh14eg9m1438n5iis096lc0c","status":"confirmed","summary":"Independence Day","region":"Djibouti","date":"2025-06-27"},{"id":"20250627_sc13flemgefjk9gedbokprkq54","status":"confirmed","summary":"Muharram","region":"Djibouti","date":"2025-06-27"},{"id":"20250628_iecme1fr5thklupol09l8leehs","status":"confirmed","summary":"Independence Day Holiday","region":"Djibouti","date":"2025-06-28"},{"id":"20250905_f441vle5snvcbprsg4d72iktd0","status":"confirmed","summary":"Milad un Nabi (Mawlid)","region":"Djibouti","date":"2025-09-05"}],"Dominica":[{"id":"20240101_lsfpqjvnp0qhtodtgugavmiu6k","status":"confirmed","summary":"New Year\'s Day","region":"Dominica","date":"2024-01-01"},{"id":"20240212_etmrcki3158pqin1aeer7mv20s","status":"confirmed","summary":"Carnival Monday","region":"Dominica","date":"2024-02-12"},{"id":"20240213_pu0trhn3nj6ckc15ibus0tv0gs","status":"confirmed","summary":"Carnival Tuesday","region":"Dominica","date":"2024-02-13"},{"id":"20240329_6nh890lkp0fnjhj0a9ekjdatu0","status":"confirmed","summary":"Good Friday","region":"Dominica","date":"2024-03-29"},{"id":"20240401_p6eme9ke8kke3rms26fk0gho9o","status":"confirmed","summary":"Easter Monday","region":"Dominica","date":"2024-04-01"},{"id":"20240506_udg4b1ink7688g68et2rpk0ekg","status":"confirmed","summary":"Labor Day / May Day","region":"Dominica","date":"2024-05-06"},{"id":"20240520_pta80ns938ncakocm0riik5j40","status":"confirmed","summary":"Whit Monday","region":"Dominica","date":"2024-05-20"},{"id":"20240805_f9pj8uhjdbgfthijufde6vqqlc","status":"confirmed","summary":"Emancipation Day","region":"Dominica","date":"2024-08-05"},{"id":"20241103_r1k9nvg2h1o84p6d64svp6i9u8","status":"confirmed","summary":"Independence Day","region":"Dominica","date":"2024-11-03"},{"id":"20241104_7cmfvfp5j0hg9nlgm0ttkmehbg","status":"confirmed","summary":"Independence Day observed","region":"Dominica","date":"2024-11-04"},{"id":"20241104_p41ltn5ictci78iod5gvdup934","status":"confirmed","summary":"Community Service Day","region":"Dominica","date":"2024-11-04"},{"id":"20241105_9a9ov7k9l4vhjfr6b255e5qc0s","status":"confirmed","summary":"Community Service Day observed","region":"Dominica","date":"2024-11-05"},{"id":"20241110_514s6mvaqj1ur1vpijc50ma4t8","status":"confirmed","summary":"Remembrance Sunday","region":"Dominica","date":"2024-11-10"},{"id":"20241225_v3gm1643afov9tp0fbgvp9g4i8","status":"confirmed","summary":"Christmas Day","region":"Dominica","date":"2024-12-25"},{"id":"20241226_0klsmvn2b5cfgipu50pou7mv50","status":"confirmed","summary":"Boxing Day","region":"Dominica","date":"2024-12-26"},{"id":"20250101_5ti7qtlpdpj2tbmklugps32gvg","status":"confirmed","summary":"New Year\'s Day","region":"Dominica","date":"2025-01-01"},{"id":"20250303_e92lqqaf3k7tbvubuk4ac7nt9k","status":"confirmed","summary":"Carnival Monday","region":"Dominica","date":"2025-03-03"},{"id":"20250304_k7ld9t1keknbh11ksomnahk470","status":"confirmed","summary":"Carnival Tuesday","region":"Dominica","date":"2025-03-04"},{"id":"20250418_2nk0r51qtchllb9iju8vqlr3hg","status":"confirmed","summary":"Good Friday","region":"Dominica","date":"2025-04-18"},{"id":"20250421_9im366evqlnlgk4vmejha94ig0","status":"confirmed","summary":"Easter Monday","region":"Dominica","date":"2025-04-21"},{"id":"20250505_gn4m3s722ql2pldfp3f75ljp10","status":"confirmed","summary":"Labor Day / May Day","region":"Dominica","date":"2025-05-05"},{"id":"20250609_jvlofolubsm76j44l838s3fsqo","status":"confirmed","summary":"Whit Monday","region":"Dominica","date":"2025-06-09"},{"id":"20250804_9ue3bl8avh1606ne2040svtg0s","status":"confirmed","summary":"Emancipation Day","region":"Dominica","date":"2025-08-04"},{"id":"20251103_hj9fuqtjmm6d3i155ufumge298","status":"confirmed","summary":"Independence Day","region":"Dominica","date":"2025-11-03"},{"id":"20251104_1l2c710egpr5v5vlc3kfepeh2g","status":"confirmed","summary":"Community Service Day","region":"Dominica","date":"2025-11-04"},{"id":"20251109_m58m1p1rao38bi3208g627trlc","status":"confirmed","summary":"Remembrance Sunday","region":"Dominica","date":"2025-11-09"},{"id":"20251225_gqii4gi5fig8uc8ersj623up90","status":"confirmed","summary":"Christmas Day","region":"Dominica","date":"2025-12-25"},{"id":"20251226_mvar38blmcr3mh52ulg5sek9eg","status":"confirmed","summary":"Boxing Day","region":"Dominica","date":"2025-12-26"}],"Dominican Republic":[{"id":"20240101_h36qchbeplhnujjb1oec5rarcs","status":"confirmed","summary":"New Year\'s Day","region":"Dominican Republic","date":"2024-01-01"},{"id":"20240106_q8uovbmifs21u3oao092480ess","status":"confirmed","summary":"Epiphany","region":"Dominican Republic","date":"2024-01-06"},{"id":"20240121_m4ilmr7gsb1sl9bqbtc9f920ho","status":"confirmed","summary":"Our Lady of Altagracia","region":"Dominican Republic","date":"2024-01-21"},{"id":"20240126_mir1nujnbpmvteviek3mtr4rtc","status":"confirmed","summary":"Duarte\'s Day","region":"Dominican Republic","date":"2024-01-26"},{"id":"20240129_67fnuifejbea3pqh7l4jj44bsg","status":"confirmed","summary":"Day off for Duarte\'s Day","region":"Dominican Republic","date":"2024-01-29"},{"id":"20240227_i4va0jo1ikq4t4gm01a7tfc7l8","status":"confirmed","summary":"Independence Day","region":"Dominican Republic","date":"2024-02-27"},{"id":"20240328_4p146g0g7966o5fvlvagt0r7t4","status":"confirmed","summary":"Maundy Thursday","region":"Dominican Republic","date":"2024-03-28"},{"id":"20240329_551iq7oiq6qpg3apun4it9ppmg","status":"confirmed","summary":"Good Friday","region":"Dominican Republic","date":"2024-03-29"},{"id":"20240429_n429chl9osbvsokuoq08ooeqc4","status":"confirmed","summary":"Day off for Labor Day","region":"Dominican Republic","date":"2024-04-29"},{"id":"20240501_pv2nirvptmrnttnn8p10lkn6ls","status":"confirmed","summary":"Labor Day","region":"Dominican Republic","date":"2024-05-01"},{"id":"20240526_mkeji73f4bsrl6hu7g8ermv0a4","status":"confirmed","summary":"Mother\'s Day","region":"Dominican Republic","date":"2024-05-26"},{"id":"20240530_um08vkki908lpstt5lf4e7nd18","status":"confirmed","summary":"Corpus Christi","region":"Dominican Republic","date":"2024-05-30"},{"id":"20240728_st6dsp8vijdisc7jvt172u2jms","status":"confirmed","summary":"Father\'s Day","region":"Dominican Republic","date":"2024-07-28"},{"id":"20240816_1moss3u03k9nm6rg162df7jkpc","status":"confirmed","summary":"Restoration Day","region":"Dominican Republic","date":"2024-08-16"},{"id":"20240924_0jn10su8emcaj5fkqk5u59lvg4","status":"confirmed","summary":"Feast of Our Lady of Mercy","region":"Dominican Republic","date":"2024-09-24"},{"id":"20241104_hmhutvjc3bkr9bhqibasfgh6rg","status":"confirmed","summary":"Day off for Constitution Day","region":"Dominican Republic","date":"2024-11-04"},{"id":"20241106_qoqdk1350k6kfml30vmm163eqk","status":"confirmed","summary":"Constitution Day","region":"Dominican Republic","date":"2024-11-06"},{"id":"20241224_afbn357fh8k9je9vklkjusmm2s","status":"confirmed","summary":"Christmas Eve","region":"Dominican Republic","date":"2024-12-24"},{"id":"20241225_ud394ooa2mqm2ku5f901ctad0g","status":"confirmed","summary":"Christmas Day","region":"Dominican Republic","date":"2024-12-25"},{"id":"20241231_4cmfovas34p25rkagafcupdjf8","status":"confirmed","summary":"New Year\'s Eve","region":"Dominican Republic","date":"2024-12-31"},{"id":"20250101_t0bt7d2q9u60nqt2volqjhkpd4","status":"confirmed","summary":"New Year\'s Day","region":"Dominican Republic","date":"2025-01-01"},{"id":"20250106_eagaltadm3ui52kj9tdlr3iun8","status":"confirmed","summary":"Epiphany","region":"Dominican Republic","date":"2025-01-06"},{"id":"20250121_53uvj6bhc1uc0uif46ht9amfl4","status":"confirmed","summary":"Our Lady of Altagracia","region":"Dominican Republic","date":"2025-01-21"},{"id":"20250126_ep0fk22j23s1b5b4aofpmo4tho","status":"confirmed","summary":"Duarte\'s Day","region":"Dominican Republic","date":"2025-01-26"},{"id":"20250227_4ojas6oqvaifqth9oi1kgf83q4","status":"confirmed","summary":"Independence Day","region":"Dominican Republic","date":"2025-02-27"},{"id":"20250417_qlo6iojcih9l8vta56njm2f8ug","status":"confirmed","summary":"Maundy Thursday","region":"Dominican Republic","date":"2025-04-17"},{"id":"20250418_ks4p5hrgsa007sculg07khopo0","status":"confirmed","summary":"Good Friday","region":"Dominican Republic","date":"2025-04-18"},{"id":"20250501_68v9es248gc36rmq5hofvblqg8","status":"confirmed","summary":"Labor Day","region":"Dominican Republic","date":"2025-05-01"},{"id":"20250525_kuj4tis51d8gp41tfbj2ie5su0","status":"confirmed","summary":"Mother\'s Day","region":"Dominican Republic","date":"2025-05-25"},{"id":"20250619_m1qb84k2b414at0pvjdd3o78kk","status":"confirmed","summary":"Corpus Christi","region":"Dominican Republic","date":"2025-06-19"},{"id":"20250727_dqo4lksr0u9h9kdpvnh6tc2p8k","status":"confirmed","summary":"Father\'s Day","region":"Dominican Republic","date":"2025-07-27"},{"id":"20250816_jib4e8elapt3dk01c3q03uage8","status":"confirmed","summary":"Restoration Day","region":"Dominican Republic","date":"2025-08-16"},{"id":"20250924_sbdfa5uavds5im2gvlgd4s1lu0","status":"confirmed","summary":"Feast of Our Lady of Mercy","region":"Dominican Republic","date":"2025-09-24"},{"id":"20251106_168qerkrihsvnt69nv795893s8","status":"confirmed","summary":"Constitution Day","region":"Dominican Republic","date":"2025-11-06"},{"id":"20251110_90v6f4mj4ou1h494ac90r7gs9s","status":"confirmed","summary":"Day off for Constitution Day","region":"Dominican Republic","date":"2025-11-10"},{"id":"20251224_3i9obafkk3vl28pehusv5eus0k","status":"confirmed","summary":"Christmas Eve","region":"Dominican Republic","date":"2025-12-24"},{"id":"20251225_cfb406hf1qlq79o2023plpapbc","status":"confirmed","summary":"Christmas Day","region":"Dominican Republic","date":"2025-12-25"},{"id":"20251231_fab4ecltubo097r7l1mb2pmkts","status":"confirmed","summary":"New Year\'s Eve","region":"Dominican Republic","date":"2025-12-31"}],"Netherlands":[{"id":"20240101_m2b8nsrch1trieirhhhpf0olm4","status":"confirmed","summary":"New Year\'s Day","region":"Netherlands","date":"2024-01-01"},{"id":"20240214_9mk9vhsqno7alseb6tobfnfas4","status":"confirmed","summary":"Valentine\'s Day","region":"Netherlands","date":"2024-02-14"},{"id":"20240329_vk7mbgsc827ljc0bg6f9nj8s68","status":"confirmed","summary":"Good Friday","region":"Netherlands","date":"2024-03-29"},{"id":"20240331_n10jf2og3prs6o19k22v0pe74c","status":"confirmed","summary":"Easter Sunday","region":"Netherlands","date":"2024-03-31"},{"id":"20240401_h11jd6dq5jn6787fk2qk1jfvls","status":"confirmed","summary":"Easter Monday","region":"Netherlands","date":"2024-04-01"},{"id":"20240427_g6jeehoa8bnen5kg1c74im9dpc","status":"confirmed","summary":"King\'s Birthday","region":"Netherlands","date":"2024-04-27"},{"id":"20240505_92ecsfuojk56livdm41skp644k","status":"confirmed","summary":"Liberation Day","region":"Netherlands","date":"2024-05-05"},{"id":"20240509_rb0sukea5248f9obl25u595178","status":"confirmed","summary":"Ascension Day","region":"Netherlands","date":"2024-05-09"},{"id":"20240512_bklvgupn9ep4sg8l9pv9aqqco4","status":"confirmed","summary":"Mother\'s Day","region":"Netherlands","date":"2024-05-12"},{"id":"20240519_etj4fhbbu72tmlvpfv3pq6fo5k","status":"confirmed","summary":"Whit Sunday","region":"Netherlands","date":"2024-05-19"},{"id":"20240520_g3e8amhg6hc2ig3mq7a5cnig38","status":"confirmed","summary":"Whit Monday","region":"Netherlands","date":"2024-05-20"},{"id":"20240616_tn3pf2oj81ecnraa95kf40hnq4","status":"confirmed","summary":"Father\'s Day","region":"Netherlands","date":"2024-06-16"},{"id":"20240701_25f8sq67kch6n5jvlh1hvjqh3o","status":"confirmed","summary":"Keti Koti","region":"Netherlands","date":"2024-07-01"},{"id":"20241205_i0cjtcaidcmv0icrotmcakd0po","status":"confirmed","summary":"St Nicholas\' Eve/Sinterklaas","region":"Netherlands","date":"2024-12-05"},{"id":"20241224_gethljp17o3tbalg280b3ad12s","status":"confirmed","summary":"Christmas Eve","region":"Netherlands","date":"2024-12-24"},{"id":"20241225_kibg0cap2pnqlt5p0n7dhrgi80","status":"confirmed","summary":"Christmas Day","region":"Netherlands","date":"2024-12-25"},{"id":"20241226_74sji773tl7ba9foi14e6ppvuk","status":"confirmed","summary":"Second Day of Christmas","region":"Netherlands","date":"2024-12-26"},{"id":"20241231_n9qipk5n54kdipmqhkjcrjoqvo","status":"confirmed","summary":"New Year\'s Eve","region":"Netherlands","date":"2024-12-31"},{"id":"20250101_m5pg848uns23ofaa4rqqgnjf2k","status":"confirmed","summary":"New Year\'s Day","region":"Netherlands","date":"2025-01-01"},{"id":"20250214_ont9l9i7u2449rmrfbng96hmgk","status":"confirmed","summary":"Valentine\'s Day","region":"Netherlands","date":"2025-02-14"},{"id":"20250418_a287ob8gq92h7dcnn3deppur0s","status":"confirmed","summary":"Good Friday","region":"Netherlands","date":"2025-04-18"},{"id":"20250420_3lpno1b0pq54o16mftih69m16o","status":"confirmed","summary":"Easter Sunday","region":"Netherlands","date":"2025-04-20"},{"id":"20250421_07528ma5ggkhjmqie95pubb29g","status":"confirmed","summary":"Easter Monday","region":"Netherlands","date":"2025-04-21"},{"id":"20250426_iq1ukktg31ghpsvb7ehkuekapo","status":"confirmed","summary":"King\'s Birthday","region":"Netherlands","date":"2025-04-26"},{"id":"20250427_2h5h7hseelnvqakou0jdrhv34o","status":"confirmed","summary":"King\'s Birthday","region":"Netherlands","date":"2025-04-27"},{"id":"20250505_dpm7cnsfnqr6hi9c0alprtfiao","status":"confirmed","summary":"Liberation Day","region":"Netherlands","date":"2025-05-05"},{"id":"20250511_88ol7316bk9aajc0mvjfiofeos","status":"confirmed","summary":"Mother\'s Day","region":"Netherlands","date":"2025-05-11"},{"id":"20250529_tne9e26l87eukd2ciq8qjs82e8","status":"confirmed","summary":"Ascension Day","region":"Netherlands","date":"2025-05-29"},{"id":"20250608_kk2f82aam96lpumtnkvo6dr4us","status":"confirmed","summary":"Whit Sunday","region":"Netherlands","date":"2025-06-08"},{"id":"20250609_127dsfnoia6fbj96snasdqtgq8","status":"confirmed","summary":"Whit Monday","region":"Netherlands","date":"2025-06-09"},{"id":"20250615_5qa9b746ce8n1p53gciiurkmns","status":"confirmed","summary":"Father\'s Day","region":"Netherlands","date":"2025-06-15"},{"id":"20250701_e6iq3ps7t5of551d6htjs8s5lk","status":"confirmed","summary":"Keti Koti","region":"Netherlands","date":"2025-07-01"},{"id":"20251205_49hqekvedm7ujueu9qj746krkg","status":"confirmed","summary":"St Nicholas\' Eve/Sinterklaas","region":"Netherlands","date":"2025-12-05"},{"id":"20251224_tvhk39al8h4i0t0dlo7jjiap5c","status":"confirmed","summary":"Christmas Eve","region":"Netherlands","date":"2025-12-24"},{"id":"20251225_6hnjpva2375iem2nfhf8hitakk","status":"confirmed","summary":"Christmas Day","region":"Netherlands","date":"2025-12-25"},{"id":"20251226_j4fv0gbjegerv3d8hm52i588g8","status":"confirmed","summary":"Second Day of Christmas","region":"Netherlands","date":"2025-12-26"},{"id":"20251231_baemfdgc3fkgo7lq3kkaj9dt9c","status":"confirmed","summary":"New Year\'s Eve","region":"Netherlands","date":"2025-12-31"}],"Algeria":[{"id":"20240101_u9ks88p1nogt43ubojcs8oiol4","status":"confirmed","summary":"New Year","region":"Algeria","date":"2024-01-01"},{"id":"20240112_6405k3o4mgds03uor7nj4729ro","status":"confirmed","summary":"Berber New Year","region":"Algeria","date":"2024-01-12"},{"id":"20240311_dv1r3o30ea07ssd16ikvssnspg","status":"confirmed","summary":"Ramadan Start","region":"Algeria","date":"2024-03-11"},{"id":"20240410_gf8v62dtqjagr5kob0ln9c7fd4","status":"confirmed","summary":"Eid al-Fitr","region":"Algeria","date":"2024-04-10"},{"id":"20240411_c4jflbt5gd0hgvrk5dtd598vok","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Algeria","date":"2024-04-11"},{"id":"20240412_8ol0f4b7qnnhjr4io9b8fjueb8","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Algeria","date":"2024-04-12"},{"id":"20240501_75dqq9cumr5mm1lminpg2cork0","status":"confirmed","summary":"May Day","region":"Algeria","date":"2024-05-01"},{"id":"20240617_qusim8ng8nco4tleirpiu8pasg","status":"confirmed","summary":"Eid al-Adha","region":"Algeria","date":"2024-06-17"},{"id":"20240618_3om2nbamu083jiqfpsf0cea744","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Algeria","date":"2024-06-18"},{"id":"20240619_8eut4ghj827qup2653tev51hc8","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Algeria","date":"2024-06-19"},{"id":"20240705_lpslrjr5tipetqquu2dm499so4","status":"confirmed","summary":"Independence Day","region":"Algeria","date":"2024-07-05"},{"id":"20240708_8m6ll6t6a4aj2072575p4h5pgk","status":"confirmed","summary":"Muharram","region":"Algeria","date":"2024-07-08"},{"id":"20240717_3e9fslor4oepkjulj19qsp52kk","status":"confirmed","summary":"Day of Achura","region":"Algeria","date":"2024-07-17"},{"id":"20240916_vf0ouhp6bpgaua3jrgrbtik7fc","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Algeria","date":"2024-09-16"},{"id":"20241101_3n5sd08012qjoeicdq6iil3hdc","status":"confirmed","summary":"Anniversary of the Revolution","region":"Algeria","date":"2024-11-01"},{"id":"20250101_ravp757aa2tkmc2ias4af78pt4","status":"confirmed","summary":"New Year","region":"Algeria","date":"2025-01-01"},{"id":"20250112_b3iukn1i299mn46oaietkh5v4g","status":"confirmed","summary":"Berber New Year","region":"Algeria","date":"2025-01-12"},{"id":"20250301_o7l5ov0d5j5uhhte8ls155r5e8","status":"confirmed","summary":"Ramadan Start","region":"Algeria","date":"2025-03-01"},{"id":"20250331_j45524m1988u4773opha6vat8k","status":"confirmed","summary":"Eid al-Fitr","region":"Algeria","date":"2025-03-31"},{"id":"20250401_soh64ossas6tl94p4cvea2bkco","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Algeria","date":"2025-04-01"},{"id":"20250402_jsjk5a4h48rnel8skdreemh2fg","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Algeria","date":"2025-04-02"},{"id":"20250501_mpn9p5kk5rav8ptb9i9dke8lco","status":"confirmed","summary":"May Day","region":"Algeria","date":"2025-05-01"},{"id":"20250607_lv400e96gcnnv1u1b9v06fd634","status":"confirmed","summary":"Eid al-Adha","region":"Algeria","date":"2025-06-07"},{"id":"20250608_lcqpqh9sjsk8qqqupsnmo79mqk","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Algeria","date":"2025-06-08"},{"id":"20250609_6k7k4499gmqqd4puct5r4aj2us","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Algeria","date":"2025-06-09"},{"id":"20250627_do28a3gbn9ov5sptjkjd87sdbs","status":"confirmed","summary":"Muharram","region":"Algeria","date":"2025-06-27"},{"id":"20250705_rrcvq5cam07rlp6bahar189mg4","status":"confirmed","summary":"Independence Day","region":"Algeria","date":"2025-07-05"},{"id":"20250706_f48jtb6139sgl5goteqn7f6irg","status":"confirmed","summary":"Day of Achura","region":"Algeria","date":"2025-07-06"},{"id":"20250905_enui7a50t1pri862dumi84jg1g","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Algeria","date":"2025-09-05"},{"id":"20251101_9uo7lhdh77qajnk8hs3174f8k4","status":"confirmed","summary":"Anniversary of the Revolution","region":"Algeria","date":"2025-11-01"}],"Ecuador":[{"id":"20240101_m6hs36bfehqikapha9mt06pgnc","status":"confirmed","summary":"New Year\'s Day","region":"Ecuador","date":"2024-01-01"},{"id":"20240212_fjek5b8rdqrgt7j549joivhtbs","status":"confirmed","summary":"Carnival","region":"Ecuador","date":"2024-02-12"},{"id":"20240213_j8pg560b2letu63d47vupcsoac","status":"confirmed","summary":"Carnival","region":"Ecuador","date":"2024-02-13"},{"id":"20240328_vktbcclnlrt0ts9p72tgg1a9q0","status":"confirmed","summary":"Maundy Thursday","region":"Ecuador","date":"2024-03-28"},{"id":"20240329_8cov6qg3r45l8onhal9kuc33fc","status":"confirmed","summary":"Good Friday","region":"Ecuador","date":"2024-03-29"},{"id":"20240330_05bnmpu0k6n3fa87i33aj4eqo8","status":"confirmed","summary":"Holy Saturday","region":"Ecuador","date":"2024-03-30"},{"id":"20240331_af60ie33o8pdhetfpcjdtnh6n8","status":"confirmed","summary":"Easter Sunday","region":"Ecuador","date":"2024-03-31"},{"id":"20240418_up0g84vuhpd8p78n1kqb9ihr2k","status":"confirmed","summary":"Power Outage Holiday","region":"Ecuador","date":"2024-04-18"},{"id":"20240419_vanalkj01ss6bcl5j8crouu0ao","status":"confirmed","summary":"Power Outage Holiday","region":"Ecuador","date":"2024-04-19"},{"id":"20240501_qvvvh0bhitlelrqf6f13dshf4g","status":"confirmed","summary":"Labor Day / May Day","region":"Ecuador","date":"2024-05-01"},{"id":"20240503_gn8n981mddtskiojvda4i7kg7c","status":"confirmed","summary":"Day off for Labor Day / May Day","region":"Ecuador","date":"2024-05-03"},{"id":"20240524_vs1tujvpi4u221uc6kjkn9h84k","status":"confirmed","summary":"The Battle of Pichincha","region":"Ecuador","date":"2024-05-24"},{"id":"20240724_p9tih0bdmtkcon14v68e023mro","status":"confirmed","summary":"Simón Bolívar\'s Birthday Memorial","region":"Ecuador","date":"2024-07-24"},{"id":"20240809_4ctd73kl7ns0dsa3q1nood0u9s","status":"confirmed","summary":"Day off for Independence Day","region":"Ecuador","date":"2024-08-09"},{"id":"20240810_1tdd5lf11haan96jhhk6crrj0g","status":"confirmed","summary":"Independence Day","region":"Ecuador","date":"2024-08-10"},{"id":"20241009_rf62trov7feb2fn6q0iqh52fl0","status":"confirmed","summary":"Independence of Guayaquil","region":"Ecuador","date":"2024-10-09"},{"id":"20241011_litbubmjvtifha46fsg3f0pna8","status":"confirmed","summary":"Day off for Independence of Guayaquil","region":"Ecuador","date":"2024-10-11"},{"id":"20241031_1mqaoirdonl3btec89kvvkngqg","status":"confirmed","summary":"Day off for All Souls\' Day","region":"Ecuador","date":"2024-10-31"},{"id":"20241102_7aphq8i1ko8mrejg82iqb9btto","status":"confirmed","summary":"All Souls\' Day","region":"Ecuador","date":"2024-11-02"},{"id":"20241103_l7ambdaip64ec7ifqj20uf313o","status":"confirmed","summary":"Independence of Cuenca","region":"Ecuador","date":"2024-11-03"},{"id":"20241104_ims4v6pba3m3v5e2se8dv9lomc","status":"confirmed","summary":"Day off for Independence of Cuenca","region":"Ecuador","date":"2024-11-04"},{"id":"20241225_8qseth2s24cl4lhmol65l9dkm4","status":"confirmed","summary":"Christmas Day","region":"Ecuador","date":"2024-12-25"},{"id":"20241231_79hdnlb4g67p1td99f3uve5abo","status":"confirmed","summary":"New Year\'s Eve","region":"Ecuador","date":"2024-12-31"},{"id":"20250101_18bbufvem1vns9gau5fndchdtk","status":"confirmed","summary":"New Year\'s Day","region":"Ecuador","date":"2025-01-01"},{"id":"20250303_0rnfprqa9hlsin7mrcftaoh4f0","status":"confirmed","summary":"Carnival","region":"Ecuador","date":"2025-03-03"},{"id":"20250304_mktgvgkgft7n6q4svobkb9qna4","status":"confirmed","summary":"Carnival","region":"Ecuador","date":"2025-03-04"},{"id":"20250417_csou6skt07i5igcc35hdckpeg8","status":"confirmed","summary":"Maundy Thursday","region":"Ecuador","date":"2025-04-17"},{"id":"20250418_vdehj0h0chji7k794i1s2mre0s","status":"confirmed","summary":"Good Friday","region":"Ecuador","date":"2025-04-18"},{"id":"20250419_ltg7qh2flrp3hvu1fpjo4o1kag","status":"confirmed","summary":"Holy Saturday","region":"Ecuador","date":"2025-04-19"},{"id":"20250420_m0gb2omr7d5kluavhl7p30fpho","status":"confirmed","summary":"Easter Sunday","region":"Ecuador","date":"2025-04-20"},{"id":"20250501_ij31svuiuhcnevv1ptf93fmnf4","status":"confirmed","summary":"Labor Day / May Day","region":"Ecuador","date":"2025-05-01"},{"id":"20250502_e7mgps0492s003fm0qan1h1hsk","status":"confirmed","summary":"Day off for Labor Day / May Day","region":"Ecuador","date":"2025-05-02"},{"id":"20250523_02vqua32b6vup6lfkn8o7tjiuc","status":"confirmed","summary":"Day off for The Battle of Pichincha","region":"Ecuador","date":"2025-05-23"},{"id":"20250524_pbp60arle1j5qem2qgq3c4hqe8","status":"confirmed","summary":"The Battle of Pichincha","region":"Ecuador","date":"2025-05-24"},{"id":"20250724_f19iooaafcj06jjob2sm8f8vng","status":"confirmed","summary":"Simón Bolívar\'s Birthday Memorial","region":"Ecuador","date":"2025-07-24"},{"id":"20250810_ao32cp52kq67idl46lp51v2ilo","status":"confirmed","summary":"Independence Day","region":"Ecuador","date":"2025-08-10"},{"id":"20250811_vi9f67inicligunaaif12aji70","status":"confirmed","summary":"Day off for Independence Day","region":"Ecuador","date":"2025-08-11"},{"id":"20251009_060cbab2j7ctjfo20kptblb508","status":"confirmed","summary":"Independence of Guayaquil","region":"Ecuador","date":"2025-10-09"},{"id":"20251010_nfos31hfscbjp6be8crk490vbk","status":"confirmed","summary":"Day off for Independence of Guayaquil","region":"Ecuador","date":"2025-10-10"},{"id":"20251102_4i0mhvbolcobeeb8u74kag4ces","status":"confirmed","summary":"All Souls\' Day","region":"Ecuador","date":"2025-11-02"},{"id":"20251103_2jl4vc57csf6le8fq3iu3156c4","status":"confirmed","summary":"Independence of Cuenca","region":"Ecuador","date":"2025-11-03"},{"id":"20251104_2h2uqcilhkjr8par9mcplhu730","status":"confirmed","summary":"Day off for All Souls\' Day","region":"Ecuador","date":"2025-11-04"},{"id":"20251225_m9932ukb66j6gi7snbfkqko3jc","status":"confirmed","summary":"Christmas Day","region":"Ecuador","date":"2025-12-25"},{"id":"20251231_t8etskr94s0udkeobv8f7brfbg","status":"confirmed","summary":"New Year\'s Eve","region":"Ecuador","date":"2025-12-31"}],"Estonia":[{"id":"20240101_n49qq9o3vat27r0f9isq604pkg","status":"confirmed","summary":"New Year\'s Day","region":"Estonia","date":"2024-01-01"},{"id":"20240106_1v91a4s20r5demp66bffjdplc4","status":"confirmed","summary":"Epiphany","region":"Estonia","date":"2024-01-06"},{"id":"20240202_rvggbdh91sosa0s4hnvhnothp4","status":"confirmed","summary":"Anniversary of Tartu Peace Treaty","region":"Estonia","date":"2024-02-02"},{"id":"20240224_sa3o14gj5e9bebpl1lhlrd679c","status":"confirmed","summary":"Independence Day","region":"Estonia","date":"2024-02-24"},{"id":"20240314_qe00pt9ne1h5ojv0s81ln47bng","status":"confirmed","summary":"Mother Tongue Day","region":"Estonia","date":"2024-03-14"},{"id":"20240329_27pbhf7vchjsch8jgcpo2jgs6k","status":"confirmed","summary":"Good Friday","region":"Estonia","date":"2024-03-29"},{"id":"20240331_let3qnorbkvleb1ek3etdaheqk","status":"confirmed","summary":"Easter Sunday","region":"Estonia","date":"2024-03-31"},{"id":"20240501_cmlrv9uhbeeaf735ruemum4h40","status":"confirmed","summary":"Labor Day","region":"Estonia","date":"2024-05-01"},{"id":"20240512_vjjocfv338jfqiusoptpkp09f8","status":"confirmed","summary":"Mothers\' Day","region":"Estonia","date":"2024-05-12"},{"id":"20240519_3or91kr2ktos5ml05lt1t8oqto","status":"confirmed","summary":"Pentecost","region":"Estonia","date":"2024-05-19"},{"id":"20240604_o4aud50ok23t8qsakcmu4h87ok","status":"confirmed","summary":"Flag Day","region":"Estonia","date":"2024-06-04"},{"id":"20240614_80ep8rhdfqpmdgpuddhvn0h60k","status":"confirmed","summary":"Day of Mourning","region":"Estonia","date":"2024-06-14"},{"id":"20240623_3erpqmjsigu60lh7p2v7t2iqmk","status":"confirmed","summary":"Victory Day","region":"Estonia","date":"2024-06-23"},{"id":"20240624_6hdacj6rali98gpbna86ckldgo","status":"confirmed","summary":"Midsummer Day","region":"Estonia","date":"2024-06-24"},{"id":"20240820_km0a2rtakeia5tbg9v6c2e0pdc","status":"confirmed","summary":"Independence Restoration Day","region":"Estonia","date":"2024-08-20"},{"id":"20240823_8jk4gjbhdtmqg92ed5tnmge7ao","status":"confirmed","summary":"Day of Remembrance for Victims of Communism and Nazism","region":"Estonia","date":"2024-08-23"},{"id":"20240908_cno79jfdpd4roee5nhbhbil2j0","status":"confirmed","summary":"Grandparents\' Day","region":"Estonia","date":"2024-09-08"},{"id":"20240922_2812q0t4s9bufeond1gqlm5uv4","status":"confirmed","summary":"Resistance Day","region":"Estonia","date":"2024-09-22"},{"id":"20241019_2jjeq8081oaj82gdplooaf859g","status":"confirmed","summary":"Finno-Ugric Day","region":"Estonia","date":"2024-10-19"},{"id":"20241102_j49hnlb11kcqt2os22b4pcdgts","status":"confirmed","summary":"All Soul\'s Day","region":"Estonia","date":"2024-11-02"},{"id":"20241110_7t002lcqci0dq7ilpejoq385p4","status":"confirmed","summary":"Father\'s Day","region":"Estonia","date":"2024-11-10"},{"id":"20241116_a8fave28culqg4smse359365h0","status":"confirmed","summary":"Day of Declaration of Sovereignty","region":"Estonia","date":"2024-11-16"},{"id":"20241224_7kk1cl1keur7lcijdja3tm6hr8","status":"confirmed","summary":"Christmas Eve","region":"Estonia","date":"2024-12-24"},{"id":"20241225_5u259qt6oij7cdpsdn17akecog","status":"confirmed","summary":"Christmas Day","region":"Estonia","date":"2024-12-25"},{"id":"20241226_j3049vdn7lhumudhfj562j2lpk","status":"confirmed","summary":"Boxing Day","region":"Estonia","date":"2024-12-26"},{"id":"20250101_cqguhbisimojip5bvquo0esr48","status":"confirmed","summary":"New Year\'s Day","region":"Estonia","date":"2025-01-01"},{"id":"20250106_g6p3apggvkqhmjuuk5pppah9jg","status":"confirmed","summary":"Epiphany","region":"Estonia","date":"2025-01-06"},{"id":"20250202_d2ufi42vklf2e1gmhieej4bn6k","status":"confirmed","summary":"Anniversary of Tartu Peace Treaty","region":"Estonia","date":"2025-02-02"},{"id":"20250224_5qt0uq786aibbtjjiqb09rqams","status":"confirmed","summary":"Independence Day","region":"Estonia","date":"2025-02-24"},{"id":"20250314_udmbce0ebig6but3df2htuq04c","status":"confirmed","summary":"Mother Tongue Day","region":"Estonia","date":"2025-03-14"},{"id":"20250418_k8fthcv71knlaec1b352plj8lk","status":"confirmed","summary":"Good Friday","region":"Estonia","date":"2025-04-18"},{"id":"20250420_rbhjlj30upvfbafpglohc763vk","status":"confirmed","summary":"Easter Sunday","region":"Estonia","date":"2025-04-20"},{"id":"20250501_q031ju24d262vo677lpvm6qf3k","status":"confirmed","summary":"Labor Day","region":"Estonia","date":"2025-05-01"},{"id":"20250511_thhc0v9ol6ddd5cvevmkvef39k","status":"confirmed","summary":"Mothers\' Day","region":"Estonia","date":"2025-05-11"},{"id":"20250604_vs1o6vi73kqsrpmf2joj7c6u8g","status":"confirmed","summary":"Flag Day","region":"Estonia","date":"2025-06-04"},{"id":"20250608_g0nol9hsh9nm9b94h8mve5vqhc","status":"confirmed","summary":"Pentecost","region":"Estonia","date":"2025-06-08"},{"id":"20250614_3j93hpjqknftc6ilufbkj0tad8","status":"confirmed","summary":"Day of Mourning","region":"Estonia","date":"2025-06-14"},{"id":"20250623_frqb6rll02vh0ljtn40q4h0ivg","status":"confirmed","summary":"Victory Day","region":"Estonia","date":"2025-06-23"},{"id":"20250624_u1a56hqs940gl3p515c7obi6f4","status":"confirmed","summary":"Midsummer Day","region":"Estonia","date":"2025-06-24"},{"id":"20250820_0ugvr6q9qbrm5vu6e75rrf61mg","status":"confirmed","summary":"Independence Restoration Day","region":"Estonia","date":"2025-08-20"},{"id":"20250823_hr73h4b6p42h5sn1v8s5s7dvi8","status":"confirmed","summary":"Day of Remembrance for Victims of Communism and Nazism","region":"Estonia","date":"2025-08-23"},{"id":"20250914_dfn0vfv04dgbpa14nk107it69g","status":"confirmed","summary":"Grandparents\' Day","region":"Estonia","date":"2025-09-14"},{"id":"20250922_tj4tb8bc3s0v3ld8vtjd3v79u4","status":"confirmed","summary":"Resistance Day","region":"Estonia","date":"2025-09-22"},{"id":"20251018_m2vq3nr7jpjr2bvsqaheuhm19c","status":"confirmed","summary":"Finno-Ugric Day","region":"Estonia","date":"2025-10-18"},{"id":"20251102_tep7jedgig912j70d0vnevhhns","status":"confirmed","summary":"All Soul\'s Day","region":"Estonia","date":"2025-11-02"},{"id":"20251109_vfi74724k6j3hc3mjfgr92vuag","status":"confirmed","summary":"Father\'s Day","region":"Estonia","date":"2025-11-09"},{"id":"20251116_i5t9s3jmtdnjjc34nj0i4dkrp4","status":"confirmed","summary":"Day of Declaration of Sovereignty","region":"Estonia","date":"2025-11-16"},{"id":"20251224_28h5ug960o59ta1eoandqhlm50","status":"confirmed","summary":"Christmas Eve","region":"Estonia","date":"2025-12-24"},{"id":"20251225_7fgov7n02711l8inue44s6jssg","status":"confirmed","summary":"Christmas Day","region":"Estonia","date":"2025-12-25"},{"id":"20251226_aaojs7djj4tdv5djet8hfmrj90","status":"confirmed","summary":"Boxing Day","region":"Estonia","date":"2025-12-26"}],"Egypt":[{"id":"20240107_t3mf97ma04g1q6b723o1m0t82s","status":"confirmed","summary":"Coptic Christmas Day","region":"Egypt","date":"2024-01-07"},{"id":"20240125_mqjo9j3j47nds6f2sce9j2grbo","status":"confirmed","summary":"Revolution Day January 25","region":"Egypt","date":"2024-01-25"},{"id":"20240311_onia0dho4etndfhnbg5csofpfo","status":"confirmed","summary":"Ramadan Start","region":"Egypt","date":"2024-03-11"},{"id":"20240409_saqcnoru4jrlq7hiuaq37o3r90","status":"confirmed","summary":"Eid el Fitr Holiday","region":"Egypt","date":"2024-04-09"},{"id":"20240410_kltmrueuc064h0tbrhs100hl44","status":"confirmed","summary":"Eid el Fitr","region":"Egypt","date":"2024-04-10"},{"id":"20240411_j57armsvcooj67aitunmkbtd4c","status":"confirmed","summary":"Eid el Fitr Holiday","region":"Egypt","date":"2024-04-11"},{"id":"20240412_2t2q5gk8lvg0rgmp3seo2r4org","status":"confirmed","summary":"Eid el Fitr Holiday","region":"Egypt","date":"2024-04-12"},{"id":"20240413_afi7qlrk4d05rn4gag0amb155o","status":"confirmed","summary":"Eid el Fitr Holiday","region":"Egypt","date":"2024-04-13"},{"id":"20240414_a6j2iks1sk2usj919s2l5c4ljg","status":"confirmed","summary":"Eid el Fitr Holiday","region":"Egypt","date":"2024-04-14"},{"id":"20240425_cef8k2qrhhn8ni1mak7v9apq9o","status":"confirmed","summary":"Sinai Liberation Day","region":"Egypt","date":"2024-04-25"},{"id":"20240501_9ud9trmnpne3t911nhhtsihjfs","status":"confirmed","summary":"Labor Day","region":"Egypt","date":"2024-05-01"},{"id":"20240502_1c5sa3cvvhs8iu90od2dg0j948","status":"confirmed","summary":"Labor Day","region":"Egypt","date":"2024-05-02"},{"id":"20240503_4svvfcju4kl0ssho8k6nm4umq0","status":"confirmed","summary":"Coptic Good Friday","region":"Egypt","date":"2024-05-03"},{"id":"20240504_145la8d04urcluph45qt41k3ag","status":"confirmed","summary":"Coptic Holy Saturday","region":"Egypt","date":"2024-05-04"},{"id":"20240505_1s2ghik9b49710ndjc4ml8g3ko","status":"confirmed","summary":"Labor Day Holiday","region":"Egypt","date":"2024-05-05"},{"id":"20240505_6ujetfff76rudefojuiaugults","status":"confirmed","summary":"Coptic Easter Sunday","region":"Egypt","date":"2024-05-05"},{"id":"20240506_j02o9g606hi92hqs91luradpr4","status":"confirmed","summary":"Spring Festival","region":"Egypt","date":"2024-05-06"},{"id":"20240616_rdcdj3v8teaasg0dmpgft883nk","status":"confirmed","summary":"Arafat Day","region":"Egypt","date":"2024-06-16"},{"id":"20240617_2gv47ns909q77ougji1fui61jk","status":"confirmed","summary":"Eid al-Adha","region":"Egypt","date":"2024-06-17"},{"id":"20240618_pi8ljbfc43g7m1h2nl3cqqh3sk","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Egypt","date":"2024-06-18"},{"id":"20240619_uijdifias3vf3cue017g9lk5js","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Egypt","date":"2024-06-19"},{"id":"20240620_lkuevdfbsnuoikbgb2qch7e1d8","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Egypt","date":"2024-06-20"},{"id":"20240630_q0q0keiqqtege85vgr7vjs1fgc","status":"confirmed","summary":"June 30 Revolution","region":"Egypt","date":"2024-06-30"},{"id":"20240708_7ul8lo3fntoh1c6o56404fu5nc","status":"confirmed","summary":"Muharram","region":"Egypt","date":"2024-07-08"},{"id":"20240717_v906r66r0phui3a30vudbjuao8","status":"confirmed","summary":"Ashura","region":"Egypt","date":"2024-07-17"},{"id":"20240723_5k58a9tdrrch57gbft3ns3ekq4","status":"confirmed","summary":"Revolution Day July 23","region":"Egypt","date":"2024-07-23"},{"id":"20240815_6gkb5dsa93gpkl3kvbsurhtmcs","status":"confirmed","summary":"Flooding of the Nile","region":"Egypt","date":"2024-08-15"},{"id":"20240911_bsbu5botvsqao0mfglk797j6as","status":"confirmed","summary":"Nayrouz","region":"Egypt","date":"2024-09-11"},{"id":"20240916_a3o0c3fpco202r82h36c9htkt8","status":"confirmed","summary":"Prophet Mohamed\'s Birthday","region":"Egypt","date":"2024-09-16"},{"id":"20241006_af4bcid662l0gfikbaqiql9r3k","status":"confirmed","summary":"Armed Forces Day","region":"Egypt","date":"2024-10-06"},{"id":"20250107_o15f2jibr3s1quqmffjpv8ogbo","status":"confirmed","summary":"Coptic Christmas Day","region":"Egypt","date":"2025-01-07"},{"id":"20250125_uclv3e8jv85mnmmdhtt96lqk7k","status":"confirmed","summary":"Revolution Day January 25","region":"Egypt","date":"2025-01-25"},{"id":"20250302_9oo6gm6hgtdgshs5grhdltee34","status":"confirmed","summary":"Ramadan Start","region":"Egypt","date":"2025-03-02"},{"id":"20250331_rpeoqq6ugsu41ug2pj4ag6fh30","status":"confirmed","summary":"Eid el Fitr","region":"Egypt","date":"2025-03-31"},{"id":"20250401_krmq8q0ufhctvmvbt92bisgglg","status":"confirmed","summary":"Eid el Fitr Holiday","region":"Egypt","date":"2025-04-01"},{"id":"20250402_qlv3k4ci5vqak2blhrajqki808","status":"confirmed","summary":"Eid el Fitr Holiday","region":"Egypt","date":"2025-04-02"},{"id":"20250418_cn2rrhrpeef76ms5u5utpbvjuc","status":"confirmed","summary":"Coptic Good Friday","region":"Egypt","date":"2025-04-18"},{"id":"20250419_ocf972nqi350ueugv9i24vtb5s","status":"confirmed","summary":"Coptic Holy Saturday","region":"Egypt","date":"2025-04-19"},{"id":"20250420_17kk5fpqtj19vra0v2b25fgp0g","status":"confirmed","summary":"Coptic Easter Sunday","region":"Egypt","date":"2025-04-20"},{"id":"20250421_j3hbe9s21n54p7jcfjd8sd2u48","status":"confirmed","summary":"Spring Festival","region":"Egypt","date":"2025-04-21"},{"id":"20250425_kif20s5p6m38k5uv5pvdgid590","status":"confirmed","summary":"Sinai Liberation Day","region":"Egypt","date":"2025-04-25"},{"id":"20250501_34710skj5l3dvvip69crc43po0","status":"confirmed","summary":"Labor Day","region":"Egypt","date":"2025-05-01"},{"id":"20250606_4u6g6sn4ln9e28sf5uskn9280c","status":"confirmed","summary":"Arafat Day","region":"Egypt","date":"2025-06-06"},{"id":"20250607_3s4ekachie55frh318kb4nt2n0","status":"confirmed","summary":"Eid al-Adha","region":"Egypt","date":"2025-06-07"},{"id":"20250608_kujbk5a5ilah5e5fr5f0g5rhpc","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Egypt","date":"2025-06-08"},{"id":"20250609_152qampau9ge0mg24kkr06l6fk","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Egypt","date":"2025-06-09"},{"id":"20250627_8qqnbfj8e1uailotlijpms8qhk","status":"confirmed","summary":"Muharram","region":"Egypt","date":"2025-06-27"},{"id":"20250630_u7ph9jd9lba6rf7pi45sde514k","status":"confirmed","summary":"June 30 Revolution","region":"Egypt","date":"2025-06-30"},{"id":"20250703_hiva33lf8vep6dbc8keojktu2g","status":"confirmed","summary":"Day off for June 30 Revolution","region":"Egypt","date":"2025-07-03"},{"id":"20250706_mi71fokmv4ki27qo76keqtsfg4","status":"confirmed","summary":"Ashura","region":"Egypt","date":"2025-07-06"},{"id":"20250723_vgkv0rvcmmbgki0tj8thrtbvj4","status":"confirmed","summary":"Revolution Day July 23","region":"Egypt","date":"2025-07-23"},{"id":"20250724_l56qnj2a9ibsfanr1ih8kok2p8","status":"confirmed","summary":"Day off for Revolution Day July 23","region":"Egypt","date":"2025-07-24"},{"id":"20250815_tt9m3s7vsiaksmaam5v21ebsto","status":"confirmed","summary":"Flooding of the Nile","region":"Egypt","date":"2025-08-15"},{"id":"20250906_rdf5q82989q5jgjbs9e71idk40","status":"confirmed","summary":"Prophet Mohamed\'s Birthday","region":"Egypt","date":"2025-09-06"},{"id":"20250911_m4abtq6j5scos7odv4d41cldj0","status":"confirmed","summary":"Nayrouz","region":"Egypt","date":"2025-09-11"},{"id":"20251006_r4slboogn3eo1aq5nt02p16838","status":"confirmed","summary":"Armed Forces Day","region":"Egypt","date":"2025-10-06"},{"id":"20251009_ki52p0e89lrfdi1926jqbocv1o","status":"confirmed","summary":"Day off for Armed Forces Day","region":"Egypt","date":"2025-10-09"}],"Eritrea":[{"id":"20240101_sudhis0fadn7bue66dktg3jcq0","status":"confirmed","summary":"New Year","region":"Eritrea","date":"2024-01-01"},{"id":"20240107_umt3a0824oog0s032n0lnuff7g","status":"confirmed","summary":"Orthodox Christmas Day","region":"Eritrea","date":"2024-01-07"},{"id":"20240120_r9isd37vf8npajsv619vqemhms","status":"confirmed","summary":"Timket","region":"Eritrea","date":"2024-01-20"},{"id":"20240308_7cmvh6r0ebpaontn223ma33g18","status":"confirmed","summary":"Women\'s Day","region":"Eritrea","date":"2024-03-08"},{"id":"20240311_nrgi07sqijkgu60k9crldf3fo0","status":"confirmed","summary":"Ramadan Start","region":"Eritrea","date":"2024-03-11"},{"id":"20240410_1c2akvc1movj8gnvpl421phq3k","status":"confirmed","summary":"Eid al-Fitr","region":"Eritrea","date":"2024-04-10"},{"id":"20240411_j5jmacekmbs43deq328pekdth0","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Eritrea","date":"2024-04-11"},{"id":"20240501_155m7c6fsuiobvs27ve319fsk4","status":"confirmed","summary":"International Workers\' Day","region":"Eritrea","date":"2024-05-01"},{"id":"20240503_rn6p9irreoc9foia8ldtomapa4","status":"confirmed","summary":"Coptic Good Friday","region":"Eritrea","date":"2024-05-03"},{"id":"20240505_72rp7pse8dprmtv6lq9a58h6co","status":"confirmed","summary":"Coptic Easter","region":"Eritrea","date":"2024-05-05"},{"id":"20240524_q4sgerka060m6nej40cp5ednb8","status":"confirmed","summary":"Independence Day","region":"Eritrea","date":"2024-05-24"},{"id":"20240617_051ar4os9uai2k2mrd61jqk074","status":"confirmed","summary":"Eid al-Adha","region":"Eritrea","date":"2024-06-17"},{"id":"20240620_s99r0rmmn9dflk9otf1g2bgulo","status":"confirmed","summary":"Martyrs\' Day","region":"Eritrea","date":"2024-06-20"},{"id":"20240901_bj1g199gap3lc1ahtufo30b9c8","status":"confirmed","summary":"Commencement Day of Eritrean Armed Struggle","region":"Eritrea","date":"2024-09-01"},{"id":"20240911_51cvleib6cqd6nbi8t97ipj48g","status":"confirmed","summary":"Geez New Year","region":"Eritrea","date":"2024-09-11"},{"id":"20240916_7u8hkrh4c7urb6hr0mea4s46ds","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Eritrea","date":"2024-09-16"},{"id":"20240927_sao6l64isi5pvsnjpcg5a6jgkk","status":"confirmed","summary":"Meskel","region":"Eritrea","date":"2024-09-27"},{"id":"20241225_hcm2qite19eld3cmgm0el0udac","status":"confirmed","summary":"Christmas Day","region":"Eritrea","date":"2024-12-25"},{"id":"20250101_i5mnd9rvate663cdqcsb15k8og","status":"confirmed","summary":"New Year","region":"Eritrea","date":"2025-01-01"},{"id":"20250107_ue0mcbn1pr9o2v9u3m0qm668h0","status":"confirmed","summary":"Orthodox Christmas Day","region":"Eritrea","date":"2025-01-07"},{"id":"20250119_8r79e4uh2ro0curlu1cbntoev8","status":"confirmed","summary":"Timket","region":"Eritrea","date":"2025-01-19"},{"id":"20250301_k6qqmfveu70in027idqkc3sed4","status":"confirmed","summary":"Ramadan Start","region":"Eritrea","date":"2025-03-01"},{"id":"20250308_v9jj6go88j7iitnv1vfmhic80s","status":"confirmed","summary":"Women\'s Day","region":"Eritrea","date":"2025-03-08"},{"id":"20250331_j3gt3kj0aieo5e40i88vb0392s","status":"confirmed","summary":"Eid al-Fitr","region":"Eritrea","date":"2025-03-31"},{"id":"20250418_0kvmg6cu06su77lkr048bcm27s","status":"confirmed","summary":"Coptic Good Friday","region":"Eritrea","date":"2025-04-18"},{"id":"20250420_0jj8odkhilkh0qfdaa9oj35q2s","status":"confirmed","summary":"Coptic Easter","region":"Eritrea","date":"2025-04-20"},{"id":"20250501_nn8evib0vmno4tikcpkr349u9g","status":"confirmed","summary":"International Workers\' Day","region":"Eritrea","date":"2025-05-01"},{"id":"20250524_b4f928shbp55mh6vgu293vk1q8","status":"confirmed","summary":"Independence Day","region":"Eritrea","date":"2025-05-24"},{"id":"20250607_ru53eul7fp9mume4nkkjpu364g","status":"confirmed","summary":"Eid al-Adha","region":"Eritrea","date":"2025-06-07"},{"id":"20250620_no311hnjh6v68trtck91up43os","status":"confirmed","summary":"Martyrs\' Day","region":"Eritrea","date":"2025-06-20"},{"id":"20250901_sciqtpts04050dfnpeq6as0akc","status":"confirmed","summary":"Commencement Day of Eritrean Armed Struggle","region":"Eritrea","date":"2025-09-01"},{"id":"20250905_ctq6uiplvjnnfd5mt26e76gbeg","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Eritrea","date":"2025-09-05"},{"id":"20250911_fchshoss6dv0560b2rfi8fjeq0","status":"confirmed","summary":"Geez New Year","region":"Eritrea","date":"2025-09-11"},{"id":"20250927_2hptdohiiptmafp6a41ovegsoo","status":"confirmed","summary":"Meskel","region":"Eritrea","date":"2025-09-27"},{"id":"20251225_jjp42jgu8q97q7e9rlpjsppc4g","status":"confirmed","summary":"Christmas Day","region":"Eritrea","date":"2025-12-25"}],"Ethiopia":[{"id":"20240107_oranh0hp1jgc7arfpnv71eefh8","status":"confirmed","summary":"Ethiopian Christmas Day","region":"Ethiopia","date":"2024-01-07"},{"id":"20240120_s9u52vvfkn97on33qkke8uq6kg","status":"confirmed","summary":"Epiphany / Timkat","region":"Ethiopia","date":"2024-01-20"},{"id":"20240302_gtl4skodj6kpfcd5lq08ppn2f4","status":"confirmed","summary":"Adwa Victory Day","region":"Ethiopia","date":"2024-03-02"},{"id":"20240410_7cbqsl27cc6fenacdj4kqrb3lk","status":"confirmed","summary":"Eid al-Fitr","region":"Ethiopia","date":"2024-04-10"},{"id":"20240501_ihmbhoid6nuvitfflpqkrca7es","status":"confirmed","summary":"International Labor Day","region":"Ethiopia","date":"2024-05-01"},{"id":"20240503_h29t1877rshv09haqpd9dm7fss","status":"confirmed","summary":"Ethiopian Good Friday","region":"Ethiopia","date":"2024-05-03"},{"id":"20240505_f0vjiaei1ts071qtogc936cqpk","status":"confirmed","summary":"Fasika","region":"Ethiopia","date":"2024-05-05"},{"id":"20240505_tf9c50tojmnv3hh99s0fbnnvl8","status":"confirmed","summary":"Patriots\' Day","region":"Ethiopia","date":"2024-05-05"},{"id":"20240528_q3s3mlfq9kpd6nth27283mrkoo","status":"confirmed","summary":"Derg Downfall Day","region":"Ethiopia","date":"2024-05-28"},{"id":"20240617_b8h09sbf2khr59skdi8pmftli8","status":"confirmed","summary":"Eid al-Adha","region":"Ethiopia","date":"2024-06-17"},{"id":"20240911_vbv3ggag05evu0u47blgtnm67o","status":"confirmed","summary":"Ethiopian New Year","region":"Ethiopia","date":"2024-09-11"},{"id":"20240916_tgucv9vtl7occhbcm6ogmjo46o","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Ethiopia","date":"2024-09-16"},{"id":"20240927_6lmmhl36dous84l4c3hd4bqgq0","status":"confirmed","summary":"Meskel","region":"Ethiopia","date":"2024-09-27"},{"id":"20250107_8kv3bb3p7g6n2ursi3iln8ms0o","status":"confirmed","summary":"Ethiopian Christmas Day","region":"Ethiopia","date":"2025-01-07"},{"id":"20250119_80lrs98k0s1k1qbpaba10lku0s","status":"confirmed","summary":"Epiphany / Timkat","region":"Ethiopia","date":"2025-01-19"},{"id":"20250302_9s1uhf3k61dmolpuhcj2bqmlvs","status":"confirmed","summary":"Adwa Victory Day","region":"Ethiopia","date":"2025-03-02"},{"id":"20250331_hvvivkbrbsjisuk6s5k73akr2k","status":"confirmed","summary":"Eid al-Fitr","region":"Ethiopia","date":"2025-03-31"},{"id":"20250418_hupaj8lpvfpq1e1b309f7972a8","status":"confirmed","summary":"Ethiopian Good Friday","region":"Ethiopia","date":"2025-04-18"},{"id":"20250420_u9v6hs7ehdk0skac5gp26j44i0","status":"confirmed","summary":"Fasika","region":"Ethiopia","date":"2025-04-20"},{"id":"20250501_m8khkbvo4r929jnjikv135gr3g","status":"confirmed","summary":"International Labor Day","region":"Ethiopia","date":"2025-05-01"},{"id":"20250505_4e16hghalarp85jpjrsulq4obs","status":"confirmed","summary":"Patriots\' Day","region":"Ethiopia","date":"2025-05-05"},{"id":"20250528_id9fsj85h7330nfnrlbc2s06s8","status":"confirmed","summary":"Derg Downfall Day","region":"Ethiopia","date":"2025-05-28"},{"id":"20250607_7ahbo3qso2vnvc4k3h8v94o28g","status":"confirmed","summary":"Eid al-Adha","region":"Ethiopia","date":"2025-06-07"},{"id":"20250905_ji3umj0v0u9o3eidrfjg3u04og","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Ethiopia","date":"2025-09-05"},{"id":"20250927_bbidi7onrdp3p1tetjdort2754","status":"confirmed","summary":"Meskel","region":"Ethiopia","date":"2025-09-27"}],"Finland":[{"id":"20240101_rd5egv1utsj8pa649u7ghlc1d4","status":"confirmed","summary":"New Year\'s Day","region":"Finland","date":"2024-01-01"},{"id":"20240106_q702lvjvkh4oub09hnj4nnpeo8","status":"confirmed","summary":"Epiphany","region":"Finland","date":"2024-01-06"},{"id":"20240214_2skfs0lmutjn8gush3b05b7foo","status":"confirmed","summary":"Valentine’s Day","region":"Finland","date":"2024-02-14"},{"id":"20240329_ut1ut3npo9ngif89fpldaqquho","status":"confirmed","summary":"Good Friday","region":"Finland","date":"2024-03-29"},{"id":"20240331_dejibtqikv4bd8m5li87p2p7rg","status":"confirmed","summary":"Easter Sunday","region":"Finland","date":"2024-03-31"},{"id":"20240401_4r1tc1l1le9qlpo22lkplkn9t8","status":"confirmed","summary":"Easter Monday","region":"Finland","date":"2024-04-01"},{"id":"20240501_ohe7oauk7sm9opq9bpt0hasqkg","status":"confirmed","summary":"May Day","region":"Finland","date":"2024-05-01"},{"id":"20240509_99pdh05va36rk13o31ee76ll7s","status":"confirmed","summary":"Ascension Day","region":"Finland","date":"2024-05-09"},{"id":"20240512_5jtn7r12jje1qdldrko3up6lj0","status":"confirmed","summary":"Mother\'s Day","region":"Finland","date":"2024-05-12"},{"id":"20240519_i1jqp6nftbcp0iae3d1c2d0pbk","status":"confirmed","summary":"Whit Sunday","region":"Finland","date":"2024-05-19"},{"id":"20240621_knrsv40288u6crllpfo5rnnh8g","status":"confirmed","summary":"Midsummer Eve","region":"Finland","date":"2024-06-21"},{"id":"20240622_c9gugdi8v7kp99vccr548blhlk","status":"confirmed","summary":"Midsummer","region":"Finland","date":"2024-06-22"},{"id":"20241102_m55a3jr6ifrdabqndlfp3apmgs","status":"confirmed","summary":"All Saints\' Day","region":"Finland","date":"2024-11-02"},{"id":"20241110_1jq9fb31e70qqi6nntc4onofso","status":"confirmed","summary":"Father\'s Day","region":"Finland","date":"2024-11-10"},{"id":"20241206_a6uegstnmift4r6gv4m87h9cn4","status":"confirmed","summary":"Independence Day","region":"Finland","date":"2024-12-06"},{"id":"20241224_0msli4ae1tn2milki4o9h8lkfk","status":"confirmed","summary":"Christmas Eve","region":"Finland","date":"2024-12-24"},{"id":"20241225_ki01n8h734ib63l4fr8h897oog","status":"confirmed","summary":"Christmas Day","region":"Finland","date":"2024-12-25"},{"id":"20241226_mer22sbsb47maikihb8fuucrs4","status":"confirmed","summary":"Boxing Day","region":"Finland","date":"2024-12-26"},{"id":"20241231_c574c8hgi8ks5lqdv6bp1fboqc","status":"confirmed","summary":"New Year\'s Eve","region":"Finland","date":"2024-12-31"},{"id":"20250101_11be5kjolls97br55pom4l62t4","status":"confirmed","summary":"New Year\'s Day","region":"Finland","date":"2025-01-01"},{"id":"20250106_2igitne26v7btf1uh3t1ndrjn0","status":"confirmed","summary":"Epiphany","region":"Finland","date":"2025-01-06"},{"id":"20250214_lhbic4e3f07bdt367iro0lsssg","status":"confirmed","summary":"Valentine’s Day","region":"Finland","date":"2025-02-14"},{"id":"20250418_1bif0marbl6mop98r3qioe91ec","status":"confirmed","summary":"Good Friday","region":"Finland","date":"2025-04-18"},{"id":"20250420_dhatij7j2o6jo45qie1o4csbkk","status":"confirmed","summary":"Easter Sunday","region":"Finland","date":"2025-04-20"},{"id":"20250421_674g1uise1qtuid2c2i0b8s598","status":"confirmed","summary":"Easter Monday","region":"Finland","date":"2025-04-21"},{"id":"20250501_drtu8nbfqilj9fh0lha4jh2pn8","status":"confirmed","summary":"May Day","region":"Finland","date":"2025-05-01"},{"id":"20250511_f9ka07kl21rgadre5h150jqnec","status":"confirmed","summary":"Mother\'s Day","region":"Finland","date":"2025-05-11"},{"id":"20250529_g8747ajc71l0l1mtsn3v82uupk","status":"confirmed","summary":"Ascension Day","region":"Finland","date":"2025-05-29"},{"id":"20250608_or4imhiona03n26ong384190ik","status":"confirmed","summary":"Whit Sunday","region":"Finland","date":"2025-06-08"},{"id":"20250620_6hvkso8824vq7krkcu58d5b7m8","status":"confirmed","summary":"Midsummer Eve","region":"Finland","date":"2025-06-20"},{"id":"20250621_al860gus8oohe3a3aa4gh2a1pg","status":"confirmed","summary":"Midsummer","region":"Finland","date":"2025-06-21"},{"id":"20251101_o118b7aqoadu4p0ocuh5jnvk50","status":"confirmed","summary":"All Saints\' Day","region":"Finland","date":"2025-11-01"},{"id":"20251109_p9n4k4bapq0gkku48lti2rkgkk","status":"confirmed","summary":"Father\'s Day","region":"Finland","date":"2025-11-09"},{"id":"20251206_htmg0qmsun3hmh32pabil1cju4","status":"confirmed","summary":"Independence Day","region":"Finland","date":"2025-12-06"},{"id":"20251224_htcfe8bju8tb8pnnlf38t5fr34","status":"confirmed","summary":"Christmas Eve","region":"Finland","date":"2025-12-24"},{"id":"20251225_63q3cp3oaciuet8k5ubln0p9fk","status":"confirmed","summary":"Christmas Day","region":"Finland","date":"2025-12-25"},{"id":"20251226_ocdgi5l06e6vghdauhdl4l0ras","status":"confirmed","summary":"Boxing Day","region":"Finland","date":"2025-12-26"},{"id":"20251231_e6jqbuemhf6dvga1fogq6opors","status":"confirmed","summary":"New Year\'s Eve","region":"Finland","date":"2025-12-31"}],"Fiji":[{"id":"20240101_e82hq7k8fs39if97dp3ird76l8","status":"confirmed","summary":"New Year","region":"Fiji","date":"2024-01-01"},{"id":"20240329_v77q0tmahdli10f5u5497eoc7g","status":"confirmed","summary":"Good Friday","region":"Fiji","date":"2024-03-29"},{"id":"20240330_q0848u0ljdj2hjh9nkfi9riqac","status":"confirmed","summary":"Holy Saturday","region":"Fiji","date":"2024-03-30"},{"id":"20240401_lqoq09v194qotu3pmgoa1tohro","status":"confirmed","summary":"Easter Monday","region":"Fiji","date":"2024-04-01"},{"id":"20240513_vi0au1k84vc12d90adgf2g0l9g","status":"confirmed","summary":"Girmit Day","region":"Fiji","date":"2024-05-13"},{"id":"20240531_nf0ngvr3q2gqpmd1pcua53s3cs","status":"confirmed","summary":"Sukuna\'s Day Holiday","region":"Fiji","date":"2024-05-31"},{"id":"20240907_th43t6016l2g2808d6nqo7kuds","status":"confirmed","summary":"Constitution Day","region":"Fiji","date":"2024-09-07"},{"id":"20240916_j4m1hoct83j6bgvrfm9944p3tc","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Fiji","date":"2024-09-16"},{"id":"20241010_u118l8i2315lrulqkio4f8a640","status":"confirmed","summary":"Fiji Day","region":"Fiji","date":"2024-10-10"},{"id":"20241101_n4j897kb2qehmgmoh75t0nslng","status":"confirmed","summary":"Diwali","region":"Fiji","date":"2024-11-01"},{"id":"20241225_h7iaqpvcrf05h9or0ovsli93ds","status":"confirmed","summary":"Christmas Day","region":"Fiji","date":"2024-12-25"},{"id":"20241226_kiq652dm6k0o9pdpb7r8g95pck","status":"confirmed","summary":"Boxing Day","region":"Fiji","date":"2024-12-26"},{"id":"20250101_61ph3ocdbfephv4m0ifbei1kv4","status":"confirmed","summary":"New Year","region":"Fiji","date":"2025-01-01"},{"id":"20250418_rr7fr1rmej0goi0r825a70agh8","status":"confirmed","summary":"Good Friday","region":"Fiji","date":"2025-04-18"},{"id":"20250419_iurorikflaao32hbgj1d9ue168","status":"confirmed","summary":"Holy Saturday","region":"Fiji","date":"2025-04-19"},{"id":"20250421_gvgk4rpanlc8kr3cqhgdqvq0jc","status":"confirmed","summary":"Easter Monday","region":"Fiji","date":"2025-04-21"},{"id":"20250905_ii463qv6f5sri24rtmetp7lgmg","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Fiji","date":"2025-09-05"},{"id":"20250907_9q86q34e06rdjhgm8o0hontegk","status":"confirmed","summary":"Constitution Day","region":"Fiji","date":"2025-09-07"},{"id":"20251010_5o4r4ilfcf14i1po0ma4fko2hk","status":"confirmed","summary":"Fiji Day","region":"Fiji","date":"2025-10-10"},{"id":"20251021_1qa91jl0hu932lunvto516e8ds","status":"confirmed","summary":"Diwali","region":"Fiji","date":"2025-10-21"},{"id":"20251225_77j652ntsiaselvg4pjrsovl5c","status":"confirmed","summary":"Christmas Day","region":"Fiji","date":"2025-12-25"},{"id":"20251226_0hart581ud0j5ao2hd99q801bg","status":"confirmed","summary":"Boxing Day","region":"Fiji","date":"2025-12-26"}],"Falkland Islands (Islas Malvinas)":[{"id":"20240101_lcf22u3u7cmkeuhbunp30h0eqg","status":"confirmed","summary":"New Year\'s Day","region":"Falkland Islands (Islas Malvinas)","date":"2024-01-01"},{"id":"20240110_86rj1cu9q2qlm35t474gahnbfo","status":"confirmed","summary":"Margaret Thatcher Day","region":"Falkland Islands (Islas Malvinas)","date":"2024-01-10"},{"id":"20240329_id09hoe59m9sc6j3hfc5s1au5c","status":"confirmed","summary":"Good Friday","region":"Falkland Islands (Islas Malvinas)","date":"2024-03-29"},{"id":"20240614_8omphrsrueu9a5ptgqn2fppqvk","status":"confirmed","summary":"Liberation Day","region":"Falkland Islands (Islas Malvinas)","date":"2024-06-14"},{"id":"20240814_hlaq3t65tcnj3b8gf73dtiiaa0","status":"confirmed","summary":"Falkland Day","region":"Falkland Islands (Islas Malvinas)","date":"2024-08-14"},{"id":"20241007_ct2d9nkbbc1dsd7m9psaqf4tc0","status":"confirmed","summary":"Peat Cutting Monday","region":"Falkland Islands (Islas Malvinas)","date":"2024-10-07"},{"id":"20241114_64cctgsag4keufr8s0fsbkm7fk","status":"confirmed","summary":"King Charles III\'s Birthday","region":"Falkland Islands (Islas Malvinas)","date":"2024-11-14"},{"id":"20241208_6f34ibptvthrrpnq3si9rdvivo","status":"confirmed","summary":"Battle Day","region":"Falkland Islands (Islas Malvinas)","date":"2024-12-08"},{"id":"20241209_egmckjhu24i5g272tpj36509kc","status":"confirmed","summary":"Battle Day observed","region":"Falkland Islands (Islas Malvinas)","date":"2024-12-09"},{"id":"20241225_ec9fl48vga6p2vc9lqpfpvkue8","status":"confirmed","summary":"Christmas Day","region":"Falkland Islands (Islas Malvinas)","date":"2024-12-25"},{"id":"20241226_154sj735ueraa39h79ln0924j0","status":"confirmed","summary":"Boxing Day","region":"Falkland Islands (Islas Malvinas)","date":"2024-12-26"},{"id":"20241227_dpso20ldk05g537ngcj5u5tj84","status":"confirmed","summary":"Christmas Holiday","region":"Falkland Islands (Islas Malvinas)","date":"2024-12-27"},{"id":"20241230_c77uoo9qg8lqelomen9ato5vds","status":"confirmed","summary":"Christmas Holiday","region":"Falkland Islands (Islas Malvinas)","date":"2024-12-30"},{"id":"20241231_99ml7geodd2r6d7quds5bghca0","status":"confirmed","summary":"Christmas Holiday","region":"Falkland Islands (Islas Malvinas)","date":"2024-12-31"},{"id":"20250101_s6ot727h32q83r3kvomhmdpc3o","status":"confirmed","summary":"New Year\'s Day","region":"Falkland Islands (Islas Malvinas)","date":"2025-01-01"},{"id":"20250110_b12jbp920jnh2d6t49ron1e2vo","status":"confirmed","summary":"Margaret Thatcher Day","region":"Falkland Islands (Islas Malvinas)","date":"2025-01-10"},{"id":"20250418_kbtevf2a5d1m0phr92f1jglm28","status":"confirmed","summary":"Good Friday","region":"Falkland Islands (Islas Malvinas)","date":"2025-04-18"},{"id":"20250614_2lv0fg434op7te75dab2ijg364","status":"confirmed","summary":"Liberation Day","region":"Falkland Islands (Islas Malvinas)","date":"2025-06-14"},{"id":"20250616_hfh1i0otsn986o2uh50riq1it8","status":"confirmed","summary":"Liberation Day observed","region":"Falkland Islands (Islas Malvinas)","date":"2025-06-16"},{"id":"20250814_ujdiae56qu0s5i61qtm3a95t8k","status":"confirmed","summary":"Falkland Day","region":"Falkland Islands (Islas Malvinas)","date":"2025-08-14"},{"id":"20251006_d380bgltjbgpnc1jojlqqdcloo","status":"confirmed","summary":"Peat Cutting Monday","region":"Falkland Islands (Islas Malvinas)","date":"2025-10-06"},{"id":"20251114_48a75bet63ce4r6pv3itn44108","status":"confirmed","summary":"King Charles III\'s Birthday","region":"Falkland Islands (Islas Malvinas)","date":"2025-11-14"},{"id":"20251208_mk8e74v9etsmnt1eefts6f194o","status":"confirmed","summary":"Battle Day","region":"Falkland Islands (Islas Malvinas)","date":"2025-12-08"},{"id":"20251225_nofp5doqsen99oih25ht4l2ktg","status":"confirmed","summary":"Christmas Day","region":"Falkland Islands (Islas Malvinas)","date":"2025-12-25"},{"id":"20251226_qh250pnc4b5ho5sr2h233mv22o","status":"confirmed","summary":"Boxing Day","region":"Falkland Islands (Islas Malvinas)","date":"2025-12-26"},{"id":"20251227_eskp2f3hfcause3014algrgtfs","status":"confirmed","summary":"Christmas Holiday","region":"Falkland Islands (Islas Malvinas)","date":"2025-12-27"},{"id":"20251229_qfi4qrso8tcp93ps6an8jcbjjc","status":"confirmed","summary":"Day off for Christmas Holiday","region":"Falkland Islands (Islas Malvinas)","date":"2025-12-29"},{"id":"20251230_25hm60q13bnk7fu4ucomib4gqc","status":"confirmed","summary":"Christmas Holiday","region":"Falkland Islands (Islas Malvinas)","date":"2025-12-30"},{"id":"20251231_6d8fgvh2d1m0qesn568po9q94s","status":"confirmed","summary":"Christmas Holiday","region":"Falkland Islands (Islas Malvinas)","date":"2025-12-31"}],"Micronesia":[{"id":"20240101_8jo6qjolm8b10hm30akeg1kqkg","status":"confirmed","summary":"New Year\'s Day","region":"Micronesia","date":"2024-01-01"},{"id":"20240331_85k4p4gvaida37h4g4a9uc5ano","status":"confirmed","summary":"Micronesia Culture Day","region":"Micronesia","date":"2024-03-31"},{"id":"20240401_ibkejde8l1t9m9fs9003m6glro","status":"confirmed","summary":"Micronesia Culture Day observed","region":"Micronesia","date":"2024-04-01"},{"id":"20240510_ebhp5a3fddk08erinjaf5m47hg","status":"confirmed","summary":"Constitution Day","region":"Micronesia","date":"2024-05-10"},{"id":"20241024_t1nkaqbvt934ad25qcnap9g228","status":"confirmed","summary":"United Nations Day","region":"Micronesia","date":"2024-10-24"},{"id":"20241103_k4m137abun2j44a3vpo5aqf0uo","status":"confirmed","summary":"Independence Day","region":"Micronesia","date":"2024-11-03"},{"id":"20241104_a3g1meo2if15q609n88cj00avg","status":"confirmed","summary":"Independence Day observed","region":"Micronesia","date":"2024-11-04"},{"id":"20241111_cos7egisj8pirckfe2e9c73iec","status":"confirmed","summary":"Veterans of Foreign Wars Day","region":"Micronesia","date":"2024-11-11"},{"id":"20241122_a9su75jasrul4is5f10q1908s8","status":"confirmed","summary":"Presidents Day observed","region":"Micronesia","date":"2024-11-22"},{"id":"20241123_ujtn5he1e6mja13vk4l9ick69g","status":"confirmed","summary":"Presidents Day","region":"Micronesia","date":"2024-11-23"},{"id":"20241225_lia9neno4ooam3jgblje8sc4ec","status":"confirmed","summary":"Christmas Day","region":"Micronesia","date":"2024-12-25"},{"id":"20250101_vsol2li12b8kjgd1nfn3smm310","status":"confirmed","summary":"New Year\'s Day","region":"Micronesia","date":"2025-01-01"},{"id":"20250331_lvc7kh7psnqi7ag98mhovhq7o4","status":"confirmed","summary":"Micronesia Culture Day","region":"Micronesia","date":"2025-03-31"},{"id":"20250509_fh4lod2ppu7q6rqc3ok09q64b0","status":"confirmed","summary":"Constitution Day observed","region":"Micronesia","date":"2025-05-09"},{"id":"20250510_putvlbn3k5mbb88vsujshkndu4","status":"confirmed","summary":"Constitution Day","region":"Micronesia","date":"2025-05-10"},{"id":"20251024_curfmrru4be5icnlq6mflh8pis","status":"confirmed","summary":"United Nations Day","region":"Micronesia","date":"2025-10-24"},{"id":"20251103_99t0bo0tnq92oj1vsd5g53uai8","status":"confirmed","summary":"Independence Day","region":"Micronesia","date":"2025-11-03"},{"id":"20251111_ko49bfbdl1up21mbdo63dvlhmk","status":"confirmed","summary":"Veterans of Foreign Wars Day","region":"Micronesia","date":"2025-11-11"},{"id":"20251123_krogev4h6rnf2dlq589i14rmi8","status":"confirmed","summary":"Presidents Day","region":"Micronesia","date":"2025-11-23"},{"id":"20251124_otu5kmlqcmujuo3gs9ove84b9o","status":"confirmed","summary":"Presidents Day observed","region":"Micronesia","date":"2025-11-24"},{"id":"20251225_gelb0ff7p12tr6308sqjd79cto","status":"confirmed","summary":"Christmas Day","region":"Micronesia","date":"2025-12-25"}],"Faroe Islands":[{"id":"20240101_28pf0kc81aqa275ocu9kok03d4","status":"confirmed","summary":"New Year","region":"Faroe Islands","date":"2024-01-01"},{"id":"20240328_3de91a1ql3roef0c7lej2umstg","status":"confirmed","summary":"Maundy Thursday","region":"Faroe Islands","date":"2024-03-28"},{"id":"20240329_regov959sld80drr6k8s36ukpg","status":"confirmed","summary":"Good Friday","region":"Faroe Islands","date":"2024-03-29"},{"id":"20240331_6v0iuhni0a3esvh49uhmhg15ns","status":"confirmed","summary":"Easter Sunday","region":"Faroe Islands","date":"2024-03-31"},{"id":"20240331_snrfb8oac1492nl1betov084eg","status":"confirmed","summary":"Daylight Saving Time starts","region":"Faroe Islands","date":"2024-03-31"},{"id":"20240401_k7vthh0fe7u2mjuoq84kd3061g","status":"confirmed","summary":"Easter Monday","region":"Faroe Islands","date":"2024-04-01"},{"id":"20240425_1p9k0dcroal7cibi601pt8r94s","status":"confirmed","summary":"National Flag Day","region":"Faroe Islands","date":"2024-04-25"},{"id":"20240426_q28mmjs9dhifsiikke5fkek224","status":"confirmed","summary":"Prayer Day","region":"Faroe Islands","date":"2024-04-26"},{"id":"20240509_bejaks9rfgut9cjhs3i9k44keo","status":"confirmed","summary":"Ascension Day","region":"Faroe Islands","date":"2024-05-09"},{"id":"20240519_tj16fk20mhuqii96tueckqi6pk","status":"confirmed","summary":"Whit Sunday","region":"Faroe Islands","date":"2024-05-19"},{"id":"20240520_q8n50c3nc33u8j26gpeiehihkg","status":"confirmed","summary":"Whit Monday","region":"Faroe Islands","date":"2024-05-20"},{"id":"20240605_nqkcfosjbn9ido8qj1q6cs09s0","status":"confirmed","summary":"Constitution Day","region":"Faroe Islands","date":"2024-06-05"},{"id":"20240728_jmnknmrhdop46f86bcp2fi9qsg","status":"confirmed","summary":"St. Olav\'s Eve","region":"Faroe Islands","date":"2024-07-28"},{"id":"20240729_ig8mtud0veh6dmr0pij7s0c370","status":"confirmed","summary":"St. Olav\'s Day (National Day)","region":"Faroe Islands","date":"2024-07-29"},{"id":"20241027_hi6ohr9jdd8jjib7q2o29lllus","status":"confirmed","summary":"Daylight Saving Time ends","region":"Faroe Islands","date":"2024-10-27"},{"id":"20241224_r2ieg36fsnl87l8h72q7usk9mg","status":"confirmed","summary":"Christmas Eve","region":"Faroe Islands","date":"2024-12-24"},{"id":"20241225_vlnl3b2auv5cfbtj6ho23nmklg","status":"confirmed","summary":"Christmas Day","region":"Faroe Islands","date":"2024-12-25"},{"id":"20241226_62pjs07alb5o97v6aidm9t6ap4","status":"confirmed","summary":"Boxing Day","region":"Faroe Islands","date":"2024-12-26"},{"id":"20241231_d9i77r45ovauvvgaf261cou74c","status":"confirmed","summary":"New Year\'s Eve","region":"Faroe Islands","date":"2024-12-31"},{"id":"20250101_d1uo60p9962m4psg3uqshch7s4","status":"confirmed","summary":"New Year","region":"Faroe Islands","date":"2025-01-01"},{"id":"20250330_15pjvju5gga20u36459qgeibic","status":"confirmed","summary":"Daylight Saving Time starts","region":"Faroe Islands","date":"2025-03-30"},{"id":"20250417_78chktv4snvd487vul35tugf2k","status":"confirmed","summary":"Maundy Thursday","region":"Faroe Islands","date":"2025-04-17"},{"id":"20250418_1kijkmr44hj53fknnp2e09f1ao","status":"confirmed","summary":"Good Friday","region":"Faroe Islands","date":"2025-04-18"},{"id":"20250420_8girql7ljk6i2ek1g0l6u963rg","status":"confirmed","summary":"Easter Sunday","region":"Faroe Islands","date":"2025-04-20"},{"id":"20250421_tab58a0jm39mdfr3bu1dpuncpk","status":"confirmed","summary":"Easter Monday","region":"Faroe Islands","date":"2025-04-21"},{"id":"20250425_e6mds0aphosqk0t84ild47a53o","status":"confirmed","summary":"National Flag Day","region":"Faroe Islands","date":"2025-04-25"},{"id":"20250516_i6rrrbdram6oah3jv6er6qfal8","status":"confirmed","summary":"Prayer Day","region":"Faroe Islands","date":"2025-05-16"},{"id":"20250529_hvr2hbn3otlhntnvi0fqckutbs","status":"confirmed","summary":"Ascension Day","region":"Faroe Islands","date":"2025-05-29"},{"id":"20250605_3c3ouosdq2acavh1p0bdk58bec","status":"confirmed","summary":"Constitution Day","region":"Faroe Islands","date":"2025-06-05"},{"id":"20250608_vrmoq1sui14r4sjvrbsvf1350c","status":"confirmed","summary":"Whit Sunday","region":"Faroe Islands","date":"2025-06-08"},{"id":"20250609_2s4vp2ro4idingihi8ucpkt90s","status":"confirmed","summary":"Whit Monday","region":"Faroe Islands","date":"2025-06-09"},{"id":"20250728_elkudf2eittl06n2c0dq2lncf8","status":"confirmed","summary":"St. Olav\'s Eve","region":"Faroe Islands","date":"2025-07-28"},{"id":"20250729_f74nae4e6e6c6pd18u3urdviek","status":"confirmed","summary":"St. Olav\'s Day (National Day)","region":"Faroe Islands","date":"2025-07-29"},{"id":"20251026_u3uvac1kaghnuv3hc1jerutvio","status":"confirmed","summary":"Daylight Saving Time ends","region":"Faroe Islands","date":"2025-10-26"},{"id":"20251224_vm2c58u0uqn10k4n54o7a1cpf8","status":"confirmed","summary":"Christmas Eve","region":"Faroe Islands","date":"2025-12-24"},{"id":"20251225_0vanp8mp4limiopf8jphuth78o","status":"confirmed","summary":"Christmas Day","region":"Faroe Islands","date":"2025-12-25"},{"id":"20251226_qc6474o38cdut6p4u4uuro32fs","status":"confirmed","summary":"Boxing Day","region":"Faroe Islands","date":"2025-12-26"},{"id":"20251231_f9br7flu4higglujiq1mguk4c4","status":"confirmed","summary":"New Year\'s Eve","region":"Faroe Islands","date":"2025-12-31"}],"France":[{"id":"20240101_bu0qinlsm05rcq028j5isusqu0","status":"confirmed","summary":"New Year\'s Day","region":"France","date":"2024-01-01"},{"id":"20240331_58h87odv1qcl62evspencd4i70","status":"confirmed","summary":"Daylight Saving Time starts","region":"France","date":"2024-03-31"},{"id":"20240331_kvo5d4k86ij5t3a1unmn5at5v4","status":"confirmed","summary":"Easter Sunday","region":"France","date":"2024-03-31"},{"id":"20240401_f7ul3gmnsksga65rddg0l5lfac","status":"confirmed","summary":"Easter Monday","region":"France","date":"2024-04-01"},{"id":"20240501_5oets30d4juko55n9ci4v2f25o","status":"confirmed","summary":"Labor Day / May Day","region":"France","date":"2024-05-01"},{"id":"20240508_nhsvsvaietgpld61r51nfc22pg","status":"confirmed","summary":"WWII Victory Day","region":"France","date":"2024-05-08"},{"id":"20240509_qlpmhf6m3ab8qmqqb5nnk0mt78","status":"confirmed","summary":"Ascension Day","region":"France","date":"2024-05-09"},{"id":"20240519_rracoofdcd89n7oavjes05elm4","status":"confirmed","summary":"Whit Sunday","region":"France","date":"2024-05-19"},{"id":"20240520_6ln3i16cdp0rtjqhem9achjho8","status":"confirmed","summary":"Whit Monday","region":"France","date":"2024-05-20"},{"id":"20240526_q11i1ekeqnnp8r4bg4pgbatkq4","status":"confirmed","summary":"Mother\'s Day","region":"France","date":"2024-05-26"},{"id":"20240616_0jom2pa11dj80rq3n62di682lg","status":"confirmed","summary":"Father\'s Day","region":"France","date":"2024-06-16"},{"id":"20240714_ugrjdlier527ols26ar26rqg9g","status":"confirmed","summary":"Bastille Day","region":"France","date":"2024-07-14"},{"id":"20240815_tvh0lu6mabv98r558d37q73bqo","status":"confirmed","summary":"Assumption of Mary","region":"France","date":"2024-08-15"},{"id":"20241027_n8t3oglead9lfsn7r114ca6km4","status":"confirmed","summary":"Daylight Saving Time ends","region":"France","date":"2024-10-27"},{"id":"20241101_nr7qd1dqgkm51d9cff236sh0o0","status":"confirmed","summary":"All Saints\' Day","region":"France","date":"2024-11-01"},{"id":"20241111_e108lvefvut86lsav0j0tconjg","status":"confirmed","summary":"Armistice Day","region":"France","date":"2024-11-11"},{"id":"20241224_ilk9p8lkkv484aj2gducii1g70","status":"confirmed","summary":"Christmas Eve","region":"France","date":"2024-12-24"},{"id":"20241225_la9mjl1qep0ah3n7a8lnevn2rs","status":"confirmed","summary":"Christmas Day","region":"France","date":"2024-12-25"},{"id":"20241231_gj86r1eqri7lchsv6mdn8g2964","status":"confirmed","summary":"New Year\'s Eve","region":"France","date":"2024-12-31"},{"id":"20250101_qih9b0fu90d4rt0pbn1k76eedo","status":"confirmed","summary":"New Year\'s Day","region":"France","date":"2025-01-01"},{"id":"20250330_l8ng9fpn1nlnuola0fpdt894ms","status":"confirmed","summary":"Daylight Saving Time starts","region":"France","date":"2025-03-30"},{"id":"20250420_7kjn2rjvq12nvd10dsnfbunp0s","status":"confirmed","summary":"Easter Sunday","region":"France","date":"2025-04-20"},{"id":"20250421_puqh3rvhrgbeaaeel30260lus8","status":"confirmed","summary":"Easter Monday","region":"France","date":"2025-04-21"},{"id":"20250501_u3uleka9loe71ln2ngplk92g00","status":"confirmed","summary":"Labor Day / May Day","region":"France","date":"2025-05-01"},{"id":"20250508_msi33fkqcdgperkefv3th31p9c","status":"confirmed","summary":"WWII Victory Day","region":"France","date":"2025-05-08"},{"id":"20250525_tdd7iqdrglp1gu1i6uka4irc5g","status":"confirmed","summary":"Mother\'s Day","region":"France","date":"2025-05-25"},{"id":"20250529_emf8jnbi5c0p25gneu0kiqgpv0","status":"confirmed","summary":"Ascension Day","region":"France","date":"2025-05-29"},{"id":"20250608_tna46o0fulk97fsoiippofu0pk","status":"confirmed","summary":"Whit Sunday","region":"France","date":"2025-06-08"},{"id":"20250609_rfrasih0eor717vodce7lo5d5c","status":"confirmed","summary":"Whit Monday","region":"France","date":"2025-06-09"},{"id":"20250615_e6d5fe5c1hiltgunpac9t3nl10","status":"confirmed","summary":"Father\'s Day","region":"France","date":"2025-06-15"},{"id":"20250714_nsc6bqj5gufk0p41jrsia6b73o","status":"confirmed","summary":"Bastille Day","region":"France","date":"2025-07-14"},{"id":"20250815_mabsljnit1k114bgh3ii6kcolo","status":"confirmed","summary":"Assumption of Mary","region":"France","date":"2025-08-15"},{"id":"20251026_4hmelbc6i9ej4sh54f3c8tmbdc","status":"confirmed","summary":"Daylight Saving Time ends","region":"France","date":"2025-10-26"},{"id":"20251101_83gp1guvc1lgk9gbktctijno5k","status":"confirmed","summary":"All Saints\' Day","region":"France","date":"2025-11-01"},{"id":"20251111_si3cbmbrp3gl4u29kd722bc3ts","status":"confirmed","summary":"Armistice Day","region":"France","date":"2025-11-11"},{"id":"20251224_c376i4g2h9i943mr8kjnbsaiug","status":"confirmed","summary":"Christmas Eve","region":"France","date":"2025-12-24"},{"id":"20251225_hm4f1ovpuutmvvul0m9998fld0","status":"confirmed","summary":"Christmas Day","region":"France","date":"2025-12-25"},{"id":"20251231_lh4d1j633p20ift7p4fg4un548","status":"confirmed","summary":"New Year\'s Eve","region":"France","date":"2025-12-31"}],"Gabon":[{"id":"20240101_qmnjjhl5khsog0b6oiu833goig","status":"confirmed","summary":"New Year","region":"Gabon","date":"2024-01-01"},{"id":"20240311_ntdhb7clum1s3uocant7cq78no","status":"confirmed","summary":"Ramadan Start","region":"Gabon","date":"2024-03-11"},{"id":"20240331_nccr96ajngpi566212gh7rsnfg","status":"confirmed","summary":"Easter Sunday","region":"Gabon","date":"2024-03-31"},{"id":"20240401_n33kt81ev9nf5ca9d05o4lblr8","status":"confirmed","summary":"Easter Monday","region":"Gabon","date":"2024-04-01"},{"id":"20240410_p38ld9avedkcs182gpm81p3rh0","status":"confirmed","summary":"Eid al-Fitr","region":"Gabon","date":"2024-04-10"},{"id":"20240417_fd2pm2flnl36e0m9bqanjqehvk","status":"confirmed","summary":"Women\'s Rights Day","region":"Gabon","date":"2024-04-17"},{"id":"20240501_r36b58gbh98f89u6bq4uoeqv9s","status":"confirmed","summary":"Labour Day","region":"Gabon","date":"2024-05-01"},{"id":"20240509_e0gsfc9l63om389trr51m2f760","status":"confirmed","summary":"Ascension Day","region":"Gabon","date":"2024-05-09"},{"id":"20240512_4ko6eu9iq686g55hiqcmj2dbfs","status":"confirmed","summary":"Mother\'s Day","region":"Gabon","date":"2024-05-12"},{"id":"20240520_lgphgf2cuhjlf0hgt191kebs6s","status":"confirmed","summary":"Whit Monday","region":"Gabon","date":"2024-05-20"},{"id":"20240616_7u8ri8f7p3uirfrqfb32pagicc","status":"confirmed","summary":"Father\'s Day","region":"Gabon","date":"2024-06-16"},{"id":"20240617_el6p0oui06mecekgudd9qac56k","status":"confirmed","summary":"Eid al-Adha","region":"Gabon","date":"2024-06-17"},{"id":"20240815_ht40s3j2ket5ncqmo4kdeee41s","status":"confirmed","summary":"Assumption of Mary","region":"Gabon","date":"2024-08-15"},{"id":"20240816_i5srr2obtlcjog0p9tblkq9430","status":"confirmed","summary":"Independence Day","region":"Gabon","date":"2024-08-16"},{"id":"20240817_4jbk88l6n5gct492hi09fmm2c4","status":"confirmed","summary":"Independence Day","region":"Gabon","date":"2024-08-17"},{"id":"20241101_sku3hp0718i868kagupnguvr30","status":"confirmed","summary":"All Saints\' Day","region":"Gabon","date":"2024-11-01"},{"id":"20241225_7bljol1l7q7pcvtjd145n7uco8","status":"confirmed","summary":"Christmas Day","region":"Gabon","date":"2024-12-25"},{"id":"20250101_k0b0dcilff3kp3lpmh2drd5blg","status":"confirmed","summary":"New Year","region":"Gabon","date":"2025-01-01"},{"id":"20250301_dm45a3uk3ifeu5n90ohqojvqgc","status":"confirmed","summary":"Ramadan Start","region":"Gabon","date":"2025-03-01"},{"id":"20250331_aosei8nqt6thcduthrus0fv7us","status":"confirmed","summary":"Eid al-Fitr","region":"Gabon","date":"2025-03-31"},{"id":"20250417_2g7uu68mokqvs4b3mr6vfdcm8c","status":"confirmed","summary":"Women\'s Rights Day","region":"Gabon","date":"2025-04-17"},{"id":"20250420_5l56s85mu77mi6b1f28pjl303k","status":"confirmed","summary":"Easter Sunday","region":"Gabon","date":"2025-04-20"},{"id":"20250421_av5v3eo4pmhso33tjddpr4bpms","status":"confirmed","summary":"Easter Monday","region":"Gabon","date":"2025-04-21"},{"id":"20250501_eq3v551biefk1511v54g8cp688","status":"confirmed","summary":"Labour Day","region":"Gabon","date":"2025-05-01"},{"id":"20250511_jdepn9kelln681t66ek188n1m8","status":"confirmed","summary":"Mother\'s Day","region":"Gabon","date":"2025-05-11"},{"id":"20250529_710mp8j94rs56k4s6nn4pk2je0","status":"confirmed","summary":"Ascension Day","region":"Gabon","date":"2025-05-29"},{"id":"20250607_0prbkuvelgvnvrbpavlipb4ol4","status":"confirmed","summary":"Eid al-Adha","region":"Gabon","date":"2025-06-07"},{"id":"20250609_g49venbken34l0migtdks2nlh8","status":"confirmed","summary":"Whit Monday","region":"Gabon","date":"2025-06-09"},{"id":"20250615_k12k5f8iep2eh477o9hmck6sn4","status":"confirmed","summary":"Father\'s Day","region":"Gabon","date":"2025-06-15"},{"id":"20250815_s499s5tnqpkdg9vmnmdskg6jg0","status":"confirmed","summary":"Assumption of Mary","region":"Gabon","date":"2025-08-15"},{"id":"20250816_455mmvusivrk6tfmef7jen2964","status":"confirmed","summary":"Independence Day","region":"Gabon","date":"2025-08-16"},{"id":"20250817_f73jikuikb08kg430tpc3uhsj8","status":"confirmed","summary":"Independence Day","region":"Gabon","date":"2025-08-17"},{"id":"20251101_sa6jf99nmmtbkdk551u6975ro0","status":"confirmed","summary":"All Saints\' Day","region":"Gabon","date":"2025-11-01"},{"id":"20251225_18l1hapnjcsbkjqt59kakj4aas","status":"confirmed","summary":"Christmas Day","region":"Gabon","date":"2025-12-25"}],"Grenada":[{"id":"20240101_jiij64c2os2t4eeak9tu6aufu4","status":"confirmed","summary":"New Year","region":"Grenada","date":"2024-01-01"},{"id":"20240207_0i3j400glt4lefgg1a3dr8u8cs","status":"confirmed","summary":"Independence Day","region":"Grenada","date":"2024-02-07"},{"id":"20240329_9l5tjtm9bqsupsap5tjmqrh9tc","status":"confirmed","summary":"Good Friday","region":"Grenada","date":"2024-03-29"},{"id":"20240331_cfvrh4sv0hn80qfn0r6f8e619s","status":"confirmed","summary":"Easter Sunday","region":"Grenada","date":"2024-03-31"},{"id":"20240401_frstsjh6n770n6i6kkhrs0m6s8","status":"confirmed","summary":"Easter Monday","region":"Grenada","date":"2024-04-01"},{"id":"20240501_l4c7ith0c4dr34scp87dhb8990","status":"confirmed","summary":"Labour Day","region":"Grenada","date":"2024-05-01"},{"id":"20240512_3mh4r2jmuckl3308trqdhh7ucs","status":"confirmed","summary":"Mother\'s Day","region":"Grenada","date":"2024-05-12"},{"id":"20240520_64oclhjjme8k24rlj53hpodutk","status":"confirmed","summary":"Whit Monday","region":"Grenada","date":"2024-05-20"},{"id":"20240530_vib03f469a9tg8ll9gm58ak09k","status":"confirmed","summary":"Corpus Christi","region":"Grenada","date":"2024-05-30"},{"id":"20240805_qv23kacvg34t80a5g9a4uj4l98","status":"confirmed","summary":"Emancipation Day","region":"Grenada","date":"2024-08-05"},{"id":"20240812_upec6701at2s43u7eoc7m5thic","status":"confirmed","summary":"Carnival (First Day)","region":"Grenada","date":"2024-08-12"},{"id":"20240813_o7d8ck4vrur6k1iqdaam2j6puc","status":"confirmed","summary":"Carnival (Second Day)","region":"Grenada","date":"2024-08-13"},{"id":"20240901_vqcic6qpjooeerv77gj75ej6bk","status":"confirmed","summary":"Kirani Day","region":"Grenada","date":"2024-09-01"},{"id":"20241019_lublus65jpcfspvrl5v3qg0aj0","status":"confirmed","summary":"Maurice Bishop Day","region":"Grenada","date":"2024-10-19"},{"id":"20241025_iuqm0echrfqusj2ae8djqangos","status":"confirmed","summary":"Thanksgiving","region":"Grenada","date":"2024-10-25"},{"id":"20241225_866g6fqbil6vbbu9ef38sncpj0","status":"confirmed","summary":"Christmas Day","region":"Grenada","date":"2024-12-25"},{"id":"20241226_anm5i9d8pdu0rusdv2kpjtfqsc","status":"confirmed","summary":"Boxing Day","region":"Grenada","date":"2024-12-26"},{"id":"20250101_cg2kmncb0476c3nk6odlf651u8","status":"confirmed","summary":"New Year","region":"Grenada","date":"2025-01-01"},{"id":"20250207_6q7eek78g3ig3jpf4tq7kc710g","status":"confirmed","summary":"Independence Day","region":"Grenada","date":"2025-02-07"},{"id":"20250418_5lcppgnv1f2jf5v3hbgde7s6no","status":"confirmed","summary":"Good Friday","region":"Grenada","date":"2025-04-18"},{"id":"20250420_61u33bmncourt2drb3evnp8rj4","status":"confirmed","summary":"Easter Sunday","region":"Grenada","date":"2025-04-20"},{"id":"20250421_qvtg4qkm2su57e0ej67rh9pa0s","status":"confirmed","summary":"Easter Monday","region":"Grenada","date":"2025-04-21"},{"id":"20250501_ip8jad63gnbrt7ri2pddt7rhmc","status":"confirmed","summary":"Labour Day","region":"Grenada","date":"2025-05-01"},{"id":"20250511_omct0ve23mq7g6lk4dr3s8un5k","status":"confirmed","summary":"Mother\'s Day","region":"Grenada","date":"2025-05-11"},{"id":"20250609_jnrm0sasn6t1lstqlqq3q95oho","status":"confirmed","summary":"Whit Monday","region":"Grenada","date":"2025-06-09"},{"id":"20250619_kg9is9gq2cqr24radbbb452sp4","status":"confirmed","summary":"Corpus Christi","region":"Grenada","date":"2025-06-19"},{"id":"20250804_2kr6s4jl1pqj8anqut7f0nb7g0","status":"confirmed","summary":"Emancipation Day","region":"Grenada","date":"2025-08-04"},{"id":"20250811_ujc72cfdpkp8gu35onfc3jo2jc","status":"confirmed","summary":"Carnival (First Day)","region":"Grenada","date":"2025-08-11"},{"id":"20250812_vj3ved18b4v3s7hga4j7mrd0eg","status":"confirmed","summary":"Carnival (Second Day)","region":"Grenada","date":"2025-08-12"},{"id":"20250901_d9r32jmciu6gbvhn3llhjbapl0","status":"confirmed","summary":"Kirani Day","region":"Grenada","date":"2025-09-01"},{"id":"20251019_uhevc5n0ee4j2m7vp8hsurtp7g","status":"confirmed","summary":"Maurice Bishop Day","region":"Grenada","date":"2025-10-19"},{"id":"20251025_489j718bb5vd51tj5a32110rdc","status":"confirmed","summary":"Thanksgiving","region":"Grenada","date":"2025-10-25"},{"id":"20251225_oq132btnre8n8jracu0u06vd00","status":"confirmed","summary":"Christmas Day","region":"Grenada","date":"2025-12-25"},{"id":"20251226_57gdqdu28s8h4012mgsnnussdk","status":"confirmed","summary":"Boxing Day","region":"Grenada","date":"2025-12-26"}],"Georgia":[{"id":"20240101_2shlcku5ce76bjumpgur35cgtg","status":"confirmed","summary":"New Year\'s Day","region":"Georgia","date":"2024-01-01"},{"id":"20240102_54rc8ff6ttfqskpn2eg677knfo","status":"confirmed","summary":"New Year\'s (Day 2)","region":"Georgia","date":"2024-01-02"},{"id":"20240107_vc385rj2ike29c0qh6ted30ajo","status":"confirmed","summary":"Orthodox Christmas Day","region":"Georgia","date":"2024-01-07"},{"id":"20240119_jocvjc57u3rhds0oftj015fh80","status":"confirmed","summary":"Orthodox Epiphany","region":"Georgia","date":"2024-01-19"},{"id":"20240214_9q62thb2ektntssfqj8n9p7v1g","status":"confirmed","summary":"Valentine\'s Day","region":"Georgia","date":"2024-02-14"},{"id":"20240303_v2hdnfo3g4f9mntdp2cfu8e9ec","status":"confirmed","summary":"Mothers\' Day","region":"Georgia","date":"2024-03-03"},{"id":"20240308_ak9vldcvqb9ol6lmkb5o8q2k58","status":"confirmed","summary":"International Women\'s Day","region":"Georgia","date":"2024-03-08"},{"id":"20240321_29njdtefdc09lf5tt605lvqei4","status":"confirmed","summary":"Nowruz","region":"Georgia","date":"2024-03-21"},{"id":"20240409_ig34j0kbd9o0t6igengql39om4","status":"confirmed","summary":"Independence Restoration Day","region":"Georgia","date":"2024-04-09"},{"id":"20240503_rkhejhaej7b0moa9pvp3nati6c","status":"confirmed","summary":"Orthodox Good Friday","region":"Georgia","date":"2024-05-03"},{"id":"20240504_fj12tqjjil82gvgak545cro484","status":"confirmed","summary":"Orthodox Holy Saturday","region":"Georgia","date":"2024-05-04"},{"id":"20240505_i7mrbnasjjeg3nf22q52t8trko","status":"confirmed","summary":"Orthodox Easter Sunday","region":"Georgia","date":"2024-05-05"},{"id":"20240506_4ks8vnl0kkd10ed2aoacop2c54","status":"confirmed","summary":"Orthodox Easter Monday","region":"Georgia","date":"2024-05-06"},{"id":"20240509_gua37t2kqskn15f57efecrcl34","status":"confirmed","summary":"Victory Day","region":"Georgia","date":"2024-05-09"},{"id":"20240512_0qun1r021db633gibv5fdo84bo","status":"confirmed","summary":"St Andrew\'s Day","region":"Georgia","date":"2024-05-12"},{"id":"20240526_f5t2us5ile20hj7flnhhmkdcag","status":"confirmed","summary":"Independence Day","region":"Georgia","date":"2024-05-26"},{"id":"20240616_l23m0f72nvf9tra5m881h08g30","status":"confirmed","summary":"Fathers\' Day","region":"Georgia","date":"2024-06-16"},{"id":"20240828_kj36b3pr863plv1bcbt65gqf54","status":"confirmed","summary":"Day of the Assumption of Mary","region":"Georgia","date":"2024-08-28"},{"id":"20241014_b75kd8loi5ai7v0auej9e6gkvo","status":"confirmed","summary":"Svetitskhovloba","region":"Georgia","date":"2024-10-14"},{"id":"20241123_9mag3fofnir39u0hpifmpp28n8","status":"confirmed","summary":"St George\'s Day","region":"Georgia","date":"2024-11-23"},{"id":"20241231_hf0ns4u5a44uu4ki7fmc0ma0b4","status":"confirmed","summary":"New Year\'s Eve","region":"Georgia","date":"2024-12-31"},{"id":"20250101_5n9q65pea0ofdlr350cead1u04","status":"confirmed","summary":"New Year\'s Day","region":"Georgia","date":"2025-01-01"},{"id":"20250102_uhohcasg4sgk2nkki3bp3bi5d4","status":"confirmed","summary":"New Year\'s (Day 2)","region":"Georgia","date":"2025-01-02"},{"id":"20250107_raj5upb5d2d8fupoh7kur2pguo","status":"confirmed","summary":"Orthodox Christmas Day","region":"Georgia","date":"2025-01-07"},{"id":"20250119_kco3h0s6ock4kedm9dduv19q2c","status":"confirmed","summary":"Orthodox Epiphany","region":"Georgia","date":"2025-01-19"},{"id":"20250214_ara4tas4j3oqfcpr4dhaqa49c4","status":"confirmed","summary":"Valentine\'s Day","region":"Georgia","date":"2025-02-14"},{"id":"20250303_s26me289u0k7gn3765m4f4ld6k","status":"confirmed","summary":"Mothers\' Day","region":"Georgia","date":"2025-03-03"},{"id":"20250308_6u8d856r2i8qv16fva741fflq8","status":"confirmed","summary":"International Women\'s Day","region":"Georgia","date":"2025-03-08"},{"id":"20250321_gehbntd44qc4aug0c9be0f7eug","status":"confirmed","summary":"Nowruz","region":"Georgia","date":"2025-03-21"},{"id":"20250409_ckhs36uhfllkfaf7qba5ma08j8","status":"confirmed","summary":"Independence Restoration Day","region":"Georgia","date":"2025-04-09"},{"id":"20250418_bp66m9ohftua8d4jm3dkki84vk","status":"confirmed","summary":"Orthodox Good Friday","region":"Georgia","date":"2025-04-18"},{"id":"20250419_mojq2ndbhfbci1l0f2pbl4q8ds","status":"confirmed","summary":"Orthodox Holy Saturday","region":"Georgia","date":"2025-04-19"},{"id":"20250420_gsrrr5dlc0ictq2s5aii8s0hj8","status":"confirmed","summary":"Orthodox Easter Sunday","region":"Georgia","date":"2025-04-20"},{"id":"20250421_e30ufgkkovdeec4nb09uko1r2s","status":"confirmed","summary":"Orthodox Easter Monday","region":"Georgia","date":"2025-04-21"},{"id":"20250509_9oj0d0bmhodi1l0mhv9d3ouaac","status":"confirmed","summary":"Victory Day","region":"Georgia","date":"2025-05-09"},{"id":"20250512_ve4ctur8iuq8vapujt4jhdr114","status":"confirmed","summary":"St Andrew\'s Day","region":"Georgia","date":"2025-05-12"},{"id":"20250526_mvjd5qskaf9f6v47bv9lljb1nc","status":"confirmed","summary":"Independence Day","region":"Georgia","date":"2025-05-26"},{"id":"20250615_37frj3hfkqqvti75udknsb98ec","status":"confirmed","summary":"Fathers\' Day","region":"Georgia","date":"2025-06-15"},{"id":"20250828_fgolvgs7aqcb25nv4eo84bk2ss","status":"confirmed","summary":"Day of the Assumption of Mary","region":"Georgia","date":"2025-08-28"},{"id":"20251014_cm9kc67j7cinrumjgd4rmlkl4c","status":"confirmed","summary":"Svetitskhovloba","region":"Georgia","date":"2025-10-14"},{"id":"20251123_c548qj6sajh8p9d681si3qrir8","status":"confirmed","summary":"St George\'s Day","region":"Georgia","date":"2025-11-23"},{"id":"20251231_fhcld12hr6cf4tjud7af2gjflk","status":"confirmed","summary":"New Year\'s Eve","region":"Georgia","date":"2025-12-31"}],"Germany":[{"id":"20240101_e02u88n547kkeo8v8a8j31h1f0","status":"confirmed","summary":"New Year\'s Day","region":"Germany","date":"2024-01-01"},{"id":"20240106_1thk9glesdcl02906puhp48f34","status":"confirmed","summary":"Epiphany (regional holiday)","region":"Germany","date":"2024-01-06"},{"id":"20240212_qtu2aenaplvijeu09afhpe6kvg","status":"confirmed","summary":"Shrove Monday","region":"Germany","date":"2024-02-12"},{"id":"20240213_f3ghngp7o8fjgl60nseun81mjo","status":"confirmed","summary":"Carnival Tuesday","region":"Germany","date":"2024-02-13"},{"id":"20240214_0facm4akct20vker7nq33fvogg","status":"confirmed","summary":"Carnival / Ash Wednesday","region":"Germany","date":"2024-02-14"},{"id":"20240214_br16smf55dtg187j8rs8prge50","status":"confirmed","summary":"Valentine\'s Day","region":"Germany","date":"2024-02-14"},{"id":"20240308_fufbbm2f1pro0rhphbjp58hl8k","status":"confirmed","summary":"International Women\'s Day (regional holiday)","region":"Germany","date":"2024-03-08"},{"id":"20240324_tk646fo6b8ccohqstcmkl52nuo","status":"confirmed","summary":"Palm Sunday","region":"Germany","date":"2024-03-24"},{"id":"20240328_4o4rq8fome98pr57v80a49u20g","status":"confirmed","summary":"Maundy Thursday (regional holiday)","region":"Germany","date":"2024-03-28"},{"id":"20240329_7q53922ginhvs3cjcfaa7vfrbc","status":"confirmed","summary":"Good Friday","region":"Germany","date":"2024-03-29"},{"id":"20240330_t6jgp0c7cmmtkre46g7jtctsrk","status":"confirmed","summary":"Holy Saturday (regional holiday)","region":"Germany","date":"2024-03-30"},{"id":"20240331_m6v0klq55il6uti59n5bl9i0ug","status":"confirmed","summary":"Daylight Saving Time starts","region":"Germany","date":"2024-03-31"},{"id":"20240331_umue8vbd4te9sjondjf55ka904","status":"confirmed","summary":"Easter Sunday (regional holiday)","region":"Germany","date":"2024-03-31"},{"id":"20240401_0ievsl334l1unvssn98ra6p4v0","status":"confirmed","summary":"Easter Monday","region":"Germany","date":"2024-04-01"},{"id":"20240501_8kmt3unpbj1uhn29ql5q48qj4o","status":"confirmed","summary":"May Day","region":"Germany","date":"2024-05-01"},{"id":"20240508_mnpkj7j6dlt86u76bkquh46v6s","status":"confirmed","summary":"Anniversary of the End of World War II (regional holiday)","region":"Germany","date":"2024-05-08"},{"id":"20240509_1i5ekir6njn3j8kvre81mcjo14","status":"confirmed","summary":"Fathers\' Day","region":"Germany","date":"2024-05-09"},{"id":"20240509_f446sih3r9om4rfgfvs4fcvj5o","status":"confirmed","summary":"Ascension Day","region":"Germany","date":"2024-05-09"},{"id":"20240512_02clqe57f6m05uc2sedakf9orc","status":"confirmed","summary":"Mothers\' Day","region":"Germany","date":"2024-05-12"},{"id":"20240519_isvnoh6auet8v6mbrn55kic1a8","status":"confirmed","summary":"Whit Sunday (regional holiday)","region":"Germany","date":"2024-05-19"},{"id":"20240520_nppktljnkkokpdismbnepsj400","status":"confirmed","summary":"Whit Monday","region":"Germany","date":"2024-05-20"},{"id":"20240530_15uq3s23cgj60ten1ocnfada60","status":"confirmed","summary":"Corpus Christi (regional holiday)","region":"Germany","date":"2024-05-30"},{"id":"20240808_am9sfdebm403oojkjl7ru28g68","status":"confirmed","summary":"Peace Festival in Augsburg (Bavaria)","region":"Germany","date":"2024-08-08"},{"id":"20240815_gve9ebpt7mv1rb24ocu311gpq0","status":"confirmed","summary":"Assumption of Mary (regional holiday)","region":"Germany","date":"2024-08-15"},{"id":"20240920_kkg6ppo9sjdu3ujn6taqp4dlfg","status":"confirmed","summary":"German World Children\'s Day (Thuringia)","region":"Germany","date":"2024-09-20"},{"id":"20241003_jcj1cdqujjhc6nil814p05kb08","status":"confirmed","summary":"Day of German Unity","region":"Germany","date":"2024-10-03"},{"id":"20241027_j3mlap1a85fothtdlmldj3uaf8","status":"confirmed","summary":"Daylight Saving Time ends","region":"Germany","date":"2024-10-27"},{"id":"20241031_dg0j0lparben2uobmrvniu96rg","status":"confirmed","summary":"Reformation Day (regional holiday)","region":"Germany","date":"2024-10-31"},{"id":"20241031_v7nshjhkv39oq9952212p5ftvc","status":"confirmed","summary":"Halloween","region":"Germany","date":"2024-10-31"},{"id":"20241101_abp62u6qhejlvnge6gvh23l0f4","status":"confirmed","summary":"All Saints\' Day (regional holiday)","region":"Germany","date":"2024-11-01"},{"id":"20241111_16uidl795goj5f8k3nn4jrrgik","status":"confirmed","summary":"St. Martin\'s Day","region":"Germany","date":"2024-11-11"},{"id":"20241117_qvajr1hjsrlel8qb9t7g20d4ss","status":"confirmed","summary":"National Day of Mourning","region":"Germany","date":"2024-11-17"},{"id":"20241120_5n877i1afb13uldk09hhtvrppc","status":"confirmed","summary":"Repentance Day (Saxony)","region":"Germany","date":"2024-11-20"},{"id":"20241124_q0gqmap3h0k7lfhs76li4cgp0g","status":"confirmed","summary":"Sunday of the Dead","region":"Germany","date":"2024-11-24"},{"id":"20241201_2vnr357ej330aeeob556j428io","status":"confirmed","summary":"First Advent Sunday","region":"Germany","date":"2024-12-01"},{"id":"20241206_8i73t2ng4hmnghjd0qejnelf74","status":"confirmed","summary":"Saint Nicholas Day","region":"Germany","date":"2024-12-06"},{"id":"20241208_ffvc4q8l80p8iukgn8mngacdl8","status":"confirmed","summary":"Second Advent Sunday","region":"Germany","date":"2024-12-08"},{"id":"20241215_givelc1f6afq31cb7stdb67mgs","status":"confirmed","summary":"Third Advent Sunday","region":"Germany","date":"2024-12-15"},{"id":"20241222_q6bibt81egu5e08ss8a6q90eoc","status":"confirmed","summary":"Fourth Advent Sunday","region":"Germany","date":"2024-12-22"},{"id":"20241225_8jt4vp0ndt90p0fi5rjif6rt68","status":"confirmed","summary":"Christmas Day","region":"Germany","date":"2024-12-25"},{"id":"20241226_meuiukd8m5mqo21a41otuq078c","status":"confirmed","summary":"Boxing Day","region":"Germany","date":"2024-12-26"},{"id":"20250101_emc7paonne0brft3njata38o74","status":"confirmed","summary":"New Year\'s Day","region":"Germany","date":"2025-01-01"},{"id":"20250106_d3b9mvtqg7a289q87lk81ctsv0","status":"confirmed","summary":"Epiphany (regional holiday)","region":"Germany","date":"2025-01-06"},{"id":"20250214_oihmggevsjv245m0jd5n42uh7c","status":"confirmed","summary":"Valentine\'s Day","region":"Germany","date":"2025-02-14"},{"id":"20250303_rbcbtcqiahe921rcsa7s4k16hk","status":"confirmed","summary":"Shrove Monday","region":"Germany","date":"2025-03-03"},{"id":"20250304_8pnalfl1sh850kol6p6cpj92ss","status":"confirmed","summary":"Carnival Tuesday","region":"Germany","date":"2025-03-04"},{"id":"20250305_t5d7699dkfjdqbg2kl6fhq7j5g","status":"confirmed","summary":"Carnival / Ash Wednesday","region":"Germany","date":"2025-03-05"},{"id":"20250308_spahebh9hvklvtb1n184revlno","status":"confirmed","summary":"International Women\'s Day (regional holiday)","region":"Germany","date":"2025-03-08"},{"id":"20250330_i026aneeohudg74v5f3tuhqd4s","status":"confirmed","summary":"Daylight Saving Time starts","region":"Germany","date":"2025-03-30"},{"id":"20250413_1gceetlhjhmo1glck7s41ii784","status":"confirmed","summary":"Palm Sunday","region":"Germany","date":"2025-04-13"},{"id":"20250417_3n289ioecvkpk4jn1ip40mhb60","status":"confirmed","summary":"Maundy Thursday (regional holiday)","region":"Germany","date":"2025-04-17"},{"id":"20250418_42kt1b2en2gqept04hc2eauoag","status":"confirmed","summary":"Good Friday","region":"Germany","date":"2025-04-18"},{"id":"20250419_jv34bengj6hekpdrpem88p9li4","status":"confirmed","summary":"Holy Saturday (regional holiday)","region":"Germany","date":"2025-04-19"},{"id":"20250420_ei90jb1rb65lc9u3o0hue7gbcs","status":"confirmed","summary":"Easter Sunday (regional holiday)","region":"Germany","date":"2025-04-20"},{"id":"20250421_239e34m8jitfg514lugc021smk","status":"confirmed","summary":"Easter Monday","region":"Germany","date":"2025-04-21"},{"id":"20250501_3unnv8r5f3gnrftnob8o6066v0","status":"confirmed","summary":"May Day","region":"Germany","date":"2025-05-01"},{"id":"20250508_ksdv6ncoupvg8p46vji33m6bvo","status":"confirmed","summary":"Anniversary of the End of World War II (regional holiday)","region":"Germany","date":"2025-05-08"},{"id":"20250511_j4af0pm4pttc08hn2opa9vp7q8","status":"confirmed","summary":"Mothers\' Day","region":"Germany","date":"2025-05-11"},{"id":"20250529_s49e0e1vslnh8ldpunbs1a5k78","status":"confirmed","summary":"Ascension Day","region":"Germany","date":"2025-05-29"},{"id":"20250529_uvdo7aordd7sfj6fvblvqqd3hg","status":"confirmed","summary":"Fathers\' Day","region":"Germany","date":"2025-05-29"},{"id":"20250608_0d2bpafvth520ule4e396s5520","status":"confirmed","summary":"Whit Sunday (regional holiday)","region":"Germany","date":"2025-06-08"},{"id":"20250609_5h4a20bgtkfgqevi6o1337q0ds","status":"confirmed","summary":"Whit Monday","region":"Germany","date":"2025-06-09"},{"id":"20250619_k53hikrn5iao7u2jshv38mvsko","status":"confirmed","summary":"Corpus Christi (regional holiday)","region":"Germany","date":"2025-06-19"},{"id":"20250808_l6l5r3je4idrpo9kbgtp1ttnq0","status":"confirmed","summary":"Peace Festival in Augsburg (Bavaria)","region":"Germany","date":"2025-08-08"},{"id":"20250815_oois8v5gsbitlgdgd2irt82hlo","status":"confirmed","summary":"Assumption of Mary (regional holiday)","region":"Germany","date":"2025-08-15"},{"id":"20250920_tks5pbf2je731iqja8qthqf11c","status":"confirmed","summary":"German World Children\'s Day (Thuringia)","region":"Germany","date":"2025-09-20"},{"id":"20251003_d6gm6f5e3l6nnkd8hc69lhvc20","status":"confirmed","summary":"Day of German Unity","region":"Germany","date":"2025-10-03"},{"id":"20251026_65a6dko1i4seq1k4tng25dcbvo","status":"confirmed","summary":"Daylight Saving Time ends","region":"Germany","date":"2025-10-26"},{"id":"20251031_7l26vrgbqj6vdnbgnv2m8lis8o","status":"confirmed","summary":"Reformation Day (regional holiday)","region":"Germany","date":"2025-10-31"},{"id":"20251031_usk2ee73ntvu98v49iq45r1j24","status":"confirmed","summary":"Halloween","region":"Germany","date":"2025-10-31"},{"id":"20251101_k2bgg8pl9vi0q355q1vo5fl04o","status":"confirmed","summary":"All Saints\' Day (regional holiday)","region":"Germany","date":"2025-11-01"},{"id":"20251111_gtmu6u3pnd8oohm90quciopuv4","status":"confirmed","summary":"St. Martin\'s Day","region":"Germany","date":"2025-11-11"},{"id":"20251116_kmsla9mksmjirscj3d1al0rfqg","status":"confirmed","summary":"National Day of Mourning","region":"Germany","date":"2025-11-16"},{"id":"20251119_7u1o4a4hc0bf22hbkihj4t9ki4","status":"confirmed","summary":"Repentance Day (Saxony)","region":"Germany","date":"2025-11-19"},{"id":"20251123_2og26a3kf921um82srqjvjl7d8","status":"confirmed","summary":"Sunday of the Dead","region":"Germany","date":"2025-11-23"},{"id":"20251130_kbhofb4mimbujgmehhmd7s3oo0","status":"confirmed","summary":"First Advent Sunday","region":"Germany","date":"2025-11-30"},{"id":"20251206_21hnckpdr3fe0708thcujq02bk","status":"confirmed","summary":"Saint Nicholas Day","region":"Germany","date":"2025-12-06"},{"id":"20251207_9hpl222h2ij7mv137mu963grdo","status":"confirmed","summary":"Second Advent Sunday","region":"Germany","date":"2025-12-07"},{"id":"20251214_lp7trq57lkh5d3t9v5935frii4","status":"confirmed","summary":"Third Advent Sunday","region":"Germany","date":"2025-12-14"},{"id":"20251221_jouiev6nrkgnp95r6updaa4n74","status":"confirmed","summary":"Fourth Advent Sunday","region":"Germany","date":"2025-12-21"},{"id":"20251225_17l5o1mk9cc84su3io1sh6tqi0","status":"confirmed","summary":"Christmas Day","region":"Germany","date":"2025-12-25"},{"id":"20251226_lf6ccne8j64bli2kjjbsj0b0eg","status":"confirmed","summary":"Boxing Day","region":"Germany","date":"2025-12-26"}],"French Guiana":[{"id":"20240101_mujqasqrs7uoo0qa7dt1cvv1kc","status":"confirmed","summary":"New Year\'s Day","region":"French Guiana","date":"2024-01-01"},{"id":"20240212_j8s32djj1jec89dr5a1be48dc8","status":"confirmed","summary":"Carnival / Shrove Monday","region":"French Guiana","date":"2024-02-12"},{"id":"20240213_4g13eifsqp384ldcl40k21rtg0","status":"confirmed","summary":"Carnival / Shrove Tuesday / Pancake Day","region":"French Guiana","date":"2024-02-13"},{"id":"20240214_ll84nd3fcfa2rf9hnvstustg3s","status":"confirmed","summary":"Carnival / Ash Wednesday","region":"French Guiana","date":"2024-02-14"},{"id":"20240310_0jn9iq3ieej7p5t9t8g8dke5f8","status":"confirmed","summary":"Laetare Sunday","region":"French Guiana","date":"2024-03-10"},{"id":"20240324_9rul85i8odci89rol83s9gp4hs","status":"confirmed","summary":"Palm Sunday","region":"French Guiana","date":"2024-03-24"},{"id":"20240329_lr18nrcasrtf08bjqofa5e2mo8","status":"confirmed","summary":"Good Friday","region":"French Guiana","date":"2024-03-29"},{"id":"20240331_9n09a2j48p3q6q5g2900u2fde0","status":"confirmed","summary":"Easter Sunday","region":"French Guiana","date":"2024-03-31"},{"id":"20240401_n1lmtuurr6cpj5gbcbbr36bmac","status":"confirmed","summary":"Easter Monday","region":"French Guiana","date":"2024-04-01"},{"id":"20240501_p9tc1j2lsqsv638iv26ot87fes","status":"confirmed","summary":"Labor Day / May Day","region":"French Guiana","date":"2024-05-01"},{"id":"20240508_pchs8123relecvk4g9g768lkqc","status":"confirmed","summary":"Victory Day","region":"French Guiana","date":"2024-05-08"},{"id":"20240509_ps04tvtc4o9qdes9aqplb37muo","status":"confirmed","summary":"Ascension Day","region":"French Guiana","date":"2024-05-09"},{"id":"20240519_ptvh8viqpfsatuemjrub9fvbpo","status":"confirmed","summary":"Whit Sunday","region":"French Guiana","date":"2024-05-19"},{"id":"20240520_vk0tfg7vn1k47hhkmqmcubv044","status":"confirmed","summary":"Whit Monday","region":"French Guiana","date":"2024-05-20"},{"id":"20240610_omlb07illjf627jj4b5l5fk0es","status":"confirmed","summary":"Abolition Day","region":"French Guiana","date":"2024-06-10"},{"id":"20240714_c53rosu7aci7grfgp6bt4j14rc","status":"confirmed","summary":"French National Day","region":"French Guiana","date":"2024-07-14"},{"id":"20240815_vmh3lk1q8nfa535jdv40ofu3ac","status":"confirmed","summary":"Assumption of Mary","region":"French Guiana","date":"2024-08-15"},{"id":"20241101_m1usitv0k82a2thcq4rd9stbak","status":"confirmed","summary":"All Saints\' Day","region":"French Guiana","date":"2024-11-01"},{"id":"20241102_rg2gq3s5ml18umppn99u6cdfa8","status":"confirmed","summary":"All Souls\' Day","region":"French Guiana","date":"2024-11-02"},{"id":"20241111_ckls3lqig1hlhlho1hhqiub7gc","status":"confirmed","summary":"Armistice Day","region":"French Guiana","date":"2024-11-11"},{"id":"20241225_f1008pf5lu1rgipbrbguvnrgf8","status":"confirmed","summary":"Christmas Day","region":"French Guiana","date":"2024-12-25"},{"id":"20241231_ka124ai9f6phetgrud4hqc1nic","status":"confirmed","summary":"New Year\'s Eve","region":"French Guiana","date":"2024-12-31"},{"id":"20250101_8e78mqmeo84j865fgip0um9910","status":"confirmed","summary":"New Year\'s Day","region":"French Guiana","date":"2025-01-01"},{"id":"20250303_95hr9ddougcf246v2hr923e258","status":"confirmed","summary":"Carnival / Shrove Monday","region":"French Guiana","date":"2025-03-03"},{"id":"20250304_s5cedtup6miqch2q4qipu13m0c","status":"confirmed","summary":"Carnival / Shrove Tuesday / Pancake Day","region":"French Guiana","date":"2025-03-04"},{"id":"20250305_2djrma6u60l25vb86n9j2jra1c","status":"confirmed","summary":"Carnival / Ash Wednesday","region":"French Guiana","date":"2025-03-05"},{"id":"20250330_njq65059mup7ilqq8id6t5ki0g","status":"confirmed","summary":"Laetare Sunday","region":"French Guiana","date":"2025-03-30"},{"id":"20250413_nk1rei0n0n4c9q89febm2ji5cg","status":"confirmed","summary":"Palm Sunday","region":"French Guiana","date":"2025-04-13"},{"id":"20250418_q48i0nnfpja306qjaj5jq2nimc","status":"confirmed","summary":"Good Friday","region":"French Guiana","date":"2025-04-18"},{"id":"20250420_lbq35gpdhiq032p3vmck2bajnc","status":"confirmed","summary":"Easter Sunday","region":"French Guiana","date":"2025-04-20"},{"id":"20250421_n9qtpd5eqetllrv65nmh2gu0qs","status":"confirmed","summary":"Easter Monday","region":"French Guiana","date":"2025-04-21"},{"id":"20250501_mqf941mdsnmhqkdv4drfvhune0","status":"confirmed","summary":"Labor Day / May Day","region":"French Guiana","date":"2025-05-01"},{"id":"20250508_h6ut7tt6ogad4j7metftkb0uic","status":"confirmed","summary":"Victory Day","region":"French Guiana","date":"2025-05-08"},{"id":"20250529_131l0tp9kbeuin2e2di7gn4nc0","status":"confirmed","summary":"Ascension Day","region":"French Guiana","date":"2025-05-29"},{"id":"20250608_4gr640kfkt2flf79qdtggqe6cc","status":"confirmed","summary":"Whit Sunday","region":"French Guiana","date":"2025-06-08"},{"id":"20250609_sc1db12snl862slgeah99qb070","status":"confirmed","summary":"Whit Monday","region":"French Guiana","date":"2025-06-09"},{"id":"20250610_es7slaqoq5konifhrm5i9uasi8","status":"confirmed","summary":"Abolition Day","region":"French Guiana","date":"2025-06-10"},{"id":"20250714_8umstqadtgnraekbskgk4c0t44","status":"confirmed","summary":"French National Day","region":"French Guiana","date":"2025-07-14"},{"id":"20250815_ga7n02i8e9ijc0mchs1014dh1c","status":"confirmed","summary":"Assumption of Mary","region":"French Guiana","date":"2025-08-15"},{"id":"20251101_jmon86drhoh8h89vf8a7jn12gc","status":"confirmed","summary":"All Saints\' Day","region":"French Guiana","date":"2025-11-01"},{"id":"20251102_7esbvjkojom470c2kc6u5qheo4","status":"confirmed","summary":"All Souls\' Day","region":"French Guiana","date":"2025-11-02"},{"id":"20251111_iphdnpghp1t7lbtp49jbqgoo9s","status":"confirmed","summary":"Armistice Day","region":"French Guiana","date":"2025-11-11"},{"id":"20251225_pfpjuff16bqv6ifodg5v8m2lqg","status":"confirmed","summary":"Christmas Day","region":"French Guiana","date":"2025-12-25"},{"id":"20251231_0kt6e7dg1hbjqpuo3dhppr5qv8","status":"confirmed","summary":"New Year\'s Eve","region":"French Guiana","date":"2025-12-31"}],"Guernsey":[{"id":"20240101_3tt731jbhav68otdq6h0egb6a8","status":"confirmed","summary":"New Year\'s Day","region":"Guernsey","date":"2024-01-01"},{"id":"20240329_6gmg1p2pt0u56l6b54trnnsils","status":"confirmed","summary":"Good Friday","region":"Guernsey","date":"2024-03-29"},{"id":"20240331_sa6ff6h130u6n64gaud9tpveog","status":"confirmed","summary":"Daylight Saving Time starts","region":"Guernsey","date":"2024-03-31"},{"id":"20240401_1uhpe6vkf1abcetoeuf39aaeqk","status":"confirmed","summary":"Easter Monday","region":"Guernsey","date":"2024-04-01"},{"id":"20240506_ujpfgfbgjnvolrl9apecdno158","status":"confirmed","summary":"May Day","region":"Guernsey","date":"2024-05-06"},{"id":"20240527_c3i8ianva3rsbrnhnn96nrtb3o","status":"confirmed","summary":"Spring Bank Holiday","region":"Guernsey","date":"2024-05-27"},{"id":"20241027_3tcip7o08q9vk4t0q5icv5ktjc","status":"confirmed","summary":"Daylight Saving Time ends","region":"Guernsey","date":"2024-10-27"},{"id":"20241225_cq6ktr09qus5d2h1tjt658kv64","status":"confirmed","summary":"Christmas Day","region":"Guernsey","date":"2024-12-25"},{"id":"20241226_qabvam9icakon3pdsmncee8sls","status":"confirmed","summary":"Boxing Day","region":"Guernsey","date":"2024-12-26"},{"id":"20250101_i0m1j2uf2prmk5q82po9rj620g","status":"confirmed","summary":"New Year\'s Day","region":"Guernsey","date":"2025-01-01"},{"id":"20250330_hbiqi1kejqrul2fhool9m1cla0","status":"confirmed","summary":"Daylight Saving Time starts","region":"Guernsey","date":"2025-03-30"},{"id":"20250418_imp3n1i2j47b638gs0gcfj8efc","status":"confirmed","summary":"Good Friday","region":"Guernsey","date":"2025-04-18"},{"id":"20250421_edndrrj8kpugrc1vnk36nv2k6o","status":"confirmed","summary":"Easter Monday","region":"Guernsey","date":"2025-04-21"},{"id":"20250505_vasacv2e5ptl3ofon2jbsvdcfk","status":"confirmed","summary":"May Day","region":"Guernsey","date":"2025-05-05"},{"id":"20250526_42u8pf3td3u6qpqcme1a5a078s","status":"confirmed","summary":"Spring Bank Holiday","region":"Guernsey","date":"2025-05-26"},{"id":"20251026_2eg4254145k3lc3t0kvgbgdan0","status":"confirmed","summary":"Daylight Saving Time ends","region":"Guernsey","date":"2025-10-26"},{"id":"20251225_godhrupbl7lvtau5bfr1oq5j0o","status":"confirmed","summary":"Christmas Day","region":"Guernsey","date":"2025-12-25"},{"id":"20251226_ncgtnshpqkqoge8hm7u9npiedc","status":"confirmed","summary":"Boxing Day","region":"Guernsey","date":"2025-12-26"}],"Ghana":[{"id":"20240101_jvsi950a0tij60g7ou5jlpns0c","status":"confirmed","summary":"New Year\'s Day","region":"Ghana","date":"2024-01-01"},{"id":"20240107_rv2cbddvc4t7sjnr3k1hbra624","status":"confirmed","summary":"Constitution Day","region":"Ghana","date":"2024-01-07"},{"id":"20240108_023nppi6s37fk2a0fbra3ngb5k","status":"confirmed","summary":"Day off for Constitution Day","region":"Ghana","date":"2024-01-08"},{"id":"20240306_6ak4svmlgt087lb98icug1u4ho","status":"confirmed","summary":"Independence Day","region":"Ghana","date":"2024-03-06"},{"id":"20240312_9f04qnc4gf0r7ql6ndho7lb5ms","status":"confirmed","summary":"Ramadan Start","region":"Ghana","date":"2024-03-12"},{"id":"20240329_n4gepimlhkntt1bc58ungvjdes","status":"confirmed","summary":"Good Friday","region":"Ghana","date":"2024-03-29"},{"id":"20240330_33e074o85puph3ic4amadbtsc4","status":"confirmed","summary":"Holy Saturday","region":"Ghana","date":"2024-03-30"},{"id":"20240331_mhtpksprrctl4bjqerob1ta2vk","status":"confirmed","summary":"Easter Sunday","region":"Ghana","date":"2024-03-31"},{"id":"20240401_23d6g7ic8eese5ts9sqi5ptv1o","status":"confirmed","summary":"Easter Monday","region":"Ghana","date":"2024-04-01"},{"id":"20240411_onc1shsnj4vsgutfau5pb8lk2o","status":"confirmed","summary":"Eid ul-Fitr","region":"Ghana","date":"2024-04-11"},{"id":"20240501_jemgd2qqbqpvvd8jd7mnrv7aks","status":"confirmed","summary":"May Day","region":"Ghana","date":"2024-05-01"},{"id":"20240512_u020nsqdh9uhopktmds90qkd5c","status":"confirmed","summary":"Mothers\' Day","region":"Ghana","date":"2024-05-12"},{"id":"20240525_l32dckqecmis6edqk8mp23hnoc","status":"confirmed","summary":"African Union Day","region":"Ghana","date":"2024-05-25"},{"id":"20240616_drit5756tq8ihlrdcrk4hk7494","status":"confirmed","summary":"Fathers\' Day","region":"Ghana","date":"2024-06-16"},{"id":"20240617_d5uvivt51pq5k66puvr2upc4m4","status":"confirmed","summary":"Eid al-Adha","region":"Ghana","date":"2024-06-17"},{"id":"20240701_stmlgql9pehi1qegidoqju7stg","status":"confirmed","summary":"Republic Day","region":"Ghana","date":"2024-07-01"},{"id":"20240804_igie6d3k5mq28hipphsiid1p8c","status":"confirmed","summary":"Founders\' Day","region":"Ghana","date":"2024-08-04"},{"id":"20240805_a0v2dhfp3bvh2cbqq44865sv3c","status":"confirmed","summary":"Founders\' Day observed","region":"Ghana","date":"2024-08-05"},{"id":"20240921_pdnpar22ddcmj1e56e1t2gk2f0","status":"confirmed","summary":"Kwame Nkrumah Memorial Day","region":"Ghana","date":"2024-09-21"},{"id":"20240923_detvg6fiipvnvknqmitu1rac6o","status":"confirmed","summary":"Kwame Nkrumah Memorial Day observed","region":"Ghana","date":"2024-09-23"},{"id":"20241206_qean1u8vrc164vpi9c1o2o3k38","status":"confirmed","summary":"Farmer\'s Day","region":"Ghana","date":"2024-12-06"},{"id":"20241224_5g2p3mkc24aunn9j5toqhak2ks","status":"confirmed","summary":"Christmas Eve","region":"Ghana","date":"2024-12-24"},{"id":"20241225_kehthraqovvp4f1ebcnlu9t0fs","status":"confirmed","summary":"Christmas Day","region":"Ghana","date":"2024-12-25"},{"id":"20241226_prdbrde2ik3cjuoerpr0b1n2ic","status":"confirmed","summary":"Boxing Day","region":"Ghana","date":"2024-12-26"},{"id":"20241231_1r9ob4bm43l0nr6tb3a7berh78","status":"confirmed","summary":"New Year\'s Eve","region":"Ghana","date":"2024-12-31"},{"id":"20250101_srkuib6crr3aitnkqpiod4vlqo","status":"confirmed","summary":"New Year\'s Day","region":"Ghana","date":"2025-01-01"},{"id":"20250107_6h36j6g6bm9tese9bcph5bt270","status":"confirmed","summary":"Constitution Day","region":"Ghana","date":"2025-01-07"},{"id":"20250301_ed70ggnh82nol2no4qfqs0i5rs","status":"confirmed","summary":"Ramadan Start","region":"Ghana","date":"2025-03-01"},{"id":"20250306_77jl94se4h14f27of8d6fbqa40","status":"confirmed","summary":"Independence Day","region":"Ghana","date":"2025-03-06"},{"id":"20250331_sab8b5fhlp8rtevomalibedpq4","status":"confirmed","summary":"Eid ul-Fitr","region":"Ghana","date":"2025-03-31"},{"id":"20250418_3ig2c17jv30buckjarlv37dhp8","status":"confirmed","summary":"Good Friday","region":"Ghana","date":"2025-04-18"},{"id":"20250419_ea3gvufl04be0vl6u551ilnbio","status":"confirmed","summary":"Holy Saturday","region":"Ghana","date":"2025-04-19"},{"id":"20250420_bqgtm9ni3128m2v7lhuoofs82s","status":"confirmed","summary":"Easter Sunday","region":"Ghana","date":"2025-04-20"},{"id":"20250421_tkkhrtrk2jrepqp2hvqp54ll64","status":"confirmed","summary":"Easter Monday","region":"Ghana","date":"2025-04-21"},{"id":"20250501_spe1bvoho6ogj9hana4eiehbng","status":"confirmed","summary":"May Day","region":"Ghana","date":"2025-05-01"},{"id":"20250511_o9mkvbk21t7hsjhp1erov39bdo","status":"confirmed","summary":"Mothers\' Day","region":"Ghana","date":"2025-05-11"},{"id":"20250525_nj8jjm6gqtvffnhtrp981om3ic","status":"confirmed","summary":"African Union Day","region":"Ghana","date":"2025-05-25"},{"id":"20250607_1m84ap1dotnnk9gmhv2e1jeh7k","status":"confirmed","summary":"Eid al-Adha","region":"Ghana","date":"2025-06-07"},{"id":"20250615_oa1on42jto6bj6vopu5acnlkvk","status":"confirmed","summary":"Fathers\' Day","region":"Ghana","date":"2025-06-15"},{"id":"20250701_fc7ei2n0h4o9gc3vkk2t0akpu0","status":"confirmed","summary":"Republic Day","region":"Ghana","date":"2025-07-01"},{"id":"20250804_s51ahpgj3pdqsbtfijuml1gp7k","status":"confirmed","summary":"Founders\' Day","region":"Ghana","date":"2025-08-04"},{"id":"20250921_j2m9k5819kv5ss8m3jm8rl8scg","status":"confirmed","summary":"Kwame Nkrumah Memorial Day","region":"Ghana","date":"2025-09-21"},{"id":"20250922_pfor76bvunh1ec34c41lbmv188","status":"confirmed","summary":"Kwame Nkrumah Memorial Day observed","region":"Ghana","date":"2025-09-22"},{"id":"20251205_koapg0dplbvd4uh8jigc2pj98c","status":"confirmed","summary":"Farmer\'s Day","region":"Ghana","date":"2025-12-05"},{"id":"20251224_u5f9ohql7as4quu022q64r0m3g","status":"confirmed","summary":"Christmas Eve","region":"Ghana","date":"2025-12-24"},{"id":"20251225_q88tt5mtenlm4gad9pp8src2tk","status":"confirmed","summary":"Christmas Day","region":"Ghana","date":"2025-12-25"},{"id":"20251226_9huhd36oot6hbe3tjd1co7s2p8","status":"confirmed","summary":"Boxing Day","region":"Ghana","date":"2025-12-26"},{"id":"20251231_f0l0p3v23uqcjlvj3gorvmg2ak","status":"confirmed","summary":"New Year\'s Eve","region":"Ghana","date":"2025-12-31"}],"Gibraltar":[{"id":"20240101_ov4hutc19hv1t6jau07c1v58ko","status":"confirmed","summary":"New Year\'s Day","region":"Gibraltar","date":"2024-01-01"},{"id":"20240212_belqe4mq3clhh43fbs45an4idg","status":"confirmed","summary":"Winter Midterm Bank Holiday","region":"Gibraltar","date":"2024-02-12"},{"id":"20240329_li5r0lojnpmqp2va1kadajqgo8","status":"confirmed","summary":"Good Friday","region":"Gibraltar","date":"2024-03-29"},{"id":"20240331_e6gk3u49a37ct934k53erv7fgg","status":"confirmed","summary":"Daylight Saving Time starts","region":"Gibraltar","date":"2024-03-31"},{"id":"20240331_pk88334q2aistbq9sb0d2i25bs","status":"confirmed","summary":"Easter Sunday","region":"Gibraltar","date":"2024-03-31"},{"id":"20240401_tei2a2jqvd2288bpqf568ptlfc","status":"confirmed","summary":"Easter Monday","region":"Gibraltar","date":"2024-04-01"},{"id":"20240429_8ea39di7ugl11hi2j85f5ks38k","status":"confirmed","summary":"Workers\' Memorial Day","region":"Gibraltar","date":"2024-04-29"},{"id":"20240501_hbq4su9slhj0o6omma679898mg","status":"confirmed","summary":"May Day","region":"Gibraltar","date":"2024-05-01"},{"id":"20240527_hgul7gvju22aeb84h0sdqp4vag","status":"confirmed","summary":"Spring Bank Holiday","region":"Gibraltar","date":"2024-05-27"},{"id":"20240617_u8dbj1qi0fej5atl58919onkdk","status":"confirmed","summary":"King\'s Birthday Holiday","region":"Gibraltar","date":"2024-06-17"},{"id":"20240826_aj1km4ruj47e0mti2krfo0duqc","status":"confirmed","summary":"Late Summer Bank Holiday","region":"Gibraltar","date":"2024-08-26"},{"id":"20240910_9gk3lo6lsd4co413ml198tkivk","status":"confirmed","summary":"Gibraltar Day","region":"Gibraltar","date":"2024-09-10"},{"id":"20241027_8phbn096t8p7lbefqk250e2em4","status":"confirmed","summary":"Daylight Saving Time ends","region":"Gibraltar","date":"2024-10-27"},{"id":"20241224_bdo0c623ppttetom1fmdrgdje8","status":"confirmed","summary":"Christmas Eve","region":"Gibraltar","date":"2024-12-24"},{"id":"20241225_volbteh04t622bso3672vaiin8","status":"confirmed","summary":"Christmas Day","region":"Gibraltar","date":"2024-12-25"},{"id":"20241226_ef0nmvl6mf268v077gsqh42g98","status":"confirmed","summary":"Boxing Day","region":"Gibraltar","date":"2024-12-26"},{"id":"20241231_4i7kpllj927i3u6j63nuj2e8gs","status":"confirmed","summary":"New Year\'s Eve","region":"Gibraltar","date":"2024-12-31"},{"id":"20250101_9hnde091eabv6shsr576ra97u8","status":"confirmed","summary":"New Year\'s Day","region":"Gibraltar","date":"2025-01-01"},{"id":"20250217_3hu9722306ua0se5123lma44jo","status":"confirmed","summary":"Winter Midterm Bank Holiday","region":"Gibraltar","date":"2025-02-17"},{"id":"20250330_6vrtkqekccj1innqfbr03l3fbc","status":"confirmed","summary":"Daylight Saving Time starts","region":"Gibraltar","date":"2025-03-30"},{"id":"20250418_5cri970o1bkqiei10fd72b5vqc","status":"confirmed","summary":"Good Friday","region":"Gibraltar","date":"2025-04-18"},{"id":"20250420_6mias3g1pspnrvs66afo8r14m8","status":"confirmed","summary":"Easter Sunday","region":"Gibraltar","date":"2025-04-20"},{"id":"20250421_htmiki59ojakpjnsc8gcad8m38","status":"confirmed","summary":"Easter Monday","region":"Gibraltar","date":"2025-04-21"},{"id":"20250428_t2rc6agt4rpihccn4vfdhq2onk","status":"confirmed","summary":"Workers\' Memorial Day","region":"Gibraltar","date":"2025-04-28"},{"id":"20250501_a9grvmr4q2sg8kk8s7g926140k","status":"confirmed","summary":"May Day","region":"Gibraltar","date":"2025-05-01"},{"id":"20250526_uf2h75ofrgivsn7n928udmcpdg","status":"confirmed","summary":"Spring Bank Holiday","region":"Gibraltar","date":"2025-05-26"},{"id":"20250616_8vhobobe9rrlhek0hlftj36lfg","status":"confirmed","summary":"King\'s Birthday Holiday","region":"Gibraltar","date":"2025-06-16"},{"id":"20250825_ifou6g14ksq75peatda8u65kho","status":"confirmed","summary":"Late Summer Bank Holiday","region":"Gibraltar","date":"2025-08-25"},{"id":"20250910_u5bfd0em7tj267ubiib4u4get8","status":"confirmed","summary":"Gibraltar Day","region":"Gibraltar","date":"2025-09-10"},{"id":"20251026_j79inqllent7p45sr4cdfq6jq4","status":"confirmed","summary":"Daylight Saving Time ends","region":"Gibraltar","date":"2025-10-26"},{"id":"20251224_0ef42jlu2k7nq5fldb7q35vuak","status":"confirmed","summary":"Christmas Eve","region":"Gibraltar","date":"2025-12-24"},{"id":"20251225_i0p685gis1usj954md59pfmlek","status":"confirmed","summary":"Christmas Day","region":"Gibraltar","date":"2025-12-25"},{"id":"20251226_4164esork76k59vcup0nl34kb8","status":"confirmed","summary":"Boxing Day","region":"Gibraltar","date":"2025-12-26"},{"id":"20251231_efcied0qoqunp37mcattimg8t4","status":"confirmed","summary":"New Year\'s Eve","region":"Gibraltar","date":"2025-12-31"}],"Greenland":[{"id":"20240101_8o2et2hn7ju44jgps52i9mpgj4","status":"confirmed","summary":"New Year","region":"Greenland","date":"2024-01-01"},{"id":"20240106_ik7ovbjjotstuso8h2j9dn7j3k","status":"confirmed","summary":"Epiphany","region":"Greenland","date":"2024-01-06"},{"id":"20240328_g3m751if6qm6db76garais0tts","status":"confirmed","summary":"Maundy Thursday","region":"Greenland","date":"2024-03-28"},{"id":"20240329_pc97c2q30b5i4aqsqo66tmv8q0","status":"confirmed","summary":"Good Friday","region":"Greenland","date":"2024-03-29"},{"id":"20240330_l92bns2k64jhp9fgvqbcemlne4","status":"confirmed","summary":"Daylight Saving Time starts","region":"Greenland","date":"2024-03-30"},{"id":"20240401_qa5h8o61au4hgmbg98nqfct0s0","status":"confirmed","summary":"Easter Monday","region":"Greenland","date":"2024-04-01"},{"id":"20240426_pagjiqno69fuqc4p127bs7f46g","status":"confirmed","summary":"Great Prayer Day","region":"Greenland","date":"2024-04-26"},{"id":"20240509_sn3c9qq59mbh72evknhr36hnss","status":"confirmed","summary":"Ascension Day","region":"Greenland","date":"2024-05-09"},{"id":"20240520_nkd03nibj4d9on4b3tibc57h6k","status":"confirmed","summary":"Whit Monday","region":"Greenland","date":"2024-05-20"},{"id":"20240621_kqp7gni6d4g2ci9h186626pm08","status":"confirmed","summary":"National Day","region":"Greenland","date":"2024-06-21"},{"id":"20241027_c6edj0d00junl8srkjas1gaplo","status":"confirmed","summary":"Daylight Saving Time ends","region":"Greenland","date":"2024-10-27"},{"id":"20241224_ths9661jqfrmqurdm936htgbv8","status":"confirmed","summary":"Christmas Eve","region":"Greenland","date":"2024-12-24"},{"id":"20241225_mpd5kqern082acknudrn5nlt5k","status":"confirmed","summary":"Christmas Day","region":"Greenland","date":"2024-12-25"},{"id":"20241226_a44rk6ihfs9rkj2gofss1683k4","status":"confirmed","summary":"Boxing Day","region":"Greenland","date":"2024-12-26"},{"id":"20241231_27a7i1p99sv37qt9m9ksvs9b48","status":"confirmed","summary":"New Year\'s Eve","region":"Greenland","date":"2024-12-31"},{"id":"20250101_d0reur9ffbgemjsifiid5vkblc","status":"confirmed","summary":"New Year","region":"Greenland","date":"2025-01-01"},{"id":"20250106_v30efpendh9t0pl1i41edhum7c","status":"confirmed","summary":"Epiphany","region":"Greenland","date":"2025-01-06"},{"id":"20250329_ukpl7nrk5c87hpsfro60gbmn50","status":"confirmed","summary":"Daylight Saving Time starts","region":"Greenland","date":"2025-03-29"},{"id":"20250417_jfuteq89dg3sinr79e7tv98644","status":"confirmed","summary":"Maundy Thursday","region":"Greenland","date":"2025-04-17"},{"id":"20250418_38g5iatqpng40s02qmft8rgars","status":"confirmed","summary":"Good Friday","region":"Greenland","date":"2025-04-18"},{"id":"20250421_pml4k6ba4hg04ksvjou9k506lk","status":"confirmed","summary":"Easter Monday","region":"Greenland","date":"2025-04-21"},{"id":"20250516_okm62rfdkuhodtin58n8uol2m8","status":"confirmed","summary":"Great Prayer Day","region":"Greenland","date":"2025-05-16"},{"id":"20250529_kgfa4rv3iu5mq3hqsea18clq2o","status":"confirmed","summary":"Ascension Day","region":"Greenland","date":"2025-05-29"},{"id":"20250609_3k8p6dqar8mc2spdduo7h440dc","status":"confirmed","summary":"Whit Monday","region":"Greenland","date":"2025-06-09"},{"id":"20250621_e140phnknjgbsnke1pci9d9dh8","status":"confirmed","summary":"National Day","region":"Greenland","date":"2025-06-21"},{"id":"20251026_e41obsp9kso66d261otn02ri9o","status":"confirmed","summary":"Daylight Saving Time ends","region":"Greenland","date":"2025-10-26"},{"id":"20251224_71mui3ug2jkrj8n4krbf70osek","status":"confirmed","summary":"Christmas Eve","region":"Greenland","date":"2025-12-24"},{"id":"20251225_kllklvds9m9b7onbht5jb24gcs","status":"confirmed","summary":"Christmas Day","region":"Greenland","date":"2025-12-25"},{"id":"20251226_sjhhvb6chftj5c2rij7g9k769s","status":"confirmed","summary":"Boxing Day","region":"Greenland","date":"2025-12-26"},{"id":"20251231_d8467ds8q4hn1eghlhgn5t5a6s","status":"confirmed","summary":"New Year\'s Eve","region":"Greenland","date":"2025-12-31"}],"Gambia":[{"id":"20240101_duavimkq93h4p5kim4qofgf2k4","status":"confirmed","summary":"New Year","region":"Gambia","date":"2024-01-01"},{"id":"20240218_fv0k0f2g73fe6aapcgahlgjs5g","status":"confirmed","summary":"Independence Day","region":"Gambia","date":"2024-02-18"},{"id":"20240219_qtm0h6u9uodcrq285drlsb6kug","status":"confirmed","summary":"Day off for Independence Day","region":"Gambia","date":"2024-02-19"},{"id":"20240311_r2kcotep0vera6lg6eq7nahra8","status":"confirmed","summary":"Ramadan Start","region":"Gambia","date":"2024-03-11"},{"id":"20240329_l44jjt9l51ql2h3hjcrki9giqk","status":"confirmed","summary":"Good Friday","region":"Gambia","date":"2024-03-29"},{"id":"20240401_61vmfn9lp5gfgpslvlt1s1b1kc","status":"confirmed","summary":"Easter Monday","region":"Gambia","date":"2024-04-01"},{"id":"20240405_m71q9gfa0rr191rv2sjj6t53rg","status":"confirmed","summary":"Lailat al-Qadr","region":"Gambia","date":"2024-04-05"},{"id":"20240410_km9j7eo40suj5mg3fkb8eacg18","status":"confirmed","summary":"Eid al-Fitr","region":"Gambia","date":"2024-04-10"},{"id":"20240501_h5o7jsatrqvvcfdpjt2eehpaqo","status":"confirmed","summary":"Labour Day","region":"Gambia","date":"2024-05-01"},{"id":"20240525_bc6ovu4pav5h1rdr0rou9p8j90","status":"confirmed","summary":"Africa Day","region":"Gambia","date":"2024-05-25"},{"id":"20240617_npmqcj87s7md58fng952g03ihs","status":"confirmed","summary":"Eid al-Adha","region":"Gambia","date":"2024-06-17"},{"id":"20240717_g0hp7dmckuifk3oad305dcdahk","status":"confirmed","summary":"Ashura","region":"Gambia","date":"2024-07-17"},{"id":"20240722_l54ps0n945asv5b73dqjlanjl0","status":"confirmed","summary":"Revolution Day","region":"Gambia","date":"2024-07-22"},{"id":"20240815_gj7lhqmaf740joepqa97t3oe90","status":"confirmed","summary":"Assumption of Mary","region":"Gambia","date":"2024-08-15"},{"id":"20240916_02p8b5ptgpaajupv1oh9afe2bg","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Gambia","date":"2024-09-16"},{"id":"20241225_jtai5ei1f3aa5r74dojaqs2vco","status":"confirmed","summary":"Christmas Day","region":"Gambia","date":"2024-12-25"},{"id":"20250101_qpjqlk3lbchdsbdstnp55uqsmg","status":"confirmed","summary":"New Year","region":"Gambia","date":"2025-01-01"},{"id":"20250218_so2fjh8va2k0kqbi5sm5fi8qps","status":"confirmed","summary":"Independence Day","region":"Gambia","date":"2025-02-18"},{"id":"20250301_r57hje9kla2u28277gs84rlkm0","status":"confirmed","summary":"Ramadan Start","region":"Gambia","date":"2025-03-01"},{"id":"20250326_7mo6qe3lu3h93g36cg1kiu880c","status":"confirmed","summary":"Lailat al-Qadr","region":"Gambia","date":"2025-03-26"},{"id":"20250331_rkj2v0o94o8j6t55o6h7s7anbk","status":"confirmed","summary":"Eid al-Fitr","region":"Gambia","date":"2025-03-31"},{"id":"20250418_efjqbahv3mt5cd87ihm9pi71mg","status":"confirmed","summary":"Good Friday","region":"Gambia","date":"2025-04-18"},{"id":"20250421_rvh1sd1sadqi7e79rnvg7qtnqs","status":"confirmed","summary":"Easter Monday","region":"Gambia","date":"2025-04-21"},{"id":"20250501_cpi3l915amh58jjm7upoo1bdrg","status":"confirmed","summary":"Labour Day","region":"Gambia","date":"2025-05-01"},{"id":"20250525_65727ht1nv5heahee7bm607btk","status":"confirmed","summary":"Africa Day","region":"Gambia","date":"2025-05-25"},{"id":"20250607_3gjgidrh13k3a4i4nsceu5a5l0","status":"confirmed","summary":"Eid al-Adha","region":"Gambia","date":"2025-06-07"},{"id":"20250706_2m6lq0fofn5r3k9kbdkv7npfsk","status":"confirmed","summary":"Ashura","region":"Gambia","date":"2025-07-06"},{"id":"20250722_7ahuqcelqtbt703lioc887jr08","status":"confirmed","summary":"Revolution Day","region":"Gambia","date":"2025-07-22"},{"id":"20250815_ttn349vq63p4724v3g3uo1uojc","status":"confirmed","summary":"Assumption of Mary","region":"Gambia","date":"2025-08-15"},{"id":"20250905_2t33p9hvm43c5bb1lfokgvl1o8","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Gambia","date":"2025-09-05"},{"id":"20251225_sa306m161vlm439j7gbk1p5sog","status":"confirmed","summary":"Christmas Day","region":"Gambia","date":"2025-12-25"}],"Guinea":[{"id":"20240101_n5fobagm1sc4g4kbpl8fr55d58","status":"confirmed","summary":"New Year\'s Day","region":"Guinea","date":"2024-01-01"},{"id":"20240312_8qjtq5mqsq2b6smpr8pvkqm6ps","status":"confirmed","summary":"Ramadan Start","region":"Guinea","date":"2024-03-12"},{"id":"20240401_vmn708fpdmgs4pclftn255g0jk","status":"confirmed","summary":"Easter Monday","region":"Guinea","date":"2024-04-01"},{"id":"20240403_7h8ll420fg7seohae21slgvnk0","status":"confirmed","summary":"Second Republic Day","region":"Guinea","date":"2024-04-03"},{"id":"20240405_b5qiav4db47hbv50a263vmcce0","status":"confirmed","summary":"Lailat al-Qadr","region":"Guinea","date":"2024-04-05"},{"id":"20240410_a10l81oacu7rj66cfdcikkgpn0","status":"confirmed","summary":"Eid al-Fitr","region":"Guinea","date":"2024-04-10"},{"id":"20240501_htqlhspo3uoubd9b7ds0mhonl0","status":"confirmed","summary":"Labour Day","region":"Guinea","date":"2024-05-01"},{"id":"20240525_mrb18881jlo904sqoo37h3ed7g","status":"confirmed","summary":"Africa Day","region":"Guinea","date":"2024-05-25"},{"id":"20240617_fvc6dipaq0o0lkr11gt2q4n358","status":"confirmed","summary":"Eid al-Adha","region":"Guinea","date":"2024-06-17"},{"id":"20240815_asv6eitb0e890adl9ujnjm052o","status":"confirmed","summary":"Assumption of Mary","region":"Guinea","date":"2024-08-15"},{"id":"20240916_r0cqh27q9ncnedj08b34i34jkg","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Guinea","date":"2024-09-16"},{"id":"20241002_p33a3q99b9p686c95gks41dmok","status":"confirmed","summary":"Independence Day","region":"Guinea","date":"2024-10-02"},{"id":"20241101_eceevr0e196tnkkgefdi32n7og","status":"confirmed","summary":"All Saints\' Day","region":"Guinea","date":"2024-11-01"},{"id":"20241225_oce744dgfml51ff7mdje3ld9ck","status":"confirmed","summary":"Christmas Day","region":"Guinea","date":"2024-12-25"},{"id":"20250101_9bi22m9gvo3bc8g6k7rhep0qoc","status":"confirmed","summary":"New Year\'s Day","region":"Guinea","date":"2025-01-01"},{"id":"20250301_67iot6ls36fco2sv96l4hafuvs","status":"confirmed","summary":"Ramadan Start","region":"Guinea","date":"2025-03-01"},{"id":"20250326_u8rdlodk99b3bh8mt3bdp10v90","status":"confirmed","summary":"Lailat al-Qadr","region":"Guinea","date":"2025-03-26"},{"id":"20250331_0s2dfvie9mv1o18ohmnmmdbohs","status":"confirmed","summary":"Eid al-Fitr","region":"Guinea","date":"2025-03-31"},{"id":"20250403_li9s017e78jc8fa49j9of4j8qc","status":"confirmed","summary":"Second Republic Day","region":"Guinea","date":"2025-04-03"},{"id":"20250421_lo21gbff515p1o50ujiie6kf40","status":"confirmed","summary":"Easter Monday","region":"Guinea","date":"2025-04-21"},{"id":"20250501_dd3ve2evrgoous5d0cquihqid4","status":"confirmed","summary":"Labour Day","region":"Guinea","date":"2025-05-01"},{"id":"20250525_9o7app1va35509argk01tkbqbs","status":"confirmed","summary":"Africa Day","region":"Guinea","date":"2025-05-25"},{"id":"20250607_53huemvnq7097df9hq07frmg18","status":"confirmed","summary":"Eid al-Adha","region":"Guinea","date":"2025-06-07"},{"id":"20250815_v7q9rbur312753q91s7suout7k","status":"confirmed","summary":"Assumption of Mary","region":"Guinea","date":"2025-08-15"},{"id":"20250905_lf11ovbrpvbgipf75gorgu6b0g","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Guinea","date":"2025-09-05"},{"id":"20251002_n3fjov3fifulnjgchgmhavo2cc","status":"confirmed","summary":"Independence Day","region":"Guinea","date":"2025-10-02"},{"id":"20251101_ndmk08dqh60vtukiflc7mj04a0","status":"confirmed","summary":"All Saints\' Day","region":"Guinea","date":"2025-11-01"},{"id":"20251225_hbmc8cgoi8ovh8dbbvjr6p9dmc","status":"confirmed","summary":"Christmas Day","region":"Guinea","date":"2025-12-25"}],"Guadeloupe":[{"id":"20240101_ssi4uuaqoacje1jra6h1hi4jqc","status":"confirmed","summary":"New Year\'s Day","region":"Guadeloupe","date":"2024-01-01"},{"id":"20240212_udi70gaqd0t64l4l066o08no1s","status":"confirmed","summary":"Carnival / Shrove Monday","region":"Guadeloupe","date":"2024-02-12"},{"id":"20240213_gq0kb89m25bbti22h1sckbcjig","status":"confirmed","summary":"Carnival / Shrove Tuesday / Pancake Day","region":"Guadeloupe","date":"2024-02-13"},{"id":"20240214_up8h38e8s2ibqdgn2hfsmsdh78","status":"confirmed","summary":"Carnival / Ash Wednesday","region":"Guadeloupe","date":"2024-02-14"},{"id":"20240307_v59frvvthnb6jmp977dvsa64gk","status":"confirmed","summary":"Mid Lent Thursday","region":"Guadeloupe","date":"2024-03-07"},{"id":"20240401_hrj8d9ubbocpmd0dhe0qutodu4","status":"confirmed","summary":"Easter Monday","region":"Guadeloupe","date":"2024-04-01"},{"id":"20240501_24bsj302rm2dt9id9ndv9jr38g","status":"confirmed","summary":"Labor Day / May Day","region":"Guadeloupe","date":"2024-05-01"},{"id":"20240508_ace92j6i2pedoem7d1sco2uloo","status":"confirmed","summary":"WWII Victory Day","region":"Guadeloupe","date":"2024-05-08"},{"id":"20240509_0c9472qv6tcaa3itn40cbp7940","status":"confirmed","summary":"Ascension Day","region":"Guadeloupe","date":"2024-05-09"},{"id":"20240519_nbt2j6sp951rl6ga31l2fsusuo","status":"confirmed","summary":"Whit Sunday","region":"Guadeloupe","date":"2024-05-19"},{"id":"20240520_o8igab99btnt13j3p5siqrdf2o","status":"confirmed","summary":"Whit Monday","region":"Guadeloupe","date":"2024-05-20"},{"id":"20240527_e3igriirhog6b7efqrgu1t5t7g","status":"confirmed","summary":"Abolition Day","region":"Guadeloupe","date":"2024-05-27"},{"id":"20240714_gmrd87iaja2gh0tmikqov60euc","status":"confirmed","summary":"Bastille Day","region":"Guadeloupe","date":"2024-07-14"},{"id":"20240815_hle99e7r7lec1qmmfeltjch46k","status":"confirmed","summary":"Assumption of Mary","region":"Guadeloupe","date":"2024-08-15"},{"id":"20241101_tptmrjc0b0aq4hprbhp343oba4","status":"confirmed","summary":"All Saints\' Day","region":"Guadeloupe","date":"2024-11-01"},{"id":"20241111_qsuaed825aih9s5s4gpeqndfn8","status":"confirmed","summary":"Armistice Day","region":"Guadeloupe","date":"2024-11-11"},{"id":"20241224_4o90a23p7klojm15in5ndnsddg","status":"confirmed","summary":"Christmas Eve","region":"Guadeloupe","date":"2024-12-24"},{"id":"20241225_dcbu9fpa822k78g180sd5mfpl4","status":"confirmed","summary":"Christmas Day","region":"Guadeloupe","date":"2024-12-25"},{"id":"20241231_gjo0oeqmrd0c0o3iugavvi0qtk","status":"confirmed","summary":"New Year\'s Eve","region":"Guadeloupe","date":"2024-12-31"},{"id":"20250101_i4hverpujsr2vcjrqbu6pb9ql4","status":"confirmed","summary":"New Year\'s Day","region":"Guadeloupe","date":"2025-01-01"},{"id":"20250303_0rqel3k6jht5kqihmgjcl331k4","status":"confirmed","summary":"Carnival / Shrove Monday","region":"Guadeloupe","date":"2025-03-03"},{"id":"20250304_kcm8fmog0vtdmmiifk81enlk9k","status":"confirmed","summary":"Carnival / Shrove Tuesday / Pancake Day","region":"Guadeloupe","date":"2025-03-04"},{"id":"20250305_5ivik2jtu5pla8unh0n89vk2bo","status":"confirmed","summary":"Carnival / Ash Wednesday","region":"Guadeloupe","date":"2025-03-05"},{"id":"20250327_19null1a48n7c5bg0eo1psn1nc","status":"confirmed","summary":"Mid Lent Thursday","region":"Guadeloupe","date":"2025-03-27"},{"id":"20250421_i3hsvh6lput8iea0lo46ioba6s","status":"confirmed","summary":"Easter Monday","region":"Guadeloupe","date":"2025-04-21"},{"id":"20250501_b4tfhb9bufrjomktmrf6s20e6k","status":"confirmed","summary":"Labor Day / May Day","region":"Guadeloupe","date":"2025-05-01"},{"id":"20250508_ll787a8dlsmb0o9oi4ppsdulro","status":"confirmed","summary":"WWII Victory Day","region":"Guadeloupe","date":"2025-05-08"},{"id":"20250527_u25msirkli0e6vsqvopl77i5pk","status":"confirmed","summary":"Abolition Day","region":"Guadeloupe","date":"2025-05-27"},{"id":"20250529_peh24smqq5tu7e4ttvcrh6t3bk","status":"confirmed","summary":"Ascension Day","region":"Guadeloupe","date":"2025-05-29"},{"id":"20250608_gguncfr3s73cgc5602venvaui8","status":"confirmed","summary":"Whit Sunday","region":"Guadeloupe","date":"2025-06-08"},{"id":"20250609_pprm4tt33fus9e00593jl1u27o","status":"confirmed","summary":"Whit Monday","region":"Guadeloupe","date":"2025-06-09"},{"id":"20250714_61trld9mmgs3a5he05cqebodp8","status":"confirmed","summary":"Bastille Day","region":"Guadeloupe","date":"2025-07-14"},{"id":"20250815_u0goue65sk6ibjq7l9cig5nho4","status":"confirmed","summary":"Assumption of Mary","region":"Guadeloupe","date":"2025-08-15"},{"id":"20251101_0cce9ttves8s51f5opschr5ins","status":"confirmed","summary":"All Saints\' Day","region":"Guadeloupe","date":"2025-11-01"},{"id":"20251111_67pis8a3r2jogf3uupsr67iv08","status":"confirmed","summary":"Armistice Day","region":"Guadeloupe","date":"2025-11-11"},{"id":"20251224_gddtc39d7lls8fef4sidkitu0g","status":"confirmed","summary":"Christmas Eve","region":"Guadeloupe","date":"2025-12-24"},{"id":"20251225_kv3kttgmf5cb6djtn07bcsheq4","status":"confirmed","summary":"Christmas Day","region":"Guadeloupe","date":"2025-12-25"},{"id":"20251231_e9966c75rd8defdjq9n661cfdk","status":"confirmed","summary":"New Year\'s Eve","region":"Guadeloupe","date":"2025-12-31"}],"Equatorial Guinea":[{"id":"20240101_a7ivo8me2ccp7bk4sgd99ejn28","status":"confirmed","summary":"New Year\'s Day","region":"Equatorial Guinea","date":"2024-01-01"},{"id":"20240123_8qnf4vg8jrkmp3hsrhg55gmn04","status":"confirmed","summary":"AFCON Victory Against Ivory Coast","region":"Equatorial Guinea","date":"2024-01-23"},{"id":"20240328_876b1luu4smgpdkhar1t6b4vus","status":"confirmed","summary":"Maundy Thursday","region":"Equatorial Guinea","date":"2024-03-28"},{"id":"20240329_955qflc7357rhgg5c97sm45css","status":"confirmed","summary":"Good Friday","region":"Equatorial Guinea","date":"2024-03-29"},{"id":"20240501_17jkrav8ol7881esqvj10ig5u0","status":"confirmed","summary":"Labor Day / May Day","region":"Equatorial Guinea","date":"2024-05-01"},{"id":"20240530_j0ijdqjaise0ebkocvnompslfo","status":"confirmed","summary":"Corpus Christi","region":"Equatorial Guinea","date":"2024-05-30"},{"id":"20240605_h25e4q9kc70soj71n1qa3lnh5g","status":"confirmed","summary":"President\'s Day","region":"Equatorial Guinea","date":"2024-06-05"},{"id":"20240803_o2qhjvb4c3fsh5dntmatao4ld8","status":"confirmed","summary":"Freedom Day","region":"Equatorial Guinea","date":"2024-08-03"},{"id":"20240815_fs7he94via378pfsq23cj246vo","status":"confirmed","summary":"Constitution Day","region":"Equatorial Guinea","date":"2024-08-15"},{"id":"20241012_0ge5fkkfq0tlve1aleald0ibkg","status":"confirmed","summary":"Independence Day","region":"Equatorial Guinea","date":"2024-10-12"},{"id":"20241208_i14mobosln908rus4uqlfgesfg","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Equatorial Guinea","date":"2024-12-08"},{"id":"20241209_nk1j04arsofaog4udr016rc9l0","status":"confirmed","summary":"Feast of the Immaculate Conception observed","region":"Equatorial Guinea","date":"2024-12-09"},{"id":"20241210_m3f6kn5o9ol5ku2q84s5og91g8","status":"confirmed","summary":"Human Rights Day","region":"Equatorial Guinea","date":"2024-12-10"},{"id":"20241224_j8tjobrtkbv8n4llnba1hfd41k","status":"confirmed","summary":"Christmas Eve","region":"Equatorial Guinea","date":"2024-12-24"},{"id":"20241225_u6qigvj61g0r6eo3alqj16inck","status":"confirmed","summary":"Christmas Day","region":"Equatorial Guinea","date":"2024-12-25"},{"id":"20241231_k6iq5lljnm0e5nv45brgq2l7f8","status":"confirmed","summary":"New Year\'s Eve","region":"Equatorial Guinea","date":"2024-12-31"},{"id":"20250101_30omcd0g19i5tsmd1sjgd7to6c","status":"confirmed","summary":"New Year\'s Day","region":"Equatorial Guinea","date":"2025-01-01"},{"id":"20250417_oe4u1bkt789oi8t3o81k8k6of4","status":"confirmed","summary":"Maundy Thursday","region":"Equatorial Guinea","date":"2025-04-17"},{"id":"20250418_msltnu77l4arboukj2b2sdog0o","status":"confirmed","summary":"Good Friday","region":"Equatorial Guinea","date":"2025-04-18"},{"id":"20250501_s1f5tjhank3qtt17i6aje3ck8g","status":"confirmed","summary":"Labor Day / May Day","region":"Equatorial Guinea","date":"2025-05-01"},{"id":"20250605_gk3m60lvl5aduklg8osg949t1g","status":"confirmed","summary":"President\'s Day","region":"Equatorial Guinea","date":"2025-06-05"},{"id":"20250619_sh6q5e0un33al0iump31jqoqj8","status":"confirmed","summary":"Corpus Christi","region":"Equatorial Guinea","date":"2025-06-19"},{"id":"20250803_t4g9j7thhp3l1i8qq4ldgdpves","status":"confirmed","summary":"Freedom Day","region":"Equatorial Guinea","date":"2025-08-03"},{"id":"20250804_9qdtmck49eq3drjhhd9n9jhu2o","status":"confirmed","summary":"Freedom Day observed","region":"Equatorial Guinea","date":"2025-08-04"},{"id":"20250815_5oir0f15pnrh7gjnpm07r0c7no","status":"confirmed","summary":"Constitution Day","region":"Equatorial Guinea","date":"2025-08-15"},{"id":"20251012_otaijss7enm4sau84tj3i0gn2c","status":"confirmed","summary":"Independence Day","region":"Equatorial Guinea","date":"2025-10-12"},{"id":"20251013_aqmhm8hicrim81dhj6mtru1t34","status":"confirmed","summary":"Independence Day observed","region":"Equatorial Guinea","date":"2025-10-13"},{"id":"20251208_npiu8lggqef8d0kraqprql5l84","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Equatorial Guinea","date":"2025-12-08"},{"id":"20251210_bh4esvcp07sf7qgsoicfe4p420","status":"confirmed","summary":"Human Rights Day","region":"Equatorial Guinea","date":"2025-12-10"},{"id":"20251224_m8mlccd0dtrlo6n5r1vd4a5cv8","status":"confirmed","summary":"Christmas Eve","region":"Equatorial Guinea","date":"2025-12-24"},{"id":"20251225_39bk69nkusv5re40algsgudq0s","status":"confirmed","summary":"Christmas Day","region":"Equatorial Guinea","date":"2025-12-25"},{"id":"20251231_lmv5n628vvm3iv3fpl6u1balsg","status":"confirmed","summary":"New Year\'s Eve","region":"Equatorial Guinea","date":"2025-12-31"}],"Greece":[{"id":"20240101_n6a1v87buai41tq01jdmtr6f1s","status":"confirmed","summary":"New Year\'s Day","region":"Greece","date":"2024-01-01"},{"id":"20240106_kgpvmse3oveg1nqec164cfrg60","status":"confirmed","summary":"Epiphany","region":"Greece","date":"2024-01-06"},{"id":"20240130_h0j7shdo5b271tvuussjrhh214","status":"confirmed","summary":"The Three Holy Hierarchs","region":"Greece","date":"2024-01-30"},{"id":"20240214_a16j8ap8vj2clean1m32pi20ac","status":"confirmed","summary":"Valentine\'s Day","region":"Greece","date":"2024-02-14"},{"id":"20240318_fa3mfshqhk8bekbnok6phiougs","status":"confirmed","summary":"Clean Monday","region":"Greece","date":"2024-03-18"},{"id":"20240325_fdocp95jv87fu5h5d2a5p7gc2c","status":"confirmed","summary":"Annunciation of the Virgin Mary","region":"Greece","date":"2024-03-25"},{"id":"20240325_sj5f3j16h66d6oingitiuj0c74","status":"confirmed","summary":"Greek Independence Day","region":"Greece","date":"2024-03-25"},{"id":"20240501_1vdl4nige57d9b2bmrkc0as4oo","status":"confirmed","summary":"Labor Day / May Day","region":"Greece","date":"2024-05-01"},{"id":"20240503_um4akofqt67p8fv31c2a1ec5i0","status":"confirmed","summary":"Orthodox Good Friday","region":"Greece","date":"2024-05-03"},{"id":"20240505_6dkgcmfdu17usebdsjmibn1f5k","status":"confirmed","summary":"Orthodox Easter Sunday","region":"Greece","date":"2024-05-05"},{"id":"20240506_8blb98ng11586g4fsmv86g5eqc","status":"confirmed","summary":"Orthodox Easter Monday","region":"Greece","date":"2024-05-06"},{"id":"20240507_ou2q6a04s1u952q2m1tg37aqn0","status":"confirmed","summary":"Labor Day / May Day","region":"Greece","date":"2024-05-07"},{"id":"20240512_ebnfs9mireu4rtdboodqbi5iik","status":"confirmed","summary":"Mother’s Day","region":"Greece","date":"2024-05-12"},{"id":"20240616_6ihgeiumcg5v5tmgi4jf5v9lm4","status":"confirmed","summary":"Father\'s Day","region":"Greece","date":"2024-06-16"},{"id":"20240623_ttcrglccl82l0ni8kptiuk46g8","status":"confirmed","summary":"Orthodox Holy Spirit Sunday","region":"Greece","date":"2024-06-23"},{"id":"20240624_72inj17s1v73ai4m510tu8opuk","status":"confirmed","summary":"Orthodox Holy Spirit Monday","region":"Greece","date":"2024-06-24"},{"id":"20240724_ho2kfm1bbb57hsu2kriejf3jt0","status":"confirmed","summary":"The Restoration of Democracy","region":"Greece","date":"2024-07-24"},{"id":"20240815_r43ugmgga14sal55o6a2gjor7g","status":"confirmed","summary":"Dormition of the Holy Virgin","region":"Greece","date":"2024-08-15"},{"id":"20241028_hckrgikdguf3s51orbrg567f10","status":"confirmed","summary":"The Ochi day","region":"Greece","date":"2024-10-28"},{"id":"20241117_d79s5q63irgdl6e93pp08qntu8","status":"confirmed","summary":"Polytechneio","region":"Greece","date":"2024-11-17"},{"id":"20241121_kf0clq7iv51g2os1rbo670sk30","status":"confirmed","summary":"Armed Forces Day","region":"Greece","date":"2024-11-21"},{"id":"20241225_n7hhesp8nvq2vj4naphbees8sg","status":"confirmed","summary":"Christmas Day","region":"Greece","date":"2024-12-25"},{"id":"20241226_dt8t596a9u0c1j1met05urtmko","status":"confirmed","summary":"Synaxis of the Mother of God","region":"Greece","date":"2024-12-26"},{"id":"20250101_b46mg09t0ut078ee60idb1ta2o","status":"confirmed","summary":"New Year\'s Day","region":"Greece","date":"2025-01-01"},{"id":"20250106_fh9ehcbk610glg5av4av1jtbto","status":"confirmed","summary":"Epiphany","region":"Greece","date":"2025-01-06"},{"id":"20250130_9666a6ov64rb1iqkbja5s2i38c","status":"confirmed","summary":"The Three Holy Hierarchs","region":"Greece","date":"2025-01-30"},{"id":"20250214_orsdfoq68kjm40lg5rmu2t1l1c","status":"confirmed","summary":"Valentine\'s Day","region":"Greece","date":"2025-02-14"},{"id":"20250303_80fvdbtav0b15l5oecvch8fm8c","status":"confirmed","summary":"Clean Monday","region":"Greece","date":"2025-03-03"},{"id":"20250325_6f952dco0uggkcsoc0kksp5ri4","status":"confirmed","summary":"Annunciation of the Virgin Mary","region":"Greece","date":"2025-03-25"},{"id":"20250325_6h23bei2b114h3sv6jqc006b4g","status":"confirmed","summary":"Greek Independence Day","region":"Greece","date":"2025-03-25"},{"id":"20250418_v5tkc8hrefpu7p7cri01h4qke4","status":"confirmed","summary":"Orthodox Good Friday","region":"Greece","date":"2025-04-18"},{"id":"20250420_nh90hr0779865od3gdhibsacm8","status":"confirmed","summary":"Orthodox Easter Sunday","region":"Greece","date":"2025-04-20"},{"id":"20250421_eskhsenhqf5chlp6fvvsp9vfa0","status":"confirmed","summary":"Orthodox Easter Monday","region":"Greece","date":"2025-04-21"},{"id":"20250501_7js8icpqgokfs4kmgat1q762fg","status":"confirmed","summary":"Labor Day / May Day","region":"Greece","date":"2025-05-01"},{"id":"20250511_g143mi53opnno752j08oklb0u4","status":"confirmed","summary":"Mother’s Day","region":"Greece","date":"2025-05-11"},{"id":"20250608_22r95dnnkqce6bv98gqh63h82c","status":"confirmed","summary":"Orthodox Holy Spirit Sunday","region":"Greece","date":"2025-06-08"},{"id":"20250609_ilpacc8pnmbeiu70sf9nqnfcco","status":"confirmed","summary":"Orthodox Holy Spirit Monday","region":"Greece","date":"2025-06-09"},{"id":"20250615_ia89s8mposmst3kapp0in4816c","status":"confirmed","summary":"Father\'s Day","region":"Greece","date":"2025-06-15"},{"id":"20250724_gdsrmgvhv4jbcs4nupfo2acs74","status":"confirmed","summary":"The Restoration of Democracy","region":"Greece","date":"2025-07-24"},{"id":"20250815_qh4scvjadhces4njk7trh98enk","status":"confirmed","summary":"Dormition of the Holy Virgin","region":"Greece","date":"2025-08-15"},{"id":"20251028_ku9rd3c6jf9em5m1sk6bef6p4k","status":"confirmed","summary":"The Ochi day","region":"Greece","date":"2025-10-28"},{"id":"20251117_ndf0jlfahpdqrrqok7aljt8gn8","status":"confirmed","summary":"Polytechneio","region":"Greece","date":"2025-11-17"},{"id":"20251121_5qi9b8t5l70haii28clofmetsg","status":"confirmed","summary":"Armed Forces Day","region":"Greece","date":"2025-11-21"},{"id":"20251225_8ukd7ffc0seq57a14hq8h32ogg","status":"confirmed","summary":"Christmas Day","region":"Greece","date":"2025-12-25"},{"id":"20251226_r0dmiss392rfo4jm5vdu7fsgq0","status":"confirmed","summary":"Synaxis of the Mother of God","region":"Greece","date":"2025-12-26"}],"Guatemala":[{"id":"20240101_etl152csue3ake03ebqfmhsvao","status":"confirmed","summary":"New Year\'s Day","region":"Guatemala","date":"2024-01-01"},{"id":"20240328_5b0ifa1akmha36ccefnk0o2iug","status":"confirmed","summary":"Maundy Thursday","region":"Guatemala","date":"2024-03-28"},{"id":"20240329_jku3aee5gqk0o5j6km37644ttc","status":"confirmed","summary":"Good Friday","region":"Guatemala","date":"2024-03-29"},{"id":"20240330_5fekebt2hrhhu39b37c9cmbom8","status":"confirmed","summary":"Easter Saturday","region":"Guatemala","date":"2024-03-30"},{"id":"20240331_l869j6h4re6kkhqs4nok5b5lgk","status":"confirmed","summary":"Easter Sunday","region":"Guatemala","date":"2024-03-31"},{"id":"20240401_q3n7f9gd02jesa51357src0lt8","status":"confirmed","summary":"Easter Monday","region":"Guatemala","date":"2024-04-01"},{"id":"20240501_pgijvaouald1mc1ibqdsup0ees","status":"confirmed","summary":"Labor Day","region":"Guatemala","date":"2024-05-01"},{"id":"20240510_76m87j4oncla89n78pes4lege8","status":"confirmed","summary":"Mothers’ Day (Working Mothers Only)","region":"Guatemala","date":"2024-05-10"},{"id":"20240630_6jgu8piahg807ve63ssmtmnna4","status":"confirmed","summary":"Army Day","region":"Guatemala","date":"2024-06-30"},{"id":"20240701_5f3gs9el66e7ldt4o22vlb89vo","status":"confirmed","summary":"Army Day Holiday","region":"Guatemala","date":"2024-07-01"},{"id":"20240915_ns312fe8gmtpt4h4cosf234g3k","status":"confirmed","summary":"Independence Day","region":"Guatemala","date":"2024-09-15"},{"id":"20241020_i70jr886invp36g15h43o6gth4","status":"confirmed","summary":"Revolution of 1944","region":"Guatemala","date":"2024-10-20"},{"id":"20241101_a33bvbprfi23oudnh7jc7evf30","status":"confirmed","summary":"All Saints\' Day","region":"Guatemala","date":"2024-11-01"},{"id":"20241224_8vosbnvsf4qojg2aodu8jc2a9s","status":"confirmed","summary":"Christmas Eve","region":"Guatemala","date":"2024-12-24"},{"id":"20241225_5bmr0o5j5d5cablugqnh88hois","status":"confirmed","summary":"Christmas Day","region":"Guatemala","date":"2024-12-25"},{"id":"20241231_30vcj98tc71marr51q9jd7u704","status":"confirmed","summary":"New Year\'s Eve","region":"Guatemala","date":"2024-12-31"},{"id":"20250101_oj7rsm9mk748ap8qbirc5bfhic","status":"confirmed","summary":"New Year\'s Day","region":"Guatemala","date":"2025-01-01"},{"id":"20250417_rhitqeh78b80bmjle1uknft7qk","status":"confirmed","summary":"Maundy Thursday","region":"Guatemala","date":"2025-04-17"},{"id":"20250418_gaufd28hd44hqb5v4i7qh2f340","status":"confirmed","summary":"Good Friday","region":"Guatemala","date":"2025-04-18"},{"id":"20250419_ovtrbfvog0v3nb06bn72m4lepk","status":"confirmed","summary":"Easter Saturday","region":"Guatemala","date":"2025-04-19"},{"id":"20250420_1ek4vge7i0iad46ntfvmouvvmk","status":"confirmed","summary":"Easter Sunday","region":"Guatemala","date":"2025-04-20"},{"id":"20250421_0s285f3gn8ca9dno362l8jqed4","status":"confirmed","summary":"Easter Monday","region":"Guatemala","date":"2025-04-21"},{"id":"20250501_9rba6fj2lu402f8m847tahouao","status":"confirmed","summary":"Labor Day","region":"Guatemala","date":"2025-05-01"},{"id":"20250510_keud0gqu4fapidtl9noq7em1qg","status":"confirmed","summary":"Mothers’ Day (Working Mothers Only)","region":"Guatemala","date":"2025-05-10"},{"id":"20250630_k1rde01sudsmkqa9hmsn6d9vrg","status":"confirmed","summary":"Army Day Holiday","region":"Guatemala","date":"2025-06-30"},{"id":"20250915_tnq6a9ma0pi1ht1etndjniul40","status":"confirmed","summary":"Independence Day","region":"Guatemala","date":"2025-09-15"},{"id":"20251020_4cmvm8e5eo3o2il1r2kusoba04","status":"confirmed","summary":"Revolution of 1944","region":"Guatemala","date":"2025-10-20"},{"id":"20251101_tsgitig5m7j3n1rdvm1k8u0ais","status":"confirmed","summary":"All Saints\' Day","region":"Guatemala","date":"2025-11-01"},{"id":"20251224_uccsuskjgb4f1q4ordok9oc4ok","status":"confirmed","summary":"Christmas Eve","region":"Guatemala","date":"2025-12-24"},{"id":"20251225_utuipqqs5f2n1jj2jatmc80jmc","status":"confirmed","summary":"Christmas Day","region":"Guatemala","date":"2025-12-25"},{"id":"20251231_qiebjts4utjk9mok1icj6ut6ok","status":"confirmed","summary":"New Year\'s Eve","region":"Guatemala","date":"2025-12-31"}],"Guam":[{"id":"20240101_0l67vqfprflv5ndeunidko0rug","status":"confirmed","summary":"New Year","region":"Guam","date":"2024-01-01"},{"id":"20240115_ro62l6td6oeahqlbh1dnf99ar4","status":"confirmed","summary":"Martin Luther King Jr. Day","region":"Guam","date":"2024-01-15"},{"id":"20240304_v49i1klq7n5fmi6hetlijl5am0","status":"confirmed","summary":"Guam History and Chamorro Heritage Day","region":"Guam","date":"2024-03-04"},{"id":"20240527_a91q1s6hmesl9qi6nmqmp02nao","status":"confirmed","summary":"Memorial Day","region":"Guam","date":"2024-05-27"},{"id":"20240704_d9hapshsdm1uu7vrrsnf9gj81c","status":"confirmed","summary":"Independence Day","region":"Guam","date":"2024-07-04"},{"id":"20240721_u3fv8cjqo8qt9r5hleqrf9q4rs","status":"confirmed","summary":"Liberation Day","region":"Guam","date":"2024-07-21"},{"id":"20240722_euh1jcqi23sn3hdaehd54na7i0","status":"confirmed","summary":"Liberation Day observed","region":"Guam","date":"2024-07-22"},{"id":"20240902_u8eq8fb8ivam6noevjeutfcrhs","status":"confirmed","summary":"Labor Day","region":"Guam","date":"2024-09-02"},{"id":"20241101_v1l4gopml927236mdnom6712p0","status":"confirmed","summary":"All Souls\' Day observed","region":"Guam","date":"2024-11-01"},{"id":"20241102_mm9v9sfv69dfemptdt4pnu3srg","status":"confirmed","summary":"All Souls\' Day","region":"Guam","date":"2024-11-02"},{"id":"20241111_nrbojk5v9p8uvm56biuhb1kk3s","status":"confirmed","summary":"Veterans Day","region":"Guam","date":"2024-11-11"},{"id":"20241128_n88j1bn4s5cbft2t90rta6soo0","status":"confirmed","summary":"Thanksgiving","region":"Guam","date":"2024-11-28"},{"id":"20241208_aqn7pkkf0m01svn982knmb23gk","status":"confirmed","summary":"Santa Marian Kamalen Day","region":"Guam","date":"2024-12-08"},{"id":"20241209_13sbrunhbba4fgu1agfn4a9ebs","status":"confirmed","summary":"Santa Marian Kamalen Day observed","region":"Guam","date":"2024-12-09"},{"id":"20241225_9ool77s356ap1go55kaq2pr5q0","status":"confirmed","summary":"Christmas Day","region":"Guam","date":"2024-12-25"},{"id":"20250101_83hke6ohf3qh5gffohec33ot3c","status":"confirmed","summary":"New Year","region":"Guam","date":"2025-01-01"},{"id":"20250120_3f2p1d7etgehvkfu6li3nqas9c","status":"confirmed","summary":"Martin Luther King Jr. Day","region":"Guam","date":"2025-01-20"},{"id":"20250303_vqi44o7rq6rj20nh2nm23ogpe8","status":"confirmed","summary":"Guam History and Chamorro Heritage Day","region":"Guam","date":"2025-03-03"},{"id":"20250526_sv3tq3bto0v37iu2na6s0ncoos","status":"confirmed","summary":"Memorial Day","region":"Guam","date":"2025-05-26"},{"id":"20250704_p86nhvsld6ije2mu0el7199vfs","status":"confirmed","summary":"Independence Day","region":"Guam","date":"2025-07-04"},{"id":"20250721_dev3ditkn1onu59vnn0eun8kdo","status":"confirmed","summary":"Liberation Day","region":"Guam","date":"2025-07-21"},{"id":"20250901_5r015scclvarsii2g7247bqq0g","status":"confirmed","summary":"Labor Day","region":"Guam","date":"2025-09-01"},{"id":"20251102_8bmc8sbqcaato96e31gphjfe1c","status":"confirmed","summary":"All Souls\' Day","region":"Guam","date":"2025-11-02"},{"id":"20251103_ldotvof5obj3mpsj2e541ivojo","status":"confirmed","summary":"All Souls\' Day observed","region":"Guam","date":"2025-11-03"},{"id":"20251111_ku7d8qq2vu500i8dka47fj24p4","status":"confirmed","summary":"Veterans Day","region":"Guam","date":"2025-11-11"},{"id":"20251127_bcpsd58gmd58m8nvs7tm9627dg","status":"confirmed","summary":"Thanksgiving","region":"Guam","date":"2025-11-27"},{"id":"20251208_ahvf7g10lcqdj2g2vfp145m1gg","status":"confirmed","summary":"Santa Marian Kamalen Day","region":"Guam","date":"2025-12-08"},{"id":"20251225_a44qa6d21u2cr280nvtdhifse8","status":"confirmed","summary":"Christmas Day","region":"Guam","date":"2025-12-25"}],"Guinea-Bissau":[{"id":"20240101_kba3298jd0bghk38el4kod4jac","status":"confirmed","summary":"New Year","region":"Guinea-Bissau","date":"2024-01-01"},{"id":"20240120_cv4om4grmtsef1pm2ds7teod24","status":"confirmed","summary":"Heroes Day","region":"Guinea-Bissau","date":"2024-01-20"},{"id":"20240308_tiu18a7lbgfn1deo86p9uahoq0","status":"confirmed","summary":"International Women\'s Day","region":"Guinea-Bissau","date":"2024-03-08"},{"id":"20240311_q3arasom96b9oma9ptdrrr9b68","status":"confirmed","summary":"Ramadan Start","region":"Guinea-Bissau","date":"2024-03-11"},{"id":"20240331_vhchgqpgh6nk6rkppjeiqahtcc","status":"confirmed","summary":"Easter Sunday","region":"Guinea-Bissau","date":"2024-03-31"},{"id":"20240410_obql1hadfdc3nj8db03ce65ho0","status":"confirmed","summary":"Eid al-Fitr","region":"Guinea-Bissau","date":"2024-04-10"},{"id":"20240501_3iokiqua80hpjjasbrqd232r9s","status":"confirmed","summary":"Labour Day","region":"Guinea-Bissau","date":"2024-05-01"},{"id":"20240617_loa30l3o3p5v98t4r0mcmr3e9g","status":"confirmed","summary":"Eid al-Adha","region":"Guinea-Bissau","date":"2024-06-17"},{"id":"20240924_ktmt0d8rf5s2bii7p62vu87d2s","status":"confirmed","summary":"Independence Day (National Day)","region":"Guinea-Bissau","date":"2024-09-24"},{"id":"20241225_jnfaajuv7lqhkkqgh7bb439ss8","status":"confirmed","summary":"Christmas Day","region":"Guinea-Bissau","date":"2024-12-25"},{"id":"20250101_t2u8eppb0hme5lvriiojsj9nf4","status":"confirmed","summary":"New Year","region":"Guinea-Bissau","date":"2025-01-01"},{"id":"20250120_iknmm1d5kdhhn0tj5uikdgq21c","status":"confirmed","summary":"Heroes Day","region":"Guinea-Bissau","date":"2025-01-20"},{"id":"20250301_l46pgrhv76dsaqhjjnk1dv7mgo","status":"confirmed","summary":"Ramadan Start","region":"Guinea-Bissau","date":"2025-03-01"},{"id":"20250308_56dno65eh6fojiduht6sqv2utc","status":"confirmed","summary":"International Women\'s Day","region":"Guinea-Bissau","date":"2025-03-08"},{"id":"20250331_bio8n5qq3kic8lpg62gl9fhs54","status":"confirmed","summary":"Eid al-Fitr","region":"Guinea-Bissau","date":"2025-03-31"},{"id":"20250420_o5n2g4eqslb45f61keoc4u667g","status":"confirmed","summary":"Easter Sunday","region":"Guinea-Bissau","date":"2025-04-20"},{"id":"20250501_kg7719viumkci791matggpkef0","status":"confirmed","summary":"Labour Day","region":"Guinea-Bissau","date":"2025-05-01"},{"id":"20250607_cqa4rf9cedvfn5houlvivaed18","status":"confirmed","summary":"Eid al-Adha","region":"Guinea-Bissau","date":"2025-06-07"},{"id":"20250924_0m720nbs0s2c23dg9el7itr27k","status":"confirmed","summary":"Independence Day (National Day)","region":"Guinea-Bissau","date":"2025-09-24"},{"id":"20251225_5i35dhfl9ujc2nla7fic51euvc","status":"confirmed","summary":"Christmas Day","region":"Guinea-Bissau","date":"2025-12-25"}],"Guyana":[{"id":"20240101_i18udgf7gso5mispnvsa5l0uoo","status":"confirmed","summary":"New Year\'s Day Holiday","region":"Guyana","date":"2024-01-01"},{"id":"20240223_3f93qukp42eh3l1vhj9t6p52rs","status":"confirmed","summary":"Mashramani (Republic Day)","region":"Guyana","date":"2024-02-23"},{"id":"20240325_3ndkdmqducj8qmhraanm8vdh7c","status":"confirmed","summary":"Phagwah (Holi)","region":"Guyana","date":"2024-03-25"},{"id":"20240329_p76iedae4t37i3d1j9v69nil2k","status":"confirmed","summary":"Good Friday","region":"Guyana","date":"2024-03-29"},{"id":"20240401_52g1r3rmga1k99pq3pu24657d4","status":"confirmed","summary":"Easter Monday","region":"Guyana","date":"2024-04-01"},{"id":"20240501_ivkp0f8svbcso7gqqrjd0qom8k","status":"confirmed","summary":"Labor Day / May Day","region":"Guyana","date":"2024-05-01"},{"id":"20240505_poilb8e9fdpf4mphipim9rs1d4","status":"confirmed","summary":"Arrival Day","region":"Guyana","date":"2024-05-05"},{"id":"20240506_bhmtcclo7lcjkchtpsjgpom6c4","status":"confirmed","summary":"Day off for Arrival Day","region":"Guyana","date":"2024-05-06"},{"id":"20240526_u1ssd6mp2ejcliobssso9h9v0g","status":"confirmed","summary":"Independence Day","region":"Guyana","date":"2024-05-26"},{"id":"20240527_3s0hu0j4lipcv0p825ililvqn0","status":"confirmed","summary":"Day off for Independence Day","region":"Guyana","date":"2024-05-27"},{"id":"20240617_8upp05u7pdp8i9nrdt52mdvl4s","status":"confirmed","summary":"Eid al-Adha","region":"Guyana","date":"2024-06-17"},{"id":"20240701_73qe2fdn59sf95fv9i85phqnt8","status":"confirmed","summary":"CARICOM Day","region":"Guyana","date":"2024-07-01"},{"id":"20240801_jcon8k75rnv7022v5ao3m6mbic","status":"confirmed","summary":"Emancipation Day","region":"Guyana","date":"2024-08-01"},{"id":"20240916_p04vafiso3dlple7fli0mnpe5g","status":"confirmed","summary":"Youman-Nabi (Mawlid)","region":"Guyana","date":"2024-09-16"},{"id":"20241031_idcdggld0n8cranv3dqbcl4up4","status":"confirmed","summary":"Deepavali","region":"Guyana","date":"2024-10-31"},{"id":"20241225_92r7m8l5q21f11umsm6e913fdk","status":"confirmed","summary":"Christmas Day","region":"Guyana","date":"2024-12-25"},{"id":"20241226_notep8orrb4hqsggasc6h2t294","status":"confirmed","summary":"Boxing Day","region":"Guyana","date":"2024-12-26"},{"id":"20250101_7kjltml3dqfj3ichhv4u7sm3n0","status":"confirmed","summary":"New Year\'s Day Holiday","region":"Guyana","date":"2025-01-01"},{"id":"20250223_l6a43atactjbsvrdbh8oba4ioc","status":"confirmed","summary":"Mashramani (Republic Day)","region":"Guyana","date":"2025-02-23"},{"id":"20250224_3ipamd0ne30ebgm7nha1d373rk","status":"confirmed","summary":"Day off for Mashramani (Republic Day)","region":"Guyana","date":"2025-02-24"},{"id":"20250314_jph36pirr68smd1qff1sf4so0k","status":"confirmed","summary":"Phagwah (Holi)","region":"Guyana","date":"2025-03-14"},{"id":"20250418_7tqjhob9mjtrpu0s53jarquur8","status":"confirmed","summary":"Good Friday","region":"Guyana","date":"2025-04-18"},{"id":"20250421_ohq2ptp2olcj6i4cuqrq5v2a3o","status":"confirmed","summary":"Easter Monday","region":"Guyana","date":"2025-04-21"},{"id":"20250501_80rslse4j8t907ljc2720g21ek","status":"confirmed","summary":"Labor Day / May Day","region":"Guyana","date":"2025-05-01"},{"id":"20250505_55nceka97gcr1hq6gkip31c2p4","status":"confirmed","summary":"Arrival Day","region":"Guyana","date":"2025-05-05"},{"id":"20250526_qehoahidi1qn52qdquan9o5kmg","status":"confirmed","summary":"Independence Day","region":"Guyana","date":"2025-05-26"},{"id":"20250607_mjjqnlp13q1gl1b4e68n4mu26k","status":"confirmed","summary":"Eid al-Adha","region":"Guyana","date":"2025-06-07"},{"id":"20250707_bq4k54sollu5ml9162a04dgqd4","status":"confirmed","summary":"CARICOM Day","region":"Guyana","date":"2025-07-07"},{"id":"20250801_e6jteo1lt97o4n46hmv63gqd3k","status":"confirmed","summary":"Emancipation Day","region":"Guyana","date":"2025-08-01"},{"id":"20250905_thuq21ofbjsrg15pnlgb60r2g4","status":"confirmed","summary":"Youman-Nabi (Mawlid)","region":"Guyana","date":"2025-09-05"},{"id":"20251225_j9djn9qslpp5nnm3l2pdhclilo","status":"confirmed","summary":"Christmas Day","region":"Guyana","date":"2025-12-25"},{"id":"20251226_6hctgqm8nqkecnia9incl068i4","status":"confirmed","summary":"Boxing Day","region":"Guyana","date":"2025-12-26"}],"Honduras":[{"id":"20240101_j4q7knkg4q84td2uhberug41r8","status":"confirmed","summary":"New Year\'s Day","region":"Honduras","date":"2024-01-01"},{"id":"20240102_se93oe3cnlmsqhf9f90811o7lg","status":"confirmed","summary":"Public Sector Holiday","region":"Honduras","date":"2024-01-02"},{"id":"20240106_utilbhh6q54imm7p7h4glk4j0s","status":"confirmed","summary":"The Three Wise Men Day","region":"Honduras","date":"2024-01-06"},{"id":"20240203_pqog64t7tcu7951h377uqtcl74","status":"confirmed","summary":"Our Lady of Suyapa","region":"Honduras","date":"2024-02-03"},{"id":"20240319_l3jodneqessi5j3ktv7l4fqoqs","status":"confirmed","summary":"Father\'s Day","region":"Honduras","date":"2024-03-19"},{"id":"20240328_fu25q7gqmsrepgrsj80pskfvvg","status":"confirmed","summary":"Maundy Thursday","region":"Honduras","date":"2024-03-28"},{"id":"20240329_v1ou6dp398bjo4bjs3vveb258s","status":"confirmed","summary":"Good Friday","region":"Honduras","date":"2024-03-29"},{"id":"20240330_bq5qfrqbgnec9j53ug5toldl4c","status":"confirmed","summary":"Holy Saturday","region":"Honduras","date":"2024-03-30"},{"id":"20240331_roctgaptvgu5qgis8g4ir2a318","status":"confirmed","summary":"Easter Sunday","region":"Honduras","date":"2024-03-31"},{"id":"20240415_bhb2po3clv44bh778hlqveani0","status":"confirmed","summary":"America Day","region":"Honduras","date":"2024-04-15"},{"id":"20240501_fpp42a0hjk8koehj6g8du7vfso","status":"confirmed","summary":"Labor Day / May Day","region":"Honduras","date":"2024-05-01"},{"id":"20240512_69l5ebup4llufeu3md40c88bi4","status":"confirmed","summary":"Mothers\' Day","region":"Honduras","date":"2024-05-12"},{"id":"20240530_ck3ok9c7kihg86864657e0mlco","status":"confirmed","summary":"Corpus Christi","region":"Honduras","date":"2024-05-30"},{"id":"20240910_557r84vq1t6nu2ceamju1enqn8","status":"confirmed","summary":"Children\'s Day","region":"Honduras","date":"2024-09-10"},{"id":"20240915_50ocbq7g9ls3gl1afub924b7r8","status":"confirmed","summary":"Independence Day","region":"Honduras","date":"2024-09-15"},{"id":"20240917_p1s0eqt9vptnibl47j1rgb9npc","status":"confirmed","summary":"Teacher\'s Day","region":"Honduras","date":"2024-09-17"},{"id":"20241003_tvbgrm8ph1fsiqkeis878jgi58","status":"confirmed","summary":"Morazan\'s Day","region":"Honduras","date":"2024-10-03"},{"id":"20241004_42g56hv0pd5k8sp3ucf5jfd0d0","status":"confirmed","summary":"Columbus Day","region":"Honduras","date":"2024-10-04"},{"id":"20241005_3mrvf9pksaeusdmp63iotj0k6c","status":"confirmed","summary":"Army Day","region":"Honduras","date":"2024-10-05"},{"id":"20241225_n2v4ivnagait797hj1l71o4lno","status":"confirmed","summary":"Christmas Day","region":"Honduras","date":"2024-12-25"},{"id":"20241231_dmjl6phsd731hmtdrcr2cergu8","status":"confirmed","summary":"New Year\'s Eve","region":"Honduras","date":"2024-12-31"},{"id":"20250101_2icjakkd545csfnq2ceios2gt4","status":"confirmed","summary":"New Year\'s Day","region":"Honduras","date":"2025-01-01"},{"id":"20250106_44lkbj3hrrsiedt8pd3dma6nbo","status":"confirmed","summary":"The Three Wise Men Day","region":"Honduras","date":"2025-01-06"},{"id":"20250203_4ue2hdv7jkk211hgrffmusmuas","status":"confirmed","summary":"Our Lady of Suyapa","region":"Honduras","date":"2025-02-03"},{"id":"20250319_oqce234fjsuihdgbq9ssopqhb0","status":"confirmed","summary":"Father\'s Day","region":"Honduras","date":"2025-03-19"},{"id":"20250414_uc0aekgemf2jfrr4j1646kntgs","status":"confirmed","summary":"America Day","region":"Honduras","date":"2025-04-14"},{"id":"20250417_d9ggi5lni6fasohft6m4ffl2ks","status":"confirmed","summary":"Maundy Thursday","region":"Honduras","date":"2025-04-17"},{"id":"20250418_tglskpvtdi7l019gcbia4b8a3o","status":"confirmed","summary":"Good Friday","region":"Honduras","date":"2025-04-18"},{"id":"20250419_iirtrkknf3edtdjgmif9igb1so","status":"confirmed","summary":"Holy Saturday","region":"Honduras","date":"2025-04-19"},{"id":"20250420_he1373bhord6hdhmdt6qhqav0s","status":"confirmed","summary":"Easter Sunday","region":"Honduras","date":"2025-04-20"},{"id":"20250501_34kgipkognu0k23ore6l9r7pik","status":"confirmed","summary":"Labor Day / May Day","region":"Honduras","date":"2025-05-01"},{"id":"20250511_o21tb7u6nkj3ns1kc2jaqqpjq0","status":"confirmed","summary":"Mothers\' Day","region":"Honduras","date":"2025-05-11"},{"id":"20250619_k9ibeg6gnr9qs6vecaghirjhrc","status":"confirmed","summary":"Corpus Christi","region":"Honduras","date":"2025-06-19"},{"id":"20250910_irflsgasbfa8bg0gfbvpmsndg8","status":"confirmed","summary":"Children\'s Day","region":"Honduras","date":"2025-09-10"},{"id":"20250915_3hrvpibr31rrikch1ro1bags8g","status":"confirmed","summary":"Independence Day","region":"Honduras","date":"2025-09-15"},{"id":"20250917_oth4mff9iljevc83c7ijnmb9j0","status":"confirmed","summary":"Teacher\'s Day","region":"Honduras","date":"2025-09-17"},{"id":"20251003_jbsooec3lr24v60sbddm3ggh8k","status":"confirmed","summary":"Morazan\'s Day","region":"Honduras","date":"2025-10-03"},{"id":"20251012_856h0l7rchor8mu04obegfdotg","status":"confirmed","summary":"Columbus Day","region":"Honduras","date":"2025-10-12"},{"id":"20251021_8frg0g0sd7n82um4v58t0ne2oo","status":"confirmed","summary":"Army Day","region":"Honduras","date":"2025-10-21"},{"id":"20251225_0of2ivhkv6rf1rtjjrhrtevjmc","status":"confirmed","summary":"Christmas Day","region":"Honduras","date":"2025-12-25"},{"id":"20251231_1sq198jvsstc13saaoktiifggo","status":"confirmed","summary":"New Year\'s Eve","region":"Honduras","date":"2025-12-31"}],"Hong Kong":[{"id":"20240101_iqt061o6cn3m1d5eg4ucqsj0nc","status":"confirmed","summary":"New Year\'s Day","region":"Hong Kong","date":"2024-01-01"},{"id":"20240210_i598mqs2m0rk9e6a05rtcflu6g","status":"confirmed","summary":"Lunar New Year\'s Day","region":"Hong Kong","date":"2024-02-10"},{"id":"20240212_omv84spqtkppnshloo22jboeps","status":"confirmed","summary":"Third Day of Lunar New Year","region":"Hong Kong","date":"2024-02-12"},{"id":"20240213_bs8v94gdvllp9rb17ltu73vs7g","status":"confirmed","summary":"Fourth Day of Lunar New Year","region":"Hong Kong","date":"2024-02-13"},{"id":"20240214_3c4967he9hb7pf02bqv2b6admc","status":"confirmed","summary":"Valentine\'s Day","region":"Hong Kong","date":"2024-02-14"},{"id":"20240329_85b9pp80r0tj2bh3hhlfae6mmg","status":"confirmed","summary":"Good Friday","region":"Hong Kong","date":"2024-03-29"},{"id":"20240330_509l5l6s43ba5gb56ks1m3l4co","status":"confirmed","summary":"Holy Saturday","region":"Hong Kong","date":"2024-03-30"},{"id":"20240331_9v8kcb9cpndtl2gfr5ah1ted68","status":"confirmed","summary":"Easter Sunday","region":"Hong Kong","date":"2024-03-31"},{"id":"20240401_f1hcv7351jso7kkfd5hhfco2f8","status":"confirmed","summary":"Easter Monday","region":"Hong Kong","date":"2024-04-01"},{"id":"20240404_gq7h7r11368ns25m1rv8asc65k","status":"confirmed","summary":"Tomb Sweeping Day","region":"Hong Kong","date":"2024-04-04"},{"id":"20240501_ldjspreiinaduop5ci8ija062o","status":"confirmed","summary":"Labour Day","region":"Hong Kong","date":"2024-05-01"},{"id":"20240512_oihhiadjnt4qvuaflsairhiols","status":"confirmed","summary":"Mother\'s Day","region":"Hong Kong","date":"2024-05-12"},{"id":"20240515_j43c3o7fcn43hlkfigj974tgms","status":"confirmed","summary":"Buddha\'s Birthday","region":"Hong Kong","date":"2024-05-15"},{"id":"20240610_3j43tqkg4k02qsqhdbs90lfhgg","status":"confirmed","summary":"Dragon Boat Festival","region":"Hong Kong","date":"2024-06-10"},{"id":"20240616_teuujdg0u43a1ie4l62erea28g","status":"confirmed","summary":"Father\'s Day","region":"Hong Kong","date":"2024-06-16"},{"id":"20240701_c15iss0nns0qlln494ct01rnqg","status":"confirmed","summary":"Hong Kong Special Administrative Region Establishment Day","region":"Hong Kong","date":"2024-07-01"},{"id":"20240817_dso3t8081mdpimkkkhfbgs0p5k","status":"confirmed","summary":"Hungry Ghost Festival","region":"Hong Kong","date":"2024-08-17"},{"id":"20240917_97ruj9tp8kr1au9k6qqdhv27mk","status":"confirmed","summary":"Mid-Autumn Festival","region":"Hong Kong","date":"2024-09-17"},{"id":"20240918_td0c969vnadnv5pqeet2mpbb9o","status":"confirmed","summary":"Day after Mid-Autumn Festival","region":"Hong Kong","date":"2024-09-18"},{"id":"20241001_njig8mpn0dagd376perkduoaik","status":"confirmed","summary":"National Day","region":"Hong Kong","date":"2024-10-01"},{"id":"20241011_mjpsocp99debh6rqbiem42eadk","status":"confirmed","summary":"Chung Yeung Festival","region":"Hong Kong","date":"2024-10-11"},{"id":"20241225_d71afgcoi7nq372lkkshakl0n0","status":"confirmed","summary":"Christmas Day","region":"Hong Kong","date":"2024-12-25"},{"id":"20241226_k12p49n9fcr19j0kh0scaqaavg","status":"confirmed","summary":"First Weekday After Christmas Day","region":"Hong Kong","date":"2024-12-26"},{"id":"20241231_vnepkm4onrvl67lman60pf6bjs","status":"confirmed","summary":"New Year’s Eve","region":"Hong Kong","date":"2024-12-31"},{"id":"20250101_6br3ifdkkqjcm6fj364nii5qms","status":"confirmed","summary":"New Year\'s Day","region":"Hong Kong","date":"2025-01-01"},{"id":"20250129_t85i4pfuv7e4nb1oimee08hjg8","status":"confirmed","summary":"Lunar New Year\'s Day","region":"Hong Kong","date":"2025-01-29"},{"id":"20250130_u6iai1jes1f6l0knurhc47q2vc","status":"confirmed","summary":"Second Day of Lunar New Year","region":"Hong Kong","date":"2025-01-30"},{"id":"20250131_sj1aejj4mqhimtglfih0s2rlkg","status":"confirmed","summary":"Third Day of Lunar New Year","region":"Hong Kong","date":"2025-01-31"},{"id":"20250214_u8rd4g96p12v71cugnjul9bhio","status":"confirmed","summary":"Valentine\'s Day","region":"Hong Kong","date":"2025-02-14"},{"id":"20250404_jbsknr8n5cqqo4kqpgc61usfks","status":"confirmed","summary":"Tomb Sweeping Day","region":"Hong Kong","date":"2025-04-04"},{"id":"20250418_uiaj3fst2i1s3ij44luqsr87ck","status":"confirmed","summary":"Good Friday","region":"Hong Kong","date":"2025-04-18"},{"id":"20250419_fo6ngb4f0vg9rs4b7a6mkb7gtg","status":"confirmed","summary":"Holy Saturday","region":"Hong Kong","date":"2025-04-19"},{"id":"20250420_6pfum7bi8ch3qfi86g7ahj8ed8","status":"confirmed","summary":"Easter Sunday","region":"Hong Kong","date":"2025-04-20"},{"id":"20250421_q7i00v8so6ueqvlnf7cmn37dnc","status":"confirmed","summary":"Easter Monday","region":"Hong Kong","date":"2025-04-21"},{"id":"20250501_4o2i4ieo1d1e1420vicm4puh5k","status":"confirmed","summary":"Labour Day","region":"Hong Kong","date":"2025-05-01"},{"id":"20250505_9k9gu247kiidlif6uk6hqcgj0k","status":"confirmed","summary":"Buddha\'s Birthday","region":"Hong Kong","date":"2025-05-05"},{"id":"20250511_och63i1892vtbi3vla9tfmoem0","status":"confirmed","summary":"Mother\'s Day","region":"Hong Kong","date":"2025-05-11"},{"id":"20250531_prsdlfg3tfgafbh1r9f0pdfof8","status":"confirmed","summary":"Dragon Boat Festival","region":"Hong Kong","date":"2025-05-31"},{"id":"20250615_4b6fqlnfpbpcclfbadonsik060","status":"confirmed","summary":"Father\'s Day","region":"Hong Kong","date":"2025-06-15"},{"id":"20250701_hbimkmc3pt0bitdte9eanpgtos","status":"confirmed","summary":"Hong Kong Special Administrative Region Establishment Day","region":"Hong Kong","date":"2025-07-01"},{"id":"20250906_56djcq8rpna0s1l0d6ua2m8kbk","status":"confirmed","summary":"Hungry Ghost Festival","region":"Hong Kong","date":"2025-09-06"},{"id":"20251001_nb5d9uahng49s15ucvjcjbljv0","status":"confirmed","summary":"National Day","region":"Hong Kong","date":"2025-10-01"},{"id":"20251006_gnrnurb44nifngo8p1aksenms8","status":"confirmed","summary":"Mid-Autumn Festival","region":"Hong Kong","date":"2025-10-06"},{"id":"20251007_lrdvubj1t4npkrptcrf679773o","status":"confirmed","summary":"Day after Mid-Autumn Festival","region":"Hong Kong","date":"2025-10-07"},{"id":"20251029_o1k1ju55abanfboniee989cth4","status":"confirmed","summary":"Chung Yeung Festival","region":"Hong Kong","date":"2025-10-29"},{"id":"20251225_bqvl68g05cmbj0i8h1nnc40mjk","status":"confirmed","summary":"Christmas Day","region":"Hong Kong","date":"2025-12-25"},{"id":"20251226_gncm27mhe6e0i24hj2s0j2552o","status":"confirmed","summary":"First Weekday After Christmas Day","region":"Hong Kong","date":"2025-12-26"},{"id":"20251231_121tq5c9vitetvtm60pd2peg2c","status":"confirmed","summary":"New Year’s Eve","region":"Hong Kong","date":"2025-12-31"}],"Haiti":[{"id":"20240101_un3cplqs7aekcg8mfttifhlj9o","status":"confirmed","summary":"New Year\'s Day/Independence Day","region":"Haiti","date":"2024-01-01"},{"id":"20240102_752133l95e9r97fikdcbgbr5s0","status":"confirmed","summary":"Heroes’ Day/Ancestors’ Day","region":"Haiti","date":"2024-01-02"},{"id":"20240213_2gaea16ueu4qqhgipl3oe448r8","status":"confirmed","summary":"Carnival/Shrove Tuesday","region":"Haiti","date":"2024-02-13"},{"id":"20240214_l0t75nepu1jtoon4di82gl69dg","status":"confirmed","summary":"Carnival / Ash Wednesday","region":"Haiti","date":"2024-02-14"},{"id":"20240214_t7ttffgnmtn2mok91omq4aquag","status":"confirmed","summary":"Valentine\'s Day","region":"Haiti","date":"2024-02-14"},{"id":"20240329_hhl9dvm8uf6pohtusodfqsge0s","status":"confirmed","summary":"Good Friday","region":"Haiti","date":"2024-03-29"},{"id":"20240331_6tlba12rarlsfv9qtu09em7fn4","status":"confirmed","summary":"Easter Sunday","region":"Haiti","date":"2024-03-31"},{"id":"20240501_ibstoc0len4glibc969kl6n34o","status":"confirmed","summary":"Agriculture and Labor Day","region":"Haiti","date":"2024-05-01"},{"id":"20240518_fhvrgfhtcve9uouk4017aplnb4","status":"confirmed","summary":"Flag Day/University Day","region":"Haiti","date":"2024-05-18"},{"id":"20240526_mh05lhg35uh98mdqsh62atqt30","status":"confirmed","summary":"Mother\'s Day","region":"Haiti","date":"2024-05-26"},{"id":"20240630_a7v5948sum9fqup2p9m4v5f4o0","status":"confirmed","summary":"Father\'s Day","region":"Haiti","date":"2024-06-30"},{"id":"20241017_547a043hf6bdbbthu9itr77p6o","status":"confirmed","summary":"Dessalines Day","region":"Haiti","date":"2024-10-17"},{"id":"20241118_rlsq76olvmm7t703ep11f4s314","status":"confirmed","summary":"Vertières Day","region":"Haiti","date":"2024-11-18"},{"id":"20241224_8qau9hinogk4om7284toqcpspc","status":"confirmed","summary":"Christmas Eve","region":"Haiti","date":"2024-12-24"},{"id":"20241225_deufqlgoabl4r24hg5n6sm8brk","status":"confirmed","summary":"Christmas Day","region":"Haiti","date":"2024-12-25"},{"id":"20241231_r5tne6u7oapfpv3bpqc8ij7elg","status":"confirmed","summary":"New Year\'s Eve","region":"Haiti","date":"2024-12-31"},{"id":"20250101_smsatc7k4s0ba2te2b4rhpsq6s","status":"confirmed","summary":"New Year\'s Day/Independence Day","region":"Haiti","date":"2025-01-01"},{"id":"20250102_qcas7r6m17t45i0s6lo7iv11nk","status":"confirmed","summary":"Heroes’ Day/Ancestors’ Day","region":"Haiti","date":"2025-01-02"},{"id":"20250214_dg2en2lrrdmfoco79f6mltbrns","status":"confirmed","summary":"Valentine\'s Day","region":"Haiti","date":"2025-02-14"},{"id":"20250304_43d1e1r18oua2140ff7qhlkh2c","status":"confirmed","summary":"Carnival/Shrove Tuesday","region":"Haiti","date":"2025-03-04"},{"id":"20250305_p1ni45tf4cvr13kraat09ahp4k","status":"confirmed","summary":"Carnival / Ash Wednesday","region":"Haiti","date":"2025-03-05"},{"id":"20250418_6i44rqrestgcq5jmjnq243c1i8","status":"confirmed","summary":"Good Friday","region":"Haiti","date":"2025-04-18"},{"id":"20250420_cefn1snjj73e06d2p0gu072lmg","status":"confirmed","summary":"Easter Sunday","region":"Haiti","date":"2025-04-20"},{"id":"20250501_9du5p8kart8h7o5m0g9u18l4d4","status":"confirmed","summary":"Agriculture and Labor Day","region":"Haiti","date":"2025-05-01"},{"id":"20250518_6svniisq91sogja6lhp098k2c0","status":"confirmed","summary":"Flag Day/University Day","region":"Haiti","date":"2025-05-18"},{"id":"20250525_qb8h164pko9onpu2fhs74nvt9k","status":"confirmed","summary":"Mother\'s Day","region":"Haiti","date":"2025-05-25"},{"id":"20250629_5kou6q2s7r1j6mgevm0gjhi4ac","status":"confirmed","summary":"Father\'s Day","region":"Haiti","date":"2025-06-29"},{"id":"20251017_jvacpif0vhbjgdpi6s59m2pdhk","status":"confirmed","summary":"Dessalines Day","region":"Haiti","date":"2025-10-17"},{"id":"20251118_imj35oiktjrif3tgo108e975qs","status":"confirmed","summary":"Vertières Day","region":"Haiti","date":"2025-11-18"},{"id":"20251224_bg4c8dkl1gam7c5kdc2nrq5164","status":"confirmed","summary":"Christmas Eve","region":"Haiti","date":"2025-12-24"},{"id":"20251225_d295fjhoi2prhl51kevgbag8c0","status":"confirmed","summary":"Christmas Day","region":"Haiti","date":"2025-12-25"},{"id":"20251231_pcbdvr7t5ckenna48gms9ccnvc","status":"confirmed","summary":"New Year\'s Eve","region":"Haiti","date":"2025-12-31"}],"Hungary":[{"id":"20240101_1h7gvi6n5csuofre670be3ndn4","status":"confirmed","summary":"New Year\'s Day","region":"Hungary","date":"2024-01-01"},{"id":"20240315_scb6bld7lahpf7920del9vdnhs","status":"confirmed","summary":"1848 Revolution Memorial Day","region":"Hungary","date":"2024-03-15"},{"id":"20240329_kqg30qm9o3nb9qk16gpqdvhvl8","status":"confirmed","summary":"Good Friday","region":"Hungary","date":"2024-03-29"},{"id":"20240331_on507t19r0rc465o89la3imguc","status":"confirmed","summary":"Easter Sunday","region":"Hungary","date":"2024-03-31"},{"id":"20240401_4gk7qi611ra0osmu8hrekehmvc","status":"confirmed","summary":"Easter Monday","region":"Hungary","date":"2024-04-01"},{"id":"20240501_s66qljg5hu2kct5kgc0smij848","status":"confirmed","summary":"Labor Day / May Day","region":"Hungary","date":"2024-05-01"},{"id":"20240505_dvrr4boaq4l7f5ufu31asi56a4","status":"confirmed","summary":"Mother’s Day","region":"Hungary","date":"2024-05-05"},{"id":"20240519_04de59seimsvsok479viqtupos","status":"confirmed","summary":"Whit Sunday","region":"Hungary","date":"2024-05-19"},{"id":"20240520_bvs69ms0c9ncgr09el0eai9umo","status":"confirmed","summary":"Whit Monday","region":"Hungary","date":"2024-05-20"},{"id":"20240616_bdh40bunb6em7c9h5ian7pmris","status":"confirmed","summary":"Father’s Day","region":"Hungary","date":"2024-06-16"},{"id":"20240820_4g3g0p1saub1kj4unp4tf8e6gs","status":"confirmed","summary":"Hungary National Day","region":"Hungary","date":"2024-08-20"},{"id":"20241023_807qaiic1snvghiu7rl7ee1j1s","status":"confirmed","summary":"1956 Revolution Memorial Day","region":"Hungary","date":"2024-10-23"},{"id":"20241101_sbv0t9mociktfaa88i59caubv0","status":"confirmed","summary":"All Saints\' Day","region":"Hungary","date":"2024-11-01"},{"id":"20241206_k8mbrfi51bppasqpi9ni9bkokk","status":"confirmed","summary":"Saint Nicholas Day","region":"Hungary","date":"2024-12-06"},{"id":"20241224_h8uiq4icevcuhg7hq17f0rcsbg","status":"confirmed","summary":"Christmas Eve","region":"Hungary","date":"2024-12-24"},{"id":"20241225_p6i32omck313cle6ond20j3it8","status":"confirmed","summary":"Christmas Day","region":"Hungary","date":"2024-12-25"},{"id":"20241226_c39e02b0abnkskkvtsho5bs9uo","status":"confirmed","summary":"Second Day of Christmas","region":"Hungary","date":"2024-12-26"},{"id":"20241231_si2ncqp1s41de4ghc6vf62je18","status":"confirmed","summary":"New Year\'s Eve","region":"Hungary","date":"2024-12-31"},{"id":"20250101_nquap4m6mj2ki73feeim317j28","status":"confirmed","summary":"New Year\'s Day","region":"Hungary","date":"2025-01-01"},{"id":"20250315_ia3pnjvs0mq88i7vk8sm630vj8","status":"confirmed","summary":"1848 Revolution Memorial Day","region":"Hungary","date":"2025-03-15"},{"id":"20250418_o8u5nb29t7kj4bl3ml3jv541nk","status":"confirmed","summary":"Good Friday","region":"Hungary","date":"2025-04-18"},{"id":"20250420_cu8d89hg1mn0q9lsn29tfcb3hg","status":"confirmed","summary":"Easter Sunday","region":"Hungary","date":"2025-04-20"},{"id":"20250421_e1an8j4p3cith0qgfhacgf7l0o","status":"confirmed","summary":"Easter Monday","region":"Hungary","date":"2025-04-21"},{"id":"20250501_7gf0r0fa81hf35856pnl1pv66k","status":"confirmed","summary":"Labor Day / May Day","region":"Hungary","date":"2025-05-01"},{"id":"20250502_scvs8mv7cjeg4nt2vr5ve0a874","status":"confirmed","summary":"Labor Day Holiday","region":"Hungary","date":"2025-05-02"},{"id":"20250504_ki0t3032de86mhrhpo84u6rq2o","status":"confirmed","summary":"Mother’s Day","region":"Hungary","date":"2025-05-04"},{"id":"20250517_o00vde5sctc4ae5da3ofuvqves","status":"confirmed","summary":"Extra Work Day","region":"Hungary","date":"2025-05-17"},{"id":"20250608_i62td8pe3kc4j4cjrale0f58j0","status":"confirmed","summary":"Whit Sunday","region":"Hungary","date":"2025-06-08"},{"id":"20250609_i5s6vvu7c7df8615h3lk29eai8","status":"confirmed","summary":"Whit Monday","region":"Hungary","date":"2025-06-09"},{"id":"20250615_a9fe2gj1nj2c27kdbvsj1lit70","status":"confirmed","summary":"Father’s Day","region":"Hungary","date":"2025-06-15"},{"id":"20250820_p09q1khf6v3n628dcaq0a7j8f4","status":"confirmed","summary":"Hungary National Day","region":"Hungary","date":"2025-08-20"},{"id":"20251018_bepl9sr811lstoqq1d2degbfao","status":"confirmed","summary":"Extra Work Day","region":"Hungary","date":"2025-10-18"},{"id":"20251023_h9bfkhf6e1p7aiefbtrjf83idk","status":"confirmed","summary":"1956 Revolution Memorial Day","region":"Hungary","date":"2025-10-23"},{"id":"20251024_p9426pebs2v7v90qddfmnkg1k0","status":"confirmed","summary":"1956 Revolution Memorial Day Holiday","region":"Hungary","date":"2025-10-24"},{"id":"20251101_dgjel17lq6rokv1a6k9835k720","status":"confirmed","summary":"All Saints\' Day","region":"Hungary","date":"2025-11-01"},{"id":"20251206_efn5jv652hjm8vv7f8g36ga3os","status":"confirmed","summary":"Saint Nicholas Day","region":"Hungary","date":"2025-12-06"},{"id":"20251213_1icaf6p465sm9on9gm0c4m1no0","status":"confirmed","summary":"Extra Work Day","region":"Hungary","date":"2025-12-13"},{"id":"20251224_7dvul4njuisbdtmol40l0vr3cg","status":"confirmed","summary":"Christmas Holiday","region":"Hungary","date":"2025-12-24"},{"id":"20251224_m35iruvd0kdelul24m8hbutq70","status":"confirmed","summary":"Christmas Eve","region":"Hungary","date":"2025-12-24"},{"id":"20251225_5hubgc5bi5imlgq0sso2o4rcco","status":"confirmed","summary":"Christmas Day","region":"Hungary","date":"2025-12-25"},{"id":"20251226_ggddtla20q17um67n9ps51iq1c","status":"confirmed","summary":"Second Day of Christmas","region":"Hungary","date":"2025-12-26"},{"id":"20251231_4m4575e88o27f6i3is1c8q589g","status":"confirmed","summary":"New Year\'s Eve","region":"Hungary","date":"2025-12-31"}],"Isle of Man":[{"id":"20240101_sr10a8kt1ajrh5hhkjrg0h3pmg","status":"confirmed","summary":"New Year\'s Day","region":"Isle of Man","date":"2024-01-01"},{"id":"20240329_avqp7ri47vaqf43aod5q3q4p9c","status":"confirmed","summary":"Good Friday","region":"Isle of Man","date":"2024-03-29"},{"id":"20240331_ic0jp9tbtimqbcjp7uq270u5dk","status":"confirmed","summary":"Daylight Saving Time starts","region":"Isle of Man","date":"2024-03-31"},{"id":"20240401_n48ban2i3c1k62iun65mo0m85s","status":"confirmed","summary":"Easter Monday","region":"Isle of Man","date":"2024-04-01"},{"id":"20240506_pf089mrl4c07jsfoeqlcubgrhs","status":"confirmed","summary":"Early May Bank Holiday","region":"Isle of Man","date":"2024-05-06"},{"id":"20240527_q5qemgrkl22n7sp653uloef1lk","status":"confirmed","summary":"Late May Bank Holiday","region":"Isle of Man","date":"2024-05-27"},{"id":"20240607_0hvg1mev3v384llupknl8jkdvs","status":"confirmed","summary":"T. T. Bank Holiday","region":"Isle of Man","date":"2024-06-07"},{"id":"20240705_3r0hpo2pcbabd83qssoim9a3mc","status":"confirmed","summary":"Tynwald Day","region":"Isle of Man","date":"2024-07-05"},{"id":"20240826_e3cl7a8de10bkgl8edpai9c8ag","status":"confirmed","summary":"Summer Bank Holiday","region":"Isle of Man","date":"2024-08-26"},{"id":"20241027_5th6r01v8ms6jmgpejp6ho1gic","status":"confirmed","summary":"Daylight Saving Time ends","region":"Isle of Man","date":"2024-10-27"},{"id":"20241225_k569fkjdmm1qlctmed7v0g6rhc","status":"confirmed","summary":"Christmas Day","region":"Isle of Man","date":"2024-12-25"},{"id":"20241226_1m7cru15l7gf3dos87p6kb532k","status":"confirmed","summary":"Boxing Day","region":"Isle of Man","date":"2024-12-26"},{"id":"20250101_edn0uk8f7lqhr4sjlq4snckji0","status":"confirmed","summary":"New Year\'s Day","region":"Isle of Man","date":"2025-01-01"},{"id":"20250330_fsc0veugh103qja7ob10s9rvms","status":"confirmed","summary":"Daylight Saving Time starts","region":"Isle of Man","date":"2025-03-30"},{"id":"20250418_uc227mkgtmbdojbq16f7uof28c","status":"confirmed","summary":"Good Friday","region":"Isle of Man","date":"2025-04-18"},{"id":"20250421_i8mpng5tvm5dk3ift4u0moreps","status":"confirmed","summary":"Easter Monday","region":"Isle of Man","date":"2025-04-21"},{"id":"20250505_mkqrn38bb1bmlejgmu9su9rbjc","status":"confirmed","summary":"Early May Bank Holiday","region":"Isle of Man","date":"2025-05-05"},{"id":"20250526_h4867dl3h4ostcsea5lgt87e00","status":"confirmed","summary":"Late May Bank Holiday","region":"Isle of Man","date":"2025-05-26"},{"id":"20250606_atfnjqcvgunknbcdu8c9h4qi8g","status":"confirmed","summary":"T. T. Bank Holiday","region":"Isle of Man","date":"2025-06-06"},{"id":"20250705_tehn3toacv4k871i75gatr0tsg","status":"confirmed","summary":"Tynwald Day","region":"Isle of Man","date":"2025-07-05"},{"id":"20250825_u9acpn4d3bdancsjdod2burahs","status":"confirmed","summary":"Summer Bank Holiday","region":"Isle of Man","date":"2025-08-25"},{"id":"20251026_77sko3b9of2j09cgt31kkara58","status":"confirmed","summary":"Daylight Saving Time ends","region":"Isle of Man","date":"2025-10-26"},{"id":"20251225_9vvm6ksvkkmqgjiqnt90e7bvk8","status":"confirmed","summary":"Christmas Day","region":"Isle of Man","date":"2025-12-25"},{"id":"20251226_ldm6209b0lppi4n21f19bou0ok","status":"confirmed","summary":"Boxing Day","region":"Isle of Man","date":"2025-12-26"}],"India":[{"id":"20240101_hq57srvd2vmvlkd8kef9id1194","status":"confirmed","summary":"New Year\'s Day","region":"India","date":"2024-01-01"},{"id":"20240113_hat7fcp9a4umh3c9q56ipq5i5c","status":"confirmed","summary":"Lohri","region":"India","date":"2024-01-13"},{"id":"20240114_afnsm6msul4cv6jvfgu1bi8578","status":"confirmed","summary":"Makar Sankranti","region":"India","date":"2024-01-14"},{"id":"20240115_vasn62a9dftsrug1n2jbpgp8eo","status":"confirmed","summary":"Pongal","region":"India","date":"2024-01-15"},{"id":"20240117_6uit3jd62gnd37g6opbjjr9nr4","status":"confirmed","summary":"Guru Govind Singh Jayanti","region":"India","date":"2024-01-17"},{"id":"20240125_gq3utbei676oga1ud83p230agk","status":"confirmed","summary":"Hazarat Ali\'s Birthday","region":"India","date":"2024-01-25"},{"id":"20240126_b4h0o1umvgngcgb8s9r91fgfjs","status":"confirmed","summary":"Republic Day","region":"India","date":"2024-01-26"},{"id":"20240214_n0gmbn3fcriko6884crd2l4sk4","status":"confirmed","summary":"Vasant Panchami","region":"India","date":"2024-02-14"},{"id":"20240219_kh48thdfi4kssavblahib4upvg","status":"confirmed","summary":"Shivaji Jayanti","region":"India","date":"2024-02-19"},{"id":"20240224_8khsoun20n0o2833t6fhed9q7c","status":"confirmed","summary":"Guru Ravidas Jayanti","region":"India","date":"2024-02-24"},{"id":"20240306_rfotcrsspe8sckct05hidtn86s","status":"confirmed","summary":"Maharishi Dayanand Saraswati Jayanti","region":"India","date":"2024-03-06"},{"id":"20240308_aa0givmgt3ht35i9qq2a19rcto","status":"confirmed","summary":"Maha Shivaratri/Shivaratri","region":"India","date":"2024-03-08"},{"id":"20240312_0trljlg0v4sgivu3qr1u9i4cco","status":"confirmed","summary":"Ramadan Start","region":"India","date":"2024-03-12"},{"id":"20240324_tq78j2vb0hgimvkhl098oqpb4o","status":"confirmed","summary":"Holika Dahana","region":"India","date":"2024-03-24"},{"id":"20240325_f0dg9jc0mc64470s21foo3a23o","status":"confirmed","summary":"Dolyatra","region":"India","date":"2024-03-25"},{"id":"20240325_hpb8d5mahisva5e5sli9q1e7p8","status":"confirmed","summary":"Holi","region":"India","date":"2024-03-25"},{"id":"20240329_ds899pmvoukumv7nalsa11sp4g","status":"confirmed","summary":"Good Friday","region":"India","date":"2024-03-29"},{"id":"20240331_0mn91sbculvn4h1b4pdf8e1vnc","status":"confirmed","summary":"Easter Day","region":"India","date":"2024-03-31"},{"id":"20240405_2qshql82e5rq9b4lefah9bvt1c","status":"confirmed","summary":"Jamat Ul-Vida","region":"India","date":"2024-04-05"},{"id":"20240409_fcehf7ein07u8ave7qovsam454","status":"confirmed","summary":"Ugadi","region":"India","date":"2024-04-09"},{"id":"20240409_hnpauks50gcmtj6nfvnee7svb0","status":"confirmed","summary":"Chaitra Sukhladi","region":"India","date":"2024-04-09"},{"id":"20240409_ptr4smvrfp78hgrod29nkivpeg","status":"confirmed","summary":"Gudi Padwa","region":"India","date":"2024-04-09"},{"id":"20240410_4r2s3sn0b24prm6sd8q69pjqj4","status":"confirmed","summary":"Ramzan Id/Eid-ul-Fitar","region":"India","date":"2024-04-10"},{"id":"20240411_0hl80vk0icsvod3lh2ir6tj610","status":"confirmed","summary":"Ramzan Id/Eid-ul-Fitar","region":"India","date":"2024-04-11"},{"id":"20240413_3ke39sbirj8nor82bjs2r1e054","status":"confirmed","summary":"Vaisakhi","region":"India","date":"2024-04-13"},{"id":"20240414_404hnkm7m5higat6iprvr4kers","status":"confirmed","summary":"Ambedkar Jayanti","region":"India","date":"2024-04-14"},{"id":"20240414_g8sjce6t2r699kr4nn983sdbo8","status":"confirmed","summary":"Mesadi / Vaisakhadi","region":"India","date":"2024-04-14"},{"id":"20240417_esv4o79q1i4sbcent3kupgvcg4","status":"confirmed","summary":"Rama Navami","region":"India","date":"2024-04-17"},{"id":"20240421_uhq0mve2jftnot6ajog0ofq2g8","status":"confirmed","summary":"Mahavir Jayanti","region":"India","date":"2024-04-21"},{"id":"20240508_1ekflunv2ultlen1u48mjmt9ms","status":"confirmed","summary":"Birthday of Rabindranath","region":"India","date":"2024-05-08"},{"id":"20240523_tc87280l0ahermrtjqimlg5kuk","status":"confirmed","summary":"Buddha Purnima/Vesak","region":"India","date":"2024-05-23"},{"id":"20240617_0scfl5p5tsieepfsbtjpjtqljo","status":"confirmed","summary":"Bakrid/Eid ul-Adha","region":"India","date":"2024-06-17"},{"id":"20240707_35fe3rsbddld7ojhgl3iskda7k","status":"confirmed","summary":"Rath Yatra","region":"India","date":"2024-07-07"},{"id":"20240717_c45i2523mibsl5eohi0j8msi94","status":"confirmed","summary":"Muharram/Ashura","region":"India","date":"2024-07-17"},{"id":"20240815_1dk4afrs7q1oov3639jcf8kgns","status":"confirmed","summary":"Parsi New Year","region":"India","date":"2024-08-15"},{"id":"20240815_qdsu8bvmtomkn9c8qq8jbro62o","status":"confirmed","summary":"Independence Day","region":"India","date":"2024-08-15"},{"id":"20240819_m1t0lhrdmrnc56vn3c9fjjib6s","status":"confirmed","summary":"Raksha Bandhan (Rakhi)","region":"India","date":"2024-08-19"},{"id":"20240826_8fmj8sv0oq9n40b7m796qhi3nc","status":"confirmed","summary":"Janmashtami (Smarta)","region":"India","date":"2024-08-26"},{"id":"20240826_ge12o19jm1csndg1tdosrcoiu4","status":"confirmed","summary":"Janmashtami","region":"India","date":"2024-08-26"},{"id":"20240907_8njq4gvtb1nqq4vol60lkqsbc4","status":"confirmed","summary":"Ganesh Chaturthi/Vinayaka Chaturthi","region":"India","date":"2024-09-07"},{"id":"20240915_1u4db28qebt0ld33un1nl4dm6k","status":"confirmed","summary":"Onam","region":"India","date":"2024-09-15"},{"id":"20240916_67l9ctal3dopjcuoeppdun3ji8","status":"confirmed","summary":"Milad un-Nabi/Id-e-Milad","region":"India","date":"2024-09-16"},{"id":"20241002_vnfo7gnek494spq2mfvmp0ce5g","status":"confirmed","summary":"Mahatma Gandhi Jayanti","region":"India","date":"2024-10-02"},{"id":"20241003_697sco50igqdkc01u3d9oflcoo","status":"confirmed","summary":"First Day of Sharad Navratri","region":"India","date":"2024-10-03"},{"id":"20241009_n1pnkkadfq016oa1spcoto9fm8","status":"confirmed","summary":"First Day of Durga Puja Festivities","region":"India","date":"2024-10-09"},{"id":"20241010_2uh09vmktppptql4l6157srbgk","status":"confirmed","summary":"Maha Saptami","region":"India","date":"2024-10-10"},{"id":"20241011_oo3s8q47k52bq5n5cdu3fa4t8o","status":"confirmed","summary":"Maha Ashtami","region":"India","date":"2024-10-11"},{"id":"20241011_rbm4g88o14ovr4jq25qh0t2kls","status":"confirmed","summary":"Maha Navami","region":"India","date":"2024-10-11"},{"id":"20241012_egjb3ichmunek054p9rp1mcuag","status":"confirmed","summary":"Dussehra","region":"India","date":"2024-10-12"},{"id":"20241017_hpigsainfef48ihffvlh1bocsk","status":"confirmed","summary":"Maharishi Valmiki Jayanti","region":"India","date":"2024-10-17"},{"id":"20241020_quhk0jqkkfd4boaknil3plkubo","status":"confirmed","summary":"Karaka Chaturthi (Karva Chauth)","region":"India","date":"2024-10-20"},{"id":"20241031_8trl2d3dcf10qb6qgd8okigers","status":"confirmed","summary":"Naraka Chaturdasi","region":"India","date":"2024-10-31"},{"id":"20241031_frsesr4i98qdierg4hcme9sr3g","status":"confirmed","summary":"Diwali/Deepavali","region":"India","date":"2024-10-31"},{"id":"20241102_9mqcd5jrd6dct130r11lufktl0","status":"confirmed","summary":"Govardhan Puja","region":"India","date":"2024-11-02"},{"id":"20241103_qbi2qcb43ua5tt9b8oeb4ccib0","status":"confirmed","summary":"Bhai Duj","region":"India","date":"2024-11-03"},{"id":"20241107_cp9qhmg0lu3d7mtmacg68sgfis","status":"confirmed","summary":"Chhat Puja (Pratihar Sashthi/Surya Sashthi)","region":"India","date":"2024-11-07"},{"id":"20241115_j0oopi8fd2gv3o2vp3a7qu3hck","status":"confirmed","summary":"Guru Nanak Jayanti","region":"India","date":"2024-11-15"},{"id":"20241124_sll9benghg3t5dkpb92k9iilpc","status":"confirmed","summary":"Guru Tegh Bahadur\'s Martyrdom Day","region":"India","date":"2024-11-24"},{"id":"20241224_92hua4c6fqklgbufrd6u6hg60o","status":"confirmed","summary":"Christmas Eve","region":"India","date":"2024-12-24"},{"id":"20241225_a6pnarvpc972si0ru4lpnurteg","status":"confirmed","summary":"Christmas","region":"India","date":"2024-12-25"},{"id":"20250101_3v4eqe0inj3ts6dn5uj3dnnh38","status":"confirmed","summary":"New Year\'s Day","region":"India","date":"2025-01-01"},{"id":"20250113_iro0kq9pkgl871ao3aejjhbohc","status":"confirmed","summary":"Lohri","region":"India","date":"2025-01-13"},{"id":"20250114_0te3r41rgds3nk9krkv8u25f7s","status":"confirmed","summary":"Makar Sankranti","region":"India","date":"2025-01-14"},{"id":"20250114_jo2gc2u3jqqtfnvfth5dtqjdk0","status":"confirmed","summary":"Hazarat Ali\'s Birthday","region":"India","date":"2025-01-14"},{"id":"20250114_pao2e07kg7qd5j5s66ioe9ms8k","status":"confirmed","summary":"Pongal","region":"India","date":"2025-01-14"},{"id":"20250126_r2ugkml7cibnioqafgcdhiql5o","status":"confirmed","summary":"Republic Day","region":"India","date":"2025-01-26"},{"id":"20250202_0ns6n3pumnj37pu68ue2vei7t4","status":"confirmed","summary":"Vasant Panchami","region":"India","date":"2025-02-02"},{"id":"20250212_m78ac233f9rfbmlak058r2gqjo","status":"confirmed","summary":"Guru Ravidas Jayanti","region":"India","date":"2025-02-12"},{"id":"20250219_3svqnh2ebap4797prin4675p64","status":"confirmed","summary":"Shivaji Jayanti","region":"India","date":"2025-02-19"},{"id":"20250223_6g23hosei62gjbeb2n1gj74hfc","status":"confirmed","summary":"Maharishi Dayanand Saraswati Jayanti","region":"India","date":"2025-02-23"},{"id":"20250226_3l455abbknfqhjcm0r9pscju4o","status":"confirmed","summary":"Maha Shivaratri/Shivaratri","region":"India","date":"2025-02-26"},{"id":"20250302_mgibohb09spemg1di0odrsaths","status":"confirmed","summary":"Ramadan Start","region":"India","date":"2025-03-02"},{"id":"20250313_ioiqs148glqsitnbk5gp7akego","status":"confirmed","summary":"Holika Dahana","region":"India","date":"2025-03-13"},{"id":"20250314_880adfne4em1veteaa3ekbt0t0","status":"confirmed","summary":"Dolyatra","region":"India","date":"2025-03-14"},{"id":"20250314_jft1v9il64fdgu1r15brig843g","status":"confirmed","summary":"Holi","region":"India","date":"2025-03-14"},{"id":"20250330_e1e0j4rvapltulb3i8i0djbipg","status":"confirmed","summary":"Gudi Padwa","region":"India","date":"2025-03-30"},{"id":"20250330_ft0124o6tm8balomfq8c36t90g","status":"confirmed","summary":"Ugadi","region":"India","date":"2025-03-30"},{"id":"20250330_k3j2getjapni0lrrm88gmcdat8","status":"confirmed","summary":"Chaitra Sukhladi","region":"India","date":"2025-03-30"},{"id":"20250331_6mbtrustn2ogk3t0tq6su07jqs","status":"confirmed","summary":"Ramzan Id/Eid-ul-Fitar","region":"India","date":"2025-03-31"},{"id":"20250331_6r983kq00o1acmk28s9v065bpo","status":"confirmed","summary":"Jamat Ul-Vida","region":"India","date":"2025-03-31"},{"id":"20250406_t12tqa269vablmamc5nl9s0vr8","status":"confirmed","summary":"Rama Navami","region":"India","date":"2025-04-06"},{"id":"20250410_ve9l3hbm6vnbfcumgrso8uo924","status":"confirmed","summary":"Mahavir Jayanti","region":"India","date":"2025-04-10"},{"id":"20250414_btn61qb9r5sl429f34rsjul2o4","status":"confirmed","summary":"Ambedkar Jayanti","region":"India","date":"2025-04-14"},{"id":"20250414_ng0phgr4536n6l2g36pr7e8ic0","status":"confirmed","summary":"Vaisakhi","region":"India","date":"2025-04-14"},{"id":"20250418_q6het5fth1a9gvjct5ro45r97k","status":"confirmed","summary":"Good Friday","region":"India","date":"2025-04-18"},{"id":"20250420_sq0i281m6ffme9v78ibn61nmmo","status":"confirmed","summary":"Easter Day","region":"India","date":"2025-04-20"},{"id":"20250509_53p9m1du5qul081hdvl0lthf20","status":"confirmed","summary":"Birthday of Rabindranath","region":"India","date":"2025-05-09"},{"id":"20250512_rgimkgbi49lscqhubl4ejoj2v8","status":"confirmed","summary":"Buddha Purnima/Vesak","region":"India","date":"2025-05-12"},{"id":"20250607_na6akj9cpjtrqc7nluh86qsjc4","status":"confirmed","summary":"Bakrid/Eid ul-Adha","region":"India","date":"2025-06-07"},{"id":"20250627_l2ushhp85qqdb85o4jta834bkk","status":"confirmed","summary":"Rath Yatra","region":"India","date":"2025-06-27"},{"id":"20250706_skicups5vlr2s8hsr73g3rlgvg","status":"confirmed","summary":"Muharram/Ashura","region":"India","date":"2025-07-06"},{"id":"20250809_efg3hmku1tt1vffb0qgis67hdo","status":"confirmed","summary":"Raksha Bandhan (Rakhi)","region":"India","date":"2025-08-09"},{"id":"20250815_8qm7b5uskde13979s0lfnp4mu8","status":"confirmed","summary":"Parsi New Year","region":"India","date":"2025-08-15"},{"id":"20250815_udhhjiqmkoo3eglkjipb67avmc","status":"confirmed","summary":"Independence Day","region":"India","date":"2025-08-15"},{"id":"20250815_v8q8m0rs6nolqo0rbtearijf2s","status":"confirmed","summary":"Janmashtami (Smarta)","region":"India","date":"2025-08-15"},{"id":"20250816_vas3ed9jgp1avvah10rvhfnj6k","status":"confirmed","summary":"Janmashtami","region":"India","date":"2025-08-16"},{"id":"20250827_83q01407smiov47v7gjqfn710k","status":"confirmed","summary":"Ganesh Chaturthi/Vinayaka Chaturthi","region":"India","date":"2025-08-27"},{"id":"20250905_g15n9g2t7v2f26u8gjoobbsdc8","status":"confirmed","summary":"Onam","region":"India","date":"2025-09-05"},{"id":"20250905_h8n2pa1l3evcod0c35rc1rsfgg","status":"confirmed","summary":"Milad un-Nabi/Id-e-Milad","region":"India","date":"2025-09-05"},{"id":"20250922_vaa1gftbi3k9rl0vp8igmk9j78","status":"confirmed","summary":"First Day of Sharad Navratri","region":"India","date":"2025-09-22"},{"id":"20250928_366mctcgguuu2td15ntu03o2oo","status":"confirmed","summary":"First Day of Durga Puja Festivities","region":"India","date":"2025-09-28"},{"id":"20250929_qodr58ono69tdvc80k943e8jo4","status":"confirmed","summary":"Maha Saptami","region":"India","date":"2025-09-29"},{"id":"20250930_jq5bej7csj2niafno1of2bp8ok","status":"confirmed","summary":"Maha Ashtami","region":"India","date":"2025-09-30"},{"id":"20251001_f6oe2dud7466jmih5glhf8p3mc","status":"confirmed","summary":"Maha Navami","region":"India","date":"2025-10-01"},{"id":"20251002_d33nls6u5mo5anff7s017p501s","status":"confirmed","summary":"Mahatma Gandhi Jayanti","region":"India","date":"2025-10-02"},{"id":"20251002_s7jh8g61u3f0j156c13fqnv2s0","status":"confirmed","summary":"Dussehra","region":"India","date":"2025-10-02"},{"id":"20251007_s5gja2lms8fh9ubb17jdg35958","status":"confirmed","summary":"Maharishi Valmiki Jayanti","region":"India","date":"2025-10-07"},{"id":"20251010_rpiea5i1l2agkvq6jlu7vhtd3k","status":"confirmed","summary":"Karaka Chaturthi (Karva Chauth)","region":"India","date":"2025-10-10"},{"id":"20251020_k3co2tmoqvekeu1f6r22l4533s","status":"confirmed","summary":"Naraka Chaturdasi","region":"India","date":"2025-10-20"},{"id":"20251020_kjj5idkgbeq23tsmirfj6sbkns","status":"confirmed","summary":"Diwali/Deepavali","region":"India","date":"2025-10-20"},{"id":"20251022_s5a7244dgcavrsml900quq1e9k","status":"confirmed","summary":"Govardhan Puja","region":"India","date":"2025-10-22"},{"id":"20251023_3fq93qjhrm6qv8i0jikmbrc3dc","status":"confirmed","summary":"Bhai Duj","region":"India","date":"2025-10-23"},{"id":"20251027_sj9np9h84cjlikkn0mgh6jvmo0","status":"confirmed","summary":"Chhat Puja (Pratihar Sashthi/Surya Sashthi)","region":"India","date":"2025-10-27"},{"id":"20251105_ujqt1atch7f6imr4ebb6nreuf4","status":"confirmed","summary":"Guru Nanak Jayanti","region":"India","date":"2025-11-05"},{"id":"20251124_isp8dlmkj471tlo1k6jrv920lc","status":"confirmed","summary":"Guru Tegh Bahadur\'s Martyrdom Day","region":"India","date":"2025-11-24"},{"id":"20251224_i6os8ue13ju1v1k7dkpab9haag","status":"confirmed","summary":"Christmas Eve","region":"India","date":"2025-12-24"},{"id":"20251225_fsrbitd1g2a236nahl4hvb2pa8","status":"confirmed","summary":"Christmas","region":"India","date":"2025-12-25"},{"id":"20251227_kcv0k99l1drbic93n2r8mfo7sg","status":"confirmed","summary":"Guru Govind Singh Jayanti","region":"India","date":"2025-12-27"}],"Indonesia":[{"id":"20240101_64t7odo6u2jlrnhd8c7kpukqmk","status":"confirmed","summary":"New Year\'s Day","region":"Indonesia","date":"2024-01-01"},{"id":"20240208_qelss0gsptm52a8ck5mpovss04","status":"confirmed","summary":"Ascension of the Prophet Muhammad","region":"Indonesia","date":"2024-02-08"},{"id":"20240209_ttnpufjdhdm5fns132kvac71j4","status":"confirmed","summary":"Lunar New Year Joint Holiday","region":"Indonesia","date":"2024-02-09"},{"id":"20240210_o84ahpmh8irkj2unvv2bdq548c","status":"confirmed","summary":"Lunar New Year\'s Day","region":"Indonesia","date":"2024-02-10"},{"id":"20240214_3ce139u4hlhafibrb5bu8pae20","status":"confirmed","summary":"Election Day","region":"Indonesia","date":"2024-02-14"},{"id":"20240311_b2kshv4cjb7os71rdoc9tgbtso","status":"confirmed","summary":"Bali\'s Day of Silence and Hindu New Year (Nyepi)","region":"Indonesia","date":"2024-03-11"},{"id":"20240312_bbtle4i72ebs0mdsam3amts05c","status":"confirmed","summary":"Ramadan Start","region":"Indonesia","date":"2024-03-12"},{"id":"20240312_l2onng73fgli1ohivvc62ndp2s","status":"confirmed","summary":"Joint Holiday for Bali\'s Day of Silence and Hindu New Year (Nyepi)","region":"Indonesia","date":"2024-03-12"},{"id":"20240329_t86h8jij2kph3suq0qambetjvs","status":"confirmed","summary":"Good Friday","region":"Indonesia","date":"2024-03-29"},{"id":"20240331_eu539mphrm25fkkpv5t6odf2rs","status":"confirmed","summary":"Easter Sunday","region":"Indonesia","date":"2024-03-31"},{"id":"20240408_6ve6k41hb1o2c1ttgis0e4409k","status":"confirmed","summary":"Idul Fitri Joint Holiday","region":"Indonesia","date":"2024-04-08"},{"id":"20240409_vf3ppng2avmplr5unv3vjphs1g","status":"confirmed","summary":"Idul Fitri Joint Holiday","region":"Indonesia","date":"2024-04-09"},{"id":"20240410_4dsnocjm79jnliibtqtom64v48","status":"confirmed","summary":"Idul Fitri","region":"Indonesia","date":"2024-04-10"},{"id":"20240411_p0f99ark0smuovls1t27a208kc","status":"confirmed","summary":"Idul Fitri Holiday","region":"Indonesia","date":"2024-04-11"},{"id":"20240412_uds94hb5156saob0qnadfdoe9c","status":"confirmed","summary":"Idul Fitri Joint Holiday","region":"Indonesia","date":"2024-04-12"},{"id":"20240415_8h3pnj5ps0saffdmonvp66vros","status":"confirmed","summary":"Idul Fitri Joint Holiday","region":"Indonesia","date":"2024-04-15"},{"id":"20240421_sppfibc8q2b8qgmmbgl5gulg0g","status":"confirmed","summary":"Kartini Day","region":"Indonesia","date":"2024-04-21"},{"id":"20240501_vh5m2lobdmhoqa87i45d53v1p4","status":"confirmed","summary":"International Labor Day","region":"Indonesia","date":"2024-05-01"},{"id":"20240509_0mt3plv4dec8tmolnlekj5l8hk","status":"confirmed","summary":"Ascension Day of Jesus Christ","region":"Indonesia","date":"2024-05-09"},{"id":"20240510_ckct4hfupfi0h0ml8jom3n05vk","status":"confirmed","summary":"Joint Holiday after Ascension Day","region":"Indonesia","date":"2024-05-10"},{"id":"20240523_8g5b19p339ebkns0pvl6t83mk8","status":"confirmed","summary":"Waisak Day (Buddha\'s Anniversary)","region":"Indonesia","date":"2024-05-23"},{"id":"20240524_3u3v9kmagfdhhgj7a1rudu5l6s","status":"confirmed","summary":"Joint Holiday for Waisak Day","region":"Indonesia","date":"2024-05-24"},{"id":"20240601_905nvp12c3gak2nv74jvor7cc8","status":"confirmed","summary":"Pancasila Day","region":"Indonesia","date":"2024-06-01"},{"id":"20240617_2l6vjpff7kh2l6ea3nn6j0418s","status":"confirmed","summary":"Idul Adha","region":"Indonesia","date":"2024-06-17"},{"id":"20240618_ng9l4jqlnc0v29jk58sl5h0qoc","status":"confirmed","summary":"Joint Holiday for Idul Adha","region":"Indonesia","date":"2024-06-18"},{"id":"20240707_b3gnqtuo9cfujtkgom3gr9rc4o","status":"confirmed","summary":"Muharram / Islamic New Year","region":"Indonesia","date":"2024-07-07"},{"id":"20240817_k9ju8lnlng8hd8342vlitmpkeo","status":"confirmed","summary":"Indonesian Independence Day","region":"Indonesia","date":"2024-08-17"},{"id":"20240915_f1m90kbd8b1gmbgt2rov8i9nsg","status":"confirmed","summary":"Maulid Nabi Muhammad (The Prophet Muhammad\'s Birthday)","region":"Indonesia","date":"2024-09-15"},{"id":"20241002_rgu48vg4jr38ct6k5te6i4slbg","status":"confirmed","summary":"Batik Day","region":"Indonesia","date":"2024-10-02"},{"id":"20241101_5u5bi782uehpk8k529v3deml80","status":"confirmed","summary":"Diwali","region":"Indonesia","date":"2024-11-01"},{"id":"20241112_pq1902cn6jqno7f0lfidgqv41s","status":"confirmed","summary":"Father\'s Day","region":"Indonesia","date":"2024-11-12"},{"id":"20241125_1usvldjsi9rfbsks1pme5u92as","status":"confirmed","summary":"Teacher\'s Day","region":"Indonesia","date":"2024-11-25"},{"id":"20241222_b8lquq24r41h5lenmbkqs9rg4o","status":"confirmed","summary":"Mother\'s Day","region":"Indonesia","date":"2024-12-22"},{"id":"20241224_7d8ubp3pr4d97fja87ub31ju4k","status":"confirmed","summary":"Christmas Eve","region":"Indonesia","date":"2024-12-24"},{"id":"20241225_0go3sml8qcs4kboc02u4v2a79k","status":"confirmed","summary":"Christmas Day","region":"Indonesia","date":"2024-12-25"},{"id":"20241226_p2j0ghjk1pk2fq3csv87dkmmp4","status":"confirmed","summary":"Boxing Day","region":"Indonesia","date":"2024-12-26"},{"id":"20241231_2jlef6mtlapkr2dn6qtllqibu0","status":"confirmed","summary":"New Year\'s Eve","region":"Indonesia","date":"2024-12-31"},{"id":"20250101_m5laqmt0sgrc2bt20c3ae45qrk","status":"confirmed","summary":"New Year\'s Day","region":"Indonesia","date":"2025-01-01"},{"id":"20250128_223tt8jnbmkl8t9d2pb2oke238","status":"confirmed","summary":"Ascension of the Prophet Muhammad","region":"Indonesia","date":"2025-01-28"},{"id":"20250129_rbseehoh1iq76mllnlr7uhom8s","status":"confirmed","summary":"Lunar New Year\'s Day","region":"Indonesia","date":"2025-01-29"},{"id":"20250302_nkplvcq512khoj11lm7d4uvo8g","status":"confirmed","summary":"Ramadan Start","region":"Indonesia","date":"2025-03-02"},{"id":"20250401_2lcn7p851b3cqo1fvtkjh6l54k","status":"confirmed","summary":"Idul Fitri","region":"Indonesia","date":"2025-04-01"},{"id":"20250402_9p6psb07hqjp1t0alqfvhnt83c","status":"confirmed","summary":"Idul Fitri Holiday","region":"Indonesia","date":"2025-04-02"},{"id":"20250418_14j238ls7oianmrn8niiljchb8","status":"confirmed","summary":"Good Friday","region":"Indonesia","date":"2025-04-18"},{"id":"20250420_osi9glelqf0fpc801mh62fdav0","status":"confirmed","summary":"Easter Sunday","region":"Indonesia","date":"2025-04-20"},{"id":"20250421_jqou5f610ngpu7hta4u9skdltk","status":"confirmed","summary":"Kartini Day","region":"Indonesia","date":"2025-04-21"},{"id":"20250501_iib59q987erq3j0gcsdaur5l0c","status":"confirmed","summary":"International Labor Day","region":"Indonesia","date":"2025-05-01"},{"id":"20250513_kr2t3gqsajbsi17fr02r8q2q20","status":"confirmed","summary":"Waisak Day (Buddha\'s Anniversary)","region":"Indonesia","date":"2025-05-13"},{"id":"20250529_f3vhgff6134n0ek4j2epsttl5g","status":"confirmed","summary":"Ascension Day of Jesus Christ","region":"Indonesia","date":"2025-05-29"},{"id":"20250601_28nghpcnt359oc8mfu5aloiemc","status":"confirmed","summary":"Pancasila Day","region":"Indonesia","date":"2025-06-01"},{"id":"20250607_u9cjc7a0n31fmb5q0oj84uj27g","status":"confirmed","summary":"Idul Adha","region":"Indonesia","date":"2025-06-07"},{"id":"20250627_32mdbhobhm2vgjbv9pp01doue0","status":"confirmed","summary":"Muharram / Islamic New Year","region":"Indonesia","date":"2025-06-27"},{"id":"20250817_j7kq7ff552b2r48ds2rga32hlg","status":"confirmed","summary":"Indonesian Independence Day","region":"Indonesia","date":"2025-08-17"},{"id":"20250905_jieo1rig0g0e3leuubsio32aqo","status":"confirmed","summary":"Maulid Nabi Muhammad (The Prophet Muhammad\'s Birthday)","region":"Indonesia","date":"2025-09-05"},{"id":"20251002_989s6jc77j7g1t0pe31diqsmvo","status":"confirmed","summary":"Batik Day","region":"Indonesia","date":"2025-10-02"},{"id":"20251021_k8lvn4qns1onefrp9ei15v8n0g","status":"confirmed","summary":"Diwali","region":"Indonesia","date":"2025-10-21"},{"id":"20251112_6k447n098k0nu8itiovoi79mhk","status":"confirmed","summary":"Father\'s Day","region":"Indonesia","date":"2025-11-12"},{"id":"20251125_vs9kk85c2pcudma81dr38bjalk","status":"confirmed","summary":"Teacher\'s Day","region":"Indonesia","date":"2025-11-25"},{"id":"20251222_6qks80lldtr8nchmro1qetvpu4","status":"confirmed","summary":"Mother\'s Day","region":"Indonesia","date":"2025-12-22"},{"id":"20251224_oqaj8mg9qt7opcgd82lplumnn4","status":"confirmed","summary":"Christmas Eve","region":"Indonesia","date":"2025-12-24"},{"id":"20251225_5q2ro454ip1r16leirnnsh2dkk","status":"confirmed","summary":"Christmas Day","region":"Indonesia","date":"2025-12-25"},{"id":"20251231_88edtskfso8ubjumntr5ltbkm8","status":"confirmed","summary":"New Year\'s Eve","region":"Indonesia","date":"2025-12-31"}],"Iraq":[{"id":"20240101_h2eth352dc4eui9jeg02tinpps","status":"confirmed","summary":"New Year\'s Day","region":"Iraq","date":"2024-01-01"},{"id":"20240106_ubpmtcujhsr097rf7kjvr4m6sc","status":"confirmed","summary":"Army Day","region":"Iraq","date":"2024-01-06"},{"id":"20240306_rcbiboj4kdb88u62aj8o78f0qk","status":"confirmed","summary":"National Day of Tolerance and Coexistence","region":"Iraq","date":"2024-03-06"},{"id":"20240311_dl9gh1p3i9h2b09k13c582h8hg","status":"confirmed","summary":"Ramadan Start","region":"Iraq","date":"2024-03-11"},{"id":"20240312_qu08eo5pqkvfj27ubqe4n7bjls","status":"confirmed","summary":"Ramadan Start","region":"Iraq","date":"2024-03-12"},{"id":"20240321_34r73s35p5b1muh852nn72b780","status":"confirmed","summary":"Nowruz","region":"Iraq","date":"2024-03-21"},{"id":"20240410_ecv2jqdqnsqsgbcc58q7o8djro","status":"confirmed","summary":"Eid al-Fitr","region":"Iraq","date":"2024-04-10"},{"id":"20240411_1jo1hkqdqsip4p4pf6ugt2o978","status":"confirmed","summary":"Eid al-Fitr holiday","region":"Iraq","date":"2024-04-11"},{"id":"20240412_e4imi015cloccq0e8f0vfnf418","status":"confirmed","summary":"Eid al-Fitr holiday","region":"Iraq","date":"2024-04-12"},{"id":"20240501_q5nafv0ruaehpgfme5cgeitq00","status":"confirmed","summary":"Labor Day","region":"Iraq","date":"2024-05-01"},{"id":"20240616_qr8qch4tgjnr11er6tg0sg1l8c","status":"confirmed","summary":"Eid al-Adha","region":"Iraq","date":"2024-06-16"},{"id":"20240617_elggjs8ce7ndvldsfionkq2b80","status":"confirmed","summary":"Eid al-Adha holiday","region":"Iraq","date":"2024-06-17"},{"id":"20240618_3qic4lkds3nt011b6bg714urjk","status":"confirmed","summary":"Eid al-Adha holiday","region":"Iraq","date":"2024-06-18"},{"id":"20240619_ec3fahgmdltp36tg0tqbm58e7k","status":"confirmed","summary":"Eid al-Adha holiday","region":"Iraq","date":"2024-06-19"},{"id":"20240707_e581v1f215ljv4caigu1pc3rrk","status":"confirmed","summary":"Islamic New Year","region":"Iraq","date":"2024-07-07"},{"id":"20240714_rimmloidn6keaq4ar4e5qlctok","status":"confirmed","summary":"Republic Day","region":"Iraq","date":"2024-07-14"},{"id":"20240716_ohuvsc1j045s18j9nktopebhh0","status":"confirmed","summary":"Ashura","region":"Iraq","date":"2024-07-16"},{"id":"20240915_e9ab6l8mebc9v2028d68s6vpu0","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Iraq","date":"2024-09-15"},{"id":"20241003_s24lu8hthlti6lftqg30i3p9io","status":"confirmed","summary":"Iraqi Independence Day","region":"Iraq","date":"2024-10-03"},{"id":"20241210_veinnfp8prlmvovnujt3eflfds","status":"confirmed","summary":"Anniversary of Victory over ISIS","region":"Iraq","date":"2024-12-10"},{"id":"20241225_idfaas1od304mvfoi2r0fjtg4s","status":"confirmed","summary":"Christmas Day","region":"Iraq","date":"2024-12-25"},{"id":"20241231_jm5opsr8839pnfqdjcp9641fac","status":"confirmed","summary":"New Year\'s Eve","region":"Iraq","date":"2024-12-31"},{"id":"20250101_4e7jeaejoqdtulbcr0mtv1qhs0","status":"confirmed","summary":"New Year\'s Day","region":"Iraq","date":"2025-01-01"},{"id":"20250106_qg4hprfj035gl5g15t9qmjttdo","status":"confirmed","summary":"Army Day","region":"Iraq","date":"2025-01-06"},{"id":"20250301_upl2hne96a4n5tndkmj639lhkc","status":"confirmed","summary":"Ramadan Start","region":"Iraq","date":"2025-03-01"},{"id":"20250306_i99esa992312a0ujtqj4ekr0cs","status":"confirmed","summary":"National Day of Tolerance and Coexistence","region":"Iraq","date":"2025-03-06"},{"id":"20250321_a8nn391e1q763bf9p060ah0ga0","status":"confirmed","summary":"Nowruz","region":"Iraq","date":"2025-03-21"},{"id":"20250330_ipj8us42skknngnnlq00f2cavc","status":"confirmed","summary":"Eid al-Fitr","region":"Iraq","date":"2025-03-30"},{"id":"20250331_8sq0t4bqpfjnpbehcagsbb6f84","status":"confirmed","summary":"Eid al-Fitr holiday","region":"Iraq","date":"2025-03-31"},{"id":"20250401_2jdfg3mc0lcku2e9767qq3pti8","status":"confirmed","summary":"Eid al-Fitr holiday","region":"Iraq","date":"2025-04-01"},{"id":"20250501_8vrf27i4sn5gfnm2jnvg0eajkg","status":"confirmed","summary":"Labor Day","region":"Iraq","date":"2025-05-01"},{"id":"20250606_4i81l1ed4petlkdmt159kn9aog","status":"confirmed","summary":"Eid al-Adha","region":"Iraq","date":"2025-06-06"},{"id":"20250607_6vmbj09qfj208udprdjd939o14","status":"confirmed","summary":"Eid al-Adha holiday","region":"Iraq","date":"2025-06-07"},{"id":"20250608_dscgkopl50k2t4f07ao5c0vb48","status":"confirmed","summary":"Eid al-Adha holiday","region":"Iraq","date":"2025-06-08"},{"id":"20250609_4gcs9ufs3994ald9kbhc4huldo","status":"confirmed","summary":"Eid al-Adha holiday","region":"Iraq","date":"2025-06-09"},{"id":"20250626_bnda8m2np21mlbf67u4qu3b10g","status":"confirmed","summary":"Islamic New Year","region":"Iraq","date":"2025-06-26"},{"id":"20250705_0mliakdavn9jlhmcalu393k6kc","status":"confirmed","summary":"Ashura","region":"Iraq","date":"2025-07-05"},{"id":"20250714_8l74cg3d7m7bb1tb7t8dj4lmik","status":"confirmed","summary":"Republic Day","region":"Iraq","date":"2025-07-14"},{"id":"20250904_fpocu3robkfk7275fghdbftkc0","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Iraq","date":"2025-09-04"},{"id":"20251003_sk5qubfg6l22n9vegsus66obgg","status":"confirmed","summary":"Iraqi Independence Day","region":"Iraq","date":"2025-10-03"},{"id":"20251210_n5s9k88q5hh8h1cl7mq8l6g748","status":"confirmed","summary":"Anniversary of Victory over ISIS","region":"Iraq","date":"2025-12-10"},{"id":"20251225_0huf9alkoa2u6irb4ns43ge1j8","status":"confirmed","summary":"Christmas Day","region":"Iraq","date":"2025-12-25"},{"id":"20251231_c1arr4cdk1unh698p1q9pfmi2o","status":"confirmed","summary":"New Year\'s Eve","region":"Iraq","date":"2025-12-31"}],"Iran":[{"id":"20240125_c7a8oacnl9t32opphoabubk94o","status":"confirmed","summary":"Birthday of Imam Ali and Father\'s Day","region":"Iran","date":"2024-01-25"},{"id":"20240208_hjv2njhgeovinl29g0tsa9hqn8","status":"confirmed","summary":"Prophet\'s Ascension","region":"Iran","date":"2024-02-08"},{"id":"20240211_2pm01bv664hnah1061telsae30","status":"confirmed","summary":"Revolution Day","region":"Iran","date":"2024-02-11"},{"id":"20240225_k90tm61uog181r3rcjh6v0trkk","status":"confirmed","summary":"Imam Mahdi\'s birthday","region":"Iran","date":"2024-02-25"},{"id":"20240301_m3k40ltcbg2lvbmbft6hfbphec","status":"confirmed","summary":"Election Holiday","region":"Iran","date":"2024-03-01"},{"id":"20240312_1t5dnf4j3smdoibdcj808aloo8","status":"confirmed","summary":"Ramadan Start","region":"Iran","date":"2024-03-12"},{"id":"20240320_ree2mat4r41hodisuahc1h43tc","status":"confirmed","summary":"Oil Nationalization Day","region":"Iran","date":"2024-03-20"},{"id":"20240320_vsqcphd62hee1pe0dd1t019dfc","status":"confirmed","summary":"Norooz (Persian New Year)","region":"Iran","date":"2024-03-20"},{"id":"20240321_qkir7s6cd3uo619g5c55sucddg","status":"confirmed","summary":"Norooz Holiday","region":"Iran","date":"2024-03-21"},{"id":"20240322_57kk7auirojst75270scqt4c0s","status":"confirmed","summary":"Norooz Holiday","region":"Iran","date":"2024-03-22"},{"id":"20240323_latjvninnhg6lvoi4v73bqor0k","status":"confirmed","summary":"Norooz Holiday","region":"Iran","date":"2024-03-23"},{"id":"20240331_iqpb1a64r03u8lplcvm8qe5j60","status":"confirmed","summary":"Islamic Republic Day","region":"Iran","date":"2024-03-31"},{"id":"20240401_1lv6amito86n9je83spscs502k","status":"confirmed","summary":"Martyrdom of Imam Ali","region":"Iran","date":"2024-04-01"},{"id":"20240410_mdbubn7b2c1phjt4km0bvtkh0c","status":"confirmed","summary":"Eid-e-Fetr (End of Ramadan)","region":"Iran","date":"2024-04-10"},{"id":"20240411_066v8snpptp2jd8npmipgdf7vk","status":"confirmed","summary":"Eid-e-Fetr (Additional Holiday)","region":"Iran","date":"2024-04-11"},{"id":"20240504_pn785em0b7uk2m64el0b6aamoc","status":"confirmed","summary":"Martyrdom of Imam Sadeq","region":"Iran","date":"2024-05-04"},{"id":"20240604_0rmma51oi2jolopufs69ts95qo","status":"confirmed","summary":"Demise of Imam Khomeini","region":"Iran","date":"2024-06-04"},{"id":"20240605_rn98ru3brq90a4ibnuqlaqafno","status":"confirmed","summary":"Khordad National Uprising","region":"Iran","date":"2024-06-05"},{"id":"20240617_t7dimnnqblscc0cpdigu1pou6g","status":"confirmed","summary":"Eid-e-Ghorban (Feast of Sacrifice)","region":"Iran","date":"2024-06-17"},{"id":"20240625_ft0qjipfmk0cihmdak7c40kgno","status":"confirmed","summary":"Eid-e-Ghadir","region":"Iran","date":"2024-06-25"},{"id":"20240715_4fc9aj1839mvo5u4mn6grsh4ac","status":"confirmed","summary":"Tassoua","region":"Iran","date":"2024-07-15"},{"id":"20240716_rot47u9sbbtvd3u27n6gtsji9o","status":"confirmed","summary":"Ashura","region":"Iran","date":"2024-07-16"},{"id":"20240825_5ahuapcmveos0rbg77lmaq1ck4","status":"confirmed","summary":"Arbaeen","region":"Iran","date":"2024-08-25"},{"id":"20240902_cbs6t9a9tcftdslha654jkcu1c","status":"confirmed","summary":"Demise of Prophet Muhammad and Martyrdom of Imam Hassan","region":"Iran","date":"2024-09-02"},{"id":"20240904_jh1lbi7p66e8c34kr85cv9sg7s","status":"confirmed","summary":"Martyrdom of Imam Reza","region":"Iran","date":"2024-09-04"},{"id":"20240912_fmp44fvpnr7t1m6f3c0g2n5as0","status":"confirmed","summary":"Martyrdom of Imam Hasan al-Askari","region":"Iran","date":"2024-09-12"},{"id":"20240921_9tbhp4dh1kortblsksmjvmki6g","status":"confirmed","summary":"Birthday of Prophet Muhammad and Imam Sadeq","region":"Iran","date":"2024-09-21"},{"id":"20241205_hiuo6rg4srf7pb4l7psqa7mhlk","status":"confirmed","summary":"Martyrdom of Hazrat Fatima","region":"Iran","date":"2024-12-05"},{"id":"20250114_e0rrkku7448pi7u8fjbiv2kaqs","status":"confirmed","summary":"Birthday of Imam Ali and Father\'s Day","region":"Iran","date":"2025-01-14"},{"id":"20250128_b1pkp934kdg56s95fklhuo9u2s","status":"confirmed","summary":"Prophet\'s Ascension","region":"Iran","date":"2025-01-28"},{"id":"20250211_f9r1fo3sait65d63enfngm9hp4","status":"confirmed","summary":"Revolution Day","region":"Iran","date":"2025-02-11"},{"id":"20250214_m68dfhudh418tb4ke4gfkkhbs4","status":"confirmed","summary":"Imam Mahdi\'s birthday","region":"Iran","date":"2025-02-14"},{"id":"20250301_gtll618am1nnmmvjaopgm8au6c","status":"confirmed","summary":"Ramadan Start","region":"Iran","date":"2025-03-01"},{"id":"20250321_igtgp1or5r948jfrauf5oafk78","status":"confirmed","summary":"Martyrdom of Imam Ali","region":"Iran","date":"2025-03-21"},{"id":"20250331_1jorm7bo4j4m33sg8le0s5q0a4","status":"confirmed","summary":"Eid-e-Fetr (End of Ramadan)","region":"Iran","date":"2025-03-31"},{"id":"20250401_8clj9t9b3mfbsdrfp0k1u8jp78","status":"confirmed","summary":"Islamic Republic Day","region":"Iran","date":"2025-04-01"},{"id":"20250401_oupjsdkda5co5tlkuheujppoec","status":"confirmed","summary":"Eid-e-Fetr (Additional Holiday)","region":"Iran","date":"2025-04-01"},{"id":"20250424_oiqlel2759a78dl6fvpp2m85kg","status":"confirmed","summary":"Martyrdom of Imam Sadeq","region":"Iran","date":"2025-04-24"},{"id":"20250604_1p3mkjl6vr6ru292bmd0l285bk","status":"confirmed","summary":"Demise of Imam Khomeini","region":"Iran","date":"2025-06-04"},{"id":"20250605_ch57j7onb3gdq2pcgl94o7mnhc","status":"confirmed","summary":"Khordad National Uprising","region":"Iran","date":"2025-06-05"},{"id":"20250606_ub43nbbtkf4h9dngkff5n94kio","status":"confirmed","summary":"Eid-e-Ghorban (Feast of Sacrifice)","region":"Iran","date":"2025-06-06"},{"id":"20250614_lm7e90do1mjg6tfttrqihu3i9k","status":"confirmed","summary":"Eid-e-Ghadir","region":"Iran","date":"2025-06-14"},{"id":"20250705_0cjsc2uroncn9ous0aogv91sa4","status":"confirmed","summary":"Tassoua","region":"Iran","date":"2025-07-05"},{"id":"20250706_j6rpu5avq35653lk6kbmu0nep4","status":"confirmed","summary":"Ashura","region":"Iran","date":"2025-07-06"},{"id":"20250814_jbd3fm0nf24hoi2bma0q3ah35g","status":"confirmed","summary":"Arbaeen","region":"Iran","date":"2025-08-14"},{"id":"20250822_ut17g2rkjftipmjr4fq99bgtd0","status":"confirmed","summary":"Demise of Prophet Muhammad and Martyrdom of Imam Hassan","region":"Iran","date":"2025-08-22"},{"id":"20250824_hli8gpq051v11nvr41btmrasdk","status":"confirmed","summary":"Martyrdom of Imam Reza","region":"Iran","date":"2025-08-24"},{"id":"20250901_l0jlpokl33ptri30cp6cje5tqs","status":"confirmed","summary":"Martyrdom of Imam Hasan al-Askari","region":"Iran","date":"2025-09-01"},{"id":"20250910_h95vvoutst90jbn02ogoe3ribc","status":"confirmed","summary":"Birthday of Prophet Muhammad and Imam Sadeq","region":"Iran","date":"2025-09-10"},{"id":"20251124_e5fpnpclvb2ft6foqcl7kc6fmk","status":"confirmed","summary":"Martyrdom of Hazrat Fatima","region":"Iran","date":"2025-11-24"}],"Ireland":[{"id":"20240101_sivkcmuj8h44vg1fe09qpag3qg","status":"confirmed","summary":"New Year\'s Day","region":"Ireland","date":"2024-01-01"},{"id":"20240201_vlgbjjp44e37jiq77pia2tp080","status":"confirmed","summary":"St. Brigid’s Day","region":"Ireland","date":"2024-02-01"},{"id":"20240205_0u8n81af98ie2nskut3v7lfkn8","status":"confirmed","summary":"St. Brigid’s Day","region":"Ireland","date":"2024-02-05"},{"id":"20240310_39pbl1a65327i23lv9a4bjpeks","status":"confirmed","summary":"Mother\'s Day","region":"Ireland","date":"2024-03-10"},{"id":"20240317_8nlevub27lto3cmmqlb4scigqc","status":"confirmed","summary":"St. Patrick\'s Day","region":"Ireland","date":"2024-03-17"},{"id":"20240329_h30qcd05rusp2ip93u0n6g44f0","status":"confirmed","summary":"Good Friday","region":"Ireland","date":"2024-03-29"},{"id":"20240331_29pbq4p9ge4fi3hk3fao6ei9dc","status":"confirmed","summary":"Easter","region":"Ireland","date":"2024-03-31"},{"id":"20240401_dvsg4lfapsasi3fi499uesjsug","status":"confirmed","summary":"Easter Monday","region":"Ireland","date":"2024-04-01"},{"id":"20240506_bqbavsb3mapgvr8gmlki528g64","status":"confirmed","summary":"May Day","region":"Ireland","date":"2024-05-06"},{"id":"20240603_p2vliv55erp9afucop1e7o2g7k","status":"confirmed","summary":"June Bank Holiday","region":"Ireland","date":"2024-06-03"},{"id":"20240616_50pccittmijn8de84rqa4867ec","status":"confirmed","summary":"Father’s Day","region":"Ireland","date":"2024-06-16"},{"id":"20240805_7hmt4m41jb5rpfs9vdp711cfks","status":"confirmed","summary":"August Bank Holiday","region":"Ireland","date":"2024-08-05"},{"id":"20241028_u1pvtuu7sojpe2g8og2eqkfb6c","status":"confirmed","summary":"October Bank Holiday","region":"Ireland","date":"2024-10-28"},{"id":"20241224_e3uhvjjjg0vrr8iq6kfgdv74cs","status":"confirmed","summary":"Christmas Eve","region":"Ireland","date":"2024-12-24"},{"id":"20241225_5dorlje6siq7q0afunhnjsd8gk","status":"confirmed","summary":"Christmas Day","region":"Ireland","date":"2024-12-25"},{"id":"20241226_jiq13fn93tt8aiv4rk4drlnpvs","status":"confirmed","summary":"St. Stephen\'s Day","region":"Ireland","date":"2024-12-26"},{"id":"20241231_oormkm8l1mqs0fmqvlglk32bm8","status":"confirmed","summary":"New Year\'s Eve","region":"Ireland","date":"2024-12-31"},{"id":"20250101_v7q3hf2q8ahrce13pv1mlmt9n0","status":"confirmed","summary":"New Year\'s Day","region":"Ireland","date":"2025-01-01"},{"id":"20250201_2dha0jst3n2jtp969lg3g94s34","status":"confirmed","summary":"St. Brigid’s Day","region":"Ireland","date":"2025-02-01"},{"id":"20250203_i707ufau95pokb9hc57k886tco","status":"confirmed","summary":"St. Brigid’s Day","region":"Ireland","date":"2025-02-03"},{"id":"20250317_re2d8kq0to36upei1p3d817j14","status":"confirmed","summary":"St. Patrick\'s Day","region":"Ireland","date":"2025-03-17"},{"id":"20250330_j5et19am2ui9c2r2i2dk5atcl0","status":"confirmed","summary":"Mother\'s Day","region":"Ireland","date":"2025-03-30"},{"id":"20250418_3gi78ii4ianavrjqnm3qf67qho","status":"confirmed","summary":"Good Friday","region":"Ireland","date":"2025-04-18"},{"id":"20250420_6rpc4gsdoig6k9ghcp226ft590","status":"confirmed","summary":"Easter","region":"Ireland","date":"2025-04-20"},{"id":"20250421_efv4j560hqdfhl7epbfls4kv00","status":"confirmed","summary":"Easter Monday","region":"Ireland","date":"2025-04-21"},{"id":"20250505_qj9lfgh1111oa3lmkil47hd7fo","status":"confirmed","summary":"May Day","region":"Ireland","date":"2025-05-05"},{"id":"20250602_eaesghjv94fruunk1fojkjl4fk","status":"confirmed","summary":"June Bank Holiday","region":"Ireland","date":"2025-06-02"},{"id":"20250615_pn7j8ult1cdqu6urg67hc11r3k","status":"confirmed","summary":"Father’s Day","region":"Ireland","date":"2025-06-15"},{"id":"20250804_b73cr98mq37vira5sr5fqp5igk","status":"confirmed","summary":"August Bank Holiday","region":"Ireland","date":"2025-08-04"},{"id":"20251027_8d0ojuqpiqojk9nrt7qc5hk36g","status":"confirmed","summary":"October Bank Holiday","region":"Ireland","date":"2025-10-27"},{"id":"20251224_3r3umsukgm1nek5r55mqbadpfk","status":"confirmed","summary":"Christmas Eve","region":"Ireland","date":"2025-12-24"},{"id":"20251225_ah8m2ogtjittttjn6cm2ghhghg","status":"confirmed","summary":"Christmas Day","region":"Ireland","date":"2025-12-25"},{"id":"20251226_bs5l2lmhqbteg3lfo0d2ec47fs","status":"confirmed","summary":"St. Stephen\'s Day","region":"Ireland","date":"2025-12-26"},{"id":"20251231_ot0crbank54gur8u2uv0dvv5ac","status":"confirmed","summary":"New Year\'s Eve","region":"Ireland","date":"2025-12-31"}],"Iceland":[{"id":"20240101_irh4q2as011b7ctdiuqfg1m9i8","status":"confirmed","summary":"New Year\'s Day","region":"Iceland","date":"2024-01-01"},{"id":"20240106_vnpeeumg36ti0i3llerc0qkkls","status":"confirmed","summary":"Twelfth Night","region":"Iceland","date":"2024-01-06"},{"id":"20240214_86papubq7n4ee3d3frmbs2eb54","status":"confirmed","summary":"Valentine\'s Day","region":"Iceland","date":"2024-02-14"},{"id":"20240214_g39q47p83a1697ul4ug7q1q55s","status":"confirmed","summary":"Ash Wednesday","region":"Iceland","date":"2024-02-14"},{"id":"20240328_857k5a1b86k00jm38hdh13dvp8","status":"confirmed","summary":"Maundy Thursday","region":"Iceland","date":"2024-03-28"},{"id":"20240329_rlbd4e5qokev9297rsqun882js","status":"confirmed","summary":"Good Friday","region":"Iceland","date":"2024-03-29"},{"id":"20240330_hnn3mv58jkbc94o5dfg4pg9ogo","status":"confirmed","summary":"Holy Saturday","region":"Iceland","date":"2024-03-30"},{"id":"20240331_28127ch7c4nh906j331fej16u4","status":"confirmed","summary":"Easter Sunday","region":"Iceland","date":"2024-03-31"},{"id":"20240401_0k138dg0gajjmunf23o5oathn4","status":"confirmed","summary":"Easter Monday","region":"Iceland","date":"2024-04-01"},{"id":"20240425_99c3bv2eb6672n2dmhalf39idk","status":"confirmed","summary":"First Day of Summer","region":"Iceland","date":"2024-04-25"},{"id":"20240501_njk25i09bus8mpmvl96t8ajv4c","status":"confirmed","summary":"Labour Day","region":"Iceland","date":"2024-05-01"},{"id":"20240509_httme67cg227nfqkqku8e8tlog","status":"confirmed","summary":"Ascension Day","region":"Iceland","date":"2024-05-09"},{"id":"20240512_m1ctr19b6cv35pm6p5lvai9hjg","status":"confirmed","summary":"Mothers\' Day","region":"Iceland","date":"2024-05-12"},{"id":"20240519_jqc15qki75f58n3tl9nto01o50","status":"confirmed","summary":"Whit Sunday","region":"Iceland","date":"2024-05-19"},{"id":"20240520_filb817l22kmdfjqc26f438f9s","status":"confirmed","summary":"Whit Monday","region":"Iceland","date":"2024-05-20"},{"id":"20240617_14va015q90rc8nkghrtdmjf45g","status":"confirmed","summary":"Icelandic Republic Day","region":"Iceland","date":"2024-06-17"},{"id":"20240805_baqniq9bhm8vtthdpc6niaucls","status":"confirmed","summary":"Commerce Day","region":"Iceland","date":"2024-08-05"},{"id":"20241031_cqj0j0est1fqhepjl8a7k7h748","status":"confirmed","summary":"Halloween","region":"Iceland","date":"2024-10-31"},{"id":"20241110_a88rk4vmnhghe3b7rdbl7ggndk","status":"confirmed","summary":"Fathers\' Day","region":"Iceland","date":"2024-11-10"},{"id":"20241201_o6od0rqnf8u3hr5p6h6v5ago3o","status":"confirmed","summary":"Independence Day","region":"Iceland","date":"2024-12-01"},{"id":"20241224_0dli0ui8hjbeuct3llss6af7b8","status":"confirmed","summary":"Christmas Eve (from noon)","region":"Iceland","date":"2024-12-24"},{"id":"20241225_fc8l9m3gc7e2nu76pttci7fp9c","status":"confirmed","summary":"Christmas Day","region":"Iceland","date":"2024-12-25"},{"id":"20241226_sajio273i2k5n9k3ebksu66oac","status":"confirmed","summary":"Second Day of Christmas","region":"Iceland","date":"2024-12-26"},{"id":"20241231_7o0s9fej7jnen4fdb89fpgttf0","status":"confirmed","summary":"New Year\'s Eve (from noon)","region":"Iceland","date":"2024-12-31"},{"id":"20250101_bslb01h1mvl61pkt39tnpjns78","status":"confirmed","summary":"New Year\'s Day","region":"Iceland","date":"2025-01-01"},{"id":"20250106_0a33u3k8qlolheqkm89hnec3f0","status":"confirmed","summary":"Twelfth Night","region":"Iceland","date":"2025-01-06"},{"id":"20250214_eg02tv5ph20no6q4bn2j03jh04","status":"confirmed","summary":"Valentine\'s Day","region":"Iceland","date":"2025-02-14"},{"id":"20250305_909o4nv7q67j5dmebqomqlls1o","status":"confirmed","summary":"Ash Wednesday","region":"Iceland","date":"2025-03-05"},{"id":"20250417_3ts7cls8lg61pa649t8m09l910","status":"confirmed","summary":"Maundy Thursday","region":"Iceland","date":"2025-04-17"},{"id":"20250418_m7s8p14pi9h86u9qjpri1ngn3k","status":"confirmed","summary":"Good Friday","region":"Iceland","date":"2025-04-18"},{"id":"20250419_qk9kg0cgot00qbeomvr7j3jkf0","status":"confirmed","summary":"Holy Saturday","region":"Iceland","date":"2025-04-19"},{"id":"20250420_tg8t63limhfo5g66l4smi7et74","status":"confirmed","summary":"Easter Sunday","region":"Iceland","date":"2025-04-20"},{"id":"20250421_kuut8hc2mqmapcoqpo7lrqjaas","status":"confirmed","summary":"Easter Monday","region":"Iceland","date":"2025-04-21"},{"id":"20250424_b7fjfc4cjfusc5nkpdvboqvb34","status":"confirmed","summary":"First Day of Summer","region":"Iceland","date":"2025-04-24"},{"id":"20250501_muiob4lrsg099fnskds1cab750","status":"confirmed","summary":"Labour Day","region":"Iceland","date":"2025-05-01"},{"id":"20250511_vusr3qub6oa659hlch162f0960","status":"confirmed","summary":"Mothers\' Day","region":"Iceland","date":"2025-05-11"},{"id":"20250529_6mrvh09k4gdf15funtsj0g53gs","status":"confirmed","summary":"Ascension Day","region":"Iceland","date":"2025-05-29"},{"id":"20250608_rm58g3b6oob2apd7v542rv8lu8","status":"confirmed","summary":"Whit Sunday","region":"Iceland","date":"2025-06-08"},{"id":"20250609_g4ph4hhjsukndja5sibp0735vc","status":"confirmed","summary":"Whit Monday","region":"Iceland","date":"2025-06-09"},{"id":"20250617_qtkscpu2nelivicc166leeh3r8","status":"confirmed","summary":"Icelandic Republic Day","region":"Iceland","date":"2025-06-17"},{"id":"20250804_e2kq8lt4dphnin0ta3lo3qusd4","status":"confirmed","summary":"Commerce Day","region":"Iceland","date":"2025-08-04"},{"id":"20251031_uajntrb18od1mi9bfkdjtfo26k","status":"confirmed","summary":"Halloween","region":"Iceland","date":"2025-10-31"},{"id":"20251109_ijg2k1ps8t3cdv4a8cmvc4inrk","status":"confirmed","summary":"Fathers\' Day","region":"Iceland","date":"2025-11-09"},{"id":"20251201_grklsmma1ccrf65fv0l5grsgrc","status":"confirmed","summary":"Independence Day","region":"Iceland","date":"2025-12-01"},{"id":"20251224_les2u5u4l8r6kss6rcs6i7rggo","status":"confirmed","summary":"Christmas Eve (from noon)","region":"Iceland","date":"2025-12-24"},{"id":"20251225_k0v46b3luloabknmqhd2ussfis","status":"confirmed","summary":"Christmas Day","region":"Iceland","date":"2025-12-25"},{"id":"20251226_1slp2ibj9fbgam28reladt5tfs","status":"confirmed","summary":"Second Day of Christmas","region":"Iceland","date":"2025-12-26"},{"id":"20251231_71erd2ecobh8p5gtrj66tt9br8","status":"confirmed","summary":"New Year\'s Eve (from noon)","region":"Iceland","date":"2025-12-31"}],"Italy":[{"id":"20240101_8sucondsoe26mn1pj63d1imr40","status":"confirmed","summary":"New Year\'s Day","region":"Italy","date":"2024-01-01"},{"id":"20240106_r1f2rum9k9i1vi8cp4jlstolv0","status":"confirmed","summary":"Epiphany","region":"Italy","date":"2024-01-06"},{"id":"20240214_dv1ia2mqmkk347tso7a7roaknk","status":"confirmed","summary":"Ash Wednesday","region":"Italy","date":"2024-02-14"},{"id":"20240319_l3fcuku16qdpba45vn18hvidqk","status":"confirmed","summary":"Father\'s Day","region":"Italy","date":"2024-03-19"},{"id":"20240329_p0mualv18jq64ds7lv2jneqaik","status":"confirmed","summary":"Good Friday","region":"Italy","date":"2024-03-29"},{"id":"20240331_0q1moo2b8lq4alvetaf3tm1c3g","status":"confirmed","summary":"Easter Sunday","region":"Italy","date":"2024-03-31"},{"id":"20240401_h8tubms14rc1ga2tics41hqlqc","status":"confirmed","summary":"Easter Monday","region":"Italy","date":"2024-04-01"},{"id":"20240425_ml9nsbrtes8k9m7o3us55dgvvk","status":"confirmed","summary":"Liberation Day","region":"Italy","date":"2024-04-25"},{"id":"20240501_78q8sdlgbe90r2c1vjbgrpdlpo","status":"confirmed","summary":"Labor Day / May Day","region":"Italy","date":"2024-05-01"},{"id":"20240512_rsvgkvotesaq4jt7378vqgsj88","status":"confirmed","summary":"Mother\'s Day","region":"Italy","date":"2024-05-12"},{"id":"20240602_s5r8pspgsumdh81efv4npb9ltk","status":"confirmed","summary":"Republic Day","region":"Italy","date":"2024-06-02"},{"id":"20240815_7vs9l6lapkg6atbld3mqel4ppg","status":"confirmed","summary":"Assumption of Mary","region":"Italy","date":"2024-08-15"},{"id":"20240815_cricqtk3ct3vtroub7pvodi9g8","status":"confirmed","summary":"Ferragosto","region":"Italy","date":"2024-08-15"},{"id":"20241101_603ka94v2762mj6mf1e8unj4rs","status":"confirmed","summary":"All Saints\' Day","region":"Italy","date":"2024-11-01"},{"id":"20241208_1lun2ial25r1qiku77km6fp8ic","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Italy","date":"2024-12-08"},{"id":"20241225_qsirh49k903vjp01s3j8lfs614","status":"confirmed","summary":"Christmas Day","region":"Italy","date":"2024-12-25"},{"id":"20241226_db5tamn777r8ec2ahm3p1f9ggs","status":"confirmed","summary":"St. Stephen\'s Day","region":"Italy","date":"2024-12-26"},{"id":"20241231_2gomg2nacnadcci4ln18efi4ic","status":"confirmed","summary":"New Year\'s Eve","region":"Italy","date":"2024-12-31"},{"id":"20250101_gu30kpl5v96purh5rmnh866io0","status":"confirmed","summary":"New Year\'s Day","region":"Italy","date":"2025-01-01"},{"id":"20250106_7pgiqgbb4c8hi5hassauti7cug","status":"confirmed","summary":"Epiphany","region":"Italy","date":"2025-01-06"},{"id":"20250305_v2tvdcmqhc6k25etncv8jdjdd4","status":"confirmed","summary":"Ash Wednesday","region":"Italy","date":"2025-03-05"},{"id":"20250319_egv7hhd35385qsncou7u06rsr4","status":"confirmed","summary":"Father\'s Day","region":"Italy","date":"2025-03-19"},{"id":"20250418_fv5kfcc2pntherpt7sqqdqthqs","status":"confirmed","summary":"Good Friday","region":"Italy","date":"2025-04-18"},{"id":"20250420_ren1ov0bihftlktslh0efu5pgk","status":"confirmed","summary":"Easter Sunday","region":"Italy","date":"2025-04-20"},{"id":"20250421_oi9s9monhnh6aj1q5bb7hr692c","status":"confirmed","summary":"Easter Monday","region":"Italy","date":"2025-04-21"},{"id":"20250425_khj2btoss29cj1dhp7l1f4gnrg","status":"confirmed","summary":"Liberation Day","region":"Italy","date":"2025-04-25"},{"id":"20250501_fedp417c9o367n3ce8ia0fe8ns","status":"confirmed","summary":"Labor Day / May Day","region":"Italy","date":"2025-05-01"},{"id":"20250511_kg09jb4p8e8l2ref9m4kijeaoo","status":"confirmed","summary":"Mother\'s Day","region":"Italy","date":"2025-05-11"},{"id":"20250602_52t52apo5sgofelqso86tades0","status":"confirmed","summary":"Republic Day","region":"Italy","date":"2025-06-02"},{"id":"20250815_161hje7jl9dnm3aantnls91m6k","status":"confirmed","summary":"Ferragosto","region":"Italy","date":"2025-08-15"},{"id":"20250815_mke00in2nll1aa38nka57i16qg","status":"confirmed","summary":"Assumption of Mary","region":"Italy","date":"2025-08-15"},{"id":"20251101_h58o5451el3qt8elff41svl5ng","status":"confirmed","summary":"All Saints\' Day","region":"Italy","date":"2025-11-01"},{"id":"20251208_4m5ag6d3kl9qksccj1vm92atfk","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Italy","date":"2025-12-08"},{"id":"20251225_cqt8ddo3mtsoubnr75c3jlsqs4","status":"confirmed","summary":"Christmas Day","region":"Italy","date":"2025-12-25"},{"id":"20251226_p7j6ri4bi5iqcv0irlv4ib8olo","status":"confirmed","summary":"St. Stephen\'s Day","region":"Italy","date":"2025-12-26"},{"id":"20251231_d3lf0s19dmfdhmuk3hbvuskbic","status":"confirmed","summary":"New Year\'s Eve","region":"Italy","date":"2025-12-31"}],"Japan":[{"id":"20240101_5cjf7ahuocoh4u5j0jkpiqc8f8","status":"confirmed","summary":"New Year\'s Day","region":"Japan","date":"2024-01-01"},{"id":"20240108_il1597ahv8fkajk0st2fg7a8ng","status":"confirmed","summary":"Coming of Age Day","region":"Japan","date":"2024-01-08"},{"id":"20240211_h2adm90t2vh0pju4d13h4s1ksg","status":"confirmed","summary":"National Foundation Day","region":"Japan","date":"2024-02-11"},{"id":"20240212_1hqbpk9cop8is7m7t75nl5lug4","status":"confirmed","summary":"National Foundation Day observed","region":"Japan","date":"2024-02-12"},{"id":"20240223_3pp2dc8ookbmjod2hamvnmc7hs","status":"confirmed","summary":"Emperor\'s Birthday","region":"Japan","date":"2024-02-23"},{"id":"20240320_bsuv1j4dsc7ljb5be1repk948c","status":"confirmed","summary":"Spring Equinox","region":"Japan","date":"2024-03-20"},{"id":"20240429_76ad1f1unpg0lv0vncaj7ohc3c","status":"confirmed","summary":"Shōwa Day","region":"Japan","date":"2024-04-29"},{"id":"20240503_a9oh2smie372d7t5082ka95k1s","status":"confirmed","summary":"Constitution Memorial Day","region":"Japan","date":"2024-05-03"},{"id":"20240504_ad6naou4sr7vc64klq6jsh4cd0","status":"confirmed","summary":"Greenery Day","region":"Japan","date":"2024-05-04"},{"id":"20240505_164eu8qca9h3ssi9c841val90k","status":"confirmed","summary":"Children\'s Day","region":"Japan","date":"2024-05-05"},{"id":"20240506_ag32p25flbmfsdqaugv888acus","status":"confirmed","summary":"Children\'s Day observed","region":"Japan","date":"2024-05-06"},{"id":"20240715_ne1lkv7p7jl8pnd6j3283ftl7k","status":"confirmed","summary":"Sea Day","region":"Japan","date":"2024-07-15"},{"id":"20240811_tmki993th5o0j7p33ukesosl3s","status":"confirmed","summary":"Mountain Day","region":"Japan","date":"2024-08-11"},{"id":"20240812_03vqt3rskj8hajdel9sp5u0cmg","status":"confirmed","summary":"Day off for Mountain Day","region":"Japan","date":"2024-08-12"},{"id":"20240916_ou7729a1l0g8mvbr53pbr80t4k","status":"confirmed","summary":"Respect for the Aged Day","region":"Japan","date":"2024-09-16"},{"id":"20240922_504bq2b802fpot2bk3ltnovo3s","status":"confirmed","summary":"Autumn Equinox","region":"Japan","date":"2024-09-22"},{"id":"20240923_2djibgd27hvc4n6i7b85qm3qm0","status":"confirmed","summary":"Autumn Equinox observed","region":"Japan","date":"2024-09-23"},{"id":"20241014_281184fcm9irc5nhi9d4lqe4pk","status":"confirmed","summary":"Sports Day","region":"Japan","date":"2024-10-14"},{"id":"20241103_th6ohd8ad7nph109d5qa7rftio","status":"confirmed","summary":"Culture Day","region":"Japan","date":"2024-11-03"},{"id":"20241104_n7ghcqb7cio3sq880ugnpk48p0","status":"confirmed","summary":"Culture Day observed","region":"Japan","date":"2024-11-04"},{"id":"20241123_brepqn59rkaetfgn37kdf6e3s8","status":"confirmed","summary":"Labor Thanksgiving Day","region":"Japan","date":"2024-11-23"},{"id":"20250101_f51mb26d7d91m8sa5ui7jm5kp4","status":"confirmed","summary":"New Year\'s Day","region":"Japan","date":"2025-01-01"},{"id":"20250113_ee982uugtmr7lni015990010hc","status":"confirmed","summary":"Coming of Age Day","region":"Japan","date":"2025-01-13"},{"id":"20250211_irkp64290ijkqk25nv9a4ifkpc","status":"confirmed","summary":"National Foundation Day","region":"Japan","date":"2025-02-11"},{"id":"20250223_0cq7v3qqup1bm1oa6hduu26gcc","status":"confirmed","summary":"Emperor\'s Birthday","region":"Japan","date":"2025-02-23"},{"id":"20250224_22lrd9c4i3dku9jccsbqgoog3k","status":"confirmed","summary":"Emperor\'s Birthday observed","region":"Japan","date":"2025-02-24"},{"id":"20250320_qp6s0juko21ouobv7g4vs1v3ek","status":"confirmed","summary":"Spring Equinox","region":"Japan","date":"2025-03-20"},{"id":"20250429_cs72tnpudaacacsr19dtsn3690","status":"confirmed","summary":"Shōwa Day","region":"Japan","date":"2025-04-29"},{"id":"20250503_0jtf79lk8f2o1tpv7gauo0pc24","status":"confirmed","summary":"Constitution Memorial Day","region":"Japan","date":"2025-05-03"},{"id":"20250504_pm817jdnd05vc0e487fhrn2glo","status":"confirmed","summary":"Greenery Day","region":"Japan","date":"2025-05-04"},{"id":"20250505_5hdg8md5e5u3of0t1chhrn7ig0","status":"confirmed","summary":"Children\'s Day","region":"Japan","date":"2025-05-05"},{"id":"20250506_246j71j9oadut9tmn9ni4i0rr4","status":"confirmed","summary":"Greenery Day observed","region":"Japan","date":"2025-05-06"},{"id":"20250721_f7f6o0j0k51btr8hbpg6rh2690","status":"confirmed","summary":"Sea Day","region":"Japan","date":"2025-07-21"},{"id":"20250811_9uraad1fug2odltkajbs423lco","status":"confirmed","summary":"Mountain Day","region":"Japan","date":"2025-08-11"},{"id":"20250915_n31ql8cljds30ftqkk2ao4v8vk","status":"confirmed","summary":"Respect for the Aged Day","region":"Japan","date":"2025-09-15"},{"id":"20250923_mailplnom6i8dp8hicrvsf7pes","status":"confirmed","summary":"Autumn Equinox","region":"Japan","date":"2025-09-23"},{"id":"20251013_d93kibau4dkms1tc4vnlqbqjpg","status":"confirmed","summary":"Sports Day","region":"Japan","date":"2025-10-13"},{"id":"20251103_1b3kk2pme1d1pohfupcs727vb0","status":"confirmed","summary":"Culture Day","region":"Japan","date":"2025-11-03"},{"id":"20251123_p1de5u6urerg2lgcdj9hg2l1c0","status":"confirmed","summary":"Labor Thanksgiving Day","region":"Japan","date":"2025-11-23"},{"id":"20251124_75ji2jovis7g7a29ga9hn8m01k","status":"confirmed","summary":"Labor Thanksgiving Day observed","region":"Japan","date":"2025-11-24"}],"Jersey":[{"id":"20240101_opckhadc3qb71mdo8dqq5i90n0","status":"confirmed","summary":"New Year\'s Day","region":"Jersey","date":"2024-01-01"},{"id":"20240329_ojh15jaaa0oj5ldsme8ggo9vn4","status":"confirmed","summary":"Good Friday","region":"Jersey","date":"2024-03-29"},{"id":"20240331_t1nsldo4k5jnubu0k78loijk2o","status":"confirmed","summary":"Daylight Saving Time starts","region":"Jersey","date":"2024-03-31"},{"id":"20240401_lou6bam18f0v7nc5nk9mla68o8","status":"confirmed","summary":"Easter Monday","region":"Jersey","date":"2024-04-01"},{"id":"20240506_bgvobnfo9sch71n22o72bbqiv4","status":"confirmed","summary":"Early May Bank Holiday","region":"Jersey","date":"2024-05-06"},{"id":"20240509_pgjb3pp9o8j3vmjntc1o4m43d4","status":"confirmed","summary":"Liberation Day","region":"Jersey","date":"2024-05-09"},{"id":"20240527_lsfep6jdm88n8t8g7i8ooodoo4","status":"confirmed","summary":"Spring Bank Holiday","region":"Jersey","date":"2024-05-27"},{"id":"20240826_pmkg7rhmis705k1neuh35nnkp4","status":"confirmed","summary":"Summer Bank Holiday","region":"Jersey","date":"2024-08-26"},{"id":"20241027_gsoel6gevnh1ddiesfs6evq8s0","status":"confirmed","summary":"Daylight Saving Time ends","region":"Jersey","date":"2024-10-27"},{"id":"20241225_qsgiajg01vbrd7kbvg9q6sf34c","status":"confirmed","summary":"Christmas Day","region":"Jersey","date":"2024-12-25"},{"id":"20241226_ec9srn99n85h9s47njd02olpn0","status":"confirmed","summary":"Boxing Day","region":"Jersey","date":"2024-12-26"},{"id":"20250101_snbblpq3emn8dp7bgmn3k62frg","status":"confirmed","summary":"New Year\'s Day","region":"Jersey","date":"2025-01-01"},{"id":"20250330_1vmh4amlqo0d5bikamjvlteskc","status":"confirmed","summary":"Daylight Saving Time starts","region":"Jersey","date":"2025-03-30"},{"id":"20250418_aka61qp3sk3ajvptnn85g2e99k","status":"confirmed","summary":"Good Friday","region":"Jersey","date":"2025-04-18"},{"id":"20250421_96dv222jnnmlg57dm938vov78s","status":"confirmed","summary":"Easter Monday","region":"Jersey","date":"2025-04-21"},{"id":"20250505_9mgvp3gdifmhehmkffubvaim9g","status":"confirmed","summary":"Early May Bank Holiday","region":"Jersey","date":"2025-05-05"},{"id":"20250509_eo7rtd9nnbedo86ifqk9roam74","status":"confirmed","summary":"Liberation Day","region":"Jersey","date":"2025-05-09"},{"id":"20250526_kilspmurhet121162nl6bfnnc4","status":"confirmed","summary":"Spring Bank Holiday","region":"Jersey","date":"2025-05-26"},{"id":"20250825_4bugoooke4rr7tdf4putkfcbkg","status":"confirmed","summary":"Summer Bank Holiday","region":"Jersey","date":"2025-08-25"},{"id":"20251026_40fak21jjaovvuq4t8rol1hmt8","status":"confirmed","summary":"Daylight Saving Time ends","region":"Jersey","date":"2025-10-26"},{"id":"20251225_8p14ucpqhj5em9q41g1l7a8ud0","status":"confirmed","summary":"Christmas Day","region":"Jersey","date":"2025-12-25"},{"id":"20251226_sj5uqol3tgfjni72m4v7k2m4o8","status":"confirmed","summary":"Boxing Day","region":"Jersey","date":"2025-12-26"}],"Israel":[{"id":"20240227_3a1gnqed763lq28q2d151m3t54","status":"confirmed","summary":"Municipal Election Day","region":"Israel","date":"2024-02-27"},{"id":"20240323_1tmmdu1eku7rlvds7qa4u2rntc","status":"confirmed","summary":"Purim Eve","region":"Israel","date":"2024-03-23"},{"id":"20240418_f5f2sa1eujrel51gff9et0e018","status":"confirmed","summary":"Aliyah Day","region":"Israel","date":"2024-04-18"},{"id":"20240422_4gt6406knb5daaq2989k0dogq4","status":"confirmed","summary":"Passover Eve","region":"Israel","date":"2024-04-22"},{"id":"20240423_d30mb242s5hdduooabab496aqo","status":"confirmed","summary":"Passover (Day 1)","region":"Israel","date":"2024-04-23"},{"id":"20240424_ampotl7v67ki9svo2sck8o1qs8","status":"confirmed","summary":"Passover (Day 2)","region":"Israel","date":"2024-04-24"},{"id":"20240425_dck7a1a44gjk1q23q6ifjqc0u4","status":"confirmed","summary":"Passover (Day 3)","region":"Israel","date":"2024-04-25"},{"id":"20240426_27pfc5ccrehp61ns3p6euuq8rg","status":"confirmed","summary":"Passover (Day 4)","region":"Israel","date":"2024-04-26"},{"id":"20240427_4ukaco9l915rb2gs7eqqn15nbc","status":"confirmed","summary":"Passover (Day 5)","region":"Israel","date":"2024-04-27"},{"id":"20240428_qkrq377u7cq1cb6skpnr162c5o","status":"confirmed","summary":"Passover (Day 6)","region":"Israel","date":"2024-04-28"},{"id":"20240429_jeh2jvmv1trmufugiq4gbulrc8","status":"confirmed","summary":"Passover (Day 7)","region":"Israel","date":"2024-04-29"},{"id":"20240506_75sscd3vlr7q5k7j5afklkrh60","status":"confirmed","summary":"Yom HaShoah","region":"Israel","date":"2024-05-06"},{"id":"20240513_1svormodvrspcm4p562mbd3578","status":"confirmed","summary":"Yom HaZikaron","region":"Israel","date":"2024-05-13"},{"id":"20240514_c41ooep1sbo9ljjjrci6guo348","status":"confirmed","summary":"Yom HaAtzmaut","region":"Israel","date":"2024-05-14"},{"id":"20240605_aj1t7qd8ggk1v3ktihi9c0p0fc","status":"confirmed","summary":"Jerusalem Day","region":"Israel","date":"2024-06-05"},{"id":"20240611_17u2fl23h9dsdt4qs61oun33o0","status":"confirmed","summary":"Shavuot Eve","region":"Israel","date":"2024-06-11"},{"id":"20240612_njtbfifica0fi2m7b3ot8bfik4","status":"confirmed","summary":"Shavuot","region":"Israel","date":"2024-06-12"},{"id":"20240812_a7c6o1rup6hkmf9mq2sc70qs4o","status":"confirmed","summary":"Tisha B\'Av Eve","region":"Israel","date":"2024-08-12"},{"id":"20240813_o0gcdicijfevjbu6e1ok4casc4","status":"confirmed","summary":"Tisha B\'Av","region":"Israel","date":"2024-08-13"},{"id":"20241002_hq2kkdeveumirqdkcu7sv5bce4","status":"confirmed","summary":"Rosh Hashana Eve","region":"Israel","date":"2024-10-02"},{"id":"20241003_n7efpc1nth1obeae181vtonb2g","status":"confirmed","summary":"Rosh Hashana","region":"Israel","date":"2024-10-03"},{"id":"20241004_4pfvjaoco8o03sk33sg7pquch4","status":"confirmed","summary":"Rosh Hashana (Day 2)","region":"Israel","date":"2024-10-04"},{"id":"20241011_lnacgpd0fbtb4ni47u42k40f0g","status":"confirmed","summary":"Yom Kippur Eve","region":"Israel","date":"2024-10-11"},{"id":"20241012_evfhqdsvqbmrpje4906h8j8pvk","status":"confirmed","summary":"Yom Kippur","region":"Israel","date":"2024-10-12"},{"id":"20241016_9b3hc5hv5k5m2tf3c5vdrgglds","status":"confirmed","summary":"Sukkot Eve","region":"Israel","date":"2024-10-16"},{"id":"20241017_l3bvurnh7ga3thn3h9t4dnk7oo","status":"confirmed","summary":"Sukkot (Day 1)","region":"Israel","date":"2024-10-17"},{"id":"20241018_pqo6i487ls31uc4otgrafmuibs","status":"confirmed","summary":"Sukkot (Day 2)","region":"Israel","date":"2024-10-18"},{"id":"20241019_l90d0oc6evrrbuttuskh1707nc","status":"confirmed","summary":"Sukkot (Day 3)","region":"Israel","date":"2024-10-19"},{"id":"20241020_4o1kjkha8jlgbtok2p5q0taq20","status":"confirmed","summary":"Sukkot (Day 4)","region":"Israel","date":"2024-10-20"},{"id":"20241021_4nrj3dsd84ouuimp9nfjmv9tic","status":"confirmed","summary":"Sukkot (Day 5)","region":"Israel","date":"2024-10-21"},{"id":"20241022_2amgb8qvc171ko4r7jrpnjg2j0","status":"confirmed","summary":"Sukkot (Day 6)","region":"Israel","date":"2024-10-22"},{"id":"20241023_bp2nafm3tjc3vvrd2g98qcmmig","status":"confirmed","summary":"Sukkot (Day 7) / Hoshanah Rabah","region":"Israel","date":"2024-10-23"},{"id":"20241024_gh36fhlfa2td4jr93omds830q0","status":"confirmed","summary":"Shemini Atzeret / Simchat Torah","region":"Israel","date":"2024-10-24"},{"id":"20241108_teje2n8ijrvoh62gsdcnjq4pno","status":"confirmed","summary":"Aliyah Day School Observance","region":"Israel","date":"2024-11-08"},{"id":"20241226_a9j9q6o24l1dei8karu2a8o8bc","status":"confirmed","summary":"Hanukkah (Day 1)","region":"Israel","date":"2024-12-26"},{"id":"20241227_160n8g3jhjv5mfdb8dt1j1ts5g","status":"confirmed","summary":"Hanukkah (Day 2)","region":"Israel","date":"2024-12-27"},{"id":"20241228_6buo7ulk2onv5pqmuou09jgogo","status":"confirmed","summary":"Hanukkah (Day 3)","region":"Israel","date":"2024-12-28"},{"id":"20241229_q5051p264chig1q5lt5mtl7jfg","status":"confirmed","summary":"Hanukkah (Day 4)","region":"Israel","date":"2024-12-29"},{"id":"20241230_hgomp8pj3084b6v12fscc2860o","status":"confirmed","summary":"Hanukkah (Day 5)","region":"Israel","date":"2024-12-30"},{"id":"20241231_28uc6p6h7v27tqh3j4ktf2gl9s","status":"confirmed","summary":"Hanukkah (Day 6) / Rosh Chodesh Tevet","region":"Israel","date":"2024-12-31"},{"id":"20250101_gdpe6vopsn71m4pi8kgo24ugoo","status":"confirmed","summary":"Hanukkah (Day 7)","region":"Israel","date":"2025-01-01"},{"id":"20250102_cmv1vqb5fir0tr36jc3ubqallg","status":"confirmed","summary":"Hanukkah (Day 8)","region":"Israel","date":"2025-01-02"},{"id":"20250313_elubm0uh3ed63j0177l26i7skk","status":"confirmed","summary":"Purim Eve","region":"Israel","date":"2025-03-13"},{"id":"20250408_l8pseefc67nlp4if904l5mgndc","status":"confirmed","summary":"Aliyah Day","region":"Israel","date":"2025-04-08"},{"id":"20250412_gue3e3hi4t1957mt4mgv00765c","status":"confirmed","summary":"Passover Eve","region":"Israel","date":"2025-04-12"},{"id":"20250413_07nama6itqb124mem88kku2nn4","status":"confirmed","summary":"Passover (Day 1)","region":"Israel","date":"2025-04-13"},{"id":"20250414_6h73h6ibufsv912088sh2202p4","status":"confirmed","summary":"Passover (Day 2)","region":"Israel","date":"2025-04-14"},{"id":"20250415_o3amqdj0vkkcksac6uvmr4l45k","status":"confirmed","summary":"Passover (Day 3)","region":"Israel","date":"2025-04-15"},{"id":"20250416_s29omd9nrj90dd65s67d6rtm1k","status":"confirmed","summary":"Passover (Day 4)","region":"Israel","date":"2025-04-16"},{"id":"20250417_4n0mnmsv89dt4peeg9gqtm5i90","status":"confirmed","summary":"Passover (Day 5)","region":"Israel","date":"2025-04-17"},{"id":"20250418_trb7qghq3v3rd2nt0mcedq4ics","status":"confirmed","summary":"Passover (Day 6)","region":"Israel","date":"2025-04-18"},{"id":"20250419_okp4njbi085d80lighbghl8g4g","status":"confirmed","summary":"Passover (Day 7)","region":"Israel","date":"2025-04-19"},{"id":"20250423_0tfihm11h80gk9rrakssls6f7k","status":"confirmed","summary":"Yom HaShoah","region":"Israel","date":"2025-04-23"},{"id":"20250430_ea09raimr560uiplhb8nq5hp5o","status":"confirmed","summary":"Yom HaZikaron","region":"Israel","date":"2025-04-30"},{"id":"20250501_t0e6riab8jadrsaq6j0ek8ru74","status":"confirmed","summary":"Yom HaAtzmaut","region":"Israel","date":"2025-05-01"},{"id":"20250526_11m66ds9lid480mtqoc260caic","status":"confirmed","summary":"Jerusalem Day","region":"Israel","date":"2025-05-26"},{"id":"20250601_mjlvmasm5pr4s33dg0qa8rohqc","status":"confirmed","summary":"Shavuot Eve","region":"Israel","date":"2025-06-01"},{"id":"20250602_ff65hbghqp5g4jsfqvkfl2achs","status":"confirmed","summary":"Shavuot","region":"Israel","date":"2025-06-02"},{"id":"20250802_c2bt59v13uole53uulajg60mj4","status":"confirmed","summary":"Tisha B\'Av Eve","region":"Israel","date":"2025-08-02"},{"id":"20250803_9qtgc4r2i4du7jq6uo9ak3h8pc","status":"confirmed","summary":"Tisha B\'Av","region":"Israel","date":"2025-08-03"},{"id":"20250922_fngeqo7fhlvkvak4b5kskqt7b4","status":"confirmed","summary":"Rosh Hashana Eve","region":"Israel","date":"2025-09-22"},{"id":"20250923_4jogqr009om2pr0k070mpkrvpo","status":"confirmed","summary":"Rosh Hashana","region":"Israel","date":"2025-09-23"},{"id":"20250924_lbfnceo1l15trpv8a8npht03ag","status":"confirmed","summary":"Rosh Hashana (Day 2)","region":"Israel","date":"2025-09-24"},{"id":"20251001_hpd0q62eh52ha8ov59e3lsscvg","status":"confirmed","summary":"Yom Kippur Eve","region":"Israel","date":"2025-10-01"},{"id":"20251002_bjvonkb8jkftmj3baa84kmq1vs","status":"confirmed","summary":"Yom Kippur","region":"Israel","date":"2025-10-02"},{"id":"20251006_7ulnuqhpg58hjbp4reh7lfoorc","status":"confirmed","summary":"Sukkot Eve","region":"Israel","date":"2025-10-06"},{"id":"20251007_l063612jr7o1ed1llf9e15q53s","status":"confirmed","summary":"Sukkot (Day 1)","region":"Israel","date":"2025-10-07"},{"id":"20251008_vkj7ps52v46j7bmvlg213vjbp8","status":"confirmed","summary":"Sukkot (Day 2)","region":"Israel","date":"2025-10-08"},{"id":"20251009_9at4d943lrqv138gro71tjf4v0","status":"confirmed","summary":"Sukkot (Day 3)","region":"Israel","date":"2025-10-09"},{"id":"20251010_3ronngsbqujvp9dff6ao75a61s","status":"confirmed","summary":"Sukkot (Day 4)","region":"Israel","date":"2025-10-10"},{"id":"20251011_18jj58l24eunooeg2nr8g27mnk","status":"confirmed","summary":"Sukkot (Day 5)","region":"Israel","date":"2025-10-11"},{"id":"20251012_te39sdnboco0ktmnl0l8hbhhv0","status":"confirmed","summary":"Sukkot (Day 6)","region":"Israel","date":"2025-10-12"},{"id":"20251013_r32c44sf9bbtv00hq1ah6hkkj4","status":"confirmed","summary":"Sukkot (Day 7) / Hoshanah Rabah","region":"Israel","date":"2025-10-13"},{"id":"20251014_fejr10b11g73m00m9h5daf6924","status":"confirmed","summary":"Shemini Atzeret / Simchat Torah","region":"Israel","date":"2025-10-14"},{"id":"20251029_b1jog5rmt0lrnv1qia1njsrh6c","status":"confirmed","summary":"Aliyah Day School Observance","region":"Israel","date":"2025-10-29"},{"id":"20251215_cr0vs842vq1mnb66fuf750s8do","status":"confirmed","summary":"Hanukkah (Day 1)","region":"Israel","date":"2025-12-15"},{"id":"20251216_s390f5j4kgknfi2rhl9v74ksuk","status":"confirmed","summary":"Hanukkah (Day 2)","region":"Israel","date":"2025-12-16"},{"id":"20251217_hgcfdfn5sbrk018agl1nhadilk","status":"confirmed","summary":"Hanukkah (Day 3)","region":"Israel","date":"2025-12-17"},{"id":"20251218_7no9s0b5lh1kahmqh117rg474s","status":"confirmed","summary":"Hanukkah (Day 4)","region":"Israel","date":"2025-12-18"},{"id":"20251219_5gp3d0qlsri1321b7h9h6guho8","status":"confirmed","summary":"Hanukkah (Day 5)","region":"Israel","date":"2025-12-19"},{"id":"20251220_05r37u7upl9956gu9ej6k8gqn4","status":"confirmed","summary":"Hanukkah (Day 6) / Rosh Chodesh Tevet","region":"Israel","date":"2025-12-20"},{"id":"20251221_4ti9h62inltsav96765r9dvh9k","status":"confirmed","summary":"Hanukkah (Day 7)","region":"Israel","date":"2025-12-21"},{"id":"20251222_og9e78h56mcf8gt659t2cv6slg","status":"confirmed","summary":"Hanukkah (Day 8)","region":"Israel","date":"2025-12-22"}],"Jamaica":[{"id":"20240101_uft4fogn5f53iraim5lissrlgk","status":"confirmed","summary":"New Year\'s Day","region":"Jamaica","date":"2024-01-01"},{"id":"20240214_b3v1si8n0frif4fplmmtnadq9c","status":"confirmed","summary":"Ash Wednesday","region":"Jamaica","date":"2024-02-14"},{"id":"20240214_ecja8btn0g5i95ibopab08nahg","status":"confirmed","summary":"Valentine\'s Day","region":"Jamaica","date":"2024-02-14"},{"id":"20240329_m895q8apgrqqp3fafdlj1es4d4","status":"confirmed","summary":"Good Friday","region":"Jamaica","date":"2024-03-29"},{"id":"20240331_mkdlpttpfc44lt36vf5mf6e1vs","status":"confirmed","summary":"Easter Sunday","region":"Jamaica","date":"2024-03-31"},{"id":"20240401_ptrugq5ndmiqe0p82u3hq11i24","status":"confirmed","summary":"Easter Monday","region":"Jamaica","date":"2024-04-01"},{"id":"20240512_cm7equi7qoknq45t1q72g2itok","status":"confirmed","summary":"Mother\'s Day","region":"Jamaica","date":"2024-05-12"},{"id":"20240523_44kvtf352ab5569kkk8jbvfd2k","status":"confirmed","summary":"Labor Day / May Day","region":"Jamaica","date":"2024-05-23"},{"id":"20240616_jl5csi64n9jhonn7higptgsr70","status":"confirmed","summary":"Father\'s Day","region":"Jamaica","date":"2024-06-16"},{"id":"20240801_gcejjm0evnrtfum913i3ir8k28","status":"confirmed","summary":"Emancipation Day","region":"Jamaica","date":"2024-08-01"},{"id":"20240806_2sjkpclo9un7cq0utjpu9gh400","status":"confirmed","summary":"Independence Day","region":"Jamaica","date":"2024-08-06"},{"id":"20241021_5qcg28v37v0l0qtv1djq082r7o","status":"confirmed","summary":"National Heroes\' Day","region":"Jamaica","date":"2024-10-21"},{"id":"20241224_u7m8u4aq0vb30cvtmn2imnrdlk","status":"confirmed","summary":"Christmas Eve","region":"Jamaica","date":"2024-12-24"},{"id":"20241225_fu28n174konmfkb3472vk6srqc","status":"confirmed","summary":"Christmas Day","region":"Jamaica","date":"2024-12-25"},{"id":"20241226_94m85buu9csrhdkrhg5eg6pago","status":"confirmed","summary":"Boxing Day","region":"Jamaica","date":"2024-12-26"},{"id":"20241231_ps0jha4gu7o9cbdpb9mhtfhkbc","status":"confirmed","summary":"New Year\'s Eve","region":"Jamaica","date":"2024-12-31"},{"id":"20250101_9bu6klhs3vrtutspcc11pvh5mo","status":"confirmed","summary":"New Year\'s Day","region":"Jamaica","date":"2025-01-01"},{"id":"20250214_dqhaot2j39qk26b1s941220fic","status":"confirmed","summary":"Valentine\'s Day","region":"Jamaica","date":"2025-02-14"},{"id":"20250305_sp9a7t6vocph84mcv6e7pvu924","status":"confirmed","summary":"Ash Wednesday","region":"Jamaica","date":"2025-03-05"},{"id":"20250418_ruucgdkc20cet2g2d0j6g8mtgs","status":"confirmed","summary":"Good Friday","region":"Jamaica","date":"2025-04-18"},{"id":"20250420_suthe0q41l32qrff078nslekrg","status":"confirmed","summary":"Easter Sunday","region":"Jamaica","date":"2025-04-20"},{"id":"20250421_kdnl495udj7r58iiq0vl4tlot0","status":"confirmed","summary":"Easter Monday","region":"Jamaica","date":"2025-04-21"},{"id":"20250511_8o6a9ff3dc74cssoab4ugn793c","status":"confirmed","summary":"Mother\'s Day","region":"Jamaica","date":"2025-05-11"},{"id":"20250523_0tss6b3c1b87e3rq657hqn9uis","status":"confirmed","summary":"Labor Day / May Day","region":"Jamaica","date":"2025-05-23"},{"id":"20250615_7jhp3rel22t2qbauaf9vudv5b8","status":"confirmed","summary":"Father\'s Day","region":"Jamaica","date":"2025-06-15"},{"id":"20250801_ukegvt6hqh47a8v48941akska4","status":"confirmed","summary":"Emancipation Day","region":"Jamaica","date":"2025-08-01"},{"id":"20250806_nk1rs85m70nbuev90oqcnccsk0","status":"confirmed","summary":"Independence Day","region":"Jamaica","date":"2025-08-06"},{"id":"20251020_gmcmr630l7j77eng98c2mqn0ng","status":"confirmed","summary":"National Heroes\' Day","region":"Jamaica","date":"2025-10-20"},{"id":"20251224_nh82107tk7l4hrmon28bon05is","status":"confirmed","summary":"Christmas Eve","region":"Jamaica","date":"2025-12-24"},{"id":"20251225_fi1pcrpkfuk2qc7ntu2sh3vi8c","status":"confirmed","summary":"Christmas Day","region":"Jamaica","date":"2025-12-25"},{"id":"20251226_7mo9lkuthe9lpjc09fr2feuocs","status":"confirmed","summary":"Boxing Day","region":"Jamaica","date":"2025-12-26"},{"id":"20251231_85oatdo5ecb5t2m8cei0iuk3s8","status":"confirmed","summary":"New Year\'s Eve","region":"Jamaica","date":"2025-12-31"}],"Jordan":[{"id":"20240101_dht7kv0je4nap1mvc6fjas9nqc","status":"confirmed","summary":"New Year\'s Day","region":"Jordan","date":"2024-01-01"},{"id":"20240208_tnmij0bgq6ac9h03bl1d5epsgc","status":"confirmed","summary":"Al Isra\' wal Miraj","region":"Jordan","date":"2024-02-08"},{"id":"20240312_124227eo4ga5uf08lkfp43vu7s","status":"confirmed","summary":"Ramadan begins","region":"Jordan","date":"2024-03-12"},{"id":"20240329_2cvjjf7lvcup8lfsk6g7i976e4","status":"confirmed","summary":"Good Friday","region":"Jordan","date":"2024-03-29"},{"id":"20240331_ebm3u58vk0qsh26nidvkerpba0","status":"confirmed","summary":"Easter Sunday","region":"Jordan","date":"2024-03-31"},{"id":"20240401_e7ggcmfjprsabea6cn27t7pdu0","status":"confirmed","summary":"Easter Monday","region":"Jordan","date":"2024-04-01"},{"id":"20240409_lfeas8r77ot2ndiracs8af1rig","status":"confirmed","summary":"Eid al-Fitr holiday","region":"Jordan","date":"2024-04-09"},{"id":"20240410_gt1jn3qu064rjl7seaud0843pc","status":"confirmed","summary":"Eid al-Fitr","region":"Jordan","date":"2024-04-10"},{"id":"20240411_enf4jfkl3lr7tif335978tncmg","status":"confirmed","summary":"Eid al-Fitr holiday","region":"Jordan","date":"2024-04-11"},{"id":"20240412_traf5drrusegdn995c24hq883g","status":"confirmed","summary":"Eid al-Fitr holiday","region":"Jordan","date":"2024-04-12"},{"id":"20240428_mph031r0pc0t1f39m5trskr52o","status":"confirmed","summary":"Orthodox Palm Sunday","region":"Jordan","date":"2024-04-28"},{"id":"20240501_muq0q0kkhikv9n08tbl4c4gpfk","status":"confirmed","summary":"Labour Day","region":"Jordan","date":"2024-05-01"},{"id":"20240502_ruomcrc9mptj1fkjrqt7dfedpo","status":"confirmed","summary":"Labour Day","region":"Jordan","date":"2024-05-02"},{"id":"20240503_4ja1u5hhfd5t9ejt8p6tvgq49g","status":"confirmed","summary":"Orthodox Good Friday","region":"Jordan","date":"2024-05-03"},{"id":"20240505_vrk21l7vhanjkt8f7nj61hkolk","status":"confirmed","summary":"Orthodox Easter Day","region":"Jordan","date":"2024-05-05"},{"id":"20240506_ai3ksor7p95rnq106snmkuts0o","status":"confirmed","summary":"Orthodox Easter Monday","region":"Jordan","date":"2024-05-06"},{"id":"20240525_gi0s4cg061snhmosnvq5a6bh58","status":"confirmed","summary":"Independence Day","region":"Jordan","date":"2024-05-25"},{"id":"20240615_te3ku3cb9is6ojhudkm59cid6o","status":"confirmed","summary":"Arafah","region":"Jordan","date":"2024-06-15"},{"id":"20240616_ecfavndmi6nt7s47opjp5008to","status":"confirmed","summary":"Eid al-Adha","region":"Jordan","date":"2024-06-16"},{"id":"20240617_toch37t7dq1l0obohqjfd9rc0g","status":"confirmed","summary":"Eid al-Adha holiday","region":"Jordan","date":"2024-06-17"},{"id":"20240618_svdnkaf696ltnanvunes0h3a80","status":"confirmed","summary":"Eid al-Adha holiday","region":"Jordan","date":"2024-06-18"},{"id":"20240619_dcoqtepekaoq6n726rm1sa210o","status":"confirmed","summary":"Eid al-Adha holiday","region":"Jordan","date":"2024-06-19"},{"id":"20240707_4lhcg5lr0jkmdf9takn36lqtuc","status":"confirmed","summary":"Muharram/New Year","region":"Jordan","date":"2024-07-07"},{"id":"20240915_lvihttri3spgbgnugpb049hogc","status":"confirmed","summary":"Prophet\'s Birthday","region":"Jordan","date":"2024-09-15"},{"id":"20241225_sqb6q2v5iml5e89m0frdth4dtc","status":"confirmed","summary":"Christmas Day","region":"Jordan","date":"2024-12-25"},{"id":"20241226_k82e4titipv40v8jogtf6erdo8","status":"confirmed","summary":"Boxing Day","region":"Jordan","date":"2024-12-26"},{"id":"20250101_hrir9ns4v2f0d7mb8ke0onhkpo","status":"confirmed","summary":"New Year\'s Day","region":"Jordan","date":"2025-01-01"},{"id":"20250126_t39n6tvocgfak5qflie60mhuts","status":"confirmed","summary":"Al Isra\' wal Miraj","region":"Jordan","date":"2025-01-26"},{"id":"20250301_q1dgfbq6lob43sqe3tvhuqi4q4","status":"confirmed","summary":"Ramadan begins","region":"Jordan","date":"2025-03-01"},{"id":"20250330_esrc8adc3oae91fm1qmd2p7r40","status":"confirmed","summary":"Eid al-Fitr","region":"Jordan","date":"2025-03-30"},{"id":"20250331_jb2uqlir477vtsnqhkp9t9s4jk","status":"confirmed","summary":"Eid al-Fitr holiday","region":"Jordan","date":"2025-03-31"},{"id":"20250401_ag8hhhgn8nkpgnj614c2d9m3fc","status":"confirmed","summary":"Eid al-Fitr holiday","region":"Jordan","date":"2025-04-01"},{"id":"20250402_aiaup9vbj73uvkuku3uarnhbas","status":"confirmed","summary":"Eid al-Fitr holiday","region":"Jordan","date":"2025-04-02"},{"id":"20250418_if0u1h3a396246pt0e0f2dgd0k","status":"confirmed","summary":"Orthodox Good Friday","region":"Jordan","date":"2025-04-18"},{"id":"20250418_k6um0h77kfbcfo0csf1pvqk524","status":"confirmed","summary":"Good Friday","region":"Jordan","date":"2025-04-18"},{"id":"20250420_ffnp02b4m70fcdjvdqm1snf0f0","status":"confirmed","summary":"Orthodox Easter Day","region":"Jordan","date":"2025-04-20"},{"id":"20250420_mag5ratgljbq8sacu6v00uh84g","status":"confirmed","summary":"Easter Sunday","region":"Jordan","date":"2025-04-20"},{"id":"20250421_aqoj3alobeh5a7mu5blqt3j8gk","status":"confirmed","summary":"Easter Monday","region":"Jordan","date":"2025-04-21"},{"id":"20250421_pl6be2bda7vplmksv11c9j5tlc","status":"confirmed","summary":"Orthodox Easter Monday","region":"Jordan","date":"2025-04-21"},{"id":"20250501_n1ct58mu7hi0mbj8bc8s0tpils","status":"confirmed","summary":"Labour Day","region":"Jordan","date":"2025-05-01"},{"id":"20250525_iufspop0vst60ev525s667vm04","status":"confirmed","summary":"Independence Day","region":"Jordan","date":"2025-05-25"},{"id":"20250605_0bopvvta8ufkr4l1tjnqf9niok","status":"confirmed","summary":"Arafah","region":"Jordan","date":"2025-06-05"},{"id":"20250606_6cn95ckl53j13dgmdb9r04nbac","status":"confirmed","summary":"Eid al-Adha","region":"Jordan","date":"2025-06-06"},{"id":"20250607_h8pi3erq5vrucm7f6hvaoalah4","status":"confirmed","summary":"Eid al-Adha holiday","region":"Jordan","date":"2025-06-07"},{"id":"20250608_8kh8s3vs0vgef8v60bck3a98ro","status":"confirmed","summary":"Eid al-Adha holiday","region":"Jordan","date":"2025-06-08"},{"id":"20250609_f25ro1aulikpfo7ssq01s4uk3o","status":"confirmed","summary":"Eid al-Adha holiday","region":"Jordan","date":"2025-06-09"},{"id":"20250626_2dredtj1pkasr0hjbr9gdbdkk0","status":"confirmed","summary":"Muharram/New Year","region":"Jordan","date":"2025-06-26"},{"id":"20250904_sjikdkr87a34gnnmnti72oc89s","status":"confirmed","summary":"Prophet\'s Birthday","region":"Jordan","date":"2025-09-04"},{"id":"20251225_951e9emcp7cjncm628p02felj8","status":"confirmed","summary":"Christmas Day","region":"Jordan","date":"2025-12-25"},{"id":"20251226_qproq8ev7o9it67uif53b495n0","status":"confirmed","summary":"Boxing Day","region":"Jordan","date":"2025-12-26"}],"Kenya":[{"id":"20240101_99vjq92uuiq0bdtnki85gvivvg","status":"confirmed","summary":"New Year\'s Day","region":"Kenya","date":"2024-01-01"},{"id":"20240311_ce82t7r7g1iqnb18ket707i6mk","status":"confirmed","summary":"Ramadan Start","region":"Kenya","date":"2024-03-11"},{"id":"20240329_635euk6ppb1313hhl9b2pm13o8","status":"confirmed","summary":"Good Friday","region":"Kenya","date":"2024-03-29"},{"id":"20240331_g1pn91jkfa9bcbhl1vjm2o2eg8","status":"confirmed","summary":"Easter Sunday","region":"Kenya","date":"2024-03-31"},{"id":"20240401_88l54cotbiaa6hvsm0474ksqb4","status":"confirmed","summary":"Easter Monday","region":"Kenya","date":"2024-04-01"},{"id":"20240410_1plhqavbup59r0evhl1paf184o","status":"confirmed","summary":"Idd ul-Fitr","region":"Kenya","date":"2024-04-10"},{"id":"20240501_6rpm6tn5h38q9aqrn8k154scbg","status":"confirmed","summary":"Labour Day/May Day","region":"Kenya","date":"2024-05-01"},{"id":"20240510_32uun6t9alc02p0v5p2ovg8rc4","status":"confirmed","summary":"National Tree Planting Day","region":"Kenya","date":"2024-05-10"},{"id":"20240512_gjplbtk99ims3riu5mjpqblgl8","status":"confirmed","summary":"Mother\'s Day","region":"Kenya","date":"2024-05-12"},{"id":"20240601_dl7iaaklnbgkss2ug08t9f3vd0","status":"confirmed","summary":"Madaraka Day","region":"Kenya","date":"2024-06-01"},{"id":"20240617_3lpku9fionb07v34emtbgvq6mg","status":"confirmed","summary":"Eid al-Adha","region":"Kenya","date":"2024-06-17"},{"id":"20241010_288i2seq8olc5ordb68n22d45c","status":"confirmed","summary":"Mazingira Day","region":"Kenya","date":"2024-10-10"},{"id":"20241020_6fksfs7tf6mtpada3q672evqb0","status":"confirmed","summary":"Mashujaa Day","region":"Kenya","date":"2024-10-20"},{"id":"20241021_fd8t1l67qlub54cpsk1s321n10","status":"confirmed","summary":"Mashujaa Day observed","region":"Kenya","date":"2024-10-21"},{"id":"20241101_sucrt1tmpa9mo4m1usiva0rlt8","status":"confirmed","summary":"Diwali","region":"Kenya","date":"2024-11-01"},{"id":"20241212_gshmuaanv321oak4u2c9llau48","status":"confirmed","summary":"Jamhuri Day","region":"Kenya","date":"2024-12-12"},{"id":"20241224_nd9m3m6lnbvvthsacee8b891lo","status":"confirmed","summary":"Christmas Eve","region":"Kenya","date":"2024-12-24"},{"id":"20241225_ml59roqticblib95orkfe8ra2o","status":"confirmed","summary":"Christmas Day","region":"Kenya","date":"2024-12-25"},{"id":"20241226_f35olj4gupneqapvm4bgmu5h8g","status":"confirmed","summary":"Boxing Day","region":"Kenya","date":"2024-12-26"},{"id":"20241231_05prk3n4395q6rlrt5jv34ccs4","status":"confirmed","summary":"New Year\'s Eve","region":"Kenya","date":"2024-12-31"},{"id":"20250101_ddt1ebsipjoo95kahi6v0qnk2s","status":"confirmed","summary":"New Year\'s Day","region":"Kenya","date":"2025-01-01"},{"id":"20250301_6tg8lbts3hqgh6hflih7m6cmuo","status":"confirmed","summary":"Ramadan Start","region":"Kenya","date":"2025-03-01"},{"id":"20250331_epcljvdu4lg2j4q096tplo4c5c","status":"confirmed","summary":"Idd ul-Fitr","region":"Kenya","date":"2025-03-31"},{"id":"20250418_h0p5jg4pbt8ffklt7kss5aa4to","status":"confirmed","summary":"Good Friday","region":"Kenya","date":"2025-04-18"},{"id":"20250420_0b3g47f92k2v2fptsburm0kf1o","status":"confirmed","summary":"Easter Sunday","region":"Kenya","date":"2025-04-20"},{"id":"20250421_l69dkhm39rdlm76n1dh2aeimp4","status":"confirmed","summary":"Easter Monday","region":"Kenya","date":"2025-04-21"},{"id":"20250501_gq6ifn3filrl0t5t29ernuba50","status":"confirmed","summary":"Labour Day/May Day","region":"Kenya","date":"2025-05-01"},{"id":"20250511_0apfg4lgglopho6atmdosaebl8","status":"confirmed","summary":"Mother\'s Day","region":"Kenya","date":"2025-05-11"},{"id":"20250601_vdgla5egmd7tiio2b1u9ekghgs","status":"confirmed","summary":"Madaraka Day","region":"Kenya","date":"2025-06-01"},{"id":"20250602_7guqcd3ckg8plihoe01ts8hj80","status":"confirmed","summary":"Madaraka Day observed","region":"Kenya","date":"2025-06-02"},{"id":"20250607_u8upsuhhohu740pk46fi1rb524","status":"confirmed","summary":"Eid al-Adha","region":"Kenya","date":"2025-06-07"},{"id":"20251010_udtm5uoe6tjrq6c2g6kdco3rgs","status":"confirmed","summary":"Mazingira Day","region":"Kenya","date":"2025-10-10"},{"id":"20251020_hr7vmo7h3224pghu1sclpki5so","status":"confirmed","summary":"Diwali","region":"Kenya","date":"2025-10-20"},{"id":"20251020_rv3313333ro6816cnnd3m396ck","status":"confirmed","summary":"Mashujaa Day","region":"Kenya","date":"2025-10-20"},{"id":"20251212_is7glja0ffsurdpi7dnj4jjlf8","status":"confirmed","summary":"Jamhuri Day","region":"Kenya","date":"2025-12-12"},{"id":"20251224_cimf3aran89qllc0qdu0oa2dg8","status":"confirmed","summary":"Christmas Eve","region":"Kenya","date":"2025-12-24"},{"id":"20251225_t1pedm6tfq5ls4cl5gjr27n5m8","status":"confirmed","summary":"Christmas Day","region":"Kenya","date":"2025-12-25"},{"id":"20251226_sih5880fkpmuji2jsivoq0l70g","status":"confirmed","summary":"Boxing Day","region":"Kenya","date":"2025-12-26"},{"id":"20251231_f8scbetfvvh81amnlh3vl6kt0s","status":"confirmed","summary":"New Year\'s Eve","region":"Kenya","date":"2025-12-31"}],"Kyrgyzstan":[{"id":"20240101_lhk7366lqmjbsvgi4a7ff40k18","status":"confirmed","summary":"New Year","region":"Kyrgyzstan","date":"2024-01-01"},{"id":"20240107_305r0u9ugvahfsrj8hm94uaq14","status":"confirmed","summary":"Orthodox Christmas Day","region":"Kyrgyzstan","date":"2024-01-07"},{"id":"20240108_qh0gvskhofhh9tdpjcnd8ibo2c","status":"confirmed","summary":"Day off for Orthodox Christmas Day","region":"Kyrgyzstan","date":"2024-01-08"},{"id":"20240223_k35gg6ll8pj9a52vgbbla56cbg","status":"confirmed","summary":"Defender of the Fatherland Day","region":"Kyrgyzstan","date":"2024-02-23"},{"id":"20240308_m1p6u2hnpek913ek7kpim014rg","status":"confirmed","summary":"International Women\'s Day","region":"Kyrgyzstan","date":"2024-03-08"},{"id":"20240311_ej8p32gvr26up1pekhuor470ag","status":"confirmed","summary":"Ramadan Start","region":"Kyrgyzstan","date":"2024-03-11"},{"id":"20240321_slk57qobth50bgj9ftt6h291k4","status":"confirmed","summary":"National Holiday \\"Nooruz\\"","region":"Kyrgyzstan","date":"2024-03-21"},{"id":"20240407_e4c107qqf487ckori32vagnras","status":"confirmed","summary":"April People\'s Revolution Day","region":"Kyrgyzstan","date":"2024-04-07"},{"id":"20240408_v7dnoauenb2umidei2f17t5jng","status":"confirmed","summary":"Day off for April People\'s Revolution Day","region":"Kyrgyzstan","date":"2024-04-08"},{"id":"20240410_1l49unvk8kkl76toqa77nf1djg","status":"confirmed","summary":"Orozo Ait","region":"Kyrgyzstan","date":"2024-04-10"},{"id":"20240501_6b14hcq6oqflbokt34f6nt2gos","status":"confirmed","summary":"May Day","region":"Kyrgyzstan","date":"2024-05-01"},{"id":"20240505_hj34083b3vbo3tcijkdvt8ac9o","status":"confirmed","summary":"Constitution Day of the Kyrgyz Republic","region":"Kyrgyzstan","date":"2024-05-05"},{"id":"20240506_76g45co19mn000vlbpq6ld45co","status":"confirmed","summary":"Day off for Constitution Day of the Kyrgyz Republic","region":"Kyrgyzstan","date":"2024-05-06"},{"id":"20240509_m6b2abk7vvgu9luoel8i6cr3f8","status":"confirmed","summary":"Victory Day","region":"Kyrgyzstan","date":"2024-05-09"},{"id":"20240617_s1hh806es5ksbvdihveko7mrik","status":"confirmed","summary":"Kurman Ait","region":"Kyrgyzstan","date":"2024-06-17"},{"id":"20240831_ckv1gcca21lfe45va5pkl72a2k","status":"confirmed","summary":"Independence Day of the Kyrgyz Republic","region":"Kyrgyzstan","date":"2024-08-31"},{"id":"20240902_608vktmcf4grm255p81j922hgs","status":"confirmed","summary":"Day off for Independence Day of the Kyrgyz Republic","region":"Kyrgyzstan","date":"2024-09-02"},{"id":"20241107_kn844m9vbkor4i7jtmlvt14r60","status":"confirmed","summary":"Days of History and Memory of Ancestors","region":"Kyrgyzstan","date":"2024-11-07"},{"id":"20241108_9fjfniio3u7g0f39h9mst4rcag","status":"confirmed","summary":"Days of History and Memory of Ancestors Holiday","region":"Kyrgyzstan","date":"2024-11-08"},{"id":"20250101_90ia6vm8o4sm6hasr8nfft9b30","status":"confirmed","summary":"New Year","region":"Kyrgyzstan","date":"2025-01-01"},{"id":"20250107_09vu41a0umc859479ah70j77og","status":"confirmed","summary":"Orthodox Christmas Day","region":"Kyrgyzstan","date":"2025-01-07"},{"id":"20250223_tcrpq1lagob7d2krb979di43us","status":"confirmed","summary":"Defender of the Fatherland Day","region":"Kyrgyzstan","date":"2025-02-23"},{"id":"20250224_c1qpoddpv7mitmh2n9ognt9kkc","status":"confirmed","summary":"Day off for Defender of the Fatherland Day","region":"Kyrgyzstan","date":"2025-02-24"},{"id":"20250301_pipa35fl4buaom1jg2snk0k7e4","status":"confirmed","summary":"Ramadan Start","region":"Kyrgyzstan","date":"2025-03-01"},{"id":"20250308_qnpevg0jq6ki1jnivmkqu9hudk","status":"confirmed","summary":"International Women\'s Day","region":"Kyrgyzstan","date":"2025-03-08"},{"id":"20250310_72en13n6c4ilhcgo7t9fq8ksa0","status":"confirmed","summary":"International Women\'s Day observed","region":"Kyrgyzstan","date":"2025-03-10"},{"id":"20250321_6p6pa29mkua3du75c37c2823tc","status":"confirmed","summary":"National Holiday \\"Nooruz\\"","region":"Kyrgyzstan","date":"2025-03-21"},{"id":"20250331_2oe3406k34kt5jqu6530i5vpnk","status":"confirmed","summary":"Orozo Ait","region":"Kyrgyzstan","date":"2025-03-31"},{"id":"20250407_e4n07l3j5j3v4d2bcaogftahso","status":"confirmed","summary":"April People\'s Revolution Day","region":"Kyrgyzstan","date":"2025-04-07"},{"id":"20250501_h5g1qq4u85savj0prglil4uc84","status":"confirmed","summary":"May Day","region":"Kyrgyzstan","date":"2025-05-01"},{"id":"20250505_49elug5r0qnmotmirell2ta7g4","status":"confirmed","summary":"Constitution Day of the Kyrgyz Republic","region":"Kyrgyzstan","date":"2025-05-05"},{"id":"20250509_c6tm1q674fko7mp83jt5u8h898","status":"confirmed","summary":"Victory Day","region":"Kyrgyzstan","date":"2025-05-09"},{"id":"20250607_mvroefupho00ln62k18n6sef44","status":"confirmed","summary":"Kurman Ait","region":"Kyrgyzstan","date":"2025-06-07"},{"id":"20250609_ccu8lcm074g3cvb7dftd9qv178","status":"confirmed","summary":"Day off for Kurman Ait","region":"Kyrgyzstan","date":"2025-06-09"},{"id":"20250831_9hnv4rkch27duvels9rkkts4ek","status":"confirmed","summary":"Independence Day of the Kyrgyz Republic","region":"Kyrgyzstan","date":"2025-08-31"},{"id":"20250901_h5nk6m1olinckqgj1b5dd9u3mc","status":"confirmed","summary":"Day off for Independence Day of the Kyrgyz Republic","region":"Kyrgyzstan","date":"2025-09-01"},{"id":"20251107_ln8vic7eoggtdi2rhrgv5r4doc","status":"confirmed","summary":"Days of History and Memory of Ancestors","region":"Kyrgyzstan","date":"2025-11-07"},{"id":"20251108_pmuu8rs0s7c5p6el4k672a8vok","status":"confirmed","summary":"Days of History and Memory of Ancestors Holiday","region":"Kyrgyzstan","date":"2025-11-08"},{"id":"20251110_ghqju9bbri30jv1i0dl12uotus","status":"confirmed","summary":"Day off for Days of History and Memory of Ancestors Holiday","region":"Kyrgyzstan","date":"2025-11-10"}],"Cambodia":[{"id":"20240101_i5l1c4m434h1nqth85bmt282t4","status":"confirmed","summary":"New Year","region":"Cambodia","date":"2024-01-01"},{"id":"20240107_khbs4junuls1mptc7npddga134","status":"confirmed","summary":"Victory over Genocide Day","region":"Cambodia","date":"2024-01-07"},{"id":"20240308_v11af3i9vksjmohrlloli59gcg","status":"confirmed","summary":"International Women Day","region":"Cambodia","date":"2024-03-08"},{"id":"20240413_0lkfma0ahug2hh48qlu8lnkedk","status":"confirmed","summary":"Khmer New Year Day (Day 1)","region":"Cambodia","date":"2024-04-13"},{"id":"20240414_1gcoaqh1stc65ed5hh6vl5p7vc","status":"confirmed","summary":"Khmer New Year Day (Day 2)","region":"Cambodia","date":"2024-04-14"},{"id":"20240415_9h5lf3c8kuqkmkl9mgn9drk7s8","status":"confirmed","summary":"Khmer New Year Day (Day 3)","region":"Cambodia","date":"2024-04-15"},{"id":"20240416_thinpf9ab8tr6p8mtml4s2lqac","status":"confirmed","summary":"Khmer New Year Day (Day 4)","region":"Cambodia","date":"2024-04-16"},{"id":"20240501_tnmocsuthhre9vnnqki3len23s","status":"confirmed","summary":"Labour Day","region":"Cambodia","date":"2024-05-01"},{"id":"20240514_tt8d903dp7fred9f797tcf7bbg","status":"confirmed","summary":"King\'s Birthday","region":"Cambodia","date":"2024-05-14"},{"id":"20240522_bv9lmk2be9b3a623gva40jbhhc","status":"confirmed","summary":"Visak Bochea Day","region":"Cambodia","date":"2024-05-22"},{"id":"20240526_ch52333645g77kaq9kud6vv90g","status":"confirmed","summary":"Royal Plowing Ceremony","region":"Cambodia","date":"2024-05-26"},{"id":"20240618_e2v7e5ctrbu72iv07855b2ck0s","status":"confirmed","summary":"King\'s Mother\'s Birthday","region":"Cambodia","date":"2024-06-18"},{"id":"20240924_5j4eg6qm3edu6lst9b9ebhfqic","status":"confirmed","summary":"Constitutional Day","region":"Cambodia","date":"2024-09-24"},{"id":"20241001_6hpdmqj0a145rtoihu5am9o7vo","status":"confirmed","summary":"Pchum Ben Festival","region":"Cambodia","date":"2024-10-01"},{"id":"20241002_g0l9b60anj6bnjgjf5vu7778so","status":"confirmed","summary":"Pchum Ben Festival","region":"Cambodia","date":"2024-10-02"},{"id":"20241003_i32opqu0j00in69k71nanfgv3o","status":"confirmed","summary":"Pchum Ben Festival","region":"Cambodia","date":"2024-10-03"},{"id":"20241015_up7502lb76bsd0rpa1utt8klvg","status":"confirmed","summary":"Commemoration Day of King\'s Father","region":"Cambodia","date":"2024-10-15"},{"id":"20241029_r8isgqr67me7tn6fg5dr5sgdi8","status":"confirmed","summary":"King\'s Coronation Day","region":"Cambodia","date":"2024-10-29"},{"id":"20241109_c0trav7qrqch80892ls07eqh8g","status":"confirmed","summary":"Independence Day","region":"Cambodia","date":"2024-11-09"},{"id":"20241114_750j7kkd94rkk52a20l89botko","status":"confirmed","summary":"Water Festival Ceremony (Day 1)","region":"Cambodia","date":"2024-11-14"},{"id":"20241115_4pj5mrjojnvlr4n138gcali16g","status":"confirmed","summary":"Water Festival Ceremony (Day 2)","region":"Cambodia","date":"2024-11-15"},{"id":"20241116_qjigbc55kpnpb873at3js45ggs","status":"confirmed","summary":"Water Festival Ceremony (Day 3)","region":"Cambodia","date":"2024-11-16"},{"id":"20241229_6ks6qcr70gkoclunsjnim5nqto","status":"confirmed","summary":"Peace Day","region":"Cambodia","date":"2024-12-29"},{"id":"20250101_cde4pp6qu7gu9p60307knijj5c","status":"confirmed","summary":"New Year","region":"Cambodia","date":"2025-01-01"},{"id":"20250107_coktujnbgtn97vv31bo564eoag","status":"confirmed","summary":"Victory over Genocide Day","region":"Cambodia","date":"2025-01-07"},{"id":"20250308_pbt6g78c5k05fo4ks6og5jsqf0","status":"confirmed","summary":"International Women Day","region":"Cambodia","date":"2025-03-08"},{"id":"20250501_83ieceu85669us0r2c4i9i0ogg","status":"confirmed","summary":"Labour Day","region":"Cambodia","date":"2025-05-01"},{"id":"20250514_j70s178b61r7hjr62g1emhuukc","status":"confirmed","summary":"King\'s Birthday","region":"Cambodia","date":"2025-05-14"},{"id":"20250618_ttpncev16v9ll3hbu0cemr9s28","status":"confirmed","summary":"King\'s Mother\'s Birthday","region":"Cambodia","date":"2025-06-18"},{"id":"20250924_jh24jiiuqlf20lecme0k3j7tj4","status":"confirmed","summary":"Constitutional Day","region":"Cambodia","date":"2025-09-24"},{"id":"20251015_o6s1lb5gu1r2764h48n4lqbq6g","status":"confirmed","summary":"Commemoration Day of King\'s Father","region":"Cambodia","date":"2025-10-15"},{"id":"20251029_oa3f3mi8iblaimnlqu5curn558","status":"confirmed","summary":"King\'s Coronation Day","region":"Cambodia","date":"2025-10-29"},{"id":"20251109_jkpg78kcqpim2uhc19b02o1vrs","status":"confirmed","summary":"Independence Day","region":"Cambodia","date":"2025-11-09"},{"id":"20251229_j5t7olhkuijvs57e3gf9kcf5k0","status":"confirmed","summary":"Peace Day","region":"Cambodia","date":"2025-12-29"}],"Kiribati":[{"id":"20240101_0fg7gtbr6oef5f6mboqrtht3fg","status":"confirmed","summary":"New Year\'s Day","region":"Kiribati","date":"2024-01-01"},{"id":"20240308_lcincm8pge9uv4pnuqrq3101f4","status":"confirmed","summary":"International Women\'s Day","region":"Kiribati","date":"2024-03-08"},{"id":"20240329_rrm94sdh4s34erbgsjms9se6a4","status":"confirmed","summary":"Good Friday","region":"Kiribati","date":"2024-03-29"},{"id":"20240401_9dji41dc98p6jmnm7eitpabev0","status":"confirmed","summary":"Easter Monday","region":"Kiribati","date":"2024-04-01"},{"id":"20240711_2kd4lr73b2vatitt14fakpktg0","status":"confirmed","summary":"Independence Day Holiday","region":"Kiribati","date":"2024-07-11"},{"id":"20240712_603rt69011b3jv52h5miklh3d4","status":"confirmed","summary":"Independence Day","region":"Kiribati","date":"2024-07-12"},{"id":"20240715_8pdd6hdbr14p9m5h321lm4m11c","status":"confirmed","summary":"Unimwane Day","region":"Kiribati","date":"2024-07-15"},{"id":"20240716_r5ipcp1v0nao64msuf9op0lhsc","status":"confirmed","summary":"Unaine Day","region":"Kiribati","date":"2024-07-16"},{"id":"20240805_qkq2lq30m9pr4899kr5uhumte0","status":"confirmed","summary":"Youth Day","region":"Kiribati","date":"2024-08-05"},{"id":"20241211_a4u9i98l9kh17e75qjoifdoe40","status":"confirmed","summary":"Human Rights and Peace Day","region":"Kiribati","date":"2024-12-11"},{"id":"20241225_5grrkpk9vq1v02fh090cfmsvvo","status":"confirmed","summary":"Christmas Day","region":"Kiribati","date":"2024-12-25"},{"id":"20241226_i49g34vc11vp6uem5c611fjaqk","status":"confirmed","summary":"Boxing Day","region":"Kiribati","date":"2024-12-26"},{"id":"20250101_cvh8gghsv72a1ho3u3fae8go4o","status":"confirmed","summary":"New Year\'s Day","region":"Kiribati","date":"2025-01-01"},{"id":"20250308_uegnbt9ujrlcobm7803k44t314","status":"confirmed","summary":"International Women\'s Day","region":"Kiribati","date":"2025-03-08"},{"id":"20250418_9snon3hhphnc47ha8vfvut2elk","status":"confirmed","summary":"Good Friday","region":"Kiribati","date":"2025-04-18"},{"id":"20250421_90edlcat3notfk00fjqe43gdl0","status":"confirmed","summary":"Easter Monday","region":"Kiribati","date":"2025-04-21"},{"id":"20250711_i2v1kivp4ctqdpvg9h84fpse0o","status":"confirmed","summary":"Independence Day Holiday","region":"Kiribati","date":"2025-07-11"},{"id":"20250712_5pjcutuhctejk7jmos9a41e70g","status":"confirmed","summary":"Independence Day","region":"Kiribati","date":"2025-07-12"},{"id":"20250715_btk9rsr5bjbj9opmqn37ochu3o","status":"confirmed","summary":"Unimwane Day","region":"Kiribati","date":"2025-07-15"},{"id":"20250716_s38djnp5p7pusc5a4l64ctud1k","status":"confirmed","summary":"Unaine Day","region":"Kiribati","date":"2025-07-16"},{"id":"20250804_4j3ep0bbq615fie1nhdd6o6kmg","status":"confirmed","summary":"Youth Day","region":"Kiribati","date":"2025-08-04"},{"id":"20251211_ute51jr6gg75krmkq1im7j97h0","status":"confirmed","summary":"Human Rights and Peace Day","region":"Kiribati","date":"2025-12-11"},{"id":"20251225_0el3k96itc9vhjcri8jih3v8c4","status":"confirmed","summary":"Christmas Day","region":"Kiribati","date":"2025-12-25"},{"id":"20251226_pf5k5l909bip1e8cku2mb41ujc","status":"confirmed","summary":"Boxing Day","region":"Kiribati","date":"2025-12-26"}],"Comoros":[{"id":"20240101_j8g8osu9j253h9na96irddf8no","status":"confirmed","summary":"New Year","region":"Comoros","date":"2024-01-01"},{"id":"20240207_rnc778oo4259nb9r7a9191lgog","status":"confirmed","summary":"Isra and Mi\'raj","region":"Comoros","date":"2024-02-07"},{"id":"20240311_79qb9viu2mig927mjroi7ggv3s","status":"confirmed","summary":"Ramadan Start","region":"Comoros","date":"2024-03-11"},{"id":"20240318_2sg467rmsg0cu64g3ivm4guu8s","status":"confirmed","summary":"Cheikh Al Maarouf Day","region":"Comoros","date":"2024-03-18"},{"id":"20240409_rfrte1t3raoniin49d0a5ge74o","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Comoros","date":"2024-04-09"},{"id":"20240410_vcrhgspjap1kta5s9ffeuhldu0","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Comoros","date":"2024-04-10"},{"id":"20240411_kfor27643rdgpes7c4asb0gblk","status":"confirmed","summary":"Eid al-Fitr","region":"Comoros","date":"2024-04-11"},{"id":"20240501_k834vcklbr5on1m5slm7iu7r08","status":"confirmed","summary":"Labour Day","region":"Comoros","date":"2024-05-01"},{"id":"20240617_al7rbsjaiib8j03g4al2qtv08o","status":"confirmed","summary":"Eid al-Adha","region":"Comoros","date":"2024-06-17"},{"id":"20240618_b9kuh73lgdhbvhn4g65pm6t8t4","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Comoros","date":"2024-06-18"},{"id":"20240706_nge568nof2pc8806hn18enbiec","status":"confirmed","summary":"National Day","region":"Comoros","date":"2024-07-06"},{"id":"20240708_0hcugusp2rpflude491avdc7d0","status":"confirmed","summary":"Muharram","region":"Comoros","date":"2024-07-08"},{"id":"20240916_e94i07f5naol2suq67tjm08ucs","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Comoros","date":"2024-09-16"},{"id":"20241112_l14atn468ce7mso7gjjl108kl0","status":"confirmed","summary":"Maore Day","region":"Comoros","date":"2024-11-12"},{"id":"20250101_arffmfa10h3pooup7i395ghj28","status":"confirmed","summary":"New Year","region":"Comoros","date":"2025-01-01"},{"id":"20250127_pc83j9lcbho7rf31l4jut3cucc","status":"confirmed","summary":"Isra and Mi\'raj","region":"Comoros","date":"2025-01-27"},{"id":"20250301_h655bnbo5londn5u018hruafdo","status":"confirmed","summary":"Ramadan Start","region":"Comoros","date":"2025-03-01"},{"id":"20250318_sf862vj2n42pmaefd7cvtbatjk","status":"confirmed","summary":"Cheikh Al Maarouf Day","region":"Comoros","date":"2025-03-18"},{"id":"20250329_nfctnas0ie8d062nk4bvn68uqs","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Comoros","date":"2025-03-29"},{"id":"20250330_8guk1ehtvk5m0m25uiuf56b3p4","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Comoros","date":"2025-03-30"},{"id":"20250331_d6smsmgo4kdfsde69ib1tkfgsg","status":"confirmed","summary":"Eid al-Fitr","region":"Comoros","date":"2025-03-31"},{"id":"20250501_kjblqmmqhovfm9ppk964ot9jjc","status":"confirmed","summary":"Labour Day","region":"Comoros","date":"2025-05-01"},{"id":"20250607_irfloelebo7ikkheksoedltq8c","status":"confirmed","summary":"Eid al-Adha","region":"Comoros","date":"2025-06-07"},{"id":"20250608_uburcpj2mjpa4417lqmpq6tmro","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Comoros","date":"2025-06-08"},{"id":"20250627_3p2fv2kjrhu9i4ed0jmftnvevg","status":"confirmed","summary":"Muharram","region":"Comoros","date":"2025-06-27"},{"id":"20250706_jmngngpg87jkqe13bb87d4ff0s","status":"confirmed","summary":"National Day","region":"Comoros","date":"2025-07-06"},{"id":"20250905_obtqhq0tdhruja33gdjvve4amc","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Comoros","date":"2025-09-05"},{"id":"20251112_n6qr1et95eip9v5d41l9orr2sc","status":"confirmed","summary":"Maore Day","region":"Comoros","date":"2025-11-12"}],"St. Kitts & Nevis":[{"id":"20240101_8gsvoq3jtt6mnvmgokhvcrjj7k","status":"confirmed","summary":"New Year\'s Day","region":"St. Kitts & Nevis","date":"2024-01-01"},{"id":"20240102_32kvlogf6dla4md9ukobaia1ck","status":"confirmed","summary":"Carnival Day","region":"St. Kitts & Nevis","date":"2024-01-02"},{"id":"20240329_g83s7bqah0ft27qactc2ikh88k","status":"confirmed","summary":"Good Friday","region":"St. Kitts & Nevis","date":"2024-03-29"},{"id":"20240401_qnk3ft2arqg8bio69h0qki7r1k","status":"confirmed","summary":"Easter Monday","region":"St. Kitts & Nevis","date":"2024-04-01"},{"id":"20240506_bgnkhho0b8ce0fu4ruehp3j1og","status":"confirmed","summary":"Labor Day / May Day","region":"St. Kitts & Nevis","date":"2024-05-06"},{"id":"20240520_ss6h78n7lamugqq8g87ndc8mhs","status":"confirmed","summary":"Whit Monday","region":"St. Kitts & Nevis","date":"2024-05-20"},{"id":"20240805_46b31ed1vdel5cmi4bu8ds65f0","status":"confirmed","summary":"Emancipation Day","region":"St. Kitts & Nevis","date":"2024-08-05"},{"id":"20240806_9amiltdhhkut0l3b0b35eu5ovs","status":"confirmed","summary":"Culturama Day","region":"St. Kitts & Nevis","date":"2024-08-06"},{"id":"20240916_26deh20cp9ttuvmvvf8241jqdo","status":"confirmed","summary":"National Heroes Day","region":"St. Kitts & Nevis","date":"2024-09-16"},{"id":"20240919_rqockiqjlvvsgh42n2ls0d0n9s","status":"confirmed","summary":"Independence Day","region":"St. Kitts & Nevis","date":"2024-09-19"},{"id":"20241225_rejdq5eu58em13dauhbvcakbn4","status":"confirmed","summary":"Christmas Day","region":"St. Kitts & Nevis","date":"2024-12-25"},{"id":"20241226_n5jj66mu3m6bnc91e0li6l2f6c","status":"confirmed","summary":"Boxing Day","region":"St. Kitts & Nevis","date":"2024-12-26"},{"id":"20250101_7vq3eg3g72ek1r1060qmeu1gr4","status":"confirmed","summary":"New Year\'s Day","region":"St. Kitts & Nevis","date":"2025-01-01"},{"id":"20250102_chena38p6dje22g1te4ous7g9g","status":"confirmed","summary":"Carnival Day","region":"St. Kitts & Nevis","date":"2025-01-02"},{"id":"20250418_ec4p4hhi3lv3j08nskdqcs2cnc","status":"confirmed","summary":"Good Friday","region":"St. Kitts & Nevis","date":"2025-04-18"},{"id":"20250421_fc00bonglersti22stfffgj3jc","status":"confirmed","summary":"Easter Monday","region":"St. Kitts & Nevis","date":"2025-04-21"},{"id":"20250505_jnpboju43r37kqm4lpf8j2qckc","status":"confirmed","summary":"Labor Day / May Day","region":"St. Kitts & Nevis","date":"2025-05-05"},{"id":"20250609_ibiisd5hnndicgo15p3j8n8jc0","status":"confirmed","summary":"Whit Monday","region":"St. Kitts & Nevis","date":"2025-06-09"},{"id":"20250804_nfmsco2cnd7rfvvm815cfo92e0","status":"confirmed","summary":"Emancipation Day","region":"St. Kitts & Nevis","date":"2025-08-04"},{"id":"20250805_teff2lui5k0fn9pefbamha6fe4","status":"confirmed","summary":"Culturama Day","region":"St. Kitts & Nevis","date":"2025-08-05"},{"id":"20250916_504oqgmu94bvj2cffmr30smvhs","status":"confirmed","summary":"National Heroes Day","region":"St. Kitts & Nevis","date":"2025-09-16"},{"id":"20250919_n5hhapsjfrsuiba0r8t82uqmf8","status":"confirmed","summary":"Independence Day","region":"St. Kitts & Nevis","date":"2025-09-19"},{"id":"20251225_85nqcvub2irdard55c66g8c8u4","status":"confirmed","summary":"Christmas Day","region":"St. Kitts & Nevis","date":"2025-12-25"},{"id":"20251226_jd609hfdl3pruerjhb66mdjvl4","status":"confirmed","summary":"Boxing Day","region":"St. Kitts & Nevis","date":"2025-12-26"}],"North Korea":[{"id":"20240101_ikgbei68fabjeicdatillsrbh0","status":"confirmed","summary":"New Year","region":"North Korea","date":"2024-01-01"},{"id":"20240210_b4k2ubl8uh7laemdf30uam0bus","status":"confirmed","summary":"Seollal","region":"North Korea","date":"2024-02-10"},{"id":"20240216_9hvvke8a6h0kded4p74hcttcqg","status":"confirmed","summary":"Birth date of Kim Jong Il","region":"North Korea","date":"2024-02-16"},{"id":"20240308_autnqam9pesirtoo3fi30qtnlg","status":"confirmed","summary":"International Women\'s Day","region":"North Korea","date":"2024-03-08"},{"id":"20240415_49t3rlbq7a044cl04kksb24kps","status":"confirmed","summary":"Birth Date of Kim Il Sung","region":"North Korea","date":"2024-04-15"},{"id":"20240425_u4fo4m7aht65eemuj7blfruu8o","status":"confirmed","summary":"Chosun People\'s Army Foundation Day","region":"North Korea","date":"2024-04-25"},{"id":"20240501_196honriukdd4qphn1cl9nhs8g","status":"confirmed","summary":"May Day","region":"North Korea","date":"2024-05-01"},{"id":"20240606_t2tvfinfdcbt5mcrl1qlfn8bsg","status":"confirmed","summary":"Chosun Children\'s Union Foundation Day","region":"North Korea","date":"2024-06-06"},{"id":"20240727_t9ibut2a32ivk1tuajv74b84d0","status":"confirmed","summary":"Day of Victory in the Fatherland Liberation War","region":"North Korea","date":"2024-07-27"},{"id":"20240815_rvvvlj37cfptpmvb55hf0verbc","status":"confirmed","summary":"Liberation Day","region":"North Korea","date":"2024-08-15"},{"id":"20240825_6bkrqppqtr4klrdp5big4f56m0","status":"confirmed","summary":"Day of Songun","region":"North Korea","date":"2024-08-25"},{"id":"20240909_j42qsv5hm4ot56oa9dl527cq8g","status":"confirmed","summary":"National Day","region":"North Korea","date":"2024-09-09"},{"id":"20240917_ehglgk5qlsqef41p5fa39jat0k","status":"confirmed","summary":"Chuseok Harvest Festival","region":"North Korea","date":"2024-09-17"},{"id":"20241010_benhu7e2t7bh9p0dlfh9cimqd0","status":"confirmed","summary":"Party Foundation Day","region":"North Korea","date":"2024-10-10"},{"id":"20241116_sp7estvlgjsdrem71lfqda8k60","status":"confirmed","summary":"Mother\'s Day","region":"North Korea","date":"2024-11-16"},{"id":"20241227_adtuga51o7atdrs3chgj4fcfd8","status":"confirmed","summary":"Constitution Day","region":"North Korea","date":"2024-12-27"},{"id":"20250101_deurr4258ibtdj1vbcvvrknn74","status":"confirmed","summary":"New Year","region":"North Korea","date":"2025-01-01"},{"id":"20250129_obvom190ngakjddk9r35g397p4","status":"confirmed","summary":"Seollal","region":"North Korea","date":"2025-01-29"},{"id":"20250216_781ukj75p26bgrhpoeubghv5c0","status":"confirmed","summary":"Birth date of Kim Jong Il","region":"North Korea","date":"2025-02-16"},{"id":"20250308_ftuhp5s027mq6pihjqhtc0imb0","status":"confirmed","summary":"International Women\'s Day","region":"North Korea","date":"2025-03-08"},{"id":"20250415_7vd50fjj1dgppecic0v28uc3kc","status":"confirmed","summary":"Birth Date of Kim Il Sung","region":"North Korea","date":"2025-04-15"},{"id":"20250425_qf63elustgdil8aerdu3d9civ4","status":"confirmed","summary":"Chosun People\'s Army Foundation Day","region":"North Korea","date":"2025-04-25"},{"id":"20250501_bhn1ggvkgs9el44rpgk7gel73k","status":"confirmed","summary":"May Day","region":"North Korea","date":"2025-05-01"},{"id":"20250606_tos8nuo21keeajen77i2806otk","status":"confirmed","summary":"Chosun Children\'s Union Foundation Day","region":"North Korea","date":"2025-06-06"},{"id":"20250727_n87g2c9ev6kv5k9b827q37td44","status":"confirmed","summary":"Day of Victory in the Fatherland Liberation War","region":"North Korea","date":"2025-07-27"},{"id":"20250815_ju36i1lm04pngvvh9odur5gcr4","status":"confirmed","summary":"Liberation Day","region":"North Korea","date":"2025-08-15"},{"id":"20250825_dje8e4vlvih9b1s2sf5ri2gtcc","status":"confirmed","summary":"Day of Songun","region":"North Korea","date":"2025-08-25"},{"id":"20250909_5s8t4tr3p001f4a3h5056l5sb0","status":"confirmed","summary":"National Day","region":"North Korea","date":"2025-09-09"},{"id":"20251010_hc0tmn3e99mj14q2vfrse8e2kc","status":"confirmed","summary":"Party Foundation Day","region":"North Korea","date":"2025-10-10"},{"id":"20251116_a7r0um4rl4goru1b8eksvbqnfs","status":"confirmed","summary":"Mother\'s Day","region":"North Korea","date":"2025-11-16"},{"id":"20251227_287ca5kdvgdlpeldtvb2at29to","status":"confirmed","summary":"Constitution Day","region":"North Korea","date":"2025-12-27"}],"Kuwait":[{"id":"20240101_94k3lalma0ku3n9q77957o3nio","status":"confirmed","summary":"New Year\'s Day","region":"Kuwait","date":"2024-01-01"},{"id":"20240208_k7krktevbf2e0efeu0n11h4abs","status":"confirmed","summary":"Isra and Miraj","region":"Kuwait","date":"2024-02-08"},{"id":"20240225_jioccujdshdl4boraetg0vsbto","status":"confirmed","summary":"National Day","region":"Kuwait","date":"2024-02-25"},{"id":"20240226_44ekf6gme6o7bdg8dt7qq79lpk","status":"confirmed","summary":"Liberation Day","region":"Kuwait","date":"2024-02-26"},{"id":"20240311_20bnbhuekbogf74v4m93dd9uak","status":"confirmed","summary":"Ramadan Start","region":"Kuwait","date":"2024-03-11"},{"id":"20240404_pfng2o437126j2ujnlfoj1os10","status":"confirmed","summary":"Parliamentary Elections Holiday","region":"Kuwait","date":"2024-04-04"},{"id":"20240410_8b052n2npmlb2u7nsinrk564t4","status":"confirmed","summary":"Eid al-Fitr","region":"Kuwait","date":"2024-04-10"},{"id":"20240411_gl0s8hrtnkn016i7d24m7i4l9s","status":"confirmed","summary":"Eid al-Fitr holiday","region":"Kuwait","date":"2024-04-11"},{"id":"20240412_6n4ebjfqh4hh3us890jkufborg","status":"confirmed","summary":"Eid al-Fitr holiday","region":"Kuwait","date":"2024-04-12"},{"id":"20240413_0jmp7ujl2pkh42g4ukuv4rkgf8","status":"confirmed","summary":"Eid al-Fitr holiday","region":"Kuwait","date":"2024-04-13"},{"id":"20240616_dbsjbl2145lku2ltlckj1jnnmo","status":"confirmed","summary":"Waqfat Arafat Day","region":"Kuwait","date":"2024-06-16"},{"id":"20240617_beuktgimnaaqd4e3l3fkp4o3tk","status":"confirmed","summary":"Eid al-Adha","region":"Kuwait","date":"2024-06-17"},{"id":"20240618_ibmmcga3f6sgt1tbbvgbs4393g","status":"confirmed","summary":"Eid al-Adha holiday","region":"Kuwait","date":"2024-06-18"},{"id":"20240619_3s4tj8q2diapdutmm2j8rc97dg","status":"confirmed","summary":"Eid al-Adha holiday","region":"Kuwait","date":"2024-06-19"},{"id":"20240708_sgvf63stodnih0ptv25voi0dfo","status":"confirmed","summary":"Islamic New Year","region":"Kuwait","date":"2024-07-08"},{"id":"20240916_r8slm8bdipjk24slk4dfqtphlk","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Kuwait","date":"2024-09-16"},{"id":"20241231_2s1bje1nbvkl03ovqic6npog54","status":"confirmed","summary":"New Year\'s Eve","region":"Kuwait","date":"2024-12-31"},{"id":"20250101_9g6rb369lkpp867r025uucn23c","status":"confirmed","summary":"New Year\'s Day","region":"Kuwait","date":"2025-01-01"},{"id":"20250127_1uclgog0t936ii740bgd0hhq74","status":"confirmed","summary":"Isra and Miraj","region":"Kuwait","date":"2025-01-27"},{"id":"20250225_flq3r2drd3ingm0t191o7nnu30","status":"confirmed","summary":"National Day","region":"Kuwait","date":"2025-02-25"},{"id":"20250226_igced3sll05mcuh5t98s2tvuts","status":"confirmed","summary":"Liberation Day","region":"Kuwait","date":"2025-02-26"},{"id":"20250301_35liabn7ohbe5ftcg6ssogvi50","status":"confirmed","summary":"Ramadan Start","region":"Kuwait","date":"2025-03-01"},{"id":"20250331_7cb0t9giev3gsadcq10eo8b97g","status":"confirmed","summary":"Eid al-Fitr","region":"Kuwait","date":"2025-03-31"},{"id":"20250401_jh9i0l4cc5543p2pb1e05lunio","status":"confirmed","summary":"Eid al-Fitr holiday","region":"Kuwait","date":"2025-04-01"},{"id":"20250402_ebbf170k6ltv2ru9ovq8j33tsk","status":"confirmed","summary":"Eid al-Fitr holiday","region":"Kuwait","date":"2025-04-02"},{"id":"20250606_u5aq5ieq2sl6u3ioi1gumah8os","status":"confirmed","summary":"Waqfat Arafat Day","region":"Kuwait","date":"2025-06-06"},{"id":"20250607_sf7ch4s85njd634bqh3stpsou4","status":"confirmed","summary":"Eid al-Adha","region":"Kuwait","date":"2025-06-07"},{"id":"20250608_uvcpqonjiui5d9jbv0m6p6d02g","status":"confirmed","summary":"Eid al-Adha holiday","region":"Kuwait","date":"2025-06-08"},{"id":"20250609_5k7mjdlbqf6s7794gg94c8sbqc","status":"confirmed","summary":"Eid al-Adha holiday","region":"Kuwait","date":"2025-06-09"},{"id":"20250627_itaso52e5ndjngt51bum4j8bo0","status":"confirmed","summary":"Islamic New Year","region":"Kuwait","date":"2025-06-27"},{"id":"20250905_ac4n75387uni6tpgujro3o5hdc","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Kuwait","date":"2025-09-05"},{"id":"20251231_kct3a8khskcqopuc8s9s5d1gns","status":"confirmed","summary":"New Year\'s Eve","region":"Kuwait","date":"2025-12-31"}],"Cayman Islands":[{"id":"20240101_5aeo3kgbfusr74hq7n4b2ivo78","status":"confirmed","summary":"New Year\'s Day","region":"Cayman Islands","date":"2024-01-01"},{"id":"20240122_mgf76kck3plukvhb3ppm3smb1k","status":"confirmed","summary":"National Heroes Day","region":"Cayman Islands","date":"2024-01-22"},{"id":"20240214_549uhq2b6a6gec9ombkfb885jg","status":"confirmed","summary":"Ash Wednesday","region":"Cayman Islands","date":"2024-02-14"},{"id":"20240214_cr07r1peofmhfvvohmvv8gd614","status":"confirmed","summary":"Valentine\'s Day","region":"Cayman Islands","date":"2024-02-14"},{"id":"20240329_5sle0ppop812qne1mcv90vgs6s","status":"confirmed","summary":"Good Friday","region":"Cayman Islands","date":"2024-03-29"},{"id":"20240331_3ipr0eegragm62pv65e4nuu1qc","status":"confirmed","summary":"Easter Sunday","region":"Cayman Islands","date":"2024-03-31"},{"id":"20240401_h7e07cuqk1607b7fsj63ldrm5o","status":"confirmed","summary":"Easter Monday","region":"Cayman Islands","date":"2024-04-01"},{"id":"20240506_on8o0ar02l8cmqk9r83gtcmnds","status":"confirmed","summary":"Emancipation Day","region":"Cayman Islands","date":"2024-05-06"},{"id":"20240512_49p27nrllu24pakvgn4nr6pbgk","status":"confirmed","summary":"Mothers\' Day","region":"Cayman Islands","date":"2024-05-12"},{"id":"20240520_3oqb5866n0hnhrk28d8bfn4kq8","status":"confirmed","summary":"Discovery Day","region":"Cayman Islands","date":"2024-05-20"},{"id":"20240616_jm1pd1k5kdq9stat6rhb88j5qs","status":"confirmed","summary":"Fathers\' Day","region":"Cayman Islands","date":"2024-06-16"},{"id":"20240617_uq697hss4edl1tmi5pfm2bbr80","status":"confirmed","summary":"King Charles III\'s Birthday Holiday","region":"Cayman Islands","date":"2024-06-17"},{"id":"20240701_a4s80n7qhlaeia9c302jhtp1fk","status":"confirmed","summary":"Constitution Day","region":"Cayman Islands","date":"2024-07-01"},{"id":"20241031_t79f5r5qo39rk7pgpo8i71ool8","status":"confirmed","summary":"Halloween","region":"Cayman Islands","date":"2024-10-31"},{"id":"20241111_mnajkccj4aiv7acu9nqmo6dpo0","status":"confirmed","summary":"Remembrance Day","region":"Cayman Islands","date":"2024-11-11"},{"id":"20241201_hlvvt8v7ilkh44ubd6gngd2134","status":"confirmed","summary":"Cayman Thanksgiving","region":"Cayman Islands","date":"2024-12-01"},{"id":"20241224_6ls5nud0spv39htffdm0glt90s","status":"confirmed","summary":"Christmas Eve","region":"Cayman Islands","date":"2024-12-24"},{"id":"20241225_6tbmti1hbbsca4vil07p5j07f8","status":"confirmed","summary":"Christmas Day","region":"Cayman Islands","date":"2024-12-25"},{"id":"20241226_te87ilbpg0j8lps1c372gpdj24","status":"confirmed","summary":"Boxing Day","region":"Cayman Islands","date":"2024-12-26"},{"id":"20241231_gstmov2riuiofgvg15nh4p6tig","status":"confirmed","summary":"New Year\'s Eve","region":"Cayman Islands","date":"2024-12-31"},{"id":"20250101_n4cd6crvf386pd5i60egs64744","status":"confirmed","summary":"New Year\'s Day","region":"Cayman Islands","date":"2025-01-01"},{"id":"20250127_ehpi1qtnb9uv7ko76icbfcrqak","status":"confirmed","summary":"National Heroes Day","region":"Cayman Islands","date":"2025-01-27"},{"id":"20250214_tmqs2em0hgmmd5chf5vr16apa0","status":"confirmed","summary":"Valentine\'s Day","region":"Cayman Islands","date":"2025-02-14"},{"id":"20250305_pet27m7mrbgitmib3g23adkp00","status":"confirmed","summary":"Ash Wednesday","region":"Cayman Islands","date":"2025-03-05"},{"id":"20250418_rn513shhrun607k3l8reragf6k","status":"confirmed","summary":"Good Friday","region":"Cayman Islands","date":"2025-04-18"},{"id":"20250420_jcck7enmr5ks0u3mctuoqd7k0o","status":"confirmed","summary":"Easter Sunday","region":"Cayman Islands","date":"2025-04-20"},{"id":"20250421_26l4il44k9v6aue7122t5nnago","status":"confirmed","summary":"Easter Monday","region":"Cayman Islands","date":"2025-04-21"},{"id":"20250505_sp05supb8eqroej2n94f02mkc8","status":"confirmed","summary":"Emancipation Day","region":"Cayman Islands","date":"2025-05-05"},{"id":"20250511_j47f3c0nev6e7ifatcpf1f7v3o","status":"confirmed","summary":"Mothers\' Day","region":"Cayman Islands","date":"2025-05-11"},{"id":"20250519_4qvhn9sqmqbqk5jkihknp6f9ig","status":"confirmed","summary":"Discovery Day","region":"Cayman Islands","date":"2025-05-19"},{"id":"20250615_e5o2tb60jods2nih26jmu6si1s","status":"confirmed","summary":"Fathers\' Day","region":"Cayman Islands","date":"2025-06-15"},{"id":"20250623_7dcgltp0rolst2bvef1hsn1mhg","status":"confirmed","summary":"King Charles III\'s Birthday Holiday","region":"Cayman Islands","date":"2025-06-23"},{"id":"20250707_62e0h4iftk2idpkan619qve5o4","status":"confirmed","summary":"Constitution Day","region":"Cayman Islands","date":"2025-07-07"},{"id":"20251031_nrhktlgu5enflgf4nqnd7mt1i4","status":"confirmed","summary":"Halloween","region":"Cayman Islands","date":"2025-10-31"},{"id":"20251110_vf6lp95pnb455l17cqj8eptedk","status":"confirmed","summary":"Remembrance Day","region":"Cayman Islands","date":"2025-11-10"},{"id":"20251207_kjjogov271tcl7ubqmdq3153a8","status":"confirmed","summary":"Cayman Thanksgiving","region":"Cayman Islands","date":"2025-12-07"},{"id":"20251224_kqtomecr6o5rv6tuuot295ftk4","status":"confirmed","summary":"Christmas Eve","region":"Cayman Islands","date":"2025-12-24"},{"id":"20251225_75snlo6onadl2f2okpmies57eg","status":"confirmed","summary":"Christmas Day","region":"Cayman Islands","date":"2025-12-25"},{"id":"20251226_pc09oni1varc8cp9eu4aflidc0","status":"confirmed","summary":"Boxing Day","region":"Cayman Islands","date":"2025-12-26"},{"id":"20251231_kdvggitqspdl73b20bsgqtddb4","status":"confirmed","summary":"New Year\'s Eve","region":"Cayman Islands","date":"2025-12-31"}],"Kazakhstan":[{"id":"20240101_b3ddtnm87oe90bllg05uftfulg","status":"confirmed","summary":"New Year\'s Day","region":"Kazakhstan","date":"2024-01-01"},{"id":"20240102_7ggm13kndcpna8piho8rnfje24","status":"confirmed","summary":"New Year Holiday","region":"Kazakhstan","date":"2024-01-02"},{"id":"20240107_i0jgua1q17j2c1qlufl4p3nook","status":"confirmed","summary":"Orthodox Christmas Day","region":"Kazakhstan","date":"2024-01-07"},{"id":"20240308_j8u1om6vgnejlbtnck040uul9c","status":"confirmed","summary":"International Women\'s Day","region":"Kazakhstan","date":"2024-03-08"},{"id":"20240321_jormuh5sive5gcu1p7sr632b1c","status":"confirmed","summary":"Nauryz","region":"Kazakhstan","date":"2024-03-21"},{"id":"20240322_rikdbb9quv54sfhkonu8fah3is","status":"confirmed","summary":"Nauryz Holiday","region":"Kazakhstan","date":"2024-03-22"},{"id":"20240323_a96mn3sf7p1qlnb8o8n995ku2c","status":"confirmed","summary":"Nauryz Holiday","region":"Kazakhstan","date":"2024-03-23"},{"id":"20240325_r4s7475goalpu8clnnmhho0dkc","status":"confirmed","summary":"Day off for Nauryz Holiday","region":"Kazakhstan","date":"2024-03-25"},{"id":"20240501_lofholcq7dg08glhr0rfc1jnkc","status":"confirmed","summary":"Unity Day","region":"Kazakhstan","date":"2024-05-01"},{"id":"20240504_6ifhf9ba19j9rlstm8eed6vl5o","status":"confirmed","summary":"Special Working Day","region":"Kazakhstan","date":"2024-05-04"},{"id":"20240507_2q7qun5idfkj9js49puv3orsng","status":"confirmed","summary":"Defender of the Fatherland Day","region":"Kazakhstan","date":"2024-05-07"},{"id":"20240508_s0c1nm6iblu7e9dcqhgoa0jaig","status":"confirmed","summary":"Defender of the Fatherland Day (extra holiday)","region":"Kazakhstan","date":"2024-05-08"},{"id":"20240509_3vu4oho496cdfv4nka7ifpj5s8","status":"confirmed","summary":"Victory Day","region":"Kazakhstan","date":"2024-05-09"},{"id":"20240616_3hf27k76jn10f7ijf6igvkt360","status":"confirmed","summary":"Kurban Ait","region":"Kazakhstan","date":"2024-06-16"},{"id":"20240706_ed5mmqr1k8jd0v7esadvijo8gg","status":"confirmed","summary":"Day of the Capital","region":"Kazakhstan","date":"2024-07-06"},{"id":"20240708_qv8vt7klpv24v7e7ccl9jckhkg","status":"confirmed","summary":"Day off for Day of the Capital","region":"Kazakhstan","date":"2024-07-08"},{"id":"20240830_0khiavv13rc0ss91ik3f1hqajo","status":"confirmed","summary":"Constitution Day","region":"Kazakhstan","date":"2024-08-30"},{"id":"20241025_14fo0tn1eksp6hpsv0nkud1j5o","status":"confirmed","summary":"Republic Day","region":"Kazakhstan","date":"2024-10-25"},{"id":"20241216_qa9me3d6kfl4o087fade9093v4","status":"confirmed","summary":"Independence Day","region":"Kazakhstan","date":"2024-12-16"},{"id":"20241231_451k0kpbsvbi506d2jbvlh3nag","status":"confirmed","summary":"New Year\'s Eve","region":"Kazakhstan","date":"2024-12-31"},{"id":"20250101_b2n97jfdkb4j2v42gmr3oko1g4","status":"confirmed","summary":"New Year\'s Day","region":"Kazakhstan","date":"2025-01-01"},{"id":"20250102_0s18bd6l0qh8k8fvuu6g0074tg","status":"confirmed","summary":"New Year Holiday","region":"Kazakhstan","date":"2025-01-02"},{"id":"20250107_jeid7r0103aij6rbmil89kenpo","status":"confirmed","summary":"Orthodox Christmas Day","region":"Kazakhstan","date":"2025-01-07"},{"id":"20250308_c0ln6t01hll61flonnqp9ed50o","status":"confirmed","summary":"International Women\'s Day","region":"Kazakhstan","date":"2025-03-08"},{"id":"20250310_siq73f1806dlt90oim6ofnr8j8","status":"confirmed","summary":"Day off for International Women\'s Day","region":"Kazakhstan","date":"2025-03-10"},{"id":"20250321_p80gokakhlu679eojjdjpv6rm4","status":"confirmed","summary":"Nauryz","region":"Kazakhstan","date":"2025-03-21"},{"id":"20250322_2eapa8skn5a27k2gk5rstbk7p8","status":"confirmed","summary":"Nauryz Holiday","region":"Kazakhstan","date":"2025-03-22"},{"id":"20250323_kuj28e9nj3vjg1gflj438gmlfg","status":"confirmed","summary":"Nauryz Holiday","region":"Kazakhstan","date":"2025-03-23"},{"id":"20250324_s8imqs5l7sgjtdstj6crrrg530","status":"confirmed","summary":"Day off for Nauryz Holiday","region":"Kazakhstan","date":"2025-03-24"},{"id":"20250501_thurbjvvvehe8r5arubpmh6m44","status":"confirmed","summary":"Unity Day","region":"Kazakhstan","date":"2025-05-01"},{"id":"20250507_9hffrvh6dcfj4gsqa8bu1br4q0","status":"confirmed","summary":"Defender of the Fatherland Day","region":"Kazakhstan","date":"2025-05-07"},{"id":"20250509_67htrvgpsms7rbft6bomvgdu6k","status":"confirmed","summary":"Victory Day","region":"Kazakhstan","date":"2025-05-09"},{"id":"20250606_5r5e38gofjmeffi0h91mh78kvc","status":"confirmed","summary":"Kurban Ait","region":"Kazakhstan","date":"2025-06-06"},{"id":"20250706_su7lboh1p90eodmro685nedvgc","status":"confirmed","summary":"Day of the Capital","region":"Kazakhstan","date":"2025-07-06"},{"id":"20250707_o4jvshlbti7n1mcg7c3gg7brf8","status":"confirmed","summary":"Day off for Day of the Capital","region":"Kazakhstan","date":"2025-07-07"},{"id":"20250830_pgtogolnk8v1uus4k2sjc3uth4","status":"confirmed","summary":"Constitution Day","region":"Kazakhstan","date":"2025-08-30"},{"id":"20250901_s8hf6uff6257v92vqj6bo81kc4","status":"confirmed","summary":"Day off for Constitution Day","region":"Kazakhstan","date":"2025-09-01"},{"id":"20251025_37a1ed2ccdiu584n5b1ajgsjgo","status":"confirmed","summary":"Republic Day","region":"Kazakhstan","date":"2025-10-25"},{"id":"20251216_9o0l59gln1a0n1fn49jqdopc48","status":"confirmed","summary":"Independence Day","region":"Kazakhstan","date":"2025-12-16"},{"id":"20251231_1p42hc6nfbevve22a384k9kcoo","status":"confirmed","summary":"New Year\'s Eve","region":"Kazakhstan","date":"2025-12-31"}],"Laos":[{"id":"20240101_pvcr2tcd9i6t2h9jp3ldltfh6o","status":"confirmed","summary":"New Year\'s Day","region":"Laos","date":"2024-01-01"},{"id":"20240308_h196ffi6agmqno3lcj8hbb32h8","status":"confirmed","summary":"International Women\'s Day (Women Only)","region":"Laos","date":"2024-03-08"},{"id":"20240413_r87i67r7t93lnkes73tk8g0fpo","status":"confirmed","summary":"Lao New Year","region":"Laos","date":"2024-04-13"},{"id":"20240414_rne3t5cvpr6hj2nijef07lmgic","status":"confirmed","summary":"Lao New Year Holiday","region":"Laos","date":"2024-04-14"},{"id":"20240415_rf0r00e70rhehkkm7t9o8agfsc","status":"confirmed","summary":"Lao New Year Holiday","region":"Laos","date":"2024-04-15"},{"id":"20240501_cc4litpje9j4gdhmks0gtneo30","status":"confirmed","summary":"Labor Day / May Day","region":"Laos","date":"2024-05-01"},{"id":"20240601_qt21tof345degnekgn65ld00s8","status":"confirmed","summary":"Children\'s Day","region":"Laos","date":"2024-06-01"},{"id":"20240720_e2r41k53mjvqg4h49oa4ndkuuc","status":"confirmed","summary":"Lao Women Union\'s Day","region":"Laos","date":"2024-07-20"},{"id":"20240722_ue44ifhnlv2l4jg6st31ko5440","status":"confirmed","summary":"Day off for Lao Women Union\'s Day","region":"Laos","date":"2024-07-22"},{"id":"20241202_m6gouhgqn8m5m6olakmaq2fp1g","status":"confirmed","summary":"National Day","region":"Laos","date":"2024-12-02"},{"id":"20250101_v5g2jdk72tb6ub4od6829p6mic","status":"confirmed","summary":"New Year\'s Day","region":"Laos","date":"2025-01-01"},{"id":"20250308_g9s71bj83aj9d819pomp7csmjs","status":"confirmed","summary":"International Women\'s Day (Women Only)","region":"Laos","date":"2025-03-08"},{"id":"20250413_itrqejc9p6jsr2q6rsjb1kir40","status":"confirmed","summary":"Lao New Year","region":"Laos","date":"2025-04-13"},{"id":"20250414_82do3mg55r05v483p87nf86mgo","status":"confirmed","summary":"Lao New Year Holiday","region":"Laos","date":"2025-04-14"},{"id":"20250415_2rapscilancnddvicg2o1bathk","status":"confirmed","summary":"Lao New Year Holiday","region":"Laos","date":"2025-04-15"},{"id":"20250501_ut4q5eae176s5gavbcsicuissk","status":"confirmed","summary":"Labor Day / May Day","region":"Laos","date":"2025-05-01"},{"id":"20250601_e8umlg14bakcrd1a8itbsmtmok","status":"confirmed","summary":"Children\'s Day","region":"Laos","date":"2025-06-01"},{"id":"20250720_ls97buu3f2vmiacfsqpekjtm8s","status":"confirmed","summary":"Lao Women Union\'s Day","region":"Laos","date":"2025-07-20"},{"id":"20250721_po34eced24av7l7bk1ah7k1isc","status":"confirmed","summary":"Day off for Lao Women Union\'s Day","region":"Laos","date":"2025-07-21"},{"id":"20251202_dj5vrr99r69r8e1hcgdkjlvta4","status":"confirmed","summary":"National Day","region":"Laos","date":"2025-12-02"}],"Latvia":[{"id":"20240101_s8l31thp6hsk29klfr5548grl8","status":"confirmed","summary":"New Year\'s Day","region":"Latvia","date":"2024-01-01"},{"id":"20240214_mlp3dgggfcaphl44gbv8r2uej0","status":"confirmed","summary":"Valentine\'s Day","region":"Latvia","date":"2024-02-14"},{"id":"20240329_clhuu8d9rt2h67b3jiq98nd768","status":"confirmed","summary":"Good Friday","region":"Latvia","date":"2024-03-29"},{"id":"20240330_tb818t3qksdgnd4saqnbbdq550","status":"confirmed","summary":"Holy Saturday","region":"Latvia","date":"2024-03-30"},{"id":"20240331_7a2mh5a70cbt0ojhnqltb74aq4","status":"confirmed","summary":"Daylight Saving Time starts","region":"Latvia","date":"2024-03-31"},{"id":"20240331_eom80j4uh526nrppc802knm1bk","status":"confirmed","summary":"Easter Sunday","region":"Latvia","date":"2024-03-31"},{"id":"20240401_qs61sa4gpblt31mqjt313qc1gs","status":"confirmed","summary":"Easter Monday","region":"Latvia","date":"2024-04-01"},{"id":"20240501_l78pfq6ef2gsfk4ft7ant99a08","status":"confirmed","summary":"Constituent Assembly Convocation Day","region":"Latvia","date":"2024-05-01"},{"id":"20240501_vl0sab8nocd360ocbj7909d6l4","status":"confirmed","summary":"Labour Day/May Day","region":"Latvia","date":"2024-05-01"},{"id":"20240504_ojhge08q8h4dnjbbraffe9baa4","status":"confirmed","summary":"Independence Restoration Day","region":"Latvia","date":"2024-05-04"},{"id":"20240506_k5169hlejo28d5shf9mdovmn0g","status":"confirmed","summary":"Independence Restoration Day observed","region":"Latvia","date":"2024-05-06"},{"id":"20240512_hspv8a9vur43ceug9ov93mkrs4","status":"confirmed","summary":"Mothers\' Day","region":"Latvia","date":"2024-05-12"},{"id":"20240519_djq9a35qjs55eg1f6v2ajsg83k","status":"confirmed","summary":"Whitsunday","region":"Latvia","date":"2024-05-19"},{"id":"20240623_ovhv51h5ls8t33g9q68vmodka8","status":"confirmed","summary":"Midsummer Eve","region":"Latvia","date":"2024-06-23"},{"id":"20240624_v7fjuk6p3e5up9m7v2ldlkgs8s","status":"confirmed","summary":"Midsummer Day","region":"Latvia","date":"2024-06-24"},{"id":"20240908_g1r7v22t2qff0a6kqmtgkv6604","status":"confirmed","summary":"Fathers\' Day","region":"Latvia","date":"2024-09-08"},{"id":"20241027_36blcvk4lt8a2de66i3bh70dsk","status":"confirmed","summary":"Daylight Saving Time ends","region":"Latvia","date":"2024-10-27"},{"id":"20241031_1l34nir3rnv9ed4tegf75asb9o","status":"confirmed","summary":"Halloween","region":"Latvia","date":"2024-10-31"},{"id":"20241118_nj67qvqeipbb1mj99j1bd2f5as","status":"confirmed","summary":"Republic of Latvia Proclamation Day","region":"Latvia","date":"2024-11-18"},{"id":"20241224_7l7kjur6ks3d0d3orck4rcfaac","status":"confirmed","summary":"Christmas Eve","region":"Latvia","date":"2024-12-24"},{"id":"20241225_l28ggdqjvf4kq3n5i79qj5g0ig","status":"confirmed","summary":"Christmas Day","region":"Latvia","date":"2024-12-25"},{"id":"20241226_p62krudqlf612bs35fqoht5pp0","status":"confirmed","summary":"Second Day of Christmas","region":"Latvia","date":"2024-12-26"},{"id":"20241231_c6tr6tv70kgf6l33b7gnqvbc04","status":"confirmed","summary":"New Year\'s Eve","region":"Latvia","date":"2024-12-31"},{"id":"20250101_1miliqj5qkldt94rg1o84bj27c","status":"confirmed","summary":"New Year\'s Day","region":"Latvia","date":"2025-01-01"},{"id":"20250214_joma3bc37t6vnpu5k9mdrua7vs","status":"confirmed","summary":"Valentine\'s Day","region":"Latvia","date":"2025-02-14"},{"id":"20250330_839i42ktfhi7ufre4ol5680b54","status":"confirmed","summary":"Daylight Saving Time starts","region":"Latvia","date":"2025-03-30"},{"id":"20250418_03d0gtvh73aecsk4f4rrssnsbg","status":"confirmed","summary":"Good Friday","region":"Latvia","date":"2025-04-18"},{"id":"20250419_3gf8vl7nsksast89k3ur0mrrbg","status":"confirmed","summary":"Holy Saturday","region":"Latvia","date":"2025-04-19"},{"id":"20250420_gb638afgu9vsduj3sqkrhde4o4","status":"confirmed","summary":"Easter Sunday","region":"Latvia","date":"2025-04-20"},{"id":"20250421_62838mj7kqtuqbeu4gil712v40","status":"confirmed","summary":"Easter Monday","region":"Latvia","date":"2025-04-21"},{"id":"20250501_ddj8du130e4d4dttijk213vkpc","status":"confirmed","summary":"Labour Day/May Day","region":"Latvia","date":"2025-05-01"},{"id":"20250501_mm98e59c7t6k20t373jp4eino0","status":"confirmed","summary":"Constituent Assembly Convocation Day","region":"Latvia","date":"2025-05-01"},{"id":"20250504_r0rr8jimv42ftgbsmkma024lds","status":"confirmed","summary":"Independence Restoration Day","region":"Latvia","date":"2025-05-04"},{"id":"20250505_43kh5ugkptspdgcr8qblj6rt7g","status":"confirmed","summary":"Independence Restoration Day observed","region":"Latvia","date":"2025-05-05"},{"id":"20250511_7skgsag1fabgutdsg0kjhb9bfg","status":"confirmed","summary":"Mothers\' Day","region":"Latvia","date":"2025-05-11"},{"id":"20250608_3spqnacib5blja99b3hvk6tv64","status":"confirmed","summary":"Whitsunday","region":"Latvia","date":"2025-06-08"},{"id":"20250623_qgl16vbuc2av58bk6k4m6t67q0","status":"confirmed","summary":"Midsummer Eve","region":"Latvia","date":"2025-06-23"},{"id":"20250624_v8afkroosnqro3pdpbhrkjtv3o","status":"confirmed","summary":"Midsummer Day","region":"Latvia","date":"2025-06-24"},{"id":"20250914_qp6v7gaevaseljp5ef2km3q0ig","status":"confirmed","summary":"Fathers\' Day","region":"Latvia","date":"2025-09-14"},{"id":"20251026_de15g30tkq0krfbtl8blsntnk0","status":"confirmed","summary":"Daylight Saving Time ends","region":"Latvia","date":"2025-10-26"},{"id":"20251031_opq99pr1dinisan4nffqblu504","status":"confirmed","summary":"Halloween","region":"Latvia","date":"2025-10-31"},{"id":"20251118_s9kpshqg9vbh3uvkrugl624qas","status":"confirmed","summary":"Republic of Latvia Proclamation Day","region":"Latvia","date":"2025-11-18"},{"id":"20251224_kgp4rrqvssb0jpub85uhah6vug","status":"confirmed","summary":"Christmas Eve","region":"Latvia","date":"2025-12-24"},{"id":"20251225_and3ojsdk13c3u63vgnorr0h8o","status":"confirmed","summary":"Christmas Day","region":"Latvia","date":"2025-12-25"},{"id":"20251226_gg4vrh72cj512r20mgnjobusl0","status":"confirmed","summary":"Second Day of Christmas","region":"Latvia","date":"2025-12-26"},{"id":"20251231_sknselopji5jbcbbdl0sigttb8","status":"confirmed","summary":"New Year\'s Eve","region":"Latvia","date":"2025-12-31"}],"Lebanon":[{"id":"20240101_n3v98pm4u92lr6lm7iveq1cuno","status":"confirmed","summary":"New Year","region":"Lebanon","date":"2024-01-01"},{"id":"20240106_6pag1jetl9itovsah5p5dbgj9c","status":"confirmed","summary":"Orthodox Christmas","region":"Lebanon","date":"2024-01-06"},{"id":"20240209_nmgj4fjqh9e22jep0f9b0crlo0","status":"confirmed","summary":"St Maron\'s Day","region":"Lebanon","date":"2024-02-09"},{"id":"20240214_1jset7t0e4dnrtcv3c2fcmb4hc","status":"confirmed","summary":"Commemoration of the Assasination of PM Rafic Hariri","region":"Lebanon","date":"2024-02-14"},{"id":"20240309_r7394l4jpq2e3gadrasahfa7uk","status":"confirmed","summary":"Teachers\' Day","region":"Lebanon","date":"2024-03-09"},{"id":"20240311_rde04plhnbp5lvl545himtieno","status":"confirmed","summary":"Ramadan Start","region":"Lebanon","date":"2024-03-11"},{"id":"20240321_mgrl7k4gcru26e3vuiicd6f8lg","status":"confirmed","summary":"Mother\'s Day","region":"Lebanon","date":"2024-03-21"},{"id":"20240325_j317tit4na5vov3ddkgb431h9s","status":"confirmed","summary":"Feast of the Annunciation","region":"Lebanon","date":"2024-03-25"},{"id":"20240329_c7ij4kmu32mbp7blsdob6cqss8","status":"confirmed","summary":"Good Friday","region":"Lebanon","date":"2024-03-29"},{"id":"20240331_eis398fog9t0do5gi7lfad9huo","status":"confirmed","summary":"Daylight Saving Time starts","region":"Lebanon","date":"2024-03-31"},{"id":"20240401_b43ikfevomk2d2487l905lrb3o","status":"confirmed","summary":"Easter Monday","region":"Lebanon","date":"2024-04-01"},{"id":"20240410_8usc9m0q1llaedug9km0magm5k","status":"confirmed","summary":"Eid al-Fitr","region":"Lebanon","date":"2024-04-10"},{"id":"20240411_r7lk2j2ad0hb1vqknq5enpc6f4","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Lebanon","date":"2024-04-11"},{"id":"20240412_9knt9el0ihlh81fdm05v9qcgm8","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Lebanon","date":"2024-04-12"},{"id":"20240413_fb8r3s4jb6jrrn7dcn5jeomrck","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Lebanon","date":"2024-04-13"},{"id":"20240501_9l3e03vgkkfhf3ak25a6n1imos","status":"confirmed","summary":"Labor Day","region":"Lebanon","date":"2024-05-01"},{"id":"20240503_au947ei7j7t16shff28g32f4tc","status":"confirmed","summary":"Orthodox Good Friday","region":"Lebanon","date":"2024-05-03"},{"id":"20240505_jltlnsbrec2h1mtbtsa49a6ss0","status":"confirmed","summary":"Orthodox Easter Day","region":"Lebanon","date":"2024-05-05"},{"id":"20240505_r846bcj6ucvmmr0m8hdhmp6kgo","status":"confirmed","summary":"Martyr\'s Day","region":"Lebanon","date":"2024-05-05"},{"id":"20240506_3lbn2ffojfgir4nifsn7kmo4hc","status":"confirmed","summary":"Orthodox Easter Monday","region":"Lebanon","date":"2024-05-06"},{"id":"20240509_o6rvaj7cf1mptlpq2875mkmql4","status":"confirmed","summary":"Ascension Day","region":"Lebanon","date":"2024-05-09"},{"id":"20240512_09j8r5tcbf84067aknhn4e8ul4","status":"confirmed","summary":"Liberation and Resistance Holiday","region":"Lebanon","date":"2024-05-12"},{"id":"20240525_otj96f4rb7am8b4c18tnk9326c","status":"confirmed","summary":"Liberation and Resistance Day","region":"Lebanon","date":"2024-05-25"},{"id":"20240617_nde3ba9pra64m5l14qjdfjll0g","status":"confirmed","summary":"Eid al-Adha","region":"Lebanon","date":"2024-06-17"},{"id":"20240618_tg54c54r42egu1gkrqkemhotrg","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Lebanon","date":"2024-06-18"},{"id":"20240708_sgirgkb0bi2q7s9ps4nt11qb94","status":"confirmed","summary":"Muharram","region":"Lebanon","date":"2024-07-08"},{"id":"20240717_ch2cmgqrm24g2qvfbejihvo9l0","status":"confirmed","summary":"Ashoura","region":"Lebanon","date":"2024-07-17"},{"id":"20240815_prfi0ilpnpjidd6fafi1ahbb4o","status":"confirmed","summary":"Assumption of Mary","region":"Lebanon","date":"2024-08-15"},{"id":"20240908_hbtil005vi1d8vmoog2b7l2oao","status":"confirmed","summary":"Nativity of Mary","region":"Lebanon","date":"2024-09-08"},{"id":"20240916_orgbikih8pm5cbmda907dce83o","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Lebanon","date":"2024-09-16"},{"id":"20241027_l409cp3phdndd9cpepva1dpsf4","status":"confirmed","summary":"Daylight Saving Time ends","region":"Lebanon","date":"2024-10-27"},{"id":"20241101_05qfpgc7hprt5r4d6gsgrumpp4","status":"confirmed","summary":"All Saints\' Day","region":"Lebanon","date":"2024-11-01"},{"id":"20241122_l93le9fp9l4rpoa3r2kujv68pc","status":"confirmed","summary":"Independence Day","region":"Lebanon","date":"2024-11-22"},{"id":"20241225_6kuuis9491tvv9e483osmbio58","status":"confirmed","summary":"Christmas Day","region":"Lebanon","date":"2024-12-25"},{"id":"20250101_3r2olvpu5kltic5l9h8se0no2c","status":"confirmed","summary":"New Year","region":"Lebanon","date":"2025-01-01"},{"id":"20250106_o4p3vprvhprp1gpljd12laahjs","status":"confirmed","summary":"Orthodox Christmas","region":"Lebanon","date":"2025-01-06"},{"id":"20250209_4lc7jiee0h01cudaiiaak7gnp4","status":"confirmed","summary":"St Maron\'s Day","region":"Lebanon","date":"2025-02-09"},{"id":"20250214_n64giomt8ntj8ap6de61efivok","status":"confirmed","summary":"Commemoration of the Assasination of PM Rafic Hariri","region":"Lebanon","date":"2025-02-14"},{"id":"20250301_7np47mqlmuja9jhaqqc4f33pe0","status":"confirmed","summary":"Ramadan Start","region":"Lebanon","date":"2025-03-01"},{"id":"20250309_4o3jj0lisn7n9n7s0me67sj294","status":"confirmed","summary":"Teachers\' Day","region":"Lebanon","date":"2025-03-09"},{"id":"20250321_m1u9b6mh648f8rtjqlqs7gtue0","status":"confirmed","summary":"Mother\'s Day","region":"Lebanon","date":"2025-03-21"},{"id":"20250325_k12hlbkgjfurb99l66q8d4dfe8","status":"confirmed","summary":"Feast of the Annunciation","region":"Lebanon","date":"2025-03-25"},{"id":"20250330_t35v6unoo6asngqc9edql3egmg","status":"confirmed","summary":"Daylight Saving Time starts","region":"Lebanon","date":"2025-03-30"},{"id":"20250331_9aildvkbi8a6g6ltr6q8v2gf6k","status":"confirmed","summary":"Eid al-Fitr","region":"Lebanon","date":"2025-03-31"},{"id":"20250401_s4ep4srovdoc3p9bchl5r27ihg","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Lebanon","date":"2025-04-01"},{"id":"20250418_898ou7o5sh29jj30693av6528k","status":"confirmed","summary":"Good Friday","region":"Lebanon","date":"2025-04-18"},{"id":"20250418_m837jlqf39ohq4e5rmsbm4mvqg","status":"confirmed","summary":"Orthodox Good Friday","region":"Lebanon","date":"2025-04-18"},{"id":"20250420_bql8a46i1gl7lesakg7b5b23bo","status":"confirmed","summary":"Orthodox Easter Day","region":"Lebanon","date":"2025-04-20"},{"id":"20250421_hgm33skurnak9fr6b5k04cbamc","status":"confirmed","summary":"Easter Monday","region":"Lebanon","date":"2025-04-21"},{"id":"20250421_q2l8d9c3n841afeoa3b9v03488","status":"confirmed","summary":"Orthodox Easter Monday","region":"Lebanon","date":"2025-04-21"},{"id":"20250501_pbvhv6qfb893f9lhil1ui4u4us","status":"confirmed","summary":"Labor Day","region":"Lebanon","date":"2025-05-01"},{"id":"20250504_tqu444ed9mjtjl6sf7atr0abfc","status":"confirmed","summary":"Martyr\'s Day","region":"Lebanon","date":"2025-05-04"},{"id":"20250511_an22ajmtorrd82d8psul9u1lp8","status":"confirmed","summary":"Liberation and Resistance Holiday","region":"Lebanon","date":"2025-05-11"},{"id":"20250525_vtvmehqk480la0hqse04c0vuo0","status":"confirmed","summary":"Liberation and Resistance Day","region":"Lebanon","date":"2025-05-25"},{"id":"20250529_hakslbrdnoek1qctdv34oghgt4","status":"confirmed","summary":"Ascension Day","region":"Lebanon","date":"2025-05-29"},{"id":"20250607_lr9j1me69r8n34bcsslfjitohg","status":"confirmed","summary":"Eid al-Adha","region":"Lebanon","date":"2025-06-07"},{"id":"20250608_55cuuud1l02fvpjb1hvsbaaqgg","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Lebanon","date":"2025-06-08"},{"id":"20250627_invsggv1ftjfaqnb1l3jijqnp0","status":"confirmed","summary":"Muharram","region":"Lebanon","date":"2025-06-27"},{"id":"20250706_dpkm6jonjdkol62jkql7pd40t0","status":"confirmed","summary":"Ashoura","region":"Lebanon","date":"2025-07-06"},{"id":"20250815_cj5ba9avtsdhitftfij9kcdl84","status":"confirmed","summary":"Assumption of Mary","region":"Lebanon","date":"2025-08-15"},{"id":"20250905_kht1pag9u5bpvn6v6nj8c4vplg","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Lebanon","date":"2025-09-05"},{"id":"20250908_pnn8h0mnf425njmfeva67r43jk","status":"confirmed","summary":"Nativity of Mary","region":"Lebanon","date":"2025-09-08"},{"id":"20251026_q7pj7v2lt57djltan3tqhgfp0o","status":"confirmed","summary":"Daylight Saving Time ends","region":"Lebanon","date":"2025-10-26"},{"id":"20251101_2c86ij9qd8k8v04m347uoikf4s","status":"confirmed","summary":"All Saints\' Day","region":"Lebanon","date":"2025-11-01"},{"id":"20251122_7ojgb8lcm758m7gvsoeufpb780","status":"confirmed","summary":"Independence Day","region":"Lebanon","date":"2025-11-22"},{"id":"20251225_bklfodd74n5shbgssovt043hog","status":"confirmed","summary":"Christmas Day","region":"Lebanon","date":"2025-12-25"}],"St. Lucia":[{"id":"20240101_unus7r5cpervk5gj8lld6f84fo","status":"confirmed","summary":"New Year\'s Day","region":"St. Lucia","date":"2024-01-01"},{"id":"20240102_v10qba99v8hpqehl4kik88moh8","status":"confirmed","summary":"New Year holiday","region":"St. Lucia","date":"2024-01-02"},{"id":"20240222_33g7cmpr1pgsgcibh5lp4qeeeg","status":"confirmed","summary":"Independence Day","region":"St. Lucia","date":"2024-02-22"},{"id":"20240329_s31kildg8mrsm1patn6s7c7jg0","status":"confirmed","summary":"Good Friday","region":"St. Lucia","date":"2024-03-29"},{"id":"20240401_3rvsbhsnunsn7mi7sqbafqse6c","status":"confirmed","summary":"Easter Monday","region":"St. Lucia","date":"2024-04-01"},{"id":"20240501_7e069talbom0gqh4ir9rprjv20","status":"confirmed","summary":"Labor Day / May Day","region":"St. Lucia","date":"2024-05-01"},{"id":"20240520_oam7rinml4a9ie1vnfq35bkp4c","status":"confirmed","summary":"Whit Monday","region":"St. Lucia","date":"2024-05-20"},{"id":"20240530_3nceic0u3q4kl27pku8uebkvng","status":"confirmed","summary":"Corpus Christi","region":"St. Lucia","date":"2024-05-30"},{"id":"20240801_21oq8m3tlv6ukfjag2a0oni2ao","status":"confirmed","summary":"Emancipation Day","region":"St. Lucia","date":"2024-08-01"},{"id":"20241007_a6g8b2oc55q5udk1qmse4qd684","status":"confirmed","summary":"Thanksgiving Day","region":"St. Lucia","date":"2024-10-07"},{"id":"20241213_hnhr47t0curoc023mneo53o9ic","status":"confirmed","summary":"National Day","region":"St. Lucia","date":"2024-12-13"},{"id":"20241225_e37a95gco9029idl8gv9osb6tk","status":"confirmed","summary":"Christmas Day","region":"St. Lucia","date":"2024-12-25"},{"id":"20241226_hmimgemmu8fpkjdgfgi90cb0qg","status":"confirmed","summary":"Boxing Day","region":"St. Lucia","date":"2024-12-26"},{"id":"20250101_8sh27r4qkpqhv7785c86grhn7o","status":"confirmed","summary":"New Year\'s Day","region":"St. Lucia","date":"2025-01-01"},{"id":"20250102_u1uqt1dhfj0p525e207jputkjk","status":"confirmed","summary":"New Year holiday","region":"St. Lucia","date":"2025-01-02"},{"id":"20250222_tla2htjviibuks6jlibutc7pog","status":"confirmed","summary":"Independence Day","region":"St. Lucia","date":"2025-02-22"},{"id":"20250418_blpcfkhg6q1htmdjiiq5l5t5n0","status":"confirmed","summary":"Good Friday","region":"St. Lucia","date":"2025-04-18"},{"id":"20250421_giaookj29oki59d5s3193dc3t8","status":"confirmed","summary":"Easter Monday","region":"St. Lucia","date":"2025-04-21"},{"id":"20250501_r6akjpuf7aspf8vebd6o3l5mv8","status":"confirmed","summary":"Labor Day / May Day","region":"St. Lucia","date":"2025-05-01"},{"id":"20250609_omn5f94f77v37jqt4dubhogg1c","status":"confirmed","summary":"Whit Monday","region":"St. Lucia","date":"2025-06-09"},{"id":"20250619_16rqbh0t47u5m444ou369nas9o","status":"confirmed","summary":"Corpus Christi","region":"St. Lucia","date":"2025-06-19"},{"id":"20250801_g0mrvjiveubudcopr6v7q64rqs","status":"confirmed","summary":"Emancipation Day","region":"St. Lucia","date":"2025-08-01"},{"id":"20251006_5viea3na1onvpe6c416mnm6sig","status":"confirmed","summary":"Thanksgiving Day","region":"St. Lucia","date":"2025-10-06"},{"id":"20251213_47b1nme10tjam5v66j8qrahqco","status":"confirmed","summary":"National Day","region":"St. Lucia","date":"2025-12-13"},{"id":"20251225_69o2ms32mngbjsdqot4733gtes","status":"confirmed","summary":"Christmas Day","region":"St. Lucia","date":"2025-12-25"},{"id":"20251226_8i33mcvrljk2pgrkh03a1s8dlc","status":"confirmed","summary":"Boxing Day","region":"St. Lucia","date":"2025-12-26"}],"Liechtenstein":[{"id":"20240101_us9pbjbtk817hj20hgsaisv614","status":"confirmed","summary":"New Year\'s Day","region":"Liechtenstein","date":"2024-01-01"},{"id":"20240106_dp21hpb61evmc3is2dit95s6lk","status":"confirmed","summary":"Epiphany","region":"Liechtenstein","date":"2024-01-06"},{"id":"20240202_n0qlodoq8df5j67fp0fe8dnfu4","status":"confirmed","summary":"Candlemas","region":"Liechtenstein","date":"2024-02-02"},{"id":"20240319_qbg8aa4sc6ksr81u5i67ndv5f8","status":"confirmed","summary":"Fathers\' Day","region":"Liechtenstein","date":"2024-03-19"},{"id":"20240319_un4derf1pna3jumgd1qsp609tc","status":"confirmed","summary":"St Joseph\'s Day","region":"Liechtenstein","date":"2024-03-19"},{"id":"20240331_8e642fdkcfvjgk2o3j4klqns9g","status":"confirmed","summary":"Daylight Saving Time starts","region":"Liechtenstein","date":"2024-03-31"},{"id":"20240331_jpd1j1prohmdghal7heaopg67o","status":"confirmed","summary":"Easter Sunday","region":"Liechtenstein","date":"2024-03-31"},{"id":"20240401_9t44v9itl227bjhvln8om50q4s","status":"confirmed","summary":"Easter Monday","region":"Liechtenstein","date":"2024-04-01"},{"id":"20240501_a9539303n8d8h7j78rtp1b9p3g","status":"confirmed","summary":"Labour Day/May Day","region":"Liechtenstein","date":"2024-05-01"},{"id":"20240509_82qo3ee1up9866i4dj37qv5dd8","status":"confirmed","summary":"Ascension Day","region":"Liechtenstein","date":"2024-05-09"},{"id":"20240512_gsm1okvu6q8ktv00cue6pum3ss","status":"confirmed","summary":"Mothers\' Day","region":"Liechtenstein","date":"2024-05-12"},{"id":"20240519_svs0pedhcpro58op8l87gj2clc","status":"confirmed","summary":"Whit Sunday","region":"Liechtenstein","date":"2024-05-19"},{"id":"20240520_b7pn8vrvh5c7e57sic5tbm3qqo","status":"confirmed","summary":"Whit Monday","region":"Liechtenstein","date":"2024-05-20"},{"id":"20240530_eseav9gm85r346gsljbqb4v6ms","status":"confirmed","summary":"Corpus Christi","region":"Liechtenstein","date":"2024-05-30"},{"id":"20240815_j2d25ni11r5c04jps7cbg7ahjo","status":"confirmed","summary":"Liechtenstein National Day","region":"Liechtenstein","date":"2024-08-15"},{"id":"20240908_lmgu4c2gvp6j2h80ghgcpdpl3k","status":"confirmed","summary":"Nativity of Our Lady","region":"Liechtenstein","date":"2024-09-08"},{"id":"20241027_gad9c0sjhriaguov3g902o7q1o","status":"confirmed","summary":"Daylight Saving Time ends","region":"Liechtenstein","date":"2024-10-27"},{"id":"20241101_6v6c606td8r32vqvjes1c13mls","status":"confirmed","summary":"All Saints\' Day","region":"Liechtenstein","date":"2024-11-01"},{"id":"20241208_k6srgs09krb2q25910v0sl730o","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Liechtenstein","date":"2024-12-08"},{"id":"20241225_j6jg4soa1hfrmncb6hem0go7n4","status":"confirmed","summary":"Christmas Day","region":"Liechtenstein","date":"2024-12-25"},{"id":"20241226_8tpu1lmib6r7dha1dferum8l58","status":"confirmed","summary":"St Stephen\'s Day","region":"Liechtenstein","date":"2024-12-26"},{"id":"20250101_qnjpbuq8mbrsq2ll0kic47br3o","status":"confirmed","summary":"New Year\'s Day","region":"Liechtenstein","date":"2025-01-01"},{"id":"20250106_009d0n3opnh4b8372mcor9noqc","status":"confirmed","summary":"Epiphany","region":"Liechtenstein","date":"2025-01-06"},{"id":"20250202_pem40lejs9f6i6g2bq9g5gdok8","status":"confirmed","summary":"Candlemas","region":"Liechtenstein","date":"2025-02-02"},{"id":"20250319_fgl413f24a271n3hfbm7h5gvcg","status":"confirmed","summary":"Fathers\' Day","region":"Liechtenstein","date":"2025-03-19"},{"id":"20250319_kjovi5ock4dca8rc0ro3s5fg34","status":"confirmed","summary":"St Joseph\'s Day","region":"Liechtenstein","date":"2025-03-19"},{"id":"20250330_6jjp9a3v6ntu1ba0p4gigvlv2o","status":"confirmed","summary":"Daylight Saving Time starts","region":"Liechtenstein","date":"2025-03-30"},{"id":"20250420_fvkct28vjlfu6q54lard79v14o","status":"confirmed","summary":"Easter Sunday","region":"Liechtenstein","date":"2025-04-20"},{"id":"20250421_ds40dgf0frf76sdvrluqnhofao","status":"confirmed","summary":"Easter Monday","region":"Liechtenstein","date":"2025-04-21"},{"id":"20250501_g3e58i1fsptua2e0t9es4otpno","status":"confirmed","summary":"Labour Day/May Day","region":"Liechtenstein","date":"2025-05-01"},{"id":"20250511_ilt0pvlqqe9vf5aejqn9enfhag","status":"confirmed","summary":"Mothers\' Day","region":"Liechtenstein","date":"2025-05-11"},{"id":"20250529_20pao5121c6u2379j2hpuqc2o0","status":"confirmed","summary":"Ascension Day","region":"Liechtenstein","date":"2025-05-29"},{"id":"20250608_g20c2p6tskg69dilhj58dock1s","status":"confirmed","summary":"Whit Sunday","region":"Liechtenstein","date":"2025-06-08"},{"id":"20250609_253o5leil4glhvmm823gh0lte4","status":"confirmed","summary":"Whit Monday","region":"Liechtenstein","date":"2025-06-09"},{"id":"20250619_3qniso62sqig03ra45a9a52g74","status":"confirmed","summary":"Corpus Christi","region":"Liechtenstein","date":"2025-06-19"},{"id":"20250815_b4thpdoqoqf6d5ukb6eujdstjg","status":"confirmed","summary":"Liechtenstein National Day","region":"Liechtenstein","date":"2025-08-15"},{"id":"20250908_79osdr9u909cioq33gsmjk4ffk","status":"confirmed","summary":"Nativity of Our Lady","region":"Liechtenstein","date":"2025-09-08"},{"id":"20251026_a1vjbuiacjfc2gsqrceg1r78sc","status":"confirmed","summary":"Daylight Saving Time ends","region":"Liechtenstein","date":"2025-10-26"},{"id":"20251101_emobjd0vmi73s0u36ced12gtp8","status":"confirmed","summary":"All Saints\' Day","region":"Liechtenstein","date":"2025-11-01"},{"id":"20251208_vrc5kjpu6qnjm7s0bj7hpsmus8","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Liechtenstein","date":"2025-12-08"},{"id":"20251225_9nps3r2j9vgovbp2413sma41mc","status":"confirmed","summary":"Christmas Day","region":"Liechtenstein","date":"2025-12-25"},{"id":"20251226_8263aqdv7fj8rsdq4f3rd4l2r4","status":"confirmed","summary":"St Stephen\'s Day","region":"Liechtenstein","date":"2025-12-26"}],"Lithuania":[{"id":"20240101_r5h3p91k4uidrceu4o95d8q7bc","status":"confirmed","summary":"New Year\'s Day","region":"Lithuania","date":"2024-01-01"},{"id":"20240213_ib1avs7p49a5ctkv81e52qv2m8","status":"confirmed","summary":"Carnival","region":"Lithuania","date":"2024-02-13"},{"id":"20240214_09ojfe8sj5qab441mpqap7av28","status":"confirmed","summary":"Valentine\'s Day","region":"Lithuania","date":"2024-02-14"},{"id":"20240216_u6k1hdn6mclacqqf99214scq7o","status":"confirmed","summary":"Independence Day / National Day","region":"Lithuania","date":"2024-02-16"},{"id":"20240311_q5s1knci11k9oemg77utc8ktf0","status":"confirmed","summary":"Independence Restoration Day","region":"Lithuania","date":"2024-03-11"},{"id":"20240329_mfjuhv7eepfd0m1q7ruc649hl0","status":"confirmed","summary":"Good Friday","region":"Lithuania","date":"2024-03-29"},{"id":"20240330_mec6r7oq5n2de75942d8vsau2s","status":"confirmed","summary":"Holy Saturday","region":"Lithuania","date":"2024-03-30"},{"id":"20240331_l7nnm5egmd3c13lq99iiec2jmg","status":"confirmed","summary":"Easter Sunday","region":"Lithuania","date":"2024-03-31"},{"id":"20240331_nc697e975eq68os79um68mn4t0","status":"confirmed","summary":"Daylight Saving Time starts","region":"Lithuania","date":"2024-03-31"},{"id":"20240401_96h08oeb0al68g09rpsklnk7ac","status":"confirmed","summary":"Easter Monday","region":"Lithuania","date":"2024-04-01"},{"id":"20240501_3k7gk9sva288iav0bm2oj2vlk0","status":"confirmed","summary":"Labour Day","region":"Lithuania","date":"2024-05-01"},{"id":"20240505_6iq6g1baoi97glo15ahguab0qc","status":"confirmed","summary":"Mothers\' Day","region":"Lithuania","date":"2024-05-05"},{"id":"20240602_rr0nhvag7ohrb9u59ctt5mo94c","status":"confirmed","summary":"Fathers\' Day","region":"Lithuania","date":"2024-06-02"},{"id":"20240624_pb7st2r9dkh5b7d6vdokedcrvk","status":"confirmed","summary":"St John\'s Day/Day of Dew","region":"Lithuania","date":"2024-06-24"},{"id":"20240706_vmnjdi69gis66rd0vbhqrkq1h8","status":"confirmed","summary":"King Mindaugas’ Coronation Day","region":"Lithuania","date":"2024-07-06"},{"id":"20240815_2v189dfnkct9vrt750aa7tg98o","status":"confirmed","summary":"Feast of the Assumption of Mary","region":"Lithuania","date":"2024-08-15"},{"id":"20241027_m9vsp1kvtguglc8rjeohic36eo","status":"confirmed","summary":"Daylight Saving Time ends","region":"Lithuania","date":"2024-10-27"},{"id":"20241031_tph0vmkb47l5f0kjr343fs1524","status":"confirmed","summary":"Halloween","region":"Lithuania","date":"2024-10-31"},{"id":"20241101_9mdj3dl2to45uvt4ghkk4g9900","status":"confirmed","summary":"All Saints\' Day","region":"Lithuania","date":"2024-11-01"},{"id":"20241102_mk4ges4vnpdpr5fghst95amduc","status":"confirmed","summary":"All Souls\' Day","region":"Lithuania","date":"2024-11-02"},{"id":"20241224_2b6fm8ts7lqcoq1hffv7mpq100","status":"confirmed","summary":"Christmas Eve","region":"Lithuania","date":"2024-12-24"},{"id":"20241225_esq5rdiifedr5tk5un7l3tukqo","status":"confirmed","summary":"Christmas Day","region":"Lithuania","date":"2024-12-25"},{"id":"20241226_l8hp59q8c63tng3ti2b9rb1ahc","status":"confirmed","summary":"Second Day of Christmas","region":"Lithuania","date":"2024-12-26"},{"id":"20241231_vafds80fh2uselfrubcoqp465k","status":"confirmed","summary":"New Year\'s Eve","region":"Lithuania","date":"2024-12-31"},{"id":"20250101_q0jd2b1gbatd04mlnbke93l7q4","status":"confirmed","summary":"New Year\'s Day","region":"Lithuania","date":"2025-01-01"},{"id":"20250214_ugsvicr1e8t2ne25ckb66fgau8","status":"confirmed","summary":"Valentine\'s Day","region":"Lithuania","date":"2025-02-14"},{"id":"20250216_dbq28n6md9c46422qsl5kk13lk","status":"confirmed","summary":"Independence Day / National Day","region":"Lithuania","date":"2025-02-16"},{"id":"20250304_k7bp0bjiqkvifoep0hkjhni5i4","status":"confirmed","summary":"Carnival","region":"Lithuania","date":"2025-03-04"},{"id":"20250311_pb089ah7use7tihdm9n7a8idpg","status":"confirmed","summary":"Independence Restoration Day","region":"Lithuania","date":"2025-03-11"},{"id":"20250330_dm0tt17adf2dpis5nj7ositp7s","status":"confirmed","summary":"Daylight Saving Time starts","region":"Lithuania","date":"2025-03-30"},{"id":"20250418_amko5r5vcmlu9b54dvjmcvkle4","status":"confirmed","summary":"Good Friday","region":"Lithuania","date":"2025-04-18"},{"id":"20250419_lk2liqu5b07dnkpublocd500d4","status":"confirmed","summary":"Holy Saturday","region":"Lithuania","date":"2025-04-19"},{"id":"20250420_hno2e08o19i6dff1vrdu76npm4","status":"confirmed","summary":"Easter Sunday","region":"Lithuania","date":"2025-04-20"},{"id":"20250421_8vruavjcaq40hbf2g5otaoncu0","status":"confirmed","summary":"Easter Monday","region":"Lithuania","date":"2025-04-21"},{"id":"20250501_17l4jkhg61ckdge85ajb9cib4o","status":"confirmed","summary":"Labour Day","region":"Lithuania","date":"2025-05-01"},{"id":"20250504_s3s31mrau4g7ncudp0dcs2hqdg","status":"confirmed","summary":"Mothers\' Day","region":"Lithuania","date":"2025-05-04"},{"id":"20250601_9hsji93k5a9n5frqqff3md6878","status":"confirmed","summary":"Fathers\' Day","region":"Lithuania","date":"2025-06-01"},{"id":"20250624_dnq9j9jcbq4cs5l77tm40umvn4","status":"confirmed","summary":"St John\'s Day/Day of Dew","region":"Lithuania","date":"2025-06-24"},{"id":"20250706_qoqmadstb4a8o57ht8vbninlag","status":"confirmed","summary":"King Mindaugas’ Coronation Day","region":"Lithuania","date":"2025-07-06"},{"id":"20250815_fchir1umjmtnfkbb3b386cqb2k","status":"confirmed","summary":"Feast of the Assumption of Mary","region":"Lithuania","date":"2025-08-15"},{"id":"20251026_s0eajuhkp1jd48804jvidl27ok","status":"confirmed","summary":"Daylight Saving Time ends","region":"Lithuania","date":"2025-10-26"},{"id":"20251031_1s42e7ob7u0c3e48q8koavpi08","status":"confirmed","summary":"Halloween","region":"Lithuania","date":"2025-10-31"},{"id":"20251101_jargdgussrebcplp8fng3tpfuo","status":"confirmed","summary":"All Saints\' Day","region":"Lithuania","date":"2025-11-01"},{"id":"20251102_e5s4qet4bm8bu5qlnt34kq6kdg","status":"confirmed","summary":"All Souls\' Day","region":"Lithuania","date":"2025-11-02"},{"id":"20251224_nbqu0d65vkaiagppnu9rlin0bc","status":"confirmed","summary":"Christmas Eve","region":"Lithuania","date":"2025-12-24"},{"id":"20251225_lj0orolkmbsn4njvl8391t9doo","status":"confirmed","summary":"Christmas Day","region":"Lithuania","date":"2025-12-25"},{"id":"20251226_b1147dagplkh7gjpsamqfvgl40","status":"confirmed","summary":"Second Day of Christmas","region":"Lithuania","date":"2025-12-26"},{"id":"20251231_9fu27k84v8354r0vl50monkpm8","status":"confirmed","summary":"New Year\'s Eve","region":"Lithuania","date":"2025-12-31"}],"Sri Lanka":[{"id":"20240115_scj5i36as26m8v38aqedkfqtcc","status":"confirmed","summary":"Tamil Thai Pongal Day","region":"Sri Lanka","date":"2024-01-15"},{"id":"20240125_h59bejr16vk9fib5ifh5bq6b90","status":"confirmed","summary":"Duruthu Full Moon Poya Day","region":"Sri Lanka","date":"2024-01-25"},{"id":"20240204_8v100ko8f6045lh6q97elbh6cc","status":"confirmed","summary":"National Day","region":"Sri Lanka","date":"2024-02-04"},{"id":"20240214_5c7lgaqgpqsidh8u5kn8c9970c","status":"confirmed","summary":"Valentine\'s Day","region":"Sri Lanka","date":"2024-02-14"},{"id":"20240223_qnlf8j8drhrjcrfd57n66eegls","status":"confirmed","summary":"Navam Full Moon Poya Day","region":"Sri Lanka","date":"2024-02-23"},{"id":"20240308_se397jm0pup5f2433hmbccba5c","status":"confirmed","summary":"Mahasivarathri Day","region":"Sri Lanka","date":"2024-03-08"},{"id":"20240312_rknou28cqm7nnv2seq1gr3j7f8","status":"confirmed","summary":"Ramadan Start","region":"Sri Lanka","date":"2024-03-12"},{"id":"20240324_gmt8oqqvk849uisq8ngek488e4","status":"confirmed","summary":"Madin Full Moon Poya Day","region":"Sri Lanka","date":"2024-03-24"},{"id":"20240329_5qhmucjr76d7erqssk5vu6la1g","status":"confirmed","summary":"Good Friday","region":"Sri Lanka","date":"2024-03-29"},{"id":"20240331_41gqo5b986ncksbmdhmu8ru69k","status":"confirmed","summary":"Easter Sunday","region":"Sri Lanka","date":"2024-03-31"},{"id":"20240410_gan75u9415fkjmihdm8k2a9loo","status":"confirmed","summary":"Eid al-Fitr","region":"Sri Lanka","date":"2024-04-10"},{"id":"20240412_5pahr874t5m09c9aca3poeh4f8","status":"confirmed","summary":"Sinhala and Tamil New Year\'s Eve","region":"Sri Lanka","date":"2024-04-12"},{"id":"20240413_ace89om7r2u02oa00cgcu99sdo","status":"confirmed","summary":"Sinhala and Tamil New Year\'s Day","region":"Sri Lanka","date":"2024-04-13"},{"id":"20240415_855h6beq7co6hun3muuj27l530","status":"confirmed","summary":"Sinhala and Tamil New Year Holiday","region":"Sri Lanka","date":"2024-04-15"},{"id":"20240423_otgqqmut2d8ujp8op296sdud0g","status":"confirmed","summary":"Bak Full Moon Poya Day","region":"Sri Lanka","date":"2024-04-23"},{"id":"20240501_6isnrbe8tijsvb2aop08oedgnk","status":"confirmed","summary":"May Day","region":"Sri Lanka","date":"2024-05-01"},{"id":"20240512_qihg65sf26c9ureqe87f5cosao","status":"confirmed","summary":"Mother\'s Day","region":"Sri Lanka","date":"2024-05-12"},{"id":"20240523_2ig296c5kljcfemugab61dg5g8","status":"confirmed","summary":"Vesak Full Moon Poya Day","region":"Sri Lanka","date":"2024-05-23"},{"id":"20240524_n2ut5b6e43q025ble9r3q1c8k8","status":"confirmed","summary":"Day after Vesak Full Moon Poya Day","region":"Sri Lanka","date":"2024-05-24"},{"id":"20240616_d2c4csfffteshmmnu943rro0c8","status":"confirmed","summary":"Father\'s Day","region":"Sri Lanka","date":"2024-06-16"},{"id":"20240617_nhhv9ba32c6purf9dnmgq7miak","status":"confirmed","summary":"Eid al-Adha","region":"Sri Lanka","date":"2024-06-17"},{"id":"20240621_v34kohn79nuetvtsgbm8rsepf8","status":"confirmed","summary":"Poson Full Moon Poya Day","region":"Sri Lanka","date":"2024-06-21"},{"id":"20240720_53u8p4kebrkj4bj961chjm05ec","status":"confirmed","summary":"Esala Full Moon Poya Day","region":"Sri Lanka","date":"2024-07-20"},{"id":"20240819_pqj3tujqnksp34dgu8im6trrjg","status":"confirmed","summary":"Nikini Full Moon Poya Day","region":"Sri Lanka","date":"2024-08-19"},{"id":"20240916_g0l1ro234jrap7tvg7teli3tis","status":"confirmed","summary":"Milad-Un-Nabi (Holy Prophet\'s Birthday)","region":"Sri Lanka","date":"2024-09-16"},{"id":"20240917_q52g1qkdbivmvl9dj79ql58mbg","status":"confirmed","summary":"Binara Full Moon Poya Day","region":"Sri Lanka","date":"2024-09-17"},{"id":"20241017_ficg3n5l3c051q13j2ss1q3e2k","status":"confirmed","summary":"Vap Full Moon Poya Day","region":"Sri Lanka","date":"2024-10-17"},{"id":"20241031_64latae93kto44hf6adomeula4","status":"confirmed","summary":"Deepavali","region":"Sri Lanka","date":"2024-10-31"},{"id":"20241115_obj34sa0vmsfj1gn3h659ff0ik","status":"confirmed","summary":"Il Full Moon Poya Day","region":"Sri Lanka","date":"2024-11-15"},{"id":"20241214_n1851r741hfq531m3mq4i9sh5c","status":"confirmed","summary":"Unduvap Full Moon Poya Day","region":"Sri Lanka","date":"2024-12-14"},{"id":"20241224_ag45b08epa2drqoi6odj65425o","status":"confirmed","summary":"Christmas Eve","region":"Sri Lanka","date":"2024-12-24"},{"id":"20241225_c7ol3lo4ecjd77o41fqpioen1g","status":"confirmed","summary":"Christmas Day","region":"Sri Lanka","date":"2024-12-25"}],"Liberia":[{"id":"20240101_jsd7te01rmaksi0mbav2ck9flc","status":"confirmed","summary":"New Year","region":"Liberia","date":"2024-01-01"},{"id":"20240107_nccdhk672anniofgfrbnm5bhoo","status":"confirmed","summary":"Pioneers Day","region":"Liberia","date":"2024-01-07"},{"id":"20240108_16e702t86q0fuu2d5iuu8evjmk","status":"confirmed","summary":"Day off for Pioneers Day","region":"Liberia","date":"2024-01-08"},{"id":"20240211_k9h6knickgvnl6d1i3phbom9cc","status":"confirmed","summary":"Armed Forces Day","region":"Liberia","date":"2024-02-11"},{"id":"20240212_m2mqnrgr6pcqd3m6ngjn29t97g","status":"confirmed","summary":"Day off for Armed Forces Day","region":"Liberia","date":"2024-02-12"},{"id":"20240313_15meufchjekenb29eiug6a0cvs","status":"confirmed","summary":"Decoration Day","region":"Liberia","date":"2024-03-13"},{"id":"20240315_enc4dn2krn2aig1ktu2mapu5f4","status":"confirmed","summary":"J. J. Roberts Birthday","region":"Liberia","date":"2024-03-15"},{"id":"20240412_lojnot0jpvlcnf9faeragm0nus","status":"confirmed","summary":"Fast and Prayer Day","region":"Liberia","date":"2024-04-12"},{"id":"20240514_gmkeucgappl2a0q6lhikha2gj8","status":"confirmed","summary":"National Unification Day","region":"Liberia","date":"2024-05-14"},{"id":"20240726_3qce4rurp7volics7mv1bj2fc8","status":"confirmed","summary":"Independence Day","region":"Liberia","date":"2024-07-26"},{"id":"20240824_56euch95pigsoai0djc809scog","status":"confirmed","summary":"Flag Day","region":"Liberia","date":"2024-08-24"},{"id":"20241107_d5t29tamrs0od2r10nrohbmego","status":"confirmed","summary":"Thanksgiving","region":"Liberia","date":"2024-11-07"},{"id":"20241129_bs39m5144jih44hm19hhj4brqo","status":"confirmed","summary":"William Tubmans Birthday","region":"Liberia","date":"2024-11-29"},{"id":"20241225_678b9qp2i8l9ie8k97etboh1s8","status":"confirmed","summary":"Christmas Day","region":"Liberia","date":"2024-12-25"},{"id":"20250101_c0fe8pd6li6716lqkkbq1m937c","status":"confirmed","summary":"New Year","region":"Liberia","date":"2025-01-01"},{"id":"20250107_d6qv7o4oqh80di732cmon96nek","status":"confirmed","summary":"Pioneers Day","region":"Liberia","date":"2025-01-07"},{"id":"20250211_gm50s81eq1nv9h1ftbk3vs0k40","status":"confirmed","summary":"Armed Forces Day","region":"Liberia","date":"2025-02-11"},{"id":"20250312_e8pb8vjf89t5oc2jl766qu2e1k","status":"confirmed","summary":"Decoration Day","region":"Liberia","date":"2025-03-12"},{"id":"20250315_8ae1jdtt8k6rjeeg36nl04meg0","status":"confirmed","summary":"J. J. Roberts Birthday","region":"Liberia","date":"2025-03-15"},{"id":"20250411_nl2r05fj2h9r2qba581nn73l9g","status":"confirmed","summary":"Fast and Prayer Day","region":"Liberia","date":"2025-04-11"},{"id":"20250514_vg208aquecabb43pedvprde0as","status":"confirmed","summary":"National Unification Day","region":"Liberia","date":"2025-05-14"},{"id":"20250726_8f74doqm1ta7ttenhbge4piu84","status":"confirmed","summary":"Independence Day","region":"Liberia","date":"2025-07-26"},{"id":"20250824_8k1kdhfc6sll6fh8f5n450ri3c","status":"confirmed","summary":"Flag Day","region":"Liberia","date":"2025-08-24"},{"id":"20250825_r83cvd8oelrr3s5a2rvufmfk9g","status":"confirmed","summary":"Day off for Flag Day","region":"Liberia","date":"2025-08-25"},{"id":"20251106_5cq3e487lvum0htse8r7glmj04","status":"confirmed","summary":"Thanksgiving","region":"Liberia","date":"2025-11-06"},{"id":"20251129_uqd4ebkmauil2nu8m594bs6apc","status":"confirmed","summary":"William Tubmans Birthday","region":"Liberia","date":"2025-11-29"},{"id":"20251225_gvgds7bgn3ar1ln4d22os8f3e4","status":"confirmed","summary":"Christmas Day","region":"Liberia","date":"2025-12-25"}],"Lesotho":[{"id":"20240101_kkuo471lgsq6espum0idhj31ok","status":"confirmed","summary":"New Year","region":"Lesotho","date":"2024-01-01"},{"id":"20240311_klu7ftjilqnac65vdg633neul0","status":"confirmed","summary":"Moshoeshoe\'s Birthday","region":"Lesotho","date":"2024-03-11"},{"id":"20240329_us69pseeninhc9uvjhl02minqc","status":"confirmed","summary":"Good Friday","region":"Lesotho","date":"2024-03-29"},{"id":"20240401_bi36ghl9jbvgs1nnf4qt4q5478","status":"confirmed","summary":"Easter Monday","region":"Lesotho","date":"2024-04-01"},{"id":"20240501_9dnt51peuv4hhaug3kgsidsmp4","status":"confirmed","summary":"May Day","region":"Lesotho","date":"2024-05-01"},{"id":"20240509_3vkm7em7kt60oktpu0kgp64uoc","status":"confirmed","summary":"Ascension Day","region":"Lesotho","date":"2024-05-09"},{"id":"20240525_10kdbli2sqhpb9be8d922318g4","status":"confirmed","summary":"Africa/Heroes Day","region":"Lesotho","date":"2024-05-25"},{"id":"20240717_45ukt4erulu5e4jn5vjspmk97o","status":"confirmed","summary":"King\'s Birthday","region":"Lesotho","date":"2024-07-17"},{"id":"20241004_fl87vv319i52ocdm09mud1ivhk","status":"confirmed","summary":"Independence Day","region":"Lesotho","date":"2024-10-04"},{"id":"20241225_dfqm1ut43icjb3tpqst29dp4ak","status":"confirmed","summary":"Christmas Day","region":"Lesotho","date":"2024-12-25"},{"id":"20241226_3rv0j2bds41ttvi97urs96uf3s","status":"confirmed","summary":"Boxing Day","region":"Lesotho","date":"2024-12-26"},{"id":"20250101_q37p2a7l4na567gu3r1734odek","status":"confirmed","summary":"New Year","region":"Lesotho","date":"2025-01-01"},{"id":"20250311_b2errfidq7nemvflgsck3tp88o","status":"confirmed","summary":"Moshoeshoe\'s Birthday","region":"Lesotho","date":"2025-03-11"},{"id":"20250418_kj52ttm3fldmei6m8necbr3n5g","status":"confirmed","summary":"Good Friday","region":"Lesotho","date":"2025-04-18"},{"id":"20250421_ujnqkjgqsidnir198o1rj3ehfc","status":"confirmed","summary":"Easter Monday","region":"Lesotho","date":"2025-04-21"},{"id":"20250501_g26i1icbv4tm80mhsr3b9vccqg","status":"confirmed","summary":"May Day","region":"Lesotho","date":"2025-05-01"},{"id":"20250525_bkom64q42lk2hvra9tihcng6d4","status":"confirmed","summary":"Africa/Heroes Day","region":"Lesotho","date":"2025-05-25"},{"id":"20250529_o8i9bc63c7mv39bns78m6aaj3s","status":"confirmed","summary":"Ascension Day","region":"Lesotho","date":"2025-05-29"},{"id":"20250717_brqs982k8mtiv1te0dmj6rgik0","status":"confirmed","summary":"King\'s Birthday","region":"Lesotho","date":"2025-07-17"},{"id":"20251004_e4akqdp9qi9r0jh318vo0kv34k","status":"confirmed","summary":"Independence Day","region":"Lesotho","date":"2025-10-04"},{"id":"20251225_o5p39717d4jqm65sbf1hcpebjk","status":"confirmed","summary":"Christmas Day","region":"Lesotho","date":"2025-12-25"},{"id":"20251226_4cq26u2v734in4fo446060kprk","status":"confirmed","summary":"Boxing Day","region":"Lesotho","date":"2025-12-26"}],"Luxembourg":[{"id":"20240101_7hf07jbsjmvefn4pbc4f256ihk","status":"confirmed","summary":"New Year\'s Day","region":"Luxembourg","date":"2024-01-01"},{"id":"20240331_f6rmaee75b7k3kf15q57q5gq9k","status":"confirmed","summary":"Easter Sunday","region":"Luxembourg","date":"2024-03-31"},{"id":"20240401_s4dj2f0jg2khjf6cvntlnop4kk","status":"confirmed","summary":"Easter Monday","region":"Luxembourg","date":"2024-04-01"},{"id":"20240501_8c8o044r8voaghav0rbbbkrspo","status":"confirmed","summary":"Labor Day / May Day","region":"Luxembourg","date":"2024-05-01"},{"id":"20240509_60k687b8bbk9dach377pi10vj8","status":"confirmed","summary":"Europe Day","region":"Luxembourg","date":"2024-05-09"},{"id":"20240509_lamjattur706685521rjbo4edc","status":"confirmed","summary":"Ascension Day","region":"Luxembourg","date":"2024-05-09"},{"id":"20240519_0fif5n9me3amc273ppghilirh8","status":"confirmed","summary":"Whit Sunday","region":"Luxembourg","date":"2024-05-19"},{"id":"20240520_fgeuhsq4tq9db25kj0gagh1sqg","status":"confirmed","summary":"Whit Monday","region":"Luxembourg","date":"2024-05-20"},{"id":"20240609_sh55opiqnd1lffk9bf3kct2ihg","status":"confirmed","summary":"Mothers\' Day","region":"Luxembourg","date":"2024-06-09"},{"id":"20240623_kjohqvoq970dm625ndu86bv82c","status":"confirmed","summary":"National Day","region":"Luxembourg","date":"2024-06-23"},{"id":"20240815_4olgargmh2ga54fr13noeo97hg","status":"confirmed","summary":"Assumption of Mary","region":"Luxembourg","date":"2024-08-15"},{"id":"20241006_i8o1fkiaarm3k4nm5v5n1sbuac","status":"confirmed","summary":"Fathers\' Day","region":"Luxembourg","date":"2024-10-06"},{"id":"20241101_s7i09gggdtebedjhi09oe9cnb0","status":"confirmed","summary":"All Saints\' Day","region":"Luxembourg","date":"2024-11-01"},{"id":"20241225_eq7jcj9k1lg09clh0h4q968jic","status":"confirmed","summary":"Christmas Day","region":"Luxembourg","date":"2024-12-25"},{"id":"20241226_f2jaj56lrnnio0k1j16hpngsjs","status":"confirmed","summary":"St Stephen\'s Day","region":"Luxembourg","date":"2024-12-26"},{"id":"20241231_h3ggqh6n1hplplo88k099qit0g","status":"confirmed","summary":"New Year\'s Eve","region":"Luxembourg","date":"2024-12-31"},{"id":"20250101_1ohj3esno8crj5cklicds99vfk","status":"confirmed","summary":"New Year\'s Day","region":"Luxembourg","date":"2025-01-01"},{"id":"20250420_ktm4nspesoidql25l03gd1s2fc","status":"confirmed","summary":"Easter Sunday","region":"Luxembourg","date":"2025-04-20"},{"id":"20250421_82tacfirmek3ep6and95sok05o","status":"confirmed","summary":"Easter Monday","region":"Luxembourg","date":"2025-04-21"},{"id":"20250501_oc4m2qohikcmrnve63rkbsehes","status":"confirmed","summary":"Labor Day / May Day","region":"Luxembourg","date":"2025-05-01"},{"id":"20250509_biskgp8j2419sl46r5gn3cpttk","status":"confirmed","summary":"Europe Day","region":"Luxembourg","date":"2025-05-09"},{"id":"20250529_ll6e6hmmcc8i42ksvmtjggkudk","status":"confirmed","summary":"Ascension Day","region":"Luxembourg","date":"2025-05-29"},{"id":"20250608_htq1o5qc72ksk7j2fo532pbnso","status":"confirmed","summary":"Mothers\' Day","region":"Luxembourg","date":"2025-06-08"},{"id":"20250608_n0gnjeu0fb4od977f2ivcvp1to","status":"confirmed","summary":"Whit Sunday","region":"Luxembourg","date":"2025-06-08"},{"id":"20250609_lnj0lol95h1tntg26214aeobjc","status":"confirmed","summary":"Whit Monday","region":"Luxembourg","date":"2025-06-09"},{"id":"20250623_od6qc6f6imtoqi691adaqkm94o","status":"confirmed","summary":"National Day","region":"Luxembourg","date":"2025-06-23"},{"id":"20250815_vdhhmn0t69kmookpd939es1p80","status":"confirmed","summary":"Assumption of Mary","region":"Luxembourg","date":"2025-08-15"},{"id":"20251005_e864laug1bdvgfo8egea8fuoc4","status":"confirmed","summary":"Fathers\' Day","region":"Luxembourg","date":"2025-10-05"},{"id":"20251101_ivi5r6bcl9h0jrgsgabk2vv3hk","status":"confirmed","summary":"All Saints\' Day","region":"Luxembourg","date":"2025-11-01"},{"id":"20251225_8aq3sq4epkkvomhhm8enc7fmsg","status":"confirmed","summary":"Christmas Day","region":"Luxembourg","date":"2025-12-25"},{"id":"20251226_c9k8ud56ctjrjdks5fggdnbpjo","status":"confirmed","summary":"St Stephen\'s Day","region":"Luxembourg","date":"2025-12-26"},{"id":"20251231_gtmblt3sf6ipk36madpp15600g","status":"confirmed","summary":"New Year\'s Eve","region":"Luxembourg","date":"2025-12-31"}],"Libya":[{"id":"20240217_hdrrtqp0hic62ja01f5htnhjig","status":"confirmed","summary":"Libyan Revolution Day","region":"Libya","date":"2024-02-17"},{"id":"20240218_sgfa6nj5m1lojeh1d5jcd1mjro","status":"confirmed","summary":"Libyan Revolution Day Holiday","region":"Libya","date":"2024-02-18"},{"id":"20240312_6e9r4emsj215c6tosv0k740kc4","status":"confirmed","summary":"Ramadan Start","region":"Libya","date":"2024-03-12"},{"id":"20240501_i1vjgoipeb3vs68gm7vvrf4p1k","status":"confirmed","summary":"May Day","region":"Libya","date":"2024-05-01"},{"id":"20240616_8dmopdpmij401bbfnkvhq5d5q0","status":"confirmed","summary":"Day of Arafah","region":"Libya","date":"2024-06-16"},{"id":"20240916_qsfag5qa6g42ub1bi397ekmok4","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Libya","date":"2024-09-16"},{"id":"20240916_t24k3qnt8as7hfv6uaimaj2mq8","status":"confirmed","summary":"Martyrs\' Day","region":"Libya","date":"2024-09-16"},{"id":"20241023_qfo0b4eb3jkfhuksbvub3leh9k","status":"confirmed","summary":"Liberation Day","region":"Libya","date":"2024-10-23"},{"id":"20241224_qvvbamns4u9je9nb6khkb7r2lg","status":"confirmed","summary":"Independence Day","region":"Libya","date":"2024-12-24"},{"id":"20250217_o4qf7ft4h7m5u9m2a41cg0q490","status":"confirmed","summary":"Libyan Revolution Day","region":"Libya","date":"2025-02-17"},{"id":"20250301_gmoa2f13ir75dmsb1gmc66k1d0","status":"confirmed","summary":"Ramadan Start","region":"Libya","date":"2025-03-01"},{"id":"20250501_k46efvrm7rpci6kvlliopiblig","status":"confirmed","summary":"May Day","region":"Libya","date":"2025-05-01"},{"id":"20250606_l0gpj7juff7abvlp6p8p3nh4k4","status":"confirmed","summary":"Day of Arafah","region":"Libya","date":"2025-06-06"},{"id":"20250905_kpunfjt5dv59qpv0k8grs16h6c","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Libya","date":"2025-09-05"},{"id":"20250916_5lncav5gfm99s83qjlqc2g2l6c","status":"confirmed","summary":"Martyrs\' Day","region":"Libya","date":"2025-09-16"},{"id":"20251023_hsooe10ea0p460gp0nmnv05vjg","status":"confirmed","summary":"Liberation Day","region":"Libya","date":"2025-10-23"},{"id":"20251224_cr9em68pvjph2ohamccs3t585o","status":"confirmed","summary":"Independence Day","region":"Libya","date":"2025-12-24"}],"Morocco":[{"id":"20240101_mlujac6e91jfd1t5e5cmumhd1c","status":"confirmed","summary":"New Year\'s Day","region":"Morocco","date":"2024-01-01"},{"id":"20240111_clr7fccide8vn2600777qec2os","status":"confirmed","summary":"Anniversary of the Independence Manifesto","region":"Morocco","date":"2024-01-11"},{"id":"20240114_3t067od21mpf5qsm5io7a103ls","status":"confirmed","summary":"Amazigh New Year","region":"Morocco","date":"2024-01-14"},{"id":"20240310_tnmcngoqbv6jiu4920f8t8pnbo","status":"confirmed","summary":"Daylight Saving Time ends","region":"Morocco","date":"2024-03-10"},{"id":"20240312_aq2esvk6r445giki6il10g7uv8","status":"confirmed","summary":"Ramadan Start","region":"Morocco","date":"2024-03-12"},{"id":"20240410_7blbhgngk4s043qhhvtg1meskk","status":"confirmed","summary":"Eid al-Fitr","region":"Morocco","date":"2024-04-10"},{"id":"20240411_gu6bpsf73i13o2agdamrdkhd8c","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Morocco","date":"2024-04-11"},{"id":"20240414_qqa50rfptvjof4c9m01rvka3h8","status":"confirmed","summary":"Daylight Saving Time starts","region":"Morocco","date":"2024-04-14"},{"id":"20240501_ffl1ri4ru4ervu8qu44l1in6vc","status":"confirmed","summary":"Labour Day/May Day","region":"Morocco","date":"2024-05-01"},{"id":"20240617_qnljcus489etjmuk6ller5k670","status":"confirmed","summary":"Eid al-Adha","region":"Morocco","date":"2024-06-17"},{"id":"20240618_es7r2na89rehn8ge0qjl6980t8","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Morocco","date":"2024-06-18"},{"id":"20240708_qeq05b68kqu1628rels54bioqs","status":"confirmed","summary":"Hijra New Year","region":"Morocco","date":"2024-07-08"},{"id":"20240730_ki0n3gmcog08qgf88rh3g64i24","status":"confirmed","summary":"Feast of the Throne","region":"Morocco","date":"2024-07-30"},{"id":"20240814_u9d13eibvsd6aiq5qvvj27edpo","status":"confirmed","summary":"Anniversary of the Recovery Oued Ed-Dahab","region":"Morocco","date":"2024-08-14"},{"id":"20240820_286a67h15ut86e51stsdtdedqc","status":"confirmed","summary":"Anniversary of the Revolution of the King and the People","region":"Morocco","date":"2024-08-20"},{"id":"20240821_ueu2vtg4lkguuou6p89bbslvj8","status":"confirmed","summary":"Youth Day","region":"Morocco","date":"2024-08-21"},{"id":"20240916_0s48lnm9fptof0kavnoq10pa9c","status":"confirmed","summary":"The Prophet Muhammad\'s Birthday","region":"Morocco","date":"2024-09-16"},{"id":"20240917_ru980io2407l886jto8gb16k7s","status":"confirmed","summary":"The Prophet Muhammad\'s Birthday Holiday","region":"Morocco","date":"2024-09-17"},{"id":"20241106_4hs15t908nainpe0u5bsepm6ag","status":"confirmed","summary":"Anniversary of the Green March","region":"Morocco","date":"2024-11-06"},{"id":"20241118_qub9ubcclim68cd59l9m0u7q8o","status":"confirmed","summary":"Independence Day","region":"Morocco","date":"2024-11-18"},{"id":"20250101_9qirkth29i9p2k962pp738jt54","status":"confirmed","summary":"New Year\'s Day","region":"Morocco","date":"2025-01-01"},{"id":"20250111_a8td06rtenshqo63aub4r6ch0g","status":"confirmed","summary":"Anniversary of the Independence Manifesto","region":"Morocco","date":"2025-01-11"},{"id":"20250114_1l6sh1p41rdb4kfkqne7anrdb0","status":"confirmed","summary":"Amazigh New Year","region":"Morocco","date":"2025-01-14"},{"id":"20250223_9cl09d8s14a59hgrgt35dc45nk","status":"confirmed","summary":"Daylight Saving Time ends","region":"Morocco","date":"2025-02-23"},{"id":"20250301_8ojm0s6ucrd66kguqoaid34qpg","status":"confirmed","summary":"Ramadan Start","region":"Morocco","date":"2025-03-01"},{"id":"20250331_lopsu7jmkvgs912t0qgb7odh30","status":"confirmed","summary":"Eid al-Fitr","region":"Morocco","date":"2025-03-31"},{"id":"20250401_v16e4d3rh8t6ep8h0cerqsf6fk","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Morocco","date":"2025-04-01"},{"id":"20250406_25u716j2hrb2l0e2c6baecabvo","status":"confirmed","summary":"Daylight Saving Time starts","region":"Morocco","date":"2025-04-06"},{"id":"20250501_ekejnbf9304tl40vgnrsejskb8","status":"confirmed","summary":"Labour Day/May Day","region":"Morocco","date":"2025-05-01"},{"id":"20250606_96phi1tccuuohsrjs2fgb8ci2c","status":"confirmed","summary":"Eid al-Adha","region":"Morocco","date":"2025-06-06"},{"id":"20250607_ac2o3d18d9ofepn4ir1hl6oqvc","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Morocco","date":"2025-06-07"},{"id":"20250627_74t1b568a5ta6bda6e1ql6gtko","status":"confirmed","summary":"Hijra New Year","region":"Morocco","date":"2025-06-27"},{"id":"20250730_1kt83p4870dk7aeche3mh3aiv4","status":"confirmed","summary":"Feast of the Throne","region":"Morocco","date":"2025-07-30"},{"id":"20250814_7i9muqb2hl8jlrvumkec4auu40","status":"confirmed","summary":"Anniversary of the Recovery Oued Ed-Dahab","region":"Morocco","date":"2025-08-14"},{"id":"20250820_u5vv1df5cf1gs3ugjjgjupogkc","status":"confirmed","summary":"Anniversary of the Revolution of the King and the People","region":"Morocco","date":"2025-08-20"},{"id":"20250821_ca1mnhq5focdivq0dbuvsbfsgo","status":"confirmed","summary":"Youth Day","region":"Morocco","date":"2025-08-21"},{"id":"20250905_ej9v57eu7a944oj61ei9g36s78","status":"confirmed","summary":"The Prophet Muhammad\'s Birthday","region":"Morocco","date":"2025-09-05"},{"id":"20250906_dc2ea3na2ffjbkcse1vqsf28g0","status":"confirmed","summary":"The Prophet Muhammad\'s Birthday Holiday","region":"Morocco","date":"2025-09-06"},{"id":"20251106_a69enhgvoe932olem7ob9gg75s","status":"confirmed","summary":"Anniversary of the Green March","region":"Morocco","date":"2025-11-06"},{"id":"20251118_qs332l1mg0h0emt4io9uki7958","status":"confirmed","summary":"Independence Day","region":"Morocco","date":"2025-11-18"}],"Malaysia":[{"id":"20240101_6o45ldeq0qtntopacp85elks24","status":"confirmed","summary":"New Year\'s Day (regional holiday)","region":"Malaysia","date":"2024-01-01"},{"id":"20240114_cv19uodu5ne0jc3p5q8vq7qqg8","status":"confirmed","summary":"Birthday of Yang di-Pertuan Besar (Negeri Sembilan)","region":"Malaysia","date":"2024-01-14"},{"id":"20240115_20q7694a65hvqmf1a5tnlm8qr8","status":"confirmed","summary":"Birthday of Yang di-Pertuan Besar observed (Negeri Sembilan)","region":"Malaysia","date":"2024-01-15"},{"id":"20240125_3o9e9p27tpuqa2vrh1juj7nh1o","status":"confirmed","summary":"Thaipusam (regional holiday)","region":"Malaysia","date":"2024-01-25"},{"id":"20240201_0jvo063m5ookkqile5a9ghsjmk","status":"confirmed","summary":"Federal Territory Day (regional holiday)","region":"Malaysia","date":"2024-02-01"},{"id":"20240208_9oav9fau8rbsdm1eu6gknbj32k","status":"confirmed","summary":"Isra and Mi\'raj (regional holiday)","region":"Malaysia","date":"2024-02-08"},{"id":"20240210_6ifr8eh5qluarj4ofgjemcc18o","status":"confirmed","summary":"Lunar New Year\'s Day","region":"Malaysia","date":"2024-02-10"},{"id":"20240211_n550gnope5k0gr2mnbbd4cut9o","status":"confirmed","summary":"Lunar New Year Holiday (regional holiday)","region":"Malaysia","date":"2024-02-11"},{"id":"20240211_tqtaoqa3v6uk3pu6c6c24vbde4","status":"confirmed","summary":"Second Day of Lunar New Year (regional holiday)","region":"Malaysia","date":"2024-02-11"},{"id":"20240212_deanl36nimpeiame2uik6lvc0g","status":"confirmed","summary":"Lunar New Year Holiday (regional holiday)","region":"Malaysia","date":"2024-02-12"},{"id":"20240214_0gmq9p5u15nrkbn6ju9rmtgmfg","status":"confirmed","summary":"Valentine\'s Day","region":"Malaysia","date":"2024-02-14"},{"id":"20240304_eieq6kdufbtofd0mo2ccnlke3o","status":"confirmed","summary":"Anniversary of the Coronation of the Sultan of Terengganu (Terengganu)","region":"Malaysia","date":"2024-03-04"},{"id":"20240312_6t0gkf7bi689mmbp1hs0ta6usg","status":"confirmed","summary":"First Day of Ramadan (regional holiday)","region":"Malaysia","date":"2024-03-12"},{"id":"20240323_a2me3ifn6slis5m6lk2jiq6cmk","status":"confirmed","summary":"Birthday of the Sultan of Johor (Johor)","region":"Malaysia","date":"2024-03-23"},{"id":"20240328_j0mb1pou5ol2teacrrkk8419ek","status":"confirmed","summary":"Nuzul Al-Quran (regional holiday)","region":"Malaysia","date":"2024-03-28"},{"id":"20240329_pvislq0ujdt88cg24geijn3e00","status":"confirmed","summary":"Good Friday (regional holiday)","region":"Malaysia","date":"2024-03-29"},{"id":"20240331_qs5hhd6f3ee071i0brokdbr3k8","status":"confirmed","summary":"Easter Sunday","region":"Malaysia","date":"2024-03-31"},{"id":"20240409_a48445s1k7ulkqurhq05t0c2ks","status":"confirmed","summary":"Hari Raya Puasa Holiday (Kelantan)","region":"Malaysia","date":"2024-04-09"},{"id":"20240410_aoe2fp4qknk102tss8likvih40","status":"confirmed","summary":"Hari Raya Puasa","region":"Malaysia","date":"2024-04-10"},{"id":"20240411_pmacg753oi5qmu3ln184ncs22c","status":"confirmed","summary":"Hari Raya Puasa Day 2","region":"Malaysia","date":"2024-04-11"},{"id":"20240415_c2h9i2inh48imia8suee16q9g0","status":"confirmed","summary":"Declaration of Malacca as Historical City (Malacca)","region":"Malaysia","date":"2024-04-15"},{"id":"20240426_1o62mlecqdi7i60odu1kos9ai8","status":"confirmed","summary":"Birthday of the Sultan of Terengganu (Terengganu)","region":"Malaysia","date":"2024-04-26"},{"id":"20240501_o7qii77ord3r9hk06p9ipo2mlk","status":"confirmed","summary":"Labour Day","region":"Malaysia","date":"2024-05-01"},{"id":"20240517_830dop9qvt74p0l9k1uiopnpq0","status":"confirmed","summary":"Birthday of the Raja of Perlis (Perlis)","region":"Malaysia","date":"2024-05-17"},{"id":"20240522_fvn72d5k1152jd4hr8m1mg5lp0","status":"confirmed","summary":"Wesak Day","region":"Malaysia","date":"2024-05-22"},{"id":"20240522_jb3jpbhslqej4v2v4lu916d52c","status":"confirmed","summary":"Pahang State Holiday (Pahang)","region":"Malaysia","date":"2024-05-22"},{"id":"20240530_bpq7lqmk4pegm3o2f9kmg6qbsk","status":"confirmed","summary":"Harvest Festival (regional holiday)","region":"Malaysia","date":"2024-05-30"},{"id":"20240531_4un9v6483a6j8sfocgumohvimk","status":"confirmed","summary":"Second Day of Harvest Festival (regional holiday)","region":"Malaysia","date":"2024-05-31"},{"id":"20240601_49jnj3n6nu89cfgihgdv33b6p8","status":"confirmed","summary":"Gawai Dayak (Sarawak)","region":"Malaysia","date":"2024-06-01"},{"id":"20240602_mte8lcshhq9t3lh9q0861rgeh4","status":"confirmed","summary":"Gawai Dayak Holiday (Sarawak)","region":"Malaysia","date":"2024-06-02"},{"id":"20240603_hiumdpobisglb1o43e6u8km8os","status":"confirmed","summary":"The Yang di-Pertuan Agong\'s Birthday","region":"Malaysia","date":"2024-06-03"},{"id":"20240603_rt87tjl69n4knepcftcdu15cq8","status":"confirmed","summary":"Gawai Dayak Holiday observed (Sarawak)","region":"Malaysia","date":"2024-06-03"},{"id":"20240616_j3sl8nvs8smmhuo487b1nhn5mk","status":"confirmed","summary":"Day of Arafat (regional holiday)","region":"Malaysia","date":"2024-06-16"},{"id":"20240617_j2qn0bbvfkvd22ik11glrit58o","status":"confirmed","summary":"Hari Raya Haji","region":"Malaysia","date":"2024-06-17"},{"id":"20240618_fij30ok43d93nmr6dhuba3ertc","status":"confirmed","summary":"Hari Raya Haji (Day 2) (regional holiday)","region":"Malaysia","date":"2024-06-18"},{"id":"20240630_kf77bg52p9dgev2a4eatg9o4fo","status":"confirmed","summary":"Sultan of Kedah\'s Birthday (Kedah)","region":"Malaysia","date":"2024-06-30"},{"id":"20240707_8nt0g80g7fb7t8ubc0s2ba57bk","status":"confirmed","summary":"George Town World Heritage City Day (Penang)","region":"Malaysia","date":"2024-07-07"},{"id":"20240707_dna5hoihi1veefpq8s57r4dg8o","status":"confirmed","summary":"Muharram/New Year","region":"Malaysia","date":"2024-07-07"},{"id":"20240708_8stogaigntb6j2as5t5074e21s","status":"confirmed","summary":"Muharram Holiday (regional holiday)","region":"Malaysia","date":"2024-07-08"},{"id":"20240713_hh3m1b24ulefrvp5tlu9iv46pk","status":"confirmed","summary":"Penang Governor\'s Birthday (Penang)","region":"Malaysia","date":"2024-07-13"},{"id":"20240722_ce3l8pqale3tnb5jsjj1j861k8","status":"confirmed","summary":"Sarawak Independence Day (Sarawak)","region":"Malaysia","date":"2024-07-22"},{"id":"20240730_02cq509m6m2niu9se0fijm9b4c","status":"confirmed","summary":"Birthday of the Sultan of Pahang (Pahang)","region":"Malaysia","date":"2024-07-30"},{"id":"20240811_juqjttu6h9q9ec27f0p7drni00","status":"confirmed","summary":"Almarhum Sultan Iskandar Hol Day (Johor)","region":"Malaysia","date":"2024-08-11"},{"id":"20240824_rb563mlls7qvlmmim7lhr1mm8o","status":"confirmed","summary":"Birthday of the Governor of Malacca (Malacca)","region":"Malaysia","date":"2024-08-24"},{"id":"20240831_8cijhrss301fckv7ev448ef42o","status":"confirmed","summary":"Malaysia\'s National Day","region":"Malaysia","date":"2024-08-31"},{"id":"20240901_j7hdf1bcqcb1lrf78rav0vdv5o","status":"confirmed","summary":"Holiday for Malaysia\'s National Day (regional holiday)","region":"Malaysia","date":"2024-09-01"},{"id":"20240916_j09k109vtsrtir98vnj42mdcto","status":"confirmed","summary":"The Prophet Muhammad\'s Birthday","region":"Malaysia","date":"2024-09-16"},{"id":"20240916_qutteq8f6shki8oh5rfvk8da34","status":"confirmed","summary":"Malaysia Day","region":"Malaysia","date":"2024-09-16"},{"id":"20240917_rsa8cpc7h9je2rrnqqu9d5siso","status":"confirmed","summary":"Day off for Malaysia Day","region":"Malaysia","date":"2024-09-17"},{"id":"20240929_nr0qpampecfvldfmv56gnts2jg","status":"confirmed","summary":"Birthday of the Sultan of Kelantan (Kelantan)","region":"Malaysia","date":"2024-09-29"},{"id":"20240930_dic3vf93m1hp0mr0cjaeondqi8","status":"confirmed","summary":"Birthday of the Sultan of Kelantan (Day 2) (Kelantan)","region":"Malaysia","date":"2024-09-30"},{"id":"20241005_3fulid6rfforq70r74ov9rc7uc","status":"confirmed","summary":"Birthday of the Governor of Sabah (Sabah)","region":"Malaysia","date":"2024-10-05"},{"id":"20241012_sbedkbbt56q6jcsv6cnpjob9so","status":"confirmed","summary":"Birthday of the Governor of Sarawak (Sarawak)","region":"Malaysia","date":"2024-10-12"},{"id":"20241031_7l4j378v39sce6v5hpbvf73cr8","status":"confirmed","summary":"Diwali/Deepavali (regional holiday)","region":"Malaysia","date":"2024-10-31"},{"id":"20241101_kj8cnlt0o9gfbui3m1jqh6v5rg","status":"confirmed","summary":"Birthday of the Sultan of Perak (Perak)","region":"Malaysia","date":"2024-11-01"},{"id":"20241211_42ivjore1d4ihhki88j53fk5jg","status":"confirmed","summary":"Birthday of the Sultan of Selangor (Selangor)","region":"Malaysia","date":"2024-12-11"},{"id":"20241224_tt9j2cml481j6q598dpv01m0qk","status":"confirmed","summary":"Christmas Eve (Sabah)","region":"Malaysia","date":"2024-12-24"},{"id":"20241225_9su77vnttjoqfkfhbmdbu6ncr0","status":"confirmed","summary":"Christmas Day","region":"Malaysia","date":"2024-12-25"},{"id":"20241231_rsupu3b3ier80jgcje3quu00u0","status":"confirmed","summary":"New Year\'s Eve","region":"Malaysia","date":"2024-12-31"},{"id":"20250101_ciq0ol2f0rf0n3qdqn8ke8iihk","status":"confirmed","summary":"New Year\'s Day (regional holiday)","region":"Malaysia","date":"2025-01-01"},{"id":"20250114_9l0c7hml72l2c300ndjjepdj0g","status":"confirmed","summary":"Birthday of Yang di-Pertuan Besar (Negeri Sembilan)","region":"Malaysia","date":"2025-01-14"},{"id":"20250127_v3qac8t8fg3454ltreul2lh518","status":"confirmed","summary":"Isra and Mi\'raj (regional holiday)","region":"Malaysia","date":"2025-01-27"},{"id":"20250129_s53c5e50l6j2v75rnuclgp7m14","status":"confirmed","summary":"Lunar New Year\'s Day","region":"Malaysia","date":"2025-01-29"},{"id":"20250130_5el7hn8n307rrdu4bvmvl9q6ao","status":"confirmed","summary":"Lunar New Year Holiday (regional holiday)","region":"Malaysia","date":"2025-01-30"},{"id":"20250130_l0gq68t0brb443rm2plvsap0gg","status":"confirmed","summary":"Second Day of Lunar New Year (regional holiday)","region":"Malaysia","date":"2025-01-30"},{"id":"20250201_k6e5ko48j6qugomtccad5qn0jc","status":"confirmed","summary":"Federal Territory Day (regional holiday)","region":"Malaysia","date":"2025-02-01"},{"id":"20250214_5f2c7cf3qgtejamv6q8m6mj48s","status":"confirmed","summary":"Valentine\'s Day","region":"Malaysia","date":"2025-02-14"},{"id":"20250301_ldaluj1bn0hdvcg9i2ag153jmo","status":"confirmed","summary":"First Day of Ramadan (regional holiday)","region":"Malaysia","date":"2025-03-01"},{"id":"20250304_3g44qku1p3nj54rqouaqcfe360","status":"confirmed","summary":"Anniversary of the Coronation of the Sultan of Terengganu (Terengganu)","region":"Malaysia","date":"2025-03-04"},{"id":"20250317_dscmnefbagnk2v8h8t5dg2d2n8","status":"confirmed","summary":"Nuzul Al-Quran (regional holiday)","region":"Malaysia","date":"2025-03-17"},{"id":"20250323_46cskad0hnntl58aae0g2654vc","status":"confirmed","summary":"Birthday of the Sultan of Johor (Johor)","region":"Malaysia","date":"2025-03-23"},{"id":"20250331_ugbpiiv3v64u2d1v7udn3qjdmk","status":"confirmed","summary":"Hari Raya Puasa","region":"Malaysia","date":"2025-03-31"},{"id":"20250401_1rmm2c6u7b2sjsm1dokg38v8ss","status":"confirmed","summary":"Hari Raya Puasa Day 2","region":"Malaysia","date":"2025-04-01"},{"id":"20250415_oes0ka4bjcdp9oqcdvgapptknk","status":"confirmed","summary":"Declaration of Malacca as Historical City (Malacca)","region":"Malaysia","date":"2025-04-15"},{"id":"20250418_s7bsds7l3aok2uotv54kfc7iro","status":"confirmed","summary":"Good Friday (regional holiday)","region":"Malaysia","date":"2025-04-18"},{"id":"20250420_ce8il5p8u5vp6tlmerlcp54j40","status":"confirmed","summary":"Easter Sunday","region":"Malaysia","date":"2025-04-20"},{"id":"20250426_2mnrjureh96ekms6ve0cofifh4","status":"confirmed","summary":"Birthday of the Sultan of Terengganu (Terengganu)","region":"Malaysia","date":"2025-04-26"},{"id":"20250501_qlglngsq59e58co53u9qu4dio0","status":"confirmed","summary":"Labour Day","region":"Malaysia","date":"2025-05-01"},{"id":"20250522_mrdgh8bo3dujea36muuvgraum8","status":"confirmed","summary":"Pahang State Holiday (Pahang)","region":"Malaysia","date":"2025-05-22"},{"id":"20250530_vuatit0kengo9827qqgshh5vns","status":"confirmed","summary":"Harvest Festival (regional holiday)","region":"Malaysia","date":"2025-05-30"},{"id":"20250531_18ufsdl0gbqqh6166heest3h20","status":"confirmed","summary":"Second Day of Harvest Festival (regional holiday)","region":"Malaysia","date":"2025-05-31"},{"id":"20250601_g8pa5amkdti165aa8ovp4smo2c","status":"confirmed","summary":"Gawai Dayak (Sarawak)","region":"Malaysia","date":"2025-06-01"},{"id":"20250602_9u335u9ffou1o3f6amnl7ed0a4","status":"confirmed","summary":"Gawai Dayak Holiday (Sarawak)","region":"Malaysia","date":"2025-06-02"},{"id":"20250602_d6obl0mbn4mhf0a5mijdmpp0j4","status":"confirmed","summary":"The Yang di-Pertuan Agong\'s Birthday","region":"Malaysia","date":"2025-06-02"},{"id":"20250602_jj7p234rqthn5d6skbtmmgc70k","status":"confirmed","summary":"Gawai Dayak observed (Sarawak)","region":"Malaysia","date":"2025-06-02"},{"id":"20250606_sfolqi870ucjffcetcit765l7o","status":"confirmed","summary":"Day of Arafat (regional holiday)","region":"Malaysia","date":"2025-06-06"},{"id":"20250607_gn5nth8dh9t19umpgkeod7kj54","status":"confirmed","summary":"Hari Raya Haji","region":"Malaysia","date":"2025-06-07"},{"id":"20250608_e83n3fpjfhmr87bs3b508kgajc","status":"confirmed","summary":"Hari Raya Haji (Day 2) (regional holiday)","region":"Malaysia","date":"2025-06-08"},{"id":"20250615_d0nlu9l8jl8tgobqmkr6t867qs","status":"confirmed","summary":"Sultan of Kedah\'s Birthday (Kedah)","region":"Malaysia","date":"2025-06-15"},{"id":"20250627_lia25uo27nam7n2i2c51s5l95s","status":"confirmed","summary":"Muharram/New Year","region":"Malaysia","date":"2025-06-27"},{"id":"20250707_qaluctdl3l5ki2dq20fskmmcd4","status":"confirmed","summary":"George Town World Heritage City Day (Penang)","region":"Malaysia","date":"2025-07-07"},{"id":"20250712_26evagnq68aut6t387oalmdbug","status":"confirmed","summary":"Penang Governor\'s Birthday (Penang)","region":"Malaysia","date":"2025-07-12"},{"id":"20250717_u8vasioo9pcuqag4i4hrgn810k","status":"confirmed","summary":"Birthday of the Raja of Perlis (Perlis)","region":"Malaysia","date":"2025-07-17"},{"id":"20250722_bmb4v4tg7t1i7n5rdljgj36530","status":"confirmed","summary":"Sarawak Independence Day (Sarawak)","region":"Malaysia","date":"2025-07-22"},{"id":"20250730_61et8v1dr566pqpjqi4a1q8fdg","status":"confirmed","summary":"Birthday of the Sultan of Pahang (Pahang)","region":"Malaysia","date":"2025-07-30"},{"id":"20250801_5rvnra92fsoucunsu3tm7dsv9o","status":"confirmed","summary":"Almarhum Sultan Iskandar Hol Day (Johor)","region":"Malaysia","date":"2025-08-01"},{"id":"20250824_lp03or2hsvp0balb451srts8nc","status":"confirmed","summary":"Birthday of the Governor of Malacca (Malacca)","region":"Malaysia","date":"2025-08-24"},{"id":"20250825_vs78da54d9c0a7edo083qnd444","status":"confirmed","summary":"Birthday of the Governor of Malacca observed (Malacca)","region":"Malaysia","date":"2025-08-25"},{"id":"20250831_rji9q1ccbv0uvdrf48opod2adc","status":"confirmed","summary":"Malaysia\'s National Day","region":"Malaysia","date":"2025-08-31"},{"id":"20250901_t0mtd5s0oqdrf63er7jmcqrfp4","status":"confirmed","summary":"Malaysia\'s National Day observed","region":"Malaysia","date":"2025-09-01"},{"id":"20250905_5qbqn3gv7u2ijvkgi4ti2vv4d4","status":"confirmed","summary":"The Prophet Muhammad\'s Birthday","region":"Malaysia","date":"2025-09-05"},{"id":"20250916_qgu872ipjdv16c8cthlf7biuf8","status":"confirmed","summary":"Malaysia Day","region":"Malaysia","date":"2025-09-16"},{"id":"20251004_4loe3ptbfh2ns4lhsrj3lr2jqo","status":"confirmed","summary":"Birthday of the Governor of Sabah (Sabah)","region":"Malaysia","date":"2025-10-04"},{"id":"20251011_hit18br6el2otaukab4cif8lb0","status":"confirmed","summary":"Birthday of the Governor of Sarawak (Sarawak)","region":"Malaysia","date":"2025-10-11"},{"id":"20251107_unpu29p6ud0e0k9qj6u0lajim4","status":"confirmed","summary":"Birthday of the Sultan of Perak (Perak)","region":"Malaysia","date":"2025-11-07"},{"id":"20251111_rivlibvkir4d1ohdcm5iijnduo","status":"confirmed","summary":"Birthday of the Sultan of Kelantan (Kelantan)","region":"Malaysia","date":"2025-11-11"},{"id":"20251112_j66sq4mq6cv7q8n461boh0p720","status":"confirmed","summary":"Birthday of the Sultan of Kelantan (Day 2) (Kelantan)","region":"Malaysia","date":"2025-11-12"},{"id":"20251211_i4nkjhfhc2jlmpni56qgkj1lvo","status":"confirmed","summary":"Birthday of the Sultan of Selangor (Selangor)","region":"Malaysia","date":"2025-12-11"},{"id":"20251224_lki9oppo67tt6sioag4ra76uh0","status":"confirmed","summary":"Christmas Eve (Sabah)","region":"Malaysia","date":"2025-12-24"},{"id":"20251225_iiau21h6pfkfheepeakdg7l47o","status":"confirmed","summary":"Christmas Day","region":"Malaysia","date":"2025-12-25"},{"id":"20251231_7cvpa2p6cmd939bh6o83p3g1js","status":"confirmed","summary":"New Year\'s Eve","region":"Malaysia","date":"2025-12-31"}],"Monaco":[{"id":"20240101_nlhi6kiikb5drtp0tuk04gern4","status":"confirmed","summary":"New Year\'s Day","region":"Monaco","date":"2024-01-01"},{"id":"20240127_rc2c1dbtak3qn9kp0h1r6bkaqg","status":"confirmed","summary":"Saint Dévote\'s Day","region":"Monaco","date":"2024-01-27"},{"id":"20240329_5pq2ukgkit6ka8aifbjtu2esac","status":"confirmed","summary":"Good Friday","region":"Monaco","date":"2024-03-29"},{"id":"20240330_lml86i5enah83nfkv3a0iidfg8","status":"confirmed","summary":"Holy Saturday","region":"Monaco","date":"2024-03-30"},{"id":"20240331_7a725uo4fpng5qugn2t6pe0u64","status":"confirmed","summary":"Easter Sunday","region":"Monaco","date":"2024-03-31"},{"id":"20240331_t6bjfvud179lnir78fq53t10mo","status":"confirmed","summary":"Daylight Saving Time starts","region":"Monaco","date":"2024-03-31"},{"id":"20240401_7jm4k6ds7i2ur890oi274cbqsc","status":"confirmed","summary":"Easter Monday","region":"Monaco","date":"2024-04-01"},{"id":"20240501_7kcflcjpirc1e4qnn6hpi2sh6g","status":"confirmed","summary":"Labour Day/May Day","region":"Monaco","date":"2024-05-01"},{"id":"20240509_f8eu7la4llg39e9ri54n50k1pk","status":"confirmed","summary":"Ascension Day","region":"Monaco","date":"2024-05-09"},{"id":"20240519_e2j8ts88e3j7ta77rr8glih278","status":"confirmed","summary":"Whit Sunday","region":"Monaco","date":"2024-05-19"},{"id":"20240520_d7qn1c0k7dc1kk4t5p8foc06ao","status":"confirmed","summary":"Whit Monday","region":"Monaco","date":"2024-05-20"},{"id":"20240526_6dg8cg12hptcotemsn80i39cio","status":"confirmed","summary":"Mothers\' Day","region":"Monaco","date":"2024-05-26"},{"id":"20240530_dieliakfi58l47j9tvkb608ve0","status":"confirmed","summary":"Corpus Christi","region":"Monaco","date":"2024-05-30"},{"id":"20240616_9ka0b2th6gdf452vb7f23eh3b8","status":"confirmed","summary":"Fathers\' Day","region":"Monaco","date":"2024-06-16"},{"id":"20240623_0scsp1qiru45o5h63l6uahv5pk","status":"confirmed","summary":"Saint John\'s Eve","region":"Monaco","date":"2024-06-23"},{"id":"20240624_211846rpk2io2gv5o07atr9v34","status":"confirmed","summary":"Saint John\'s Day","region":"Monaco","date":"2024-06-24"},{"id":"20240808_1gq36fl336rpn4thkouph9ro5o","status":"confirmed","summary":"Feast of Saint Roman Eve","region":"Monaco","date":"2024-08-08"},{"id":"20240809_97m4k5e76qdp88phk7vdfkcitg","status":"confirmed","summary":"Feast of Saint Roman","region":"Monaco","date":"2024-08-09"},{"id":"20240815_1c9b8b87jmr8bca6spive11iu0","status":"confirmed","summary":"Assumption of Mary","region":"Monaco","date":"2024-08-15"},{"id":"20241027_b72m84up9surqjsc6rvd9n156c","status":"confirmed","summary":"Daylight Saving Time ends","region":"Monaco","date":"2024-10-27"},{"id":"20241101_g3lamaa9i3rcujj5gupr4ceecs","status":"confirmed","summary":"All Saints\' Day","region":"Monaco","date":"2024-11-01"},{"id":"20241119_l1q15rg8th81jb9037lain7an4","status":"confirmed","summary":"National Day","region":"Monaco","date":"2024-11-19"},{"id":"20241208_fscsqu5p8td56g0hrfrsrmd1v8","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Monaco","date":"2024-12-08"},{"id":"20241224_blqbqqmmmp92ebm5evoo82vso4","status":"confirmed","summary":"Christmas Eve","region":"Monaco","date":"2024-12-24"},{"id":"20241225_15osibgsrrr774phkb004j7dk4","status":"confirmed","summary":"Christmas Day","region":"Monaco","date":"2024-12-25"},{"id":"20241231_c8lpo340t11oro4s0ca5lbe658","status":"confirmed","summary":"New Year\'s Eve","region":"Monaco","date":"2024-12-31"},{"id":"20250101_6msa915gtr142llp3dgk7ua3fo","status":"confirmed","summary":"New Year\'s Day","region":"Monaco","date":"2025-01-01"},{"id":"20250127_p3f0813sedc5mp5stmb9o57fos","status":"confirmed","summary":"Saint Dévote\'s Day","region":"Monaco","date":"2025-01-27"},{"id":"20250330_entlfnme4ttbn9ecgq4is8kaqo","status":"confirmed","summary":"Daylight Saving Time starts","region":"Monaco","date":"2025-03-30"},{"id":"20250418_euhi5jdg8pa5o1559d2r64f934","status":"confirmed","summary":"Good Friday","region":"Monaco","date":"2025-04-18"},{"id":"20250419_5ae7bg8mko1m1tg7pt0cj5hus4","status":"confirmed","summary":"Holy Saturday","region":"Monaco","date":"2025-04-19"},{"id":"20250420_9jlpfvetle0ts2iimlbrpdmfcc","status":"confirmed","summary":"Easter Sunday","region":"Monaco","date":"2025-04-20"},{"id":"20250421_n3936pmkuijhfcc9f21jjqtl1o","status":"confirmed","summary":"Easter Monday","region":"Monaco","date":"2025-04-21"},{"id":"20250501_vd5qtakt376pvb117196epvihc","status":"confirmed","summary":"Labour Day/May Day","region":"Monaco","date":"2025-05-01"},{"id":"20250525_7e1c8muchciumve52qnff7kijg","status":"confirmed","summary":"Mothers\' Day","region":"Monaco","date":"2025-05-25"},{"id":"20250529_ai0c23an58gkisrs051lu8hpqo","status":"confirmed","summary":"Ascension Day","region":"Monaco","date":"2025-05-29"},{"id":"20250608_g91q1abavj6bh1qjfab0uv2phg","status":"confirmed","summary":"Whit Sunday","region":"Monaco","date":"2025-06-08"},{"id":"20250609_67a7snp8ovd02va1t9eol33f4s","status":"confirmed","summary":"Whit Monday","region":"Monaco","date":"2025-06-09"},{"id":"20250615_ch982s6im9k5b20h9ndelu02k0","status":"confirmed","summary":"Fathers\' Day","region":"Monaco","date":"2025-06-15"},{"id":"20250619_rdchpcqp2l019fs9p1k8f2h0co","status":"confirmed","summary":"Corpus Christi","region":"Monaco","date":"2025-06-19"},{"id":"20250623_q6rems0peh2u3l7cgpr6ne8a5g","status":"confirmed","summary":"Saint John\'s Eve","region":"Monaco","date":"2025-06-23"},{"id":"20250624_6jqm2enqh1hfgm9utpr8tiqk7k","status":"confirmed","summary":"Saint John\'s Day","region":"Monaco","date":"2025-06-24"},{"id":"20250808_ua3vh8fn8c40i7jl0pdi6p1je8","status":"confirmed","summary":"Feast of Saint Roman Eve","region":"Monaco","date":"2025-08-08"},{"id":"20250809_nggtb7a2kbgrlnk1p73du4dcks","status":"confirmed","summary":"Feast of Saint Roman","region":"Monaco","date":"2025-08-09"},{"id":"20250815_h8if6s645agegp26rpk355lspc","status":"confirmed","summary":"Assumption of Mary","region":"Monaco","date":"2025-08-15"},{"id":"20251026_ir0qu6q03kqth0adhl9d71mkr0","status":"confirmed","summary":"Daylight Saving Time ends","region":"Monaco","date":"2025-10-26"},{"id":"20251101_15qdv4efruupcm76vkb3egog7o","status":"confirmed","summary":"All Saints\' Day","region":"Monaco","date":"2025-11-01"},{"id":"20251119_7qrglncilv46oat9qofmlqj9sc","status":"confirmed","summary":"National Day","region":"Monaco","date":"2025-11-19"},{"id":"20251208_6ihjhi1rjikrk0s1tgv20lnlgc","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Monaco","date":"2025-12-08"},{"id":"20251224_egr6fv6qjpopviio23ed0ialrc","status":"confirmed","summary":"Christmas Eve","region":"Monaco","date":"2025-12-24"},{"id":"20251225_mtjhnl5a2mnl2khhspb1hq23k8","status":"confirmed","summary":"Christmas Day","region":"Monaco","date":"2025-12-25"},{"id":"20251231_mh0ksi7lbakokj3djqbiui2l5g","status":"confirmed","summary":"New Year\'s Eve","region":"Monaco","date":"2025-12-31"}],"Moldova":[{"id":"20240101_74fggii63fprb5l5uutcdd0quc","status":"confirmed","summary":"New Year\'s Day","region":"Moldova","date":"2024-01-01"},{"id":"20240107_d7p3c67ib6ilt13u3m6g28f0k0","status":"confirmed","summary":"Orthodox Christmas Day","region":"Moldova","date":"2024-01-07"},{"id":"20240108_jsmdj589knvm7sk96g22878qm0","status":"confirmed","summary":"Orthodox Christmas Day holiday","region":"Moldova","date":"2024-01-08"},{"id":"20240301_sra7j24cn2ivimr80epovolh4g","status":"confirmed","summary":"Martisor (first day of spring)","region":"Moldova","date":"2024-03-01"},{"id":"20240308_rfajjmgrv1grqlrjsb565rmtkg","status":"confirmed","summary":"International Women\'s Day","region":"Moldova","date":"2024-03-08"},{"id":"20240331_olf49bprtr82l49nga9jikadv0","status":"confirmed","summary":"Daylight Saving Time starts","region":"Moldova","date":"2024-03-31"},{"id":"20240427_668cuir2rv11envoreorau5vuo","status":"confirmed","summary":"State Flag Day","region":"Moldova","date":"2024-04-27"},{"id":"20240501_2ukanj64dgud260r2cqjfbgp8k","status":"confirmed","summary":"International Day of Solidarity of Workers","region":"Moldova","date":"2024-05-01"},{"id":"20240503_0trjtvjtelj6v6rmg1vt5974d8","status":"confirmed","summary":"Orthodox Good Friday","region":"Moldova","date":"2024-05-03"},{"id":"20240504_afjatdb5q69ghenqbm3n9nnsac","status":"confirmed","summary":"Orthodox Holy Saturday","region":"Moldova","date":"2024-05-04"},{"id":"20240505_5b1lr5ul1v0mc666mug0o935uo","status":"confirmed","summary":"Orthodox Easter Sunday","region":"Moldova","date":"2024-05-05"},{"id":"20240506_hfqeevrqm2dr7qgmmonl5l6f6g","status":"confirmed","summary":"Orthodox Easter Monday","region":"Moldova","date":"2024-05-06"},{"id":"20240509_k247tqc4jo3p4s31grf48le3ec","status":"confirmed","summary":"Europe Day","region":"Moldova","date":"2024-05-09"},{"id":"20240509_kvbq8bii9npbtrd2puvdb80f3g","status":"confirmed","summary":"Victory Day","region":"Moldova","date":"2024-05-09"},{"id":"20240513_ulbgfosr16p2pr46a48qramlj4","status":"confirmed","summary":"Memorial Day/Parents\' Day","region":"Moldova","date":"2024-05-13"},{"id":"20240515_fh0vm0j3lbpbs46d57fcrq5dng","status":"confirmed","summary":"Family Day","region":"Moldova","date":"2024-05-15"},{"id":"20240526_n7odidv38qns5d7s2m38fg0djc","status":"confirmed","summary":"Dniester Day","region":"Moldova","date":"2024-05-26"},{"id":"20240601_uve3j0hiotqgvodr4ertqtikjo","status":"confirmed","summary":"International Children\'s Day","region":"Moldova","date":"2024-06-01"},{"id":"20240605_pruthqcvphdtoiofvam2k8q40c","status":"confirmed","summary":"World Environment Day","region":"Moldova","date":"2024-06-05"},{"id":"20240623_rq8ij2u6u4vn3k49e2bkb901ro","status":"confirmed","summary":"Statehood Day","region":"Moldova","date":"2024-06-23"},{"id":"20240729_p5879jsfho4qh9lktup806b414","status":"confirmed","summary":"Constitution Day","region":"Moldova","date":"2024-07-29"},{"id":"20240827_6lok0nnhlnlvoerpqvuht2k6cs","status":"confirmed","summary":"Independence Day","region":"Moldova","date":"2024-08-27"},{"id":"20240831_r82tcrghdubhb52lhjdefqceh4","status":"confirmed","summary":"Language Day","region":"Moldova","date":"2024-08-31"},{"id":"20241005_havaic3pbhfchrnrbc63c21vjk","status":"confirmed","summary":"Wine Day","region":"Moldova","date":"2024-10-05"},{"id":"20241006_ollakvrmutbrqulaigrema9vms","status":"confirmed","summary":"Wine Day","region":"Moldova","date":"2024-10-06"},{"id":"20241027_pdda7cls66elf5a1uesqm0pauo","status":"confirmed","summary":"Daylight Saving Time ends","region":"Moldova","date":"2024-10-27"},{"id":"20241210_ocacldim5tica5nhuo9j541hig","status":"confirmed","summary":"International Human Rights Day","region":"Moldova","date":"2024-12-10"},{"id":"20241224_a6tnlsvd8cv3tor02cfirdgpo0","status":"confirmed","summary":"Christmas Eve","region":"Moldova","date":"2024-12-24"},{"id":"20241225_lr8hraqju2vopeb7p9v3cr3clg","status":"confirmed","summary":"Christmas Day","region":"Moldova","date":"2024-12-25"},{"id":"20241231_62t3l0ud8hnbhof7l0tpdh48gg","status":"confirmed","summary":"New Year\'s Eve","region":"Moldova","date":"2024-12-31"},{"id":"20250101_e65c8sunng0sas2eirlqqi3cpc","status":"confirmed","summary":"New Year\'s Day","region":"Moldova","date":"2025-01-01"},{"id":"20250107_qsnj45crj00akj416jqcgubv38","status":"confirmed","summary":"Orthodox Christmas Day","region":"Moldova","date":"2025-01-07"},{"id":"20250108_rokno4amns733rl40rjsa25pgo","status":"confirmed","summary":"Orthodox Christmas Day holiday","region":"Moldova","date":"2025-01-08"},{"id":"20250301_hb1k4j62thr86dqlhie1gl8380","status":"confirmed","summary":"Martisor (first day of spring)","region":"Moldova","date":"2025-03-01"},{"id":"20250308_t451lsfs87cr4drgc2qa4g30p8","status":"confirmed","summary":"International Women\'s Day","region":"Moldova","date":"2025-03-08"},{"id":"20250330_gof26nbj4r5bnihj1eb8707880","status":"confirmed","summary":"Daylight Saving Time starts","region":"Moldova","date":"2025-03-30"},{"id":"20250418_r5tud4s6olvtb5sfgc1kmsovk8","status":"confirmed","summary":"Orthodox Good Friday","region":"Moldova","date":"2025-04-18"},{"id":"20250419_4mr6ddfjohnu4sc37ic75vkf28","status":"confirmed","summary":"Orthodox Holy Saturday","region":"Moldova","date":"2025-04-19"},{"id":"20250420_f82k2jqu9mdki048ru034n0acs","status":"confirmed","summary":"Orthodox Easter Sunday","region":"Moldova","date":"2025-04-20"},{"id":"20250421_humsfe99lreuoqt9ng37n9q088","status":"confirmed","summary":"Orthodox Easter Monday","region":"Moldova","date":"2025-04-21"},{"id":"20250427_m9iaimf7hhuotg2mu5t9h6ea1c","status":"confirmed","summary":"State Flag Day","region":"Moldova","date":"2025-04-27"},{"id":"20250501_nknlth4uk4qml88q1504tbdg4g","status":"confirmed","summary":"International Day of Solidarity of Workers","region":"Moldova","date":"2025-05-01"},{"id":"20250509_3dmn7f2tkktdlrlbor2t6rnf08","status":"confirmed","summary":"Victory Day","region":"Moldova","date":"2025-05-09"},{"id":"20250509_6rrdmd9baacugpostvmosghcms","status":"confirmed","summary":"Europe Day","region":"Moldova","date":"2025-05-09"},{"id":"20250515_e246ohhr4ph3putoa5s7r04ees","status":"confirmed","summary":"Family Day","region":"Moldova","date":"2025-05-15"},{"id":"20250525_jnmsb7fqqgdh495mini9g9hja8","status":"confirmed","summary":"Dniester Day","region":"Moldova","date":"2025-05-25"},{"id":"20250601_psfvil1fvub9kmm9lm6l6churc","status":"confirmed","summary":"International Children\'s Day","region":"Moldova","date":"2025-06-01"},{"id":"20250605_h3lp0binepifeic10o4dnf8kfc","status":"confirmed","summary":"World Environment Day","region":"Moldova","date":"2025-06-05"},{"id":"20250623_390kskktjllnj0dfmulp8ias4k","status":"confirmed","summary":"Statehood Day","region":"Moldova","date":"2025-06-23"},{"id":"20250729_hp9crbjie82es9g0r1lps0obqo","status":"confirmed","summary":"Constitution Day","region":"Moldova","date":"2025-07-29"},{"id":"20250827_ntickkvtkgn76lqr70854c8vqc","status":"confirmed","summary":"Independence Day","region":"Moldova","date":"2025-08-27"},{"id":"20250831_37hpqmlh49un2p52ehg7pd63mg","status":"confirmed","summary":"Language Day","region":"Moldova","date":"2025-08-31"},{"id":"20251004_ecb3dedhh06hiroo7e5mkn5jn4","status":"confirmed","summary":"Wine Day","region":"Moldova","date":"2025-10-04"},{"id":"20251005_mtb8kqbifft94o6pu33tthq6ao","status":"confirmed","summary":"Wine Day","region":"Moldova","date":"2025-10-05"},{"id":"20251026_o1mkfa4lhfqfqppvu1shk3u1a4","status":"confirmed","summary":"Daylight Saving Time ends","region":"Moldova","date":"2025-10-26"},{"id":"20251210_s8km74imt1pa79h48m6cme3ae8","status":"confirmed","summary":"International Human Rights Day","region":"Moldova","date":"2025-12-10"},{"id":"20251224_hcaf2838odasn55bgku2k1up3k","status":"confirmed","summary":"Christmas Eve","region":"Moldova","date":"2025-12-24"},{"id":"20251225_6lsb1a7auieeegn3cqbgi6bvlo","status":"confirmed","summary":"Christmas Day","region":"Moldova","date":"2025-12-25"},{"id":"20251231_ghkdocp00jo3thhhv1u2q1i3qk","status":"confirmed","summary":"New Year\'s Eve","region":"Moldova","date":"2025-12-31"}],"Montenegro":[{"id":"20240101_nj66o8519tq6nevt02uvibgr8g","status":"confirmed","summary":"New Year\'s Day","region":"Montenegro","date":"2024-01-01"},{"id":"20240102_bjbpffo3co7ar56895akl1pda4","status":"confirmed","summary":"New Year\'s Day Holiday","region":"Montenegro","date":"2024-01-02"},{"id":"20240106_o9977fpfburbboqie19lr1441c","status":"confirmed","summary":"Orthodox Christmas Eve","region":"Montenegro","date":"2024-01-06"},{"id":"20240107_ajbq5l36eoifns3jl6pc9ehcd8","status":"confirmed","summary":"Orthodox Christmas Day","region":"Montenegro","date":"2024-01-07"},{"id":"20240108_aealg8ra7bqjutepjtu8egs1rc","status":"confirmed","summary":"Orthodox Christmas Day Holiday","region":"Montenegro","date":"2024-01-08"},{"id":"20240311_khobpmra314g952bk671uhhif0","status":"confirmed","summary":"Ramadan Start","region":"Montenegro","date":"2024-03-11"},{"id":"20240329_8q8luarrr4v4vbhdfn3q6n2vl4","status":"confirmed","summary":"Good Friday","region":"Montenegro","date":"2024-03-29"},{"id":"20240401_mbmkf4b6da3km7p6lff75a6dss","status":"confirmed","summary":"Easter Monday","region":"Montenegro","date":"2024-04-01"},{"id":"20240410_t87emr242phcatere6ev94v5hk","status":"confirmed","summary":"Ramdan Bayram","region":"Montenegro","date":"2024-04-10"},{"id":"20240411_5mvn96vcialf0r56ea8abjikcc","status":"confirmed","summary":"Ramdan Bayram Holiday","region":"Montenegro","date":"2024-04-11"},{"id":"20240412_abm8d18qltm9hvnltrf1mmq9q8","status":"confirmed","summary":"Ramdan Bayram Holiday","region":"Montenegro","date":"2024-04-12"},{"id":"20240501_1qqniepa5fai5ecqq534t8oj2s","status":"confirmed","summary":"Labour Day/May Day","region":"Montenegro","date":"2024-05-01"},{"id":"20240502_ao7miq01niolm0alltq9p9i9e4","status":"confirmed","summary":"Labour Day/May Day Holiday","region":"Montenegro","date":"2024-05-02"},{"id":"20240503_4ernn24l6jo3fa3gstc7c9to5g","status":"confirmed","summary":"Orthodox Good Friday","region":"Montenegro","date":"2024-05-03"},{"id":"20240505_2dlvs5vth42m2qcmk2kddu01mc","status":"confirmed","summary":"Orthodox Easter Sunday","region":"Montenegro","date":"2024-05-05"},{"id":"20240506_d1fajeclctqk9g4inche3q6p5s","status":"confirmed","summary":"Orthodox Easter Monday","region":"Montenegro","date":"2024-05-06"},{"id":"20240521_58kvtd1robt2cpvdvdk9c7hkt0","status":"confirmed","summary":"Independence Day","region":"Montenegro","date":"2024-05-21"},{"id":"20240522_5qq3vncdtgefjnrha93tvni4fo","status":"confirmed","summary":"Independence Day Holiday","region":"Montenegro","date":"2024-05-22"},{"id":"20240617_ophm6grmd4ce71k8to7i7st7lg","status":"confirmed","summary":"Kurban Bayram","region":"Montenegro","date":"2024-06-17"},{"id":"20240618_4feiij0ku7n063idkftea1iscc","status":"confirmed","summary":"Kurban Bayram Holiday","region":"Montenegro","date":"2024-06-18"},{"id":"20240619_s57lhee1lfq43cgbmnccfshs8s","status":"confirmed","summary":"Kurban Bayram Holiday","region":"Montenegro","date":"2024-06-19"},{"id":"20240713_cft57vbgoig67g35ttmt19iprk","status":"confirmed","summary":"Statehood Day","region":"Montenegro","date":"2024-07-13"},{"id":"20240714_vcj8d8j2ffah7kadeeca0a3998","status":"confirmed","summary":"Statehood Day Holiday","region":"Montenegro","date":"2024-07-14"},{"id":"20240715_v4euqqudmc17ik4m8vtkkfp4g8","status":"confirmed","summary":"Statehood Day Holiday observed","region":"Montenegro","date":"2024-07-15"},{"id":"20241012_0grenjncntu10707sg8gtbk3l4","status":"confirmed","summary":"Yom Kippur","region":"Montenegro","date":"2024-10-12"},{"id":"20241013_mtmisd384am5uq0v6dh968ac84","status":"confirmed","summary":"Yom Kippur Holiday","region":"Montenegro","date":"2024-10-13"},{"id":"20241101_lkc021ktop6lodf1i32gvr9mj0","status":"confirmed","summary":"All Saints\' Day","region":"Montenegro","date":"2024-11-01"},{"id":"20241113_3ao9pl3im4nmi5mtfov8pope28","status":"confirmed","summary":"Njegoš Day","region":"Montenegro","date":"2024-11-13"},{"id":"20241224_86nbjlg4b91hgls3hra7c21gtk","status":"confirmed","summary":"Christmas Eve","region":"Montenegro","date":"2024-12-24"},{"id":"20241225_av3hvdkq1e3agvisf5h35hfngs","status":"confirmed","summary":"Christmas Day","region":"Montenegro","date":"2024-12-25"},{"id":"20241226_8bbnmu3clj4ri43kqlacngj6os","status":"confirmed","summary":"Day After Christmas","region":"Montenegro","date":"2024-12-26"},{"id":"20241229_p21a68giupousth3plr60sut8k","status":"confirmed","summary":"Mothers\' Day","region":"Montenegro","date":"2024-12-29"},{"id":"20241231_9nmphefq4giopdupghqk6lgtm0","status":"confirmed","summary":"New Year\'s Eve","region":"Montenegro","date":"2024-12-31"},{"id":"20250101_nn8rkv286021kav1m7aj3ckspg","status":"confirmed","summary":"New Year\'s Day","region":"Montenegro","date":"2025-01-01"},{"id":"20250102_eqaqharc86k40s39adgtvi2efg","status":"confirmed","summary":"New Year\'s Day Holiday","region":"Montenegro","date":"2025-01-02"},{"id":"20250106_r7v8k3o2ivnfa4ic214t611324","status":"confirmed","summary":"Orthodox Christmas Eve","region":"Montenegro","date":"2025-01-06"},{"id":"20250107_vuicvnv8p9en7qfohfmc7e659o","status":"confirmed","summary":"Orthodox Christmas Day","region":"Montenegro","date":"2025-01-07"},{"id":"20250108_8p04m0td6ri1lsu7772g7r6434","status":"confirmed","summary":"Orthodox Christmas Day Holiday","region":"Montenegro","date":"2025-01-08"},{"id":"20250301_g848ql0qvjc7u8r9nkikkv1al8","status":"confirmed","summary":"Ramadan Start","region":"Montenegro","date":"2025-03-01"},{"id":"20250331_76hbrnoo5om3jrcpnr9kbfapuc","status":"confirmed","summary":"Ramdan Bayram","region":"Montenegro","date":"2025-03-31"},{"id":"20250401_5mlkognaf5kujh5tp52e2da3lg","status":"confirmed","summary":"Ramdan Bayram Holiday","region":"Montenegro","date":"2025-04-01"},{"id":"20250402_agl082qstcn93ukdqc09hvdaok","status":"confirmed","summary":"Ramdan Bayram Holiday","region":"Montenegro","date":"2025-04-02"},{"id":"20250418_61q4mg4f46jcq957v358jk1cho","status":"confirmed","summary":"Orthodox Good Friday","region":"Montenegro","date":"2025-04-18"},{"id":"20250418_nts8k5abgq138pshpk8bvebnog","status":"confirmed","summary":"Good Friday","region":"Montenegro","date":"2025-04-18"},{"id":"20250420_e2vhuqubm52lqgs3r3p0a1uacc","status":"confirmed","summary":"Orthodox Easter Sunday","region":"Montenegro","date":"2025-04-20"},{"id":"20250421_b40512l5vsl2aps4t4shs84dmc","status":"confirmed","summary":"Easter Monday","region":"Montenegro","date":"2025-04-21"},{"id":"20250421_qpdr4d521orc8r7u02p32coh94","status":"confirmed","summary":"Orthodox Easter Monday","region":"Montenegro","date":"2025-04-21"},{"id":"20250501_k7f5ncjkfufca4msi590ptvuqo","status":"confirmed","summary":"Labour Day/May Day","region":"Montenegro","date":"2025-05-01"},{"id":"20250502_trv0k3fdlmm1f1soo488plh3ck","status":"confirmed","summary":"Labour Day/May Day Holiday","region":"Montenegro","date":"2025-05-02"},{"id":"20250521_83bbs965s5fknjmducocc9fir4","status":"confirmed","summary":"Independence Day","region":"Montenegro","date":"2025-05-21"},{"id":"20250522_3hvlqcocs7gf0vijkko0joc88c","status":"confirmed","summary":"Independence Day Holiday","region":"Montenegro","date":"2025-05-22"},{"id":"20250607_4hpf7n0tsb33jjqr30plmb7euo","status":"confirmed","summary":"Kurban Bayram","region":"Montenegro","date":"2025-06-07"},{"id":"20250608_fsqne66h9p8gffc3s1ifq78k6o","status":"confirmed","summary":"Kurban Bayram Holiday","region":"Montenegro","date":"2025-06-08"},{"id":"20250609_4um0h6ituj11si7kgquavgfik4","status":"confirmed","summary":"Kurban Bayram Holiday","region":"Montenegro","date":"2025-06-09"},{"id":"20250713_ieuv3shmlsv4angj07pgf27ilk","status":"confirmed","summary":"Statehood Day","region":"Montenegro","date":"2025-07-13"},{"id":"20250714_qiu1h4t39cvhsa5fgoaloakmh0","status":"confirmed","summary":"Statehood Day Holiday","region":"Montenegro","date":"2025-07-14"},{"id":"20250715_nvueiv96aouaad2kh1a023pei8","status":"confirmed","summary":"Statehood Day observed","region":"Montenegro","date":"2025-07-15"},{"id":"20251002_vrf49lrv7tmefiag8ut11g3n7o","status":"confirmed","summary":"Yom Kippur","region":"Montenegro","date":"2025-10-02"},{"id":"20251003_ngfbjeqap0cd3k9ul99reregjk","status":"confirmed","summary":"Yom Kippur Holiday","region":"Montenegro","date":"2025-10-03"},{"id":"20251101_ims81mgr1q9rgpbgdnt1un3628","status":"confirmed","summary":"All Saints\' Day","region":"Montenegro","date":"2025-11-01"},{"id":"20251113_io4cecarrlvslutrmg471sb4hg","status":"confirmed","summary":"Njegoš Day","region":"Montenegro","date":"2025-11-13"},{"id":"20251224_lg6lltda08i4hrp9ieqf6shdj4","status":"confirmed","summary":"Christmas Eve","region":"Montenegro","date":"2025-12-24"},{"id":"20251225_8m29gv69t2c8be7refi3v3phi4","status":"confirmed","summary":"Christmas Day","region":"Montenegro","date":"2025-12-25"},{"id":"20251226_bsvaf7lf2p6h5acfslhih32bb0","status":"confirmed","summary":"Day After Christmas","region":"Montenegro","date":"2025-12-26"},{"id":"20251228_s5knsvcfhi0s02ia1o5flrpf08","status":"confirmed","summary":"Mothers\' Day","region":"Montenegro","date":"2025-12-28"},{"id":"20251231_b8fk9lfr4rko5ua87lcml5l59c","status":"confirmed","summary":"New Year\'s Eve","region":"Montenegro","date":"2025-12-31"}],"Mexico":[{"id":"20240101_ph2gleak1p3unrcvb1o1q55k8o","status":"confirmed","summary":"New Year\'s Day","region":"Mexico","date":"2024-01-01"},{"id":"20240205_4e4drkcncnqco44qhe0jcfi648","status":"confirmed","summary":"Constitution Day","region":"Mexico","date":"2024-02-05"},{"id":"20240214_3dro90352c4lvhtvi9fodc55a4","status":"confirmed","summary":"Ash Wednesday","region":"Mexico","date":"2024-02-14"},{"id":"20240224_c6bgsn049u6qactqo2iib9dfqo","status":"confirmed","summary":"Flag Day","region":"Mexico","date":"2024-02-24"},{"id":"20240318_na93vvkaf7s5sbql5rsqj7nse4","status":"confirmed","summary":"Benito Juárez\'s Birthday Memorial","region":"Mexico","date":"2024-03-18"},{"id":"20240321_fka6dk1158a7ponedd9160lih4","status":"confirmed","summary":"Benito Juárez\'s Birthday Memorial","region":"Mexico","date":"2024-03-21"},{"id":"20240324_8d8e0m3pv0mtlab8j285vf6tio","status":"confirmed","summary":"Palm Sunday","region":"Mexico","date":"2024-03-24"},{"id":"20240330_5k36n6tk27pld8ta5bdd2ilnu0","status":"confirmed","summary":"Holy Saturday","region":"Mexico","date":"2024-03-30"},{"id":"20240331_d63faih8uo8deq1u2ar2h5q1ps","status":"confirmed","summary":"Easter Sunday","region":"Mexico","date":"2024-03-31"},{"id":"20240501_78mo3kndubjm89eo3sqv7c8vs4","status":"confirmed","summary":"Labor Day / May Day","region":"Mexico","date":"2024-05-01"},{"id":"20240515_2drlcdgrekgpvo444tg7lact5c","status":"confirmed","summary":"Teacher\'s Day","region":"Mexico","date":"2024-05-15"},{"id":"20240602_4ahm0919bu50e0kk65qrrcol44","status":"confirmed","summary":"General Election Day","region":"Mexico","date":"2024-06-02"},{"id":"20240916_7eu5fbag3jcnat2h24jf8gs1js","status":"confirmed","summary":"Independence Day","region":"Mexico","date":"2024-09-16"},{"id":"20241001_u4ppb4jilnubhpsmuls28gc9h8","status":"confirmed","summary":"Inauguration day","region":"Mexico","date":"2024-10-01"},{"id":"20241012_7psdavh8i3k72df4fsplqqj1ls","status":"confirmed","summary":"Day of Race","region":"Mexico","date":"2024-10-12"},{"id":"20241102_4iipot7rp5svfdiiapgot8h8ro","status":"confirmed","summary":"Day of the Dead","region":"Mexico","date":"2024-11-02"},{"id":"20241118_5heou3qfu0olkhvnn9jesc7bss","status":"confirmed","summary":"Revolution Day Memorial","region":"Mexico","date":"2024-11-18"},{"id":"20241225_7egnvv38ls857fq969gll2b57c","status":"confirmed","summary":"Christmas Day","region":"Mexico","date":"2024-12-25"},{"id":"20241231_1h83h8t1e9559q7bbh4rgeuem0","status":"confirmed","summary":"New Year\'s Eve","region":"Mexico","date":"2024-12-31"},{"id":"20250101_ims2t923vno1qtj90g6muk6670","status":"confirmed","summary":"New Year\'s Day","region":"Mexico","date":"2025-01-01"},{"id":"20250203_p86a0hh5eqim4ipks8f1cruokc","status":"confirmed","summary":"Constitution Day","region":"Mexico","date":"2025-02-03"},{"id":"20250205_qm5t7nqij3ko55db4urqeif050","status":"confirmed","summary":"Constitution Day","region":"Mexico","date":"2025-02-05"},{"id":"20250224_5aj867hqssv61jlbnlvjkl12ok","status":"confirmed","summary":"Flag Day","region":"Mexico","date":"2025-02-24"},{"id":"20250305_h49g54n0k3hsaaj7t424l6moic","status":"confirmed","summary":"Ash Wednesday","region":"Mexico","date":"2025-03-05"},{"id":"20250317_5v3cltqr4egbvos3057h7ojrrg","status":"confirmed","summary":"Benito Juárez\'s Birthday Memorial","region":"Mexico","date":"2025-03-17"},{"id":"20250321_8qrmcjidagahaji4ir01hh29as","status":"confirmed","summary":"Benito Juárez\'s Birthday Memorial","region":"Mexico","date":"2025-03-21"},{"id":"20250413_bmmakhc05von45sc6aego4ofc4","status":"confirmed","summary":"Palm Sunday","region":"Mexico","date":"2025-04-13"},{"id":"20250419_k0k3qa2kgmpua4eeaf82p737j4","status":"confirmed","summary":"Holy Saturday","region":"Mexico","date":"2025-04-19"},{"id":"20250420_acest4pj6m69q61bl48c728c00","status":"confirmed","summary":"Easter Sunday","region":"Mexico","date":"2025-04-20"},{"id":"20250501_r8v0i2ua09sukqf2ac6c5ecfpc","status":"confirmed","summary":"Labor Day / May Day","region":"Mexico","date":"2025-05-01"},{"id":"20250515_41obbcmls2rsqru52ik1tugv9g","status":"confirmed","summary":"Teacher\'s Day","region":"Mexico","date":"2025-05-15"},{"id":"20250916_m9qieahh3mit8qgivug4bpnric","status":"confirmed","summary":"Independence Day","region":"Mexico","date":"2025-09-16"},{"id":"20251012_oe8mbd45kne80gcqeupcpabr44","status":"confirmed","summary":"Day of Race","region":"Mexico","date":"2025-10-12"},{"id":"20251102_tgcutostkpk8s2sb331n9ujb6s","status":"confirmed","summary":"Day of the Dead","region":"Mexico","date":"2025-11-02"},{"id":"20251117_316k6052psrigberqs5nhol2ss","status":"confirmed","summary":"Revolution Day Memorial","region":"Mexico","date":"2025-11-17"},{"id":"20251225_g9vte7rpuvpct8aadoh9l4fgl4","status":"confirmed","summary":"Christmas Day","region":"Mexico","date":"2025-12-25"},{"id":"20251231_t0dtpmfkb4e7nlpts7uveepfb8","status":"confirmed","summary":"New Year\'s Eve","region":"Mexico","date":"2025-12-31"}],"St. Martin":[{"id":"20240101_tm9k5ic54urmc59tfomnuc424k","status":"confirmed","summary":"New Year\'s Day","region":"St. Martin","date":"2024-01-01"},{"id":"20240329_t3ohmcrbalfb8fm5ato8u5mhq4","status":"confirmed","summary":"Good Friday","region":"St. Martin","date":"2024-03-29"},{"id":"20240331_03u0rb47oqcmd4348386d2ooac","status":"confirmed","summary":"Easter Day","region":"St. Martin","date":"2024-03-31"},{"id":"20240401_769t684ebp7r0nirq6lhbjjudk","status":"confirmed","summary":"Easter Monday","region":"St. Martin","date":"2024-04-01"},{"id":"20240501_rjqub6k2plkliq35cgiaoqsbns","status":"confirmed","summary":"Labor Day / May Day","region":"St. Martin","date":"2024-05-01"},{"id":"20240508_p63049bts7bnfm5ka567apso9c","status":"confirmed","summary":"1945 Victory Day","region":"St. Martin","date":"2024-05-08"},{"id":"20240509_u66rb37akvuc884v8547p42k9s","status":"confirmed","summary":"Ascension Day","region":"St. Martin","date":"2024-05-09"},{"id":"20240519_k0g2ucstt16ov6s9u1im0gnfbs","status":"confirmed","summary":"Whit Sunday","region":"St. Martin","date":"2024-05-19"},{"id":"20240520_jbmd5d9p7djrub9u58im8ng3ho","status":"confirmed","summary":"Whit Monday","region":"St. Martin","date":"2024-05-20"},{"id":"20240528_ksdlrfcsi9t9dq5bla0vm7pmnc","status":"confirmed","summary":"Abolition Day","region":"St. Martin","date":"2024-05-28"},{"id":"20240714_4kpir30ollg5hr6f0c6rs34aqc","status":"confirmed","summary":"French National Day","region":"St. Martin","date":"2024-07-14"},{"id":"20240815_ii4um4r0hsptr18116403j6jm8","status":"confirmed","summary":"Assumption of Mary","region":"St. Martin","date":"2024-08-15"},{"id":"20241101_3379d4hdcge0im932bdmoceaco","status":"confirmed","summary":"All Saints\' Day","region":"St. Martin","date":"2024-11-01"},{"id":"20241111_uqdig6i5lbu8cqa5a10andqre8","status":"confirmed","summary":"Saint Martin\'s Day","region":"St. Martin","date":"2024-11-11"},{"id":"20241225_1667litdhq0lksek0bn569aprs","status":"confirmed","summary":"Christmas Day","region":"St. Martin","date":"2024-12-25"},{"id":"20241226_e8otiv0srs3gsgsd9fkf48ojj0","status":"confirmed","summary":"Boxing Day","region":"St. Martin","date":"2024-12-26"},{"id":"20241231_kqb36i4j9hr453cffn9oaaq29o","status":"confirmed","summary":"New Year\'s Eve","region":"St. Martin","date":"2024-12-31"},{"id":"20250101_2e9amm06190bh72cooajvd391g","status":"confirmed","summary":"New Year\'s Day","region":"St. Martin","date":"2025-01-01"},{"id":"20250418_q3l4os71te6nvgh0ts8707lin8","status":"confirmed","summary":"Good Friday","region":"St. Martin","date":"2025-04-18"},{"id":"20250420_vmerqtcigg8ccdc8rr8ct31i0c","status":"confirmed","summary":"Easter Day","region":"St. Martin","date":"2025-04-20"},{"id":"20250421_t7mk7n9bu5f8m5n736esen5p8o","status":"confirmed","summary":"Easter Monday","region":"St. Martin","date":"2025-04-21"},{"id":"20250501_62u88osnbgaj2c0ee28fafvvbk","status":"confirmed","summary":"Labor Day / May Day","region":"St. Martin","date":"2025-05-01"},{"id":"20250508_a91e2a0uvv8ibf4qqi49otovic","status":"confirmed","summary":"1945 Victory Day","region":"St. Martin","date":"2025-05-08"},{"id":"20250528_ch273p21gqbhqusn92c48es8lc","status":"confirmed","summary":"Abolition Day","region":"St. Martin","date":"2025-05-28"},{"id":"20250529_7n1a7gk80l9vccr6rudtceocog","status":"confirmed","summary":"Ascension Day","region":"St. Martin","date":"2025-05-29"},{"id":"20250608_lvgsuloio83oek5i4hgtekrn6k","status":"confirmed","summary":"Whit Sunday","region":"St. Martin","date":"2025-06-08"},{"id":"20250609_3l1kcph9npk02ej04kgjg5m9m4","status":"confirmed","summary":"Whit Monday","region":"St. Martin","date":"2025-06-09"},{"id":"20250714_bmrid05i4pspk8gh829spatefo","status":"confirmed","summary":"French National Day","region":"St. Martin","date":"2025-07-14"},{"id":"20250815_amimarjguu8klbv3pnsivs7r3s","status":"confirmed","summary":"Assumption of Mary","region":"St. Martin","date":"2025-08-15"},{"id":"20251101_d8t8b68sh7ukrkb33t216ep3bs","status":"confirmed","summary":"All Saints\' Day","region":"St. Martin","date":"2025-11-01"},{"id":"20251111_a6jbuocrbulvu1aq5u2dusv4oo","status":"confirmed","summary":"Saint Martin\'s Day","region":"St. Martin","date":"2025-11-11"},{"id":"20251225_ge47vb0ptjvffdoovdtp372ges","status":"confirmed","summary":"Christmas Day","region":"St. Martin","date":"2025-12-25"},{"id":"20251226_jjj2mqi8m7klp4d5gca6q4c5uo","status":"confirmed","summary":"Boxing Day","region":"St. Martin","date":"2025-12-26"},{"id":"20251231_bpe5bk1an5et5h5h3e3vn6fets","status":"confirmed","summary":"New Year\'s Eve","region":"St. Martin","date":"2025-12-31"}],"Madagascar":[{"id":"20240101_arv0js1ejbq24puolv1rqr7h2o","status":"confirmed","summary":"New Year\'s Day","region":"Madagascar","date":"2024-01-01"},{"id":"20240308_a2b64e16le8ssr05erggbia3qg","status":"confirmed","summary":"International Women\'s Day","region":"Madagascar","date":"2024-03-08"},{"id":"20240311_35it2agvo9o0jve5d0fn98g5u8","status":"confirmed","summary":"Ramadan Start","region":"Madagascar","date":"2024-03-11"},{"id":"20240329_0jq3eim982as8nunv7hq8erts4","status":"confirmed","summary":"Martyrs\' Day","region":"Madagascar","date":"2024-03-29"},{"id":"20240331_s9b2sn2rniht1bcon0gauqgfpk","status":"confirmed","summary":"Easter Sunday","region":"Madagascar","date":"2024-03-31"},{"id":"20240401_9d4nro7j63t2knqnk5it5mdumk","status":"confirmed","summary":"Easter Monday","region":"Madagascar","date":"2024-04-01"},{"id":"20240410_h3o0sflafvpccqhlnis1ktefjg","status":"confirmed","summary":"Eid al-Fitr","region":"Madagascar","date":"2024-04-10"},{"id":"20240501_2c76fes58t71a1obrjfkefi0g0","status":"confirmed","summary":"Labor Day","region":"Madagascar","date":"2024-05-01"},{"id":"20240509_3cum9lot193imq1v1r9pqs6omc","status":"confirmed","summary":"Ascension Day","region":"Madagascar","date":"2024-05-09"},{"id":"20240519_0mpu5nq14t7fdc1e9b2l1as7vs","status":"confirmed","summary":"Whit Sunday","region":"Madagascar","date":"2024-05-19"},{"id":"20240520_s0imch5kj2vk5ak198ql82gdj0","status":"confirmed","summary":"Whit Monday","region":"Madagascar","date":"2024-05-20"},{"id":"20240617_tiq49h649cndbd0mc2n2vkirgg","status":"confirmed","summary":"Eid al-Adha","region":"Madagascar","date":"2024-06-17"},{"id":"20240626_6emjurehp32loo4dhsn9cfv31g","status":"confirmed","summary":"Independence Day","region":"Madagascar","date":"2024-06-26"},{"id":"20240815_t3ne883tiqljou89tups27ajhc","status":"confirmed","summary":"Assumption of Mary","region":"Madagascar","date":"2024-08-15"},{"id":"20241101_4b3b4ej5fp7fd4tjmkln8i93bk","status":"confirmed","summary":"All Saints\' Day","region":"Madagascar","date":"2024-11-01"},{"id":"20241225_9760u20rikd667hjfjd9lcopdg","status":"confirmed","summary":"Christmas Day","region":"Madagascar","date":"2024-12-25"},{"id":"20241231_5vb6uq5c20fc7r12vr18ijha1c","status":"confirmed","summary":"New Year\'s Eve","region":"Madagascar","date":"2024-12-31"},{"id":"20250101_qecdulm56nhmafoe988m4a22ho","status":"confirmed","summary":"New Year\'s Day","region":"Madagascar","date":"2025-01-01"},{"id":"20250301_0uvk8pkrue4rn4uoh54t1ln9o8","status":"confirmed","summary":"Ramadan Start","region":"Madagascar","date":"2025-03-01"},{"id":"20250308_g2992cs3ucikuscqvd166kbrv8","status":"confirmed","summary":"International Women\'s Day","region":"Madagascar","date":"2025-03-08"},{"id":"20250329_jkk9vkkb77naroq68hpifaeg0g","status":"confirmed","summary":"Martyrs\' Day","region":"Madagascar","date":"2025-03-29"},{"id":"20250331_k95nnnth495214n6ecrglacag8","status":"confirmed","summary":"Eid al-Fitr","region":"Madagascar","date":"2025-03-31"},{"id":"20250420_capgfoqu3u3n9emegd1k97lovk","status":"confirmed","summary":"Easter Sunday","region":"Madagascar","date":"2025-04-20"},{"id":"20250421_3rscm3f69gekavr0avobqcu9fc","status":"confirmed","summary":"Easter Monday","region":"Madagascar","date":"2025-04-21"},{"id":"20250501_tqt8e1uu3g6a252cvobmppjvp8","status":"confirmed","summary":"Labor Day","region":"Madagascar","date":"2025-05-01"},{"id":"20250529_m02kfjgcnqbmthv90r2q7fvua8","status":"confirmed","summary":"Ascension Day","region":"Madagascar","date":"2025-05-29"},{"id":"20250607_f1k6qm0e8d0fvmhlnh7gnq2kbs","status":"confirmed","summary":"Eid al-Adha","region":"Madagascar","date":"2025-06-07"},{"id":"20250608_7rsj0scnau1st3o1bhhoqjbdds","status":"confirmed","summary":"Whit Sunday","region":"Madagascar","date":"2025-06-08"},{"id":"20250609_l5rud27449mckuejceis6e03t8","status":"confirmed","summary":"Whit Monday","region":"Madagascar","date":"2025-06-09"},{"id":"20250626_sv947lupimcjadbpnn5uc654a0","status":"confirmed","summary":"Independence Day","region":"Madagascar","date":"2025-06-26"},{"id":"20250815_0f36deldl5of1omjs18mscu830","status":"confirmed","summary":"Assumption of Mary","region":"Madagascar","date":"2025-08-15"},{"id":"20251101_072admaioiumsnvm9e1icha3e0","status":"confirmed","summary":"All Saints\' Day","region":"Madagascar","date":"2025-11-01"},{"id":"20251225_0b73o3i9ot8dpg8ek4uafe37n0","status":"confirmed","summary":"Christmas Day","region":"Madagascar","date":"2025-12-25"},{"id":"20251231_rf72ir6m9a6cj8tduid37d5il0","status":"confirmed","summary":"New Year\'s Eve","region":"Madagascar","date":"2025-12-31"}],"Marshall Islands":[{"id":"20240101_u05259sqqteemu563tmgcborhk","status":"confirmed","summary":"New Year\'s Day","region":"Marshall Islands","date":"2024-01-01"},{"id":"20240301_kbuicv8ieq18arbslj701eblio","status":"confirmed","summary":"Remembrance Day","region":"Marshall Islands","date":"2024-03-01"},{"id":"20240329_p19j2hpffqpcvlvr0lppe2rqhc","status":"confirmed","summary":"Good Friday","region":"Marshall Islands","date":"2024-03-29"},{"id":"20240501_t84ruove0v27uc2vopsg0hgh44","status":"confirmed","summary":"Constitution Day","region":"Marshall Islands","date":"2024-05-01"},{"id":"20240705_19a4orq9q4hmm1csmvneolpi90","status":"confirmed","summary":"Fishermen\'s Day","region":"Marshall Islands","date":"2024-07-05"},{"id":"20240906_187351u4tmlfp1b0f3lds1m5os","status":"confirmed","summary":"Labor Day","region":"Marshall Islands","date":"2024-09-06"},{"id":"20240927_srqog8s293uimmd1a6sn7m5mqk","status":"confirmed","summary":"Manit Day","region":"Marshall Islands","date":"2024-09-27"},{"id":"20241117_2dccsbhhn44uj3ovgkonmsa5eo","status":"confirmed","summary":"President\'s Day","region":"Marshall Islands","date":"2024-11-17"},{"id":"20241118_5bnv8u8jkvdcscen0cthqe1phs","status":"confirmed","summary":"Day off for President\'s Day","region":"Marshall Islands","date":"2024-11-18"},{"id":"20241206_1ruj2hprn9fthpvsvv4sjt0n28","status":"confirmed","summary":"Gospel Day","region":"Marshall Islands","date":"2024-12-06"},{"id":"20241225_tophsuku0lckr05da7j1jo8qtg","status":"confirmed","summary":"Christmas Day","region":"Marshall Islands","date":"2024-12-25"},{"id":"20241231_aveq7p8bsdju06790qtukrgsm4","status":"confirmed","summary":"New Year\'s Eve","region":"Marshall Islands","date":"2024-12-31"},{"id":"20250101_gep9jleeg8fn392is178usfem0","status":"confirmed","summary":"New Year\'s Day","region":"Marshall Islands","date":"2025-01-01"},{"id":"20250228_c93k2gkupt9g290lb959j77o8s","status":"confirmed","summary":"Remembrance Day observed","region":"Marshall Islands","date":"2025-02-28"},{"id":"20250301_s7us583pbdv21blahdpqd8s4dk","status":"confirmed","summary":"Remembrance Day","region":"Marshall Islands","date":"2025-03-01"},{"id":"20250418_qj3j7egg2fpvjtahmn05796s88","status":"confirmed","summary":"Good Friday","region":"Marshall Islands","date":"2025-04-18"},{"id":"20250501_vb0dq94ttkarlgmffk20c8mnrg","status":"confirmed","summary":"Constitution Day","region":"Marshall Islands","date":"2025-05-01"},{"id":"20250704_tk8drglo8g3c685ojdhanqfjsc","status":"confirmed","summary":"Fishermen\'s Day","region":"Marshall Islands","date":"2025-07-04"},{"id":"20250905_h6eui0965qu51jos00h43tmcio","status":"confirmed","summary":"Labor Day","region":"Marshall Islands","date":"2025-09-05"},{"id":"20250926_gengujdkr4uug2o0li9eju32ro","status":"confirmed","summary":"Manit Day","region":"Marshall Islands","date":"2025-09-26"},{"id":"20251117_hi2df2bar2vdmuv0enboq66bgk","status":"confirmed","summary":"President\'s Day","region":"Marshall Islands","date":"2025-11-17"},{"id":"20251205_r8h885ls6h6m52qgkdgn74f12g","status":"confirmed","summary":"Gospel Day","region":"Marshall Islands","date":"2025-12-05"},{"id":"20251225_iaetrvrevjso2sd7vlmlhqplhk","status":"confirmed","summary":"Christmas Day","region":"Marshall Islands","date":"2025-12-25"},{"id":"20251231_bma4h5bm6t6gmu1dl5a9b856pg","status":"confirmed","summary":"New Year\'s Eve","region":"Marshall Islands","date":"2025-12-31"}],"North Macedonia":[{"id":"20240101_u8j6ci78riceh71ni57gtuf9es","status":"confirmed","summary":"New Year\'s Day","region":"North Macedonia","date":"2024-01-01"},{"id":"20240107_5p1gidkfrctlksgqfnn559v354","status":"confirmed","summary":"Orthodox Christmas Day","region":"North Macedonia","date":"2024-01-07"},{"id":"20240108_2275iea1f5epdg54q1jmso62bs","status":"confirmed","summary":"Day off for Orthodox Christmas Day","region":"North Macedonia","date":"2024-01-08"},{"id":"20240214_24g7otd0kpccrqglhrturrod4c","status":"confirmed","summary":"Valentine\'s Day","region":"North Macedonia","date":"2024-02-14"},{"id":"20240308_ntpmel5f4hu4f8qia4ocgb8na8","status":"confirmed","summary":"Mothers\' Day/International Women\'s Day","region":"North Macedonia","date":"2024-03-08"},{"id":"20240311_61l7pbtl6euo3pco7n1os46h90","status":"confirmed","summary":"Ramadan Start","region":"North Macedonia","date":"2024-03-11"},{"id":"20240329_rrum5gucgm0459l271r93dpol0","status":"confirmed","summary":"Good Friday","region":"North Macedonia","date":"2024-03-29"},{"id":"20240330_o5seiksvfvr3etecg4c76rhf0s","status":"confirmed","summary":"Easter Saturday","region":"North Macedonia","date":"2024-03-30"},{"id":"20240331_njv030oo39phi2nmssbio7oqmk","status":"confirmed","summary":"Daylight Saving Time starts","region":"North Macedonia","date":"2024-03-31"},{"id":"20240331_u29ig7ud43cvp3jk8k73dtip4s","status":"confirmed","summary":"Easter Sunday","region":"North Macedonia","date":"2024-03-31"},{"id":"20240410_e5di16clkabbc7tjgdhcfg3e9s","status":"confirmed","summary":"Eid al-Fitr","region":"North Macedonia","date":"2024-04-10"},{"id":"20240424_ph9nea9eqhsjk979naqdorb9eg","status":"confirmed","summary":"Election Holiday","region":"North Macedonia","date":"2024-04-24"},{"id":"20240501_8ts9f20usbck45ijc1utmgk7b0","status":"confirmed","summary":"Labor Day","region":"North Macedonia","date":"2024-05-01"},{"id":"20240504_ehjjjq7tt6s4tasc98pc9s0388","status":"confirmed","summary":"Easter Saturday (Orthodox)","region":"North Macedonia","date":"2024-05-04"},{"id":"20240505_3oeip5bpija8e7bfjga17bbkjg","status":"confirmed","summary":"Easter Sunday (Orthodox)","region":"North Macedonia","date":"2024-05-05"},{"id":"20240506_5pa9qrfv6k2b0tpjv69ar6s2cc","status":"confirmed","summary":"Easter Monday (Orthodox)","region":"North Macedonia","date":"2024-05-06"},{"id":"20240508_dfb8sd468tu32780h1grelsktg","status":"confirmed","summary":"Election Holiday","region":"North Macedonia","date":"2024-05-08"},{"id":"20240524_j52muev19m8op1sdun2vfgpek8","status":"confirmed","summary":"Saints Cyril and Methodius\' Day","region":"North Macedonia","date":"2024-05-24"},{"id":"20240621_a3rhnk25b4p3gqvuei632tb8mo","status":"confirmed","summary":"Friday before Pentecost","region":"North Macedonia","date":"2024-06-21"},{"id":"20240802_64hfep4vsaoalo47poh6ha9po8","status":"confirmed","summary":"Republic Day","region":"North Macedonia","date":"2024-08-02"},{"id":"20240908_1obnsa4sf204gtu6k3o31s3f34","status":"confirmed","summary":"Independence Day","region":"North Macedonia","date":"2024-09-08"},{"id":"20240908_9tcl1alefhd97ls3htuhsteq48","status":"confirmed","summary":"Fathers\' Day","region":"North Macedonia","date":"2024-09-08"},{"id":"20240909_5ceh5au1b69oguodpvvrmclvoc","status":"confirmed","summary":"Day off for Independence Day","region":"North Macedonia","date":"2024-09-09"},{"id":"20241011_btdv6sb7vmhc6hes14b7qfodj8","status":"confirmed","summary":"Day of People’s Uprising","region":"North Macedonia","date":"2024-10-11"},{"id":"20241023_44hf0ndcjj3btpi3i9eorab4m8","status":"confirmed","summary":"Day of the Macedonian Revolutionary Struggle","region":"North Macedonia","date":"2024-10-23"},{"id":"20241027_20ebjmn2op3f6ulv0j9iu71ih0","status":"confirmed","summary":"Daylight Saving Time ends","region":"North Macedonia","date":"2024-10-27"},{"id":"20241031_0ogos5odu73o4pphj1b3cvp508","status":"confirmed","summary":"Halloween","region":"North Macedonia","date":"2024-10-31"},{"id":"20241208_tlvh6al57jpjja3g5aqb9i45a8","status":"confirmed","summary":"Saint Kliment Ohridski\'s Day","region":"North Macedonia","date":"2024-12-08"},{"id":"20241209_tbv4ir455o0mrd4k1ivsf6k4mc","status":"confirmed","summary":"Day off for Saint Kliment Ohridski\'s Day","region":"North Macedonia","date":"2024-12-09"},{"id":"20241224_r4ojrramrsttr8p78bkj65co1o","status":"confirmed","summary":"Christmas Eve","region":"North Macedonia","date":"2024-12-24"},{"id":"20241231_u0fm7pj3dudm5ut9oudmis7ea4","status":"confirmed","summary":"New Year\'s Eve","region":"North Macedonia","date":"2024-12-31"},{"id":"20250101_k1p6kn491m5jav5k3h69mvcqm4","status":"confirmed","summary":"New Year\'s Day","region":"North Macedonia","date":"2025-01-01"},{"id":"20250107_dpuoksgc6jsfdim79ug5aehv4o","status":"confirmed","summary":"Orthodox Christmas Day","region":"North Macedonia","date":"2025-01-07"},{"id":"20250214_5n9cs0mdjllacmaiunfh5193ro","status":"confirmed","summary":"Valentine\'s Day","region":"North Macedonia","date":"2025-02-14"},{"id":"20250301_fmqvdapckqa931cu5ap479d864","status":"confirmed","summary":"Ramadan Start","region":"North Macedonia","date":"2025-03-01"},{"id":"20250308_f4a6huq89qde6jkaqqmmp15ro4","status":"confirmed","summary":"Mothers\' Day/International Women\'s Day","region":"North Macedonia","date":"2025-03-08"},{"id":"20250330_f497070msj0fu20u15frck82is","status":"confirmed","summary":"Daylight Saving Time starts","region":"North Macedonia","date":"2025-03-30"},{"id":"20250331_76b8souk8vnovjgd2e0mp98etc","status":"confirmed","summary":"Eid al-Fitr","region":"North Macedonia","date":"2025-03-31"},{"id":"20250418_rledolm6m0ghn0kd0vj47u38ak","status":"confirmed","summary":"Good Friday","region":"North Macedonia","date":"2025-04-18"},{"id":"20250419_fmlrv7c6n1341fg82u863kg2ao","status":"confirmed","summary":"Easter Saturday (Orthodox)","region":"North Macedonia","date":"2025-04-19"},{"id":"20250419_ktad8ejpfrnucja0nc0els60lg","status":"confirmed","summary":"Easter Saturday","region":"North Macedonia","date":"2025-04-19"},{"id":"20250420_cn9osvhqfp4vqgq2rag90qtu68","status":"confirmed","summary":"Easter Sunday (Orthodox)","region":"North Macedonia","date":"2025-04-20"},{"id":"20250420_n4e4rp21pc5dp3st7g16gkmbq8","status":"confirmed","summary":"Easter Sunday","region":"North Macedonia","date":"2025-04-20"},{"id":"20250421_9hdipg2kuu387c4ovfmte2cmlk","status":"confirmed","summary":"Easter Monday (Orthodox)","region":"North Macedonia","date":"2025-04-21"},{"id":"20250501_1s9u0n30i4eilg3j708uvfdkks","status":"confirmed","summary":"Labor Day","region":"North Macedonia","date":"2025-05-01"},{"id":"20250524_pd7ojdu7ol0h4mn8dfjiljbq2g","status":"confirmed","summary":"Saints Cyril and Methodius\' Day","region":"North Macedonia","date":"2025-05-24"},{"id":"20250606_4sltht1s1rdq4855oe6crahis4","status":"confirmed","summary":"Friday before Pentecost","region":"North Macedonia","date":"2025-06-06"},{"id":"20250802_ascnldch89ge3r6vs0mar3f3t4","status":"confirmed","summary":"Republic Day","region":"North Macedonia","date":"2025-08-02"},{"id":"20250908_nujsucgjv7nrlejp5169dj5c50","status":"confirmed","summary":"Independence Day","region":"North Macedonia","date":"2025-09-08"},{"id":"20250914_4gc54sorukfnhli3j8miqirbds","status":"confirmed","summary":"Fathers\' Day","region":"North Macedonia","date":"2025-09-14"},{"id":"20251011_027s23q6366uqdlermkhdpkdj4","status":"confirmed","summary":"Day of People’s Uprising","region":"North Macedonia","date":"2025-10-11"},{"id":"20251023_dbtreupigdls1o8d4689nh8h3k","status":"confirmed","summary":"Day of the Macedonian Revolutionary Struggle","region":"North Macedonia","date":"2025-10-23"},{"id":"20251026_6dcd38jrl23ucs0t897jus345o","status":"confirmed","summary":"Daylight Saving Time ends","region":"North Macedonia","date":"2025-10-26"},{"id":"20251031_2r5kk46encmvn6ir8frnj0kdkg","status":"confirmed","summary":"Halloween","region":"North Macedonia","date":"2025-10-31"},{"id":"20251208_1f6ococu8o2ukvbfphnvsp2kng","status":"confirmed","summary":"Saint Kliment Ohridski\'s Day","region":"North Macedonia","date":"2025-12-08"},{"id":"20251224_v67bk8g815cu57iqmrttbrt2pk","status":"confirmed","summary":"Christmas Eve","region":"North Macedonia","date":"2025-12-24"},{"id":"20251231_h75fgolsrv6bjn4mbmp2haneb8","status":"confirmed","summary":"New Year\'s Eve","region":"North Macedonia","date":"2025-12-31"}],"Mali":[{"id":"20240101_gqs2sv1kv0kqob4in9ltq2i2nk","status":"confirmed","summary":"New Year","region":"Mali","date":"2024-01-01"},{"id":"20240120_h2lh8jlbj48q4ehvgcs7fmuusk","status":"confirmed","summary":"Army Day","region":"Mali","date":"2024-01-20"},{"id":"20240311_er55ttrdjbd9f5oc774rn8p9hk","status":"confirmed","summary":"Ramadan Start","region":"Mali","date":"2024-03-11"},{"id":"20240326_5kq3icnpkt1t8hnme8pbrr9ujk","status":"confirmed","summary":"Martyrs\' Day","region":"Mali","date":"2024-03-26"},{"id":"20240401_36tp708lk1luo37t7kc4ko08h8","status":"confirmed","summary":"Easter Monday","region":"Mali","date":"2024-04-01"},{"id":"20240406_69a9fdt41bmloihb64a8hs7jbk","status":"confirmed","summary":"Leylatoul Qadr","region":"Mali","date":"2024-04-06"},{"id":"20240409_lplk6vh5480jrp2sqq8m74qgpk","status":"confirmed","summary":"Eid al-Fitr","region":"Mali","date":"2024-04-09"},{"id":"20240410_k4l7qll532c5nqua1ev86h17qc","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Mali","date":"2024-04-10"},{"id":"20240501_tti5f681mh2m04vgf72p370m4g","status":"confirmed","summary":"Workers\' Day","region":"Mali","date":"2024-05-01"},{"id":"20240520_ai8cr83cp5o1kcgtcif9aji5o8","status":"confirmed","summary":"Whit Monday","region":"Mali","date":"2024-05-20"},{"id":"20240525_ms7e293re9a4vnkqsqki7811hk","status":"confirmed","summary":"Africa Day","region":"Mali","date":"2024-05-25"},{"id":"20240617_du92e967hlhtrvjei0bcsg5nhk","status":"confirmed","summary":"Eid al-Adha","region":"Mali","date":"2024-06-17"},{"id":"20240717_gqe8tgobl39gqblnndhb8k7k5c","status":"confirmed","summary":"Ashura Holiday","region":"Mali","date":"2024-07-17"},{"id":"20240916_5ulo759f2eihs66djpsnoqllec","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Mali","date":"2024-09-16"},{"id":"20240922_g8c0uqacdvm73nlbu8qp857bdc","status":"confirmed","summary":"Independence Day","region":"Mali","date":"2024-09-22"},{"id":"20240923_eljsl8df0hf9duama76q01k5n8","status":"confirmed","summary":"Baptism of the Prophet","region":"Mali","date":"2024-09-23"},{"id":"20241225_k67cba3uotbs7l9l79cht63vh4","status":"confirmed","summary":"Christmas Day","region":"Mali","date":"2024-12-25"},{"id":"20250101_qnmrp86m743a9k641646s97ncg","status":"confirmed","summary":"New Year","region":"Mali","date":"2025-01-01"},{"id":"20250120_gahi8q1mk9qindpquc6jhgiuno","status":"confirmed","summary":"Army Day","region":"Mali","date":"2025-01-20"},{"id":"20250301_h053ocp1hmjhl8tqrs7ngkdh1g","status":"confirmed","summary":"Ramadan Start","region":"Mali","date":"2025-03-01"},{"id":"20250326_9tol44n7o2bd7r1urrds3128ic","status":"confirmed","summary":"Martyrs\' Day","region":"Mali","date":"2025-03-26"},{"id":"20250327_moo5lvjfsjimlfejo9opbe5efk","status":"confirmed","summary":"Leylatoul Qadr","region":"Mali","date":"2025-03-27"},{"id":"20250331_j8t1c5ritpj7ci946n1meklink","status":"confirmed","summary":"Eid al-Fitr","region":"Mali","date":"2025-03-31"},{"id":"20250421_gh93objtp51rd628de4v7dspo8","status":"confirmed","summary":"Easter Monday","region":"Mali","date":"2025-04-21"},{"id":"20250501_anou7uq2r0ivppsjjrrmmrcgkc","status":"confirmed","summary":"Workers\' Day","region":"Mali","date":"2025-05-01"},{"id":"20250525_i48g44qr1avi1sc4i4pr88qik0","status":"confirmed","summary":"Africa Day","region":"Mali","date":"2025-05-25"},{"id":"20250607_0hm4vbu99u3ocbb1v2m6vjadcs","status":"confirmed","summary":"Eid al-Adha","region":"Mali","date":"2025-06-07"},{"id":"20250609_gguh96pt36tcnmh5teeuf8nfok","status":"confirmed","summary":"Whit Monday","region":"Mali","date":"2025-06-09"},{"id":"20250706_kh6l82ngkgeucrti420o1bi704","status":"confirmed","summary":"Ashura Holiday","region":"Mali","date":"2025-07-06"},{"id":"20250905_fi985o8te22ols48anritoefd0","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Mali","date":"2025-09-05"},{"id":"20250922_kenl33gvq7ud4p7k33s44p144k","status":"confirmed","summary":"Independence Day","region":"Mali","date":"2025-09-22"},{"id":"20251225_ibfjs56tevhm0d1r7nn04e09po","status":"confirmed","summary":"Christmas Day","region":"Mali","date":"2025-12-25"}],"Myanmar (Burma)":[{"id":"20240101_5ad7p9muj05a8jvgffc45aeh1s","status":"confirmed","summary":"New Year Holiday","region":"Myanmar (Burma)","date":"2024-01-01"},{"id":"20240104_bklssn5i8pqrgn52sofk0c8cnc","status":"confirmed","summary":"Independence Day","region":"Myanmar (Burma)","date":"2024-01-04"},{"id":"20240111_unih3rad3ql0dar0jdq7frs650","status":"confirmed","summary":"Kayin New Year Day","region":"Myanmar (Burma)","date":"2024-01-11"},{"id":"20240212_7iimqv7v92jtdfd1bg5rmavbto","status":"confirmed","summary":"Union Day","region":"Myanmar (Burma)","date":"2024-02-12"},{"id":"20240302_1ep0fecj7cc4bfu0e1iu1hs6tc","status":"confirmed","summary":"Peasants\' Day","region":"Myanmar (Burma)","date":"2024-03-02"},{"id":"20240324_8na2esourlsdg0m9j14nlma4fc","status":"confirmed","summary":"Full Moon Day of Tabaung","region":"Myanmar (Burma)","date":"2024-03-24"},{"id":"20240325_f6shhrdge2bbkqcpj4bb3tptmg","status":"confirmed","summary":"Day off for Full Moon Day of Tabaung","region":"Myanmar (Burma)","date":"2024-03-25"},{"id":"20240327_7bpd4dsup32h92l52sj7g27mgc","status":"confirmed","summary":"Armed Forces\' Day","region":"Myanmar (Burma)","date":"2024-03-27"},{"id":"20240413_1itsf2h0hfbqu3aue8u2rkg6so","status":"confirmed","summary":"Maha Thingyan (Water Festival)","region":"Myanmar (Burma)","date":"2024-04-13"},{"id":"20240414_1j2s6de8ngtn8217ititp4lh54","status":"confirmed","summary":"Maha Thingyan (Water Festival)","region":"Myanmar (Burma)","date":"2024-04-14"},{"id":"20240415_rh543q659inv84i1142ftmn074","status":"confirmed","summary":"Maha Thingyan (Water Festival)","region":"Myanmar (Burma)","date":"2024-04-15"},{"id":"20240416_jjqju7f5la7hu51ffeu1d2gvu8","status":"confirmed","summary":"Maha Thingyan (Water Festival)","region":"Myanmar (Burma)","date":"2024-04-16"},{"id":"20240417_902bt3u10pcaci8enof953skgg","status":"confirmed","summary":"Maha Thingyan (Water Festival)","region":"Myanmar (Burma)","date":"2024-04-17"},{"id":"20240418_58l7fsp9081svg5dhvolospd4s","status":"confirmed","summary":"Maha Thingyan (Water Festival)","region":"Myanmar (Burma)","date":"2024-04-18"},{"id":"20240419_quefgsivo548qcntngjo57rki0","status":"confirmed","summary":"Maha Thingyan (Water Festival)","region":"Myanmar (Burma)","date":"2024-04-19"},{"id":"20240420_lghrg67kt7n894uj5a4vhjh7hg","status":"confirmed","summary":"Maha Thingyan (Water Festival)","region":"Myanmar (Burma)","date":"2024-04-20"},{"id":"20240421_rfihcfu96t664p7vh8i04ki65s","status":"confirmed","summary":"Maha Thingyan (Water Festival)","region":"Myanmar (Burma)","date":"2024-04-21"},{"id":"20240501_g7gh5idtvd953qvgoiq4oubv5o","status":"confirmed","summary":"Labor Day / May Day","region":"Myanmar (Burma)","date":"2024-05-01"},{"id":"20240617_6gq5fs0rj2lv4r5c9858j04jog","status":"confirmed","summary":"Eid al-Adha","region":"Myanmar (Burma)","date":"2024-06-17"},{"id":"20240719_rgqpbbag5no1julve5qrof21b0","status":"confirmed","summary":"Martyrs\' Day","region":"Myanmar (Burma)","date":"2024-07-19"},{"id":"20240720_uu0ns5nqht2atr20mlq0rl3rv8","status":"confirmed","summary":"Full Moon Day of Waso (Beginning of Buddhist Lent)","region":"Myanmar (Burma)","date":"2024-07-20"},{"id":"20240722_68tioie1tj4mfeu4oanfc4rhnc","status":"confirmed","summary":"Day off for Full Moon Day of Waso (Beginning of Buddhist Lent)","region":"Myanmar (Burma)","date":"2024-07-22"},{"id":"20241016_u866f43mmk9ka3emj8leukb1qs","status":"confirmed","summary":"Full Moon Day of Thadingyut Holiday (End of Buddhist Lent)","region":"Myanmar (Burma)","date":"2024-10-16"},{"id":"20241017_b7rebg3850mpmh3uq4on0hrolc","status":"confirmed","summary":"Full Moon Day of Thadingyut (End of Buddhist Lent)","region":"Myanmar (Burma)","date":"2024-10-17"},{"id":"20241018_pdrtd3v3fi0egi41itq81k4jtc","status":"confirmed","summary":"Full Moon Day of Thadingyut Holiday (End of Buddhist Lent)","region":"Myanmar (Burma)","date":"2024-10-18"},{"id":"20241101_5jfk5p6o3gph3r2dbguci6itck","status":"confirmed","summary":"Diwali/Deepavali","region":"Myanmar (Burma)","date":"2024-11-01"},{"id":"20241115_jnlk22r5c7m9bajumhi2j6ft74","status":"confirmed","summary":"Full Moon Day of Tazaungmone Holiday","region":"Myanmar (Burma)","date":"2024-11-15"},{"id":"20241116_o50j4d3e5cjt95pflcejbp7ubc","status":"confirmed","summary":"Full Moon Day of Tazaungmone","region":"Myanmar (Burma)","date":"2024-11-16"},{"id":"20241209_aa87icofbji68rk17v26vdaots","status":"confirmed","summary":"National Day","region":"Myanmar (Burma)","date":"2024-12-09"},{"id":"20241225_3chc14thgnntunph040pgd2n7c","status":"confirmed","summary":"Christmas Day","region":"Myanmar (Burma)","date":"2024-12-25"},{"id":"20241230_4hjbbk0nr189egqqgp8s9pnln8","status":"confirmed","summary":"Kayin New Year Day","region":"Myanmar (Burma)","date":"2024-12-30"}],"Mongolia":[{"id":"20240101_5o256sd9bh5qiu2vpa2vm8d0d0","status":"confirmed","summary":"New Year","region":"Mongolia","date":"2024-01-01"},{"id":"20240113_iohcjp0kfha5rv9cmk2n8r92v8","status":"confirmed","summary":"Constitution Day","region":"Mongolia","date":"2024-01-13"},{"id":"20240210_9hsd7sa9pa374qa1dd2nqc1amk","status":"confirmed","summary":"Tsagaan Sar","region":"Mongolia","date":"2024-02-10"},{"id":"20240211_dhlg9p8i1t6po5cuqr6kscnmjc","status":"confirmed","summary":"Tsagaan Sar Holiday","region":"Mongolia","date":"2024-02-11"},{"id":"20240212_rvpmr8tk2a2sm6s1eju1hpuvk4","status":"confirmed","summary":"Tsagaan Sar Holiday","region":"Mongolia","date":"2024-02-12"},{"id":"20240214_9n1tjb92cgc45hiaf2n1v7uev4","status":"confirmed","summary":"Valentine\'s Day","region":"Mongolia","date":"2024-02-14"},{"id":"20240301_sqn1rk02amrlcdivkfsoenvpd4","status":"confirmed","summary":"Patriots\' Day","region":"Mongolia","date":"2024-03-01"},{"id":"20240308_tckff3qqfh17rdgo4ol30eifkk","status":"confirmed","summary":"International Women\'s Day","region":"Mongolia","date":"2024-03-08"},{"id":"20240318_l0elsdc5nnrj2a9n7k3fo5uo7g","status":"confirmed","summary":"Soldiers\' Day","region":"Mongolia","date":"2024-03-18"},{"id":"20240407_ansck13gq0n78psmm21211h7ho","status":"confirmed","summary":"Health Day","region":"Mongolia","date":"2024-04-07"},{"id":"20240426_24fvv8ie1s38jpvrunlll8eons","status":"confirmed","summary":"Intellectual Property Day","region":"Mongolia","date":"2024-04-26"},{"id":"20240515_b2vnt2cj3ot1vocjc4207csnp0","status":"confirmed","summary":"Family Day","region":"Mongolia","date":"2024-05-15"},{"id":"20240523_h98ntvavehfqq4dg1mh9ob8hs4","status":"confirmed","summary":"Great Buddha Day","region":"Mongolia","date":"2024-05-23"},{"id":"20240601_dcu88pls969ld3rhv47b6vtfos","status":"confirmed","summary":"Children\'s Day","region":"Mongolia","date":"2024-06-01"},{"id":"20240710_k995ipardeu982vtq67jlni92o","status":"confirmed","summary":"Political Flag Day","region":"Mongolia","date":"2024-07-10"},{"id":"20240711_g778au2sfq2ta563ucnrest8ek","status":"confirmed","summary":"Naadam (National Day)","region":"Mongolia","date":"2024-07-11"},{"id":"20240712_7shrnjctfboburj319qm1v8plc","status":"confirmed","summary":"Naadam Holiday (National Day Holiday)","region":"Mongolia","date":"2024-07-12"},{"id":"20240713_4k1av47p8lo69d7jahe5nulbrg","status":"confirmed","summary":"Naadam Holiday (National Day Holiday)","region":"Mongolia","date":"2024-07-13"},{"id":"20240714_kq7m9ge5re3tes0ssncefr5vn8","status":"confirmed","summary":"Naadam Holiday (National Day Holiday)","region":"Mongolia","date":"2024-07-14"},{"id":"20240715_nniq2o86u7fd7bl48i46eqg9ik","status":"confirmed","summary":"Naadam Holiday (National Day Holiday)","region":"Mongolia","date":"2024-07-15"},{"id":"20240825_nq91vpj3aiemegv1jr6f93djvo","status":"confirmed","summary":"Youth\'s Day","region":"Mongolia","date":"2024-08-25"},{"id":"20240910_d0c1tkrkpptcopou445a7kbmqs","status":"confirmed","summary":"Repression Victims\' Day","region":"Mongolia","date":"2024-09-10"},{"id":"20241001_d5o55pfe2338r3tsiajgoco5uc","status":"confirmed","summary":"Elders\' Day","region":"Mongolia","date":"2024-10-01"},{"id":"20241029_ff9mildjsd296f6vin5moqrt8g","status":"confirmed","summary":"Capital City Day","region":"Mongolia","date":"2024-10-29"},{"id":"20241116_f8brouo1coed71c75kb64uprl0","status":"confirmed","summary":"Genghis Khan Day","region":"Mongolia","date":"2024-11-16"},{"id":"20241126_9erfgqa1kr8dbr2kuu5ufrupfg","status":"confirmed","summary":"Republic\'s Day","region":"Mongolia","date":"2024-11-26"},{"id":"20241210_mbv4e7ov20ehdo9jq2ioj4mpjk","status":"confirmed","summary":"Human Rights Day","region":"Mongolia","date":"2024-12-10"},{"id":"20241229_go1tuc6r0mev5moda407hbmvp4","status":"confirmed","summary":"Independence Day","region":"Mongolia","date":"2024-12-29"},{"id":"20250101_cqpu8ahv5qspnn87gd7403llt0","status":"confirmed","summary":"New Year","region":"Mongolia","date":"2025-01-01"},{"id":"20250113_ja7pfa91hso2r428pso0ka3q7o","status":"confirmed","summary":"Constitution Day","region":"Mongolia","date":"2025-01-13"},{"id":"20250214_8al3m80jeajqt0enq0s1ld3s58","status":"confirmed","summary":"Valentine\'s Day","region":"Mongolia","date":"2025-02-14"},{"id":"20250301_e7vs80v96pfh4r6ulf8nmnv5gk","status":"confirmed","summary":"Tsagaan Sar","region":"Mongolia","date":"2025-03-01"},{"id":"20250301_ja1j0u58koeom6qmh36vr7m34g","status":"confirmed","summary":"Patriots\' Day","region":"Mongolia","date":"2025-03-01"},{"id":"20250302_oichvpe79ki1qggvmgns3gdk8g","status":"confirmed","summary":"Tsagaan Sar Holiday","region":"Mongolia","date":"2025-03-02"},{"id":"20250303_7q9ulja6r480m6n7sgltf6ulng","status":"confirmed","summary":"Tsagaan Sar Holiday","region":"Mongolia","date":"2025-03-03"},{"id":"20250308_8bbpm3a3qj2qn4k2eogf7epgag","status":"confirmed","summary":"International Women\'s Day","region":"Mongolia","date":"2025-03-08"},{"id":"20250318_uun46k8trotlahv7cklklnrr9o","status":"confirmed","summary":"Soldiers\' Day","region":"Mongolia","date":"2025-03-18"},{"id":"20250407_13g6oiquemc43h7qd9a4cjco70","status":"confirmed","summary":"Health Day","region":"Mongolia","date":"2025-04-07"},{"id":"20250426_diatacvaup66q65k2lpdo1r9eo","status":"confirmed","summary":"Intellectual Property Day","region":"Mongolia","date":"2025-04-26"},{"id":"20250515_r3ssp8gcu086umqt862ovpl1ms","status":"confirmed","summary":"Family Day","region":"Mongolia","date":"2025-05-15"},{"id":"20250601_v7u28oluksvf5gjkgquvn04cbc","status":"confirmed","summary":"Children\'s Day","region":"Mongolia","date":"2025-06-01"},{"id":"20250604_br8dksm662rkf357j6c0j7vkls","status":"confirmed","summary":"Great Buddha Day","region":"Mongolia","date":"2025-06-04"},{"id":"20250710_lbb98pvao6ghiuo5dviu55o8n8","status":"confirmed","summary":"Political Flag Day","region":"Mongolia","date":"2025-07-10"},{"id":"20250711_ptpj16ogj0qgekldehsr198sjo","status":"confirmed","summary":"Naadam (National Day)","region":"Mongolia","date":"2025-07-11"},{"id":"20250712_hjgps9q7ud3l25dja5mhu4up70","status":"confirmed","summary":"Naadam Holiday (National Day Holiday)","region":"Mongolia","date":"2025-07-12"},{"id":"20250713_oap40r2dfack8l1nnkfjga9680","status":"confirmed","summary":"Naadam Holiday (National Day Holiday)","region":"Mongolia","date":"2025-07-13"},{"id":"20250714_35dgik7pe5ljj7ttlt7nlsahqo","status":"confirmed","summary":"Naadam Holiday (National Day Holiday)","region":"Mongolia","date":"2025-07-14"},{"id":"20250715_j1hipmfqbvit18dils6ojmgnh4","status":"confirmed","summary":"Naadam Holiday (National Day Holiday)","region":"Mongolia","date":"2025-07-15"},{"id":"20250825_7hmn79u4bln2buunjrnvajmi1s","status":"confirmed","summary":"Youth\'s Day","region":"Mongolia","date":"2025-08-25"},{"id":"20250910_d22d3t50t31ra8ovmttu5rbpcs","status":"confirmed","summary":"Repression Victims\' Day","region":"Mongolia","date":"2025-09-10"},{"id":"20251001_doqjqj9bla75q8dd5fjn1t1j0g","status":"confirmed","summary":"Elders\' Day","region":"Mongolia","date":"2025-10-01"},{"id":"20251029_vtdttpuvho54pjvk2v8bkk7p74","status":"confirmed","summary":"Capital City Day","region":"Mongolia","date":"2025-10-29"},{"id":"20251121_g65qh67feo12apgrq3uj36mudk","status":"confirmed","summary":"Genghis Khan Day","region":"Mongolia","date":"2025-11-21"},{"id":"20251126_amca5rdh0ecn1fsa3g4uclj0p8","status":"confirmed","summary":"Republic\'s Day","region":"Mongolia","date":"2025-11-26"},{"id":"20251210_3lmesvm8e35975rhujee5348m8","status":"confirmed","summary":"Human Rights Day","region":"Mongolia","date":"2025-12-10"},{"id":"20251229_m4komoak5ntm4oi7lftc2qd6rk","status":"confirmed","summary":"Independence Day","region":"Mongolia","date":"2025-12-29"}],"Macao":[{"id":"20240101_sgicv1377v3s1pk8poifrurfgg","status":"confirmed","summary":"New Year\'s Day","region":"Macao","date":"2024-01-01"},{"id":"20240209_up4b71umm0cuijer0616i0pqss","status":"confirmed","summary":"Lunar New Year Eve","region":"Macao","date":"2024-02-09"},{"id":"20240210_88vgqdvfl55h4rtpepsonoqc4c","status":"confirmed","summary":"Lunar New Year (First Day)","region":"Macao","date":"2024-02-10"},{"id":"20240211_8kegie7dqrmf75a23ejkgh9dso","status":"confirmed","summary":"Lunar New Year (Second Day)","region":"Macao","date":"2024-02-11"},{"id":"20240212_gv0bghhg0r38gnpmo7jmigpmj8","status":"confirmed","summary":"Lunar New Year (Third Day)","region":"Macao","date":"2024-02-12"},{"id":"20240213_l9tk8d1tvovqvf3bsioo9s6524","status":"confirmed","summary":"Lunar New Year Holiday","region":"Macao","date":"2024-02-13"},{"id":"20240214_a3om1p9cl43fhbb6lug1sgn6i0","status":"confirmed","summary":"Lunar New Year Holiday","region":"Macao","date":"2024-02-14"},{"id":"20240329_eclujfi6mkmb0699jlmc2hv610","status":"confirmed","summary":"Good Friday","region":"Macao","date":"2024-03-29"},{"id":"20240330_1mlg1evmsfrqkh45dug6d7pvs4","status":"confirmed","summary":"Holy Saturday","region":"Macao","date":"2024-03-30"},{"id":"20240401_hv80msj0ah09rqhok7n4vg09i0","status":"confirmed","summary":"Holy Saturday Holiday","region":"Macao","date":"2024-04-01"},{"id":"20240404_lo6j067aspmvfp62a6fkktgnlo","status":"confirmed","summary":"Cheng Ming Festival","region":"Macao","date":"2024-04-04"},{"id":"20240501_u14rrjrc8fv96rlgr4kqt80vt4","status":"confirmed","summary":"Labor Day / May Day","region":"Macao","date":"2024-05-01"},{"id":"20240515_0qr5teebj6nvlp8or422uqktn0","status":"confirmed","summary":"Buddha\'s Birthday","region":"Macao","date":"2024-05-15"},{"id":"20240610_h32uf85aeltg3j2gqmvf3phbog","status":"confirmed","summary":"Dragon Boat Festival","region":"Macao","date":"2024-06-10"},{"id":"20240918_chhs3ejmljm8cg4ikm2nq3icf0","status":"confirmed","summary":"Day after the Mid-Autumn-Festival","region":"Macao","date":"2024-09-18"},{"id":"20241001_hn97jc7esi9cihgicorfde0fv8","status":"confirmed","summary":"National Day of the People\'s Republic of China","region":"Macao","date":"2024-10-01"},{"id":"20241002_co93sj2voco5duq0js0nrsmogc","status":"confirmed","summary":"Day after PRC National Day","region":"Macao","date":"2024-10-02"},{"id":"20241011_vn14g4bjl4q53ttqo25a9a2to4","status":"confirmed","summary":"Chong Yeung Festival (Festival of Ancestors)","region":"Macao","date":"2024-10-11"},{"id":"20241102_c1ko9p1k7o88nj70atn2tq4ukc","status":"confirmed","summary":"All Souls\' Day","region":"Macao","date":"2024-11-02"},{"id":"20241104_eompbov14ushupp6dvse2a5blk","status":"confirmed","summary":"All Soul\'s Day Holiday","region":"Macao","date":"2024-11-04"},{"id":"20241208_eu6jucbk2dnfhcuhmohdjtdio8","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Macao","date":"2024-12-08"},{"id":"20241209_gr0on6qdr9m084ko78cne0f270","status":"confirmed","summary":"Feast of the Immaculate Conception Holiday","region":"Macao","date":"2024-12-09"},{"id":"20241220_qstma9abbh3gk24a717an1vnbs","status":"confirmed","summary":"Macau S.A.R. Establishment Day","region":"Macao","date":"2024-12-20"},{"id":"20241221_7d4d1jp58ehscd714rhp77efpg","status":"confirmed","summary":"Winter Solstice","region":"Macao","date":"2024-12-21"},{"id":"20241223_nd0qpdkvb14s12bh28jlgbv2f8","status":"confirmed","summary":"Winter Solstice Holiday","region":"Macao","date":"2024-12-23"},{"id":"20241224_vur9hgcsjrglamsv1u43hsomls","status":"confirmed","summary":"Christmas Eve","region":"Macao","date":"2024-12-24"},{"id":"20241225_2jkbd1sqvrb92o5eu7hpjvnn0s","status":"confirmed","summary":"Christmas Day","region":"Macao","date":"2024-12-25"},{"id":"20241231_79lpg6uu3iqsks1dirmo286m28","status":"confirmed","summary":"New Year\'s Eve Afternoon","region":"Macao","date":"2024-12-31"},{"id":"20241231_r7vl8cvpmr55fo8mi04oun4etk","status":"confirmed","summary":"New Year\'s Eve","region":"Macao","date":"2024-12-31"},{"id":"20250101_ufjkosnq28v5oelqf3tfpoth1s","status":"confirmed","summary":"New Year\'s Day","region":"Macao","date":"2025-01-01"},{"id":"20250128_tao98i8gr68gs653gqd90fqlco","status":"confirmed","summary":"Lunar New Year Eve","region":"Macao","date":"2025-01-28"},{"id":"20250129_gg71jdn79rcej4cvvjnp9jiqkk","status":"confirmed","summary":"Lunar New Year (First Day)","region":"Macao","date":"2025-01-29"},{"id":"20250130_89lib8oc1hcgl73io6m0sm6p68","status":"confirmed","summary":"Lunar New Year (Second Day)","region":"Macao","date":"2025-01-30"},{"id":"20250131_40j5o25ur7htog0g9kr4nohi7k","status":"confirmed","summary":"Lunar New Year (Third Day)","region":"Macao","date":"2025-01-31"},{"id":"20250404_p3s01cise4ulkouusgbdv0dufc","status":"confirmed","summary":"Cheng Ming Festival","region":"Macao","date":"2025-04-04"},{"id":"20250418_07duk4fg1oqn3pedd3tm81e1sk","status":"confirmed","summary":"Good Friday","region":"Macao","date":"2025-04-18"},{"id":"20250419_liomn3obfgk27vsk3s4qb7l7h0","status":"confirmed","summary":"Holy Saturday","region":"Macao","date":"2025-04-19"},{"id":"20250421_5ipfd5rl0lt3ido4tk2lbjmm9c","status":"confirmed","summary":"Holy Saturday Holiday","region":"Macao","date":"2025-04-21"},{"id":"20250501_r65ug52ei9au8gemrkhbf9ke7o","status":"confirmed","summary":"Labor Day / May Day","region":"Macao","date":"2025-05-01"},{"id":"20250505_c2hl4imv2npmlsb65et2pdcjms","status":"confirmed","summary":"Buddha\'s Birthday","region":"Macao","date":"2025-05-05"},{"id":"20250531_sb6abcnf839th367rfn1qd7fgs","status":"confirmed","summary":"Dragon Boat Festival","region":"Macao","date":"2025-05-31"},{"id":"20250602_v6tb0a75fn8i35181j2mqid978","status":"confirmed","summary":"Dragon Boat Festival Holiday (Public Employees Only)","region":"Macao","date":"2025-06-02"},{"id":"20251001_gqom3ff88ui0lk9i0j43hnaigk","status":"confirmed","summary":"National Day of the People\'s Republic of China","region":"Macao","date":"2025-10-01"},{"id":"20251002_ph5kguefgroctuo5nvf3uk811s","status":"confirmed","summary":"Day after PRC National Day","region":"Macao","date":"2025-10-02"},{"id":"20251007_o7kuot9jjgqc70lng8qv7mos8s","status":"confirmed","summary":"Day after the Mid-Autumn-Festival","region":"Macao","date":"2025-10-07"},{"id":"20251029_mpd4rvm7u76pko2p4j7slf5dk4","status":"confirmed","summary":"Chong Yeung Festival (Festival of Ancestors)","region":"Macao","date":"2025-10-29"},{"id":"20251102_s24fan0rpes3ac044e1vlu2l84","status":"confirmed","summary":"All Souls\' Day","region":"Macao","date":"2025-11-02"},{"id":"20251103_l58hg3stbj5ioi6rrdofgeu5m4","status":"confirmed","summary":"All Soul\'s Day Holiday","region":"Macao","date":"2025-11-03"},{"id":"20251208_pid68pufho9br45snc8m5kbbuk","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Macao","date":"2025-12-08"},{"id":"20251220_k4jg9b6nje388psj97e0l7lrbk","status":"confirmed","summary":"Macau S.A.R. Establishment Day","region":"Macao","date":"2025-12-20"},{"id":"20251221_j1ca29db4d0n6tb5vsd36946a8","status":"confirmed","summary":"Winter Solstice","region":"Macao","date":"2025-12-21"},{"id":"20251222_vd09drqcj9qkurrdllq0lbkevc","status":"confirmed","summary":"Macau S.A.R. Establishment Day Holiday","region":"Macao","date":"2025-12-22"},{"id":"20251223_hodbp26oaiglkvseqn8cn66duo","status":"confirmed","summary":"Winter Solstice Holiday","region":"Macao","date":"2025-12-23"},{"id":"20251224_7b28jbujuukt8jdsoqlpo1l2ts","status":"confirmed","summary":"Christmas Eve","region":"Macao","date":"2025-12-24"},{"id":"20251225_5su5shpqnv79r8lthnfp64efl8","status":"confirmed","summary":"Christmas Day","region":"Macao","date":"2025-12-25"},{"id":"20251231_6f1isg1v4llsq8p3pgjfe84pfg","status":"confirmed","summary":"New Year\'s Eve Afternoon","region":"Macao","date":"2025-12-31"},{"id":"20251231_vlpdp64oclb0cdh9rl8j1311lo","status":"confirmed","summary":"New Year\'s Eve","region":"Macao","date":"2025-12-31"}],"Northern Mariana Islands":[{"id":"20240101_45q18r95p0dsaibpto4c5l9jk8","status":"confirmed","summary":"New Year\'s Day","region":"Northern Mariana Islands","date":"2024-01-01"},{"id":"20240115_1kn6nc9s9m4pn6e5n9hbji6kh0","status":"confirmed","summary":"Martin Luther King Jr. Day","region":"Northern Mariana Islands","date":"2024-01-15"},{"id":"20240219_289i22unjqi6jjgpkfe8oue6q8","status":"confirmed","summary":"President\'s Day","region":"Northern Mariana Islands","date":"2024-02-19"},{"id":"20240324_rb53cmuo58oiijss9plu2hi69g","status":"confirmed","summary":"Commonwealth Covenant Day","region":"Northern Mariana Islands","date":"2024-03-24"},{"id":"20240325_tlsnof4fpjjkf5s3d3ua4ks8jo","status":"confirmed","summary":"Day off for Commonwealth Covenant Day","region":"Northern Mariana Islands","date":"2024-03-25"},{"id":"20240329_1gn79ods4q7ivh90r3qo1vseuo","status":"confirmed","summary":"Good Friday","region":"Northern Mariana Islands","date":"2024-03-29"},{"id":"20240527_4s95fu0750nu6ckle7iliotd84","status":"confirmed","summary":"Memorial Day","region":"Northern Mariana Islands","date":"2024-05-27"},{"id":"20240619_djitidn1mdd0i4ko8dqgiafal0","status":"confirmed","summary":"Juneteenth","region":"Northern Mariana Islands","date":"2024-06-19"},{"id":"20240704_r8r5g0vs8p26qt0anv0adjmm1k","status":"confirmed","summary":"Independence Day","region":"Northern Mariana Islands","date":"2024-07-04"},{"id":"20240902_et54ehd3svfl231ch66v7f7nlo","status":"confirmed","summary":"Labor Day","region":"Northern Mariana Islands","date":"2024-09-02"},{"id":"20241014_pkeuttr3fjf4f0mrgg20ooq7ns","status":"confirmed","summary":"Commonwealth Cultural Day","region":"Northern Mariana Islands","date":"2024-10-14"},{"id":"20241104_e7jncnslpvtjfl2f0kcvpiar6g","status":"confirmed","summary":"Citizenship Day","region":"Northern Mariana Islands","date":"2024-11-04"},{"id":"20241111_a1ueu3sc3a5m77d3c0btdga1v8","status":"confirmed","summary":"Veterans Day","region":"Northern Mariana Islands","date":"2024-11-11"},{"id":"20241128_9tna6h1rqoi5eenqbacn0vovgk","status":"confirmed","summary":"Thanksgiving Day","region":"Northern Mariana Islands","date":"2024-11-28"},{"id":"20241208_1irsiste03k0mp10m6ls03rn7g","status":"confirmed","summary":"Constitution Day","region":"Northern Mariana Islands","date":"2024-12-08"},{"id":"20241209_5ho6c4j2ldkfkdmvmvhcklqtm4","status":"confirmed","summary":"Day off for Constitution Day","region":"Northern Mariana Islands","date":"2024-12-09"},{"id":"20241225_bbao208bg704pi5gvcjgsq7f3s","status":"confirmed","summary":"Christmas Day","region":"Northern Mariana Islands","date":"2024-12-25"},{"id":"20250101_2d486sttiqeiq9lp431db24odc","status":"confirmed","summary":"New Year\'s Day","region":"Northern Mariana Islands","date":"2025-01-01"},{"id":"20250120_m8k7iep2pc4fb991kg042o78e4","status":"confirmed","summary":"Martin Luther King Jr. Day","region":"Northern Mariana Islands","date":"2025-01-20"},{"id":"20250217_v33pg7gvul7i3hcrmgerspslb8","status":"confirmed","summary":"President\'s Day","region":"Northern Mariana Islands","date":"2025-02-17"},{"id":"20250324_a7i15ic78r3qh7f7tvk743t0eo","status":"confirmed","summary":"Commonwealth Covenant Day","region":"Northern Mariana Islands","date":"2025-03-24"},{"id":"20250418_gn89chs6r7re4hh6boiblid7b8","status":"confirmed","summary":"Good Friday","region":"Northern Mariana Islands","date":"2025-04-18"},{"id":"20250526_cc9278l4shknbg0t9ktbbc351g","status":"confirmed","summary":"Memorial Day","region":"Northern Mariana Islands","date":"2025-05-26"},{"id":"20250619_rpc6r4lncbrh1ris6p07s9v4m0","status":"confirmed","summary":"Juneteenth","region":"Northern Mariana Islands","date":"2025-06-19"},{"id":"20250704_pe28q80v6vqe5qp96240pgipj4","status":"confirmed","summary":"Independence Day","region":"Northern Mariana Islands","date":"2025-07-04"},{"id":"20250901_2mmiknrf0c5gfdjrtls3a3kn70","status":"confirmed","summary":"Labor Day","region":"Northern Mariana Islands","date":"2025-09-01"},{"id":"20251013_7kkuskfetea7avpncivenr3s5k","status":"confirmed","summary":"Commonwealth Cultural Day","region":"Northern Mariana Islands","date":"2025-10-13"},{"id":"20251104_7iuepcqp0ervpp2mi3jtqt3tt0","status":"confirmed","summary":"Citizenship Day","region":"Northern Mariana Islands","date":"2025-11-04"},{"id":"20251111_qtrpjs4pf4dkd4eop9j769r0ks","status":"confirmed","summary":"Veterans Day","region":"Northern Mariana Islands","date":"2025-11-11"},{"id":"20251127_4tp6g3u8eqfbj1l8h1b49m8tlo","status":"confirmed","summary":"Thanksgiving Day","region":"Northern Mariana Islands","date":"2025-11-27"},{"id":"20251208_hg7731lve22uvik5k9ndqeasd4","status":"confirmed","summary":"Constitution Day","region":"Northern Mariana Islands","date":"2025-12-08"},{"id":"20251225_ubo7s214rta90h4dkkcesinojc","status":"confirmed","summary":"Christmas Day","region":"Northern Mariana Islands","date":"2025-12-25"}],"Martinique":[{"id":"20240101_10q6qpmjbql5qfb01pf19egffg","status":"confirmed","summary":"New Year","region":"Martinique","date":"2024-01-01"},{"id":"20240212_iisnfj7gc2pvc18u1dkahgn7uc","status":"confirmed","summary":"Carnival / Shrove Monday","region":"Martinique","date":"2024-02-12"},{"id":"20240213_7428nqup5eqt3u7k7iehfi4l14","status":"confirmed","summary":"Carnival / Shrove Tuesday / Pancake Day","region":"Martinique","date":"2024-02-13"},{"id":"20240214_crfr9c9d5o1dvdtjj6pi2o1kqg","status":"confirmed","summary":"Carnival / Ash Wednesday","region":"Martinique","date":"2024-02-14"},{"id":"20240310_6rgaik9aqscak1fopqd06lik1g","status":"confirmed","summary":"Laetare Sunday","region":"Martinique","date":"2024-03-10"},{"id":"20240329_0frisv0kdogevqm0kvhdnqr9l8","status":"confirmed","summary":"Good Friday","region":"Martinique","date":"2024-03-29"},{"id":"20240331_a81qa8va7pheade3tqh6jaief0","status":"confirmed","summary":"Easter Sunday","region":"Martinique","date":"2024-03-31"},{"id":"20240401_03blflafrefdham1p0mb7l443c","status":"confirmed","summary":"Easter Monday","region":"Martinique","date":"2024-04-01"},{"id":"20240501_pli48g8148hthq6q8a1cnrfi8s","status":"confirmed","summary":"Labor Day","region":"Martinique","date":"2024-05-01"},{"id":"20240508_cgf407dpv3f7m34eufut1aj5s8","status":"confirmed","summary":"Victory Day","region":"Martinique","date":"2024-05-08"},{"id":"20240509_hj04onp58qf99dh551as9shpeo","status":"confirmed","summary":"Ascension Day","region":"Martinique","date":"2024-05-09"},{"id":"20240519_6cm4v4grqrv9l2v94eamj2rtbg","status":"confirmed","summary":"Whit Sunday","region":"Martinique","date":"2024-05-19"},{"id":"20240520_j7jqeeuis8or8b7ama3puqodoo","status":"confirmed","summary":"Whit Monday","region":"Martinique","date":"2024-05-20"},{"id":"20240522_k7rrk4bgvoq4vdnooabm6m3o38","status":"confirmed","summary":"Abolition Day","region":"Martinique","date":"2024-05-22"},{"id":"20240714_foh8eu2msj12r7cj5flucsp2gg","status":"confirmed","summary":"Bastille Day","region":"Martinique","date":"2024-07-14"},{"id":"20240815_8e4hddfk8n427dvls0kkscj8ko","status":"confirmed","summary":"Assumption of Mary","region":"Martinique","date":"2024-08-15"},{"id":"20241101_5kik7tj13vnv332nqvq051ods0","status":"confirmed","summary":"All Saints\' Day","region":"Martinique","date":"2024-11-01"},{"id":"20241111_lq89dp8fe04f1forqvo94jenr0","status":"confirmed","summary":"Armistice Day","region":"Martinique","date":"2024-11-11"},{"id":"20241225_j698bqc6a8rqtnhdehbinptpss","status":"confirmed","summary":"Christmas Day","region":"Martinique","date":"2024-12-25"},{"id":"20241231_r211su4qj3mei770e81idc9q0o","status":"confirmed","summary":"New Year\'s Eve","region":"Martinique","date":"2024-12-31"},{"id":"20250101_3tg3m67hvc0kmgf89pfc3gdcos","status":"confirmed","summary":"New Year","region":"Martinique","date":"2025-01-01"},{"id":"20250303_uc9teo4nar1htu52oabairgpa0","status":"confirmed","summary":"Carnival / Shrove Monday","region":"Martinique","date":"2025-03-03"},{"id":"20250304_on49um3focg6867bat83gqgdh0","status":"confirmed","summary":"Carnival / Shrove Tuesday / Pancake Day","region":"Martinique","date":"2025-03-04"},{"id":"20250305_ot979tkhpi6ki69hvbo0rgft3c","status":"confirmed","summary":"Carnival / Ash Wednesday","region":"Martinique","date":"2025-03-05"},{"id":"20250330_0fcbn9ibk5e1ql6f0pfn1k4n3c","status":"confirmed","summary":"Laetare Sunday","region":"Martinique","date":"2025-03-30"},{"id":"20250418_n5mhuf0k48i986p12nl29r5el8","status":"confirmed","summary":"Good Friday","region":"Martinique","date":"2025-04-18"},{"id":"20250420_efo74cnqo77gin60gceoi74ao0","status":"confirmed","summary":"Easter Sunday","region":"Martinique","date":"2025-04-20"},{"id":"20250421_9khs2t3svpvjrnc3dges0f18ps","status":"confirmed","summary":"Easter Monday","region":"Martinique","date":"2025-04-21"},{"id":"20250501_m1l7khbqiaghm84aappcjlj4nc","status":"confirmed","summary":"Labor Day","region":"Martinique","date":"2025-05-01"},{"id":"20250508_5c8q0md0co1qu6f5gbainsf2pc","status":"confirmed","summary":"Victory Day","region":"Martinique","date":"2025-05-08"},{"id":"20250522_25sl187qktc97v7c08jaj9vuro","status":"confirmed","summary":"Abolition Day","region":"Martinique","date":"2025-05-22"},{"id":"20250529_g0g1vq6k628ugtgs0mg4p7ek50","status":"confirmed","summary":"Ascension Day","region":"Martinique","date":"2025-05-29"},{"id":"20250608_u3o3tia8pdi0n5kopr7r7jtj24","status":"confirmed","summary":"Whit Sunday","region":"Martinique","date":"2025-06-08"},{"id":"20250609_gnnjeuvet32gcu8t5oe52creeo","status":"confirmed","summary":"Whit Monday","region":"Martinique","date":"2025-06-09"},{"id":"20250714_d3t55e33tf2cj2k9vs5l0aeis0","status":"confirmed","summary":"Bastille Day","region":"Martinique","date":"2025-07-14"},{"id":"20250815_0bt2b18s59ivh0p1ajmidv194k","status":"confirmed","summary":"Assumption of Mary","region":"Martinique","date":"2025-08-15"},{"id":"20251101_icittqcg9gfc5be9prirf9a0tk","status":"confirmed","summary":"All Saints\' Day","region":"Martinique","date":"2025-11-01"},{"id":"20251111_mg4sufvcjva0tvlis2ofrso0kk","status":"confirmed","summary":"Armistice Day","region":"Martinique","date":"2025-11-11"},{"id":"20251225_ikdq7ql1qitenb0dm4m03t8nf0","status":"confirmed","summary":"Christmas Day","region":"Martinique","date":"2025-12-25"},{"id":"20251231_28tjpo800tl7obeggbh7idhroc","status":"confirmed","summary":"New Year\'s Eve","region":"Martinique","date":"2025-12-31"}],"Mauritania":[{"id":"20240101_s7eua46fqr3srk7achah545ne4","status":"confirmed","summary":"New Year\'s Day","region":"Mauritania","date":"2024-01-01"},{"id":"20240311_1mbb1pievso12endp7rg2ipni8","status":"confirmed","summary":"Ramadan Start","region":"Mauritania","date":"2024-03-11"},{"id":"20240410_jrf8c8slaqiv283ceb0e6p0ah4","status":"confirmed","summary":"Eid ul-Fitr","region":"Mauritania","date":"2024-04-10"},{"id":"20240501_scn2avs0kj2n13lg9a9d6lrh08","status":"confirmed","summary":"Labor Day / May Day","region":"Mauritania","date":"2024-05-01"},{"id":"20240525_8gf3lleabetumkv2vb5midh72g","status":"confirmed","summary":"Africa Day","region":"Mauritania","date":"2024-05-25"},{"id":"20240617_1k55v83p6atubjl4h6o550m1ds","status":"confirmed","summary":"Eid al-Adha","region":"Mauritania","date":"2024-06-17"},{"id":"20240708_jabmust7jssn67931fcbb2f13g","status":"confirmed","summary":"Muharram/Islamic New Year","region":"Mauritania","date":"2024-07-08"},{"id":"20240916_v9irl1sgc9fsnt8fjtcb87fcsk","status":"confirmed","summary":"Milad un Nabi (Mawlid)","region":"Mauritania","date":"2024-09-16"},{"id":"20241128_nrss9d1lsmsq4nfsk0ncj0d9sg","status":"confirmed","summary":"Independence Day","region":"Mauritania","date":"2024-11-28"},{"id":"20250101_4fi2vpo7tol4ihsq99335p9594","status":"confirmed","summary":"New Year\'s Day","region":"Mauritania","date":"2025-01-01"},{"id":"20250301_pa2m2p4fn5qmahnche24dhgpe8","status":"confirmed","summary":"Ramadan Start","region":"Mauritania","date":"2025-03-01"},{"id":"20250331_fhco2bjv8q5i694fjuppqfg1mo","status":"confirmed","summary":"Eid ul-Fitr","region":"Mauritania","date":"2025-03-31"},{"id":"20250501_p1mj43arp0ciaepvhfooamh4i4","status":"confirmed","summary":"Labor Day / May Day","region":"Mauritania","date":"2025-05-01"},{"id":"20250525_k71aghpd3d2oppdk76bl6nhoeo","status":"confirmed","summary":"Africa Day","region":"Mauritania","date":"2025-05-25"},{"id":"20250607_i6s0b31fdvn8alptge7s402v3o","status":"confirmed","summary":"Eid al-Adha","region":"Mauritania","date":"2025-06-07"},{"id":"20250627_2fff5uclrdlvrtdpu3fhrkb5ts","status":"confirmed","summary":"Muharram/Islamic New Year","region":"Mauritania","date":"2025-06-27"},{"id":"20250905_uoo35v7sd9olvkfh1hbtfseq0s","status":"confirmed","summary":"Milad un Nabi (Mawlid)","region":"Mauritania","date":"2025-09-05"},{"id":"20251128_739vg5sjiol6io9gehmusf5ifo","status":"confirmed","summary":"Independence Day","region":"Mauritania","date":"2025-11-28"}],"Montserrat":[{"id":"20240101_mj706o0s6ctfh96k84oukdgep4","status":"confirmed","summary":"Festival Day observed","region":"Montserrat","date":"2024-01-01"},{"id":"20240101_vvi4cig55etvp37ear9rgd7lms","status":"confirmed","summary":"New Year\'s Day","region":"Montserrat","date":"2024-01-01"},{"id":"20240102_hrrq3ko2c384l97bshodt6j77c","status":"confirmed","summary":"New Year\'s Day observed","region":"Montserrat","date":"2024-01-02"},{"id":"20240317_vi1ss0ve4sns6djs5cbfvn90t0","status":"confirmed","summary":"St. Patrick\'s Day","region":"Montserrat","date":"2024-03-17"},{"id":"20240318_u35o0gs2qeelna7b0ukhv1euac","status":"confirmed","summary":"St. Patrick\'s Day observed","region":"Montserrat","date":"2024-03-18"},{"id":"20240329_3vilfkat16neabc0bsrojkqgj4","status":"confirmed","summary":"Good Friday","region":"Montserrat","date":"2024-03-29"},{"id":"20240401_4kgouhbgk37omaiaj5110371h8","status":"confirmed","summary":"Easter Monday","region":"Montserrat","date":"2024-04-01"},{"id":"20240506_08fscjmlanaaa3a91mp6qf4nus","status":"confirmed","summary":"Labour Day","region":"Montserrat","date":"2024-05-06"},{"id":"20240520_a2eju3klmm6gao0g7kigqmmmok","status":"confirmed","summary":"Whit Monday","region":"Montserrat","date":"2024-05-20"},{"id":"20240610_pig6ji8na29t6ctlp61dn1rcmc","status":"confirmed","summary":"King’s Birthday Holiday","region":"Montserrat","date":"2024-06-10"},{"id":"20240710_10fq1sjqr06n0uhe68io76cgcc","status":"confirmed","summary":"National Day of Prayer and Thanksgiving","region":"Montserrat","date":"2024-07-10"},{"id":"20240805_4bj23u7435vtffefpljhkgb8h8","status":"confirmed","summary":"Emancipation Day","region":"Montserrat","date":"2024-08-05"},{"id":"20241225_d7ulgshebni1vuca8dn8t0d9rg","status":"confirmed","summary":"Christmas Day","region":"Montserrat","date":"2024-12-25"},{"id":"20241226_ath7elrefqcekc7kcm32me24a0","status":"confirmed","summary":"Boxing Day","region":"Montserrat","date":"2024-12-26"},{"id":"20241231_5envcb9dnvt8gvvp1tj83e0d0s","status":"confirmed","summary":"Festival Day","region":"Montserrat","date":"2024-12-31"},{"id":"20250101_e8g8mgso5htleu4t733hcalfg8","status":"confirmed","summary":"New Year\'s Day","region":"Montserrat","date":"2025-01-01"},{"id":"20250317_2tspbholojnl47pm67r1bthh2c","status":"confirmed","summary":"St. Patrick\'s Day","region":"Montserrat","date":"2025-03-17"},{"id":"20250418_q4qvbl2r93tge11t3o18ntures","status":"confirmed","summary":"Good Friday","region":"Montserrat","date":"2025-04-18"},{"id":"20250421_jjvme1o4oj6jcb4t1c0v153m10","status":"confirmed","summary":"Easter Monday","region":"Montserrat","date":"2025-04-21"},{"id":"20250505_frhukc5ket2eof69hstlqhdfh0","status":"confirmed","summary":"Labour Day","region":"Montserrat","date":"2025-05-05"},{"id":"20250609_a7cqsi4kr855nbsv5qhoulvjsk","status":"confirmed","summary":"King’s Birthday Holiday","region":"Montserrat","date":"2025-06-09"},{"id":"20250609_v66hp7adreol747ihrhf7kdu6k","status":"confirmed","summary":"Whit Monday","region":"Montserrat","date":"2025-06-09"},{"id":"20250804_dgsq4erpm9oqh3ahhgcsofq2rs","status":"confirmed","summary":"Emancipation Day","region":"Montserrat","date":"2025-08-04"},{"id":"20251225_c237jrsgp0tvot54k48irdf5tc","status":"confirmed","summary":"Christmas Day","region":"Montserrat","date":"2025-12-25"},{"id":"20251226_a2u8i6nnq9vurk5u95ins1quvk","status":"confirmed","summary":"Boxing Day","region":"Montserrat","date":"2025-12-26"},{"id":"20251231_auajopt5i13v9qvla724v0p8ts","status":"confirmed","summary":"Festival Day","region":"Montserrat","date":"2025-12-31"}],"Malta":[{"id":"20240101_9n8d6im4egoit8mgctvrg5htk8","status":"confirmed","summary":"New Year\'s Day","region":"Malta","date":"2024-01-01"},{"id":"20240210_e9rpm8d100u2nhph9acgsgjhp0","status":"confirmed","summary":"Feast of Saint Paul\'s Shipwreck","region":"Malta","date":"2024-02-10"},{"id":"20240319_tn7mk0ausf3lvqhu2dikik67q8","status":"confirmed","summary":"Feast of Saint Joseph","region":"Malta","date":"2024-03-19"},{"id":"20240329_hv7ej4duommkl0hk6f4fvekct0","status":"confirmed","summary":"Good Friday","region":"Malta","date":"2024-03-29"},{"id":"20240331_0uu70hhs97ac0vk5eos4c01nr8","status":"confirmed","summary":"Freedom Day","region":"Malta","date":"2024-03-31"},{"id":"20240331_tiodjpvd9s2njhf5ncubs792bc","status":"confirmed","summary":"Easter Sunday","region":"Malta","date":"2024-03-31"},{"id":"20240401_09el8o1q5v348ki45fpbde6smg","status":"confirmed","summary":"Bank Holiday","region":"Malta","date":"2024-04-01"},{"id":"20240401_eu031c43bu8kohu7jh958k3ko4","status":"confirmed","summary":"Easter Monday","region":"Malta","date":"2024-04-01"},{"id":"20240501_g0fqkv40bbrtgoktfl1lh7qr1o","status":"confirmed","summary":"Labour Day/May Day","region":"Malta","date":"2024-05-01"},{"id":"20240512_38fla1u15i037uttd7gp7qufg8","status":"confirmed","summary":"Mothers\' Day","region":"Malta","date":"2024-05-12"},{"id":"20240607_abdr3kfjq20ishpn4cb41nrge8","status":"confirmed","summary":"Sette Giugno","region":"Malta","date":"2024-06-07"},{"id":"20240616_rs70njr8b9eg4m72tkj15q8ig0","status":"confirmed","summary":"Fathers\' Day","region":"Malta","date":"2024-06-16"},{"id":"20240629_7c28didp6nomblai5lfi0hol3g","status":"confirmed","summary":"Feast of Saints Peter and Paul","region":"Malta","date":"2024-06-29"},{"id":"20240815_qb4tuds0iarknc0cml51mslpe0","status":"confirmed","summary":"The Feast of Mary\'s Assumption","region":"Malta","date":"2024-08-15"},{"id":"20240908_hop0oc7p4072ivrlugnln3qjes","status":"confirmed","summary":"The Feast of Our Lady of Victories","region":"Malta","date":"2024-09-08"},{"id":"20240921_nu0nk0ft88d0nl8lu39a4kni2s","status":"confirmed","summary":"Independence Day","region":"Malta","date":"2024-09-21"},{"id":"20241208_h23riqmd7i20bojanf15cmo2vg","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Malta","date":"2024-12-08"},{"id":"20241213_pkqkl1u23uapilvrqgiolup40k","status":"confirmed","summary":"Republic Day","region":"Malta","date":"2024-12-13"},{"id":"20241224_99me1fkqvvesls812guhn162gk","status":"confirmed","summary":"Christmas Eve","region":"Malta","date":"2024-12-24"},{"id":"20241225_8vp4705qj1r9pd28qssmbvt454","status":"confirmed","summary":"Christmas Day","region":"Malta","date":"2024-12-25"},{"id":"20241226_f1mev5705u6fve6f9h9b0cvdt8","status":"confirmed","summary":"Boxing Day","region":"Malta","date":"2024-12-26"},{"id":"20241226_gjrc81s1hn2ouhjko888k3i2jo","status":"confirmed","summary":"Bank Holiday","region":"Malta","date":"2024-12-26"},{"id":"20241231_rgjssm81meanafioqhpmqj448o","status":"confirmed","summary":"New Year\'s Eve","region":"Malta","date":"2024-12-31"},{"id":"20250101_fk8c36f30kkflmj1ea82krfefo","status":"confirmed","summary":"New Year\'s Day","region":"Malta","date":"2025-01-01"},{"id":"20250210_qgp00vip0lupruc5pt7ofdn87o","status":"confirmed","summary":"Feast of Saint Paul\'s Shipwreck","region":"Malta","date":"2025-02-10"},{"id":"20250319_n1ilhoe421cqmf4u0uat7llsas","status":"confirmed","summary":"Feast of Saint Joseph","region":"Malta","date":"2025-03-19"},{"id":"20250331_iibh016eqjpjaudgg2v9dd370s","status":"confirmed","summary":"Freedom Day","region":"Malta","date":"2025-03-31"},{"id":"20250418_j484e95bn79h04ap5qp4i7dve0","status":"confirmed","summary":"Good Friday","region":"Malta","date":"2025-04-18"},{"id":"20250420_j17tnkch8ukvjusdh8716k6vb0","status":"confirmed","summary":"Easter Sunday","region":"Malta","date":"2025-04-20"},{"id":"20250421_srs56eghncc3jmavjjigc5pvco","status":"confirmed","summary":"Easter Monday","region":"Malta","date":"2025-04-21"},{"id":"20250421_t7e8bckbagqcaf3s7o3p0g6a6k","status":"confirmed","summary":"Bank Holiday","region":"Malta","date":"2025-04-21"},{"id":"20250501_2f5s1b623001dmpl3ub329r4pg","status":"confirmed","summary":"Labour Day/May Day","region":"Malta","date":"2025-05-01"},{"id":"20250511_9n5b7p7r7j7jvhnvq4g7podres","status":"confirmed","summary":"Mothers\' Day","region":"Malta","date":"2025-05-11"},{"id":"20250607_lcaq3jupjo5fl4tkle9fr8bno0","status":"confirmed","summary":"Sette Giugno","region":"Malta","date":"2025-06-07"},{"id":"20250615_0ks2o31p38toh1o4elr5f5h8so","status":"confirmed","summary":"Fathers\' Day","region":"Malta","date":"2025-06-15"},{"id":"20250629_m4rjck9hnilk8he0bu1kv8vsbs","status":"confirmed","summary":"Feast of Saints Peter and Paul","region":"Malta","date":"2025-06-29"},{"id":"20250815_36adlffrljit2oskvudihv5bc0","status":"confirmed","summary":"The Feast of Mary\'s Assumption","region":"Malta","date":"2025-08-15"},{"id":"20250908_mvjhjc4d3r81tlpdb4forevmpo","status":"confirmed","summary":"The Feast of Our Lady of Victories","region":"Malta","date":"2025-09-08"},{"id":"20250921_ncavp00pf077l23gfl6stvbuj0","status":"confirmed","summary":"Independence Day","region":"Malta","date":"2025-09-21"},{"id":"20251208_l1n84ve0c36inlsqfd2rnlmi78","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Malta","date":"2025-12-08"},{"id":"20251213_16bllbobhseevurg2673n361jo","status":"confirmed","summary":"Republic Day","region":"Malta","date":"2025-12-13"},{"id":"20251224_ab4eu7e8tipj9l37k65d7feiss","status":"confirmed","summary":"Christmas Eve","region":"Malta","date":"2025-12-24"},{"id":"20251225_hmfqsp6s684lu0v4plulp9svr8","status":"confirmed","summary":"Christmas Day","region":"Malta","date":"2025-12-25"},{"id":"20251226_nc7ckgj3n8dspbu7eif7bjmgik","status":"confirmed","summary":"Bank Holiday","region":"Malta","date":"2025-12-26"},{"id":"20251226_rvo2m88unldalo976r60surirc","status":"confirmed","summary":"Boxing Day","region":"Malta","date":"2025-12-26"},{"id":"20251231_rarb7vsg4o4lsp0f48u9and3cc","status":"confirmed","summary":"New Year\'s Eve","region":"Malta","date":"2025-12-31"}],"Mauritius":[{"id":"20240101_84lier0l04k35aoa09f8ijqf98","status":"confirmed","summary":"New Year","region":"Mauritius","date":"2024-01-01"},{"id":"20240102_nfvp5vrbkab38p6aiak1ap1r2c","status":"confirmed","summary":"New Year (Day 2)","region":"Mauritius","date":"2024-01-02"},{"id":"20240125_uf795orlvcls0bhlajos9ov7qk","status":"confirmed","summary":"Thaipoosam Cavadee","region":"Mauritius","date":"2024-01-25"},{"id":"20240201_c0a1d2dilvk5c278efv6aaj02s","status":"confirmed","summary":"Abolition of Slavery","region":"Mauritius","date":"2024-02-01"},{"id":"20240210_sb4016mivnm11oapeolldbdjv4","status":"confirmed","summary":"Chinese Spring Festival","region":"Mauritius","date":"2024-02-10"},{"id":"20240308_b6ojsvb7dtjcjnt5323u2kssto","status":"confirmed","summary":"Maha Shivaratree","region":"Mauritius","date":"2024-03-08"},{"id":"20240312_jcmcmvmqgeqes27pf43s2rcakg","status":"confirmed","summary":"Ramadan Start","region":"Mauritius","date":"2024-03-12"},{"id":"20240312_ulbd251dslaibttb87hnh5ibf0","status":"confirmed","summary":"National Day","region":"Mauritius","date":"2024-03-12"},{"id":"20240409_p93io90q3g5dnc5lh9g3iapb30","status":"confirmed","summary":"Ougadi","region":"Mauritius","date":"2024-04-09"},{"id":"20240411_5hohrcs89n3d8idbma514r31eo","status":"confirmed","summary":"Eid al-Fitr","region":"Mauritius","date":"2024-04-11"},{"id":"20240501_35gp2rckq3lr1aa4dibuidls9k","status":"confirmed","summary":"Labour Day","region":"Mauritius","date":"2024-05-01"},{"id":"20240526_rqkr9t8hgispho0gt9k0l75n6g","status":"confirmed","summary":"Mother\'s Day","region":"Mauritius","date":"2024-05-26"},{"id":"20240616_v5u13srk01hm83tmu0gnnv5g4o","status":"confirmed","summary":"Father\'s Day","region":"Mauritius","date":"2024-06-16"},{"id":"20240815_fpe478q2r1pkmtaqkgrlv35jo4","status":"confirmed","summary":"Assumption of Mary","region":"Mauritius","date":"2024-08-15"},{"id":"20240908_pf5mveassbqe115ejvel6vvc7c","status":"confirmed","summary":"Ganesh Chaturthi","region":"Mauritius","date":"2024-09-08"},{"id":"20241031_h3sgj379vqq9rkeisfa34u1o0g","status":"confirmed","summary":"Divali","region":"Mauritius","date":"2024-10-31"},{"id":"20241102_7nol3hijfntv5v8apij9223klo","status":"confirmed","summary":"Arrival of Indentured Labourers","region":"Mauritius","date":"2024-11-02"},{"id":"20241225_pr0qdcvvbim1fljdrmhnmpv814","status":"confirmed","summary":"Christmas Day","region":"Mauritius","date":"2024-12-25"},{"id":"20250101_qk8dufk11h2ijq7rguithc7t3g","status":"confirmed","summary":"New Year","region":"Mauritius","date":"2025-01-01"},{"id":"20250102_j696u26g1i597gb8nmloe87c90","status":"confirmed","summary":"New Year (Day 2)","region":"Mauritius","date":"2025-01-02"},{"id":"20250201_h70o20t8kv13al45bkc2e4l3k8","status":"confirmed","summary":"Abolition of Slavery","region":"Mauritius","date":"2025-02-01"},{"id":"20250211_eqobaajj3aa5si4ltiocrac210","status":"confirmed","summary":"Thaipoosam Cavadee","region":"Mauritius","date":"2025-02-11"},{"id":"20250226_g35l6tnnm4gdsgsmoi9svr7i78","status":"confirmed","summary":"Maha Shivaratree","region":"Mauritius","date":"2025-02-26"},{"id":"20250301_k5831dpjngc8anv30m0015u120","status":"confirmed","summary":"Ramadan Start","region":"Mauritius","date":"2025-03-01"},{"id":"20250312_4splobvcqdq40h6qduercdn260","status":"confirmed","summary":"National Day","region":"Mauritius","date":"2025-03-12"},{"id":"20250330_bduie3doiap1hbhpvcf4m73auk","status":"confirmed","summary":"Ougadi","region":"Mauritius","date":"2025-03-30"},{"id":"20250331_9phmtge30g4gfe0ps22nodh4ks","status":"confirmed","summary":"Eid al-Fitr","region":"Mauritius","date":"2025-03-31"},{"id":"20250501_6cime5ksmelomqjd7mdkk8uea0","status":"confirmed","summary":"Labour Day","region":"Mauritius","date":"2025-05-01"},{"id":"20250525_tdqo9om7443iibm9rtgcs5m0f8","status":"confirmed","summary":"Mother\'s Day","region":"Mauritius","date":"2025-05-25"},{"id":"20250615_et2da7ppmk1c6jvf72jj0m16vs","status":"confirmed","summary":"Father\'s Day","region":"Mauritius","date":"2025-06-15"},{"id":"20250827_o6m7660u672suntqkftqdasj64","status":"confirmed","summary":"Ganesh Chaturthi","region":"Mauritius","date":"2025-08-27"},{"id":"20251020_kvkc0b37cps96136uejpnuqh3g","status":"confirmed","summary":"Divali","region":"Mauritius","date":"2025-10-20"},{"id":"20251101_2p1ckjq8rdofh635nrv1rtp120","status":"confirmed","summary":"All Saints Day","region":"Mauritius","date":"2025-11-01"},{"id":"20251102_s767bttoerla6c0mtsvjn5mngo","status":"confirmed","summary":"Arrival of Indentured Labourers","region":"Mauritius","date":"2025-11-02"},{"id":"20251225_a2njqh1p02abkdatas1vnu8us8","status":"confirmed","summary":"Christmas Day","region":"Mauritius","date":"2025-12-25"}],"Maldives":[{"id":"20240101_nre2o2plva8pd215bip8eljl2o","status":"confirmed","summary":"New Year\'s Day","region":"Maldives","date":"2024-01-01"},{"id":"20240311_7nabom19ed7gov80rc0ihlk9gs","status":"confirmed","summary":"Ramadan Start","region":"Maldives","date":"2024-03-11"},{"id":"20240331_aee67de37ucik7iqkkl5erm4s0","status":"confirmed","summary":"Ramadan Holiday","region":"Maldives","date":"2024-03-31"},{"id":"20240401_l4k22v510ho7klc6pgp8ib20l0","status":"confirmed","summary":"Ramadan Holiday","region":"Maldives","date":"2024-04-01"},{"id":"20240402_qf4mho879sbjufi9rkd470f8bg","status":"confirmed","summary":"Ramadan Holiday","region":"Maldives","date":"2024-04-02"},{"id":"20240403_fkc53nk8f2dirjpog3eps4o4t4","status":"confirmed","summary":"Ramadan Holiday","region":"Maldives","date":"2024-04-03"},{"id":"20240404_gugqrgo369p5t8k78nh818di48","status":"confirmed","summary":"Ramadan Holiday","region":"Maldives","date":"2024-04-04"},{"id":"20240405_84jio25mffhet20kn2rs7a1sso","status":"confirmed","summary":"Ramadan Holiday","region":"Maldives","date":"2024-04-05"},{"id":"20240406_v6ccue9risl0t5kf3hvmvkfmu4","status":"confirmed","summary":"Ramadan Holiday","region":"Maldives","date":"2024-04-06"},{"id":"20240407_14ll6dm091apqdecfkbt49geqk","status":"confirmed","summary":"Ramadan Holiday","region":"Maldives","date":"2024-04-07"},{"id":"20240408_tqrqdp9joqc57b2784sea5qqho","status":"confirmed","summary":"Ramadan Holiday","region":"Maldives","date":"2024-04-08"},{"id":"20240409_3c7h43go7ur92mvdatc5v4g4js","status":"confirmed","summary":"Ramadan Holiday","region":"Maldives","date":"2024-04-09"},{"id":"20240410_mnu06p0dmt2gokig5kvduklb84","status":"confirmed","summary":"Eid-ul-Fithr","region":"Maldives","date":"2024-04-10"},{"id":"20240411_9t5b4gimk9rlon0r088kob5rrs","status":"confirmed","summary":"Eid-ul-Fithr Holiday","region":"Maldives","date":"2024-04-11"},{"id":"20240412_m1ne5ga8cgvajja42do723s1os","status":"confirmed","summary":"Eid-ul-Fithr Holiday","region":"Maldives","date":"2024-04-12"},{"id":"20240421_6lau7786dh19sl4d0e3t1kl91o","status":"confirmed","summary":"Election Day","region":"Maldives","date":"2024-04-21"},{"id":"20240422_f748akfhm3pfe3ubmgkeau0uac","status":"confirmed","summary":"Election Day Holiday","region":"Maldives","date":"2024-04-22"},{"id":"20240501_vagk6djmjughm9lk5q8ainq6b0","status":"confirmed","summary":"Labor Day / May Day","region":"Maldives","date":"2024-05-01"},{"id":"20240616_nsq5p8uhrjevni37p0cdogift4","status":"confirmed","summary":"Hajj Day","region":"Maldives","date":"2024-06-16"},{"id":"20240617_jjao1rdokiqfft5rnr5m1g6ihc","status":"confirmed","summary":"Eid-ul Al\'haa","region":"Maldives","date":"2024-06-17"},{"id":"20240618_283822ljd5burnchu30c40se44","status":"confirmed","summary":"Eid-ul Al\'haa Holiday","region":"Maldives","date":"2024-06-18"},{"id":"20240619_5hp97jipb0op1p8g0qtplu8vmg","status":"confirmed","summary":"Eid-ul Al\'haa Holiday","region":"Maldives","date":"2024-06-19"},{"id":"20240620_jbek5mmh3leb6b0vis6c32dvjk","status":"confirmed","summary":"Eid-ul Al\'haa Holiday","region":"Maldives","date":"2024-06-20"},{"id":"20240708_857s9v55un18naeoi8ja7mah9s","status":"confirmed","summary":"Muharram/Islamic New Year","region":"Maldives","date":"2024-07-08"},{"id":"20240726_c3ae3te6jva209akq8t85buqk4","status":"confirmed","summary":"Independence Day","region":"Maldives","date":"2024-07-26"},{"id":"20240727_uh1g8toppp2i4ou99vi2hv31b8","status":"confirmed","summary":"Independence Day Holiday","region":"Maldives","date":"2024-07-27"},{"id":"20240905_88goam9j5cn41kd07646jcdc5c","status":"confirmed","summary":"National Day","region":"Maldives","date":"2024-09-05"},{"id":"20240916_sat4tn2pei1i8sptuje72bkp88","status":"confirmed","summary":"Milad un Nabi (Mawlid)","region":"Maldives","date":"2024-09-16"},{"id":"20241005_c34gu0v74849m2bq6jppjecre4","status":"confirmed","summary":"The Day Maldives Embraced Islam","region":"Maldives","date":"2024-10-05"},{"id":"20241103_96vqqgevgaghrogmgh74uqpi8g","status":"confirmed","summary":"Victory Day","region":"Maldives","date":"2024-11-03"},{"id":"20241111_lgh246hml04i71sa3e4f12061k","status":"confirmed","summary":"Republic Day","region":"Maldives","date":"2024-11-11"},{"id":"20250101_8mkkam8oq6kvf1ho3ja2dnbq1c","status":"confirmed","summary":"New Year\'s Day","region":"Maldives","date":"2025-01-01"},{"id":"20250301_1uaro9uc53r27gtqg16g96101g","status":"confirmed","summary":"Ramadan Start","region":"Maldives","date":"2025-03-01"},{"id":"20250331_a0k0bddpsi9979gtvq81tn4uo8","status":"confirmed","summary":"Eid-ul-Fithr","region":"Maldives","date":"2025-03-31"},{"id":"20250401_jp06jeork75bcs6ssj4p7d00v8","status":"confirmed","summary":"Eid-ul-Fithr Holiday","region":"Maldives","date":"2025-04-01"},{"id":"20250402_g50lds49l5p3i4l3gc57tvsr18","status":"confirmed","summary":"Eid-ul-Fithr Holiday","region":"Maldives","date":"2025-04-02"},{"id":"20250501_kba97e87r0dhv2nv4s4p4oj01c","status":"confirmed","summary":"Labor Day / May Day","region":"Maldives","date":"2025-05-01"},{"id":"20250606_ecphck6o1hgmobeb6nmhhn62s8","status":"confirmed","summary":"Hajj Day","region":"Maldives","date":"2025-06-06"},{"id":"20250607_33t3oue9pj0jeorvq9m4musk2k","status":"confirmed","summary":"Eid-ul Al\'haa","region":"Maldives","date":"2025-06-07"},{"id":"20250608_ns7dmuuiqe355qg52276bb1d7k","status":"confirmed","summary":"Eid-ul Al\'haa Holiday","region":"Maldives","date":"2025-06-08"},{"id":"20250609_5l4t7jdhk403tmbg0076ojtknc","status":"confirmed","summary":"Eid-ul Al\'haa Holiday","region":"Maldives","date":"2025-06-09"},{"id":"20250610_mmnnjahc272caj2knpsl4304c0","status":"confirmed","summary":"Eid-ul Al\'haa Holiday","region":"Maldives","date":"2025-06-10"},{"id":"20250627_0p528ecjvd0tj3mkef1l4sesh4","status":"confirmed","summary":"Muharram/Islamic New Year","region":"Maldives","date":"2025-06-27"},{"id":"20250726_s0vr56md849nev6riuot38dbj0","status":"confirmed","summary":"Independence Day","region":"Maldives","date":"2025-07-26"},{"id":"20250727_cfprq0m3t4a607c6qv6c60ghp0","status":"confirmed","summary":"Independence Day Holiday","region":"Maldives","date":"2025-07-27"},{"id":"20250825_u0uejpg0ahilndtl0efpkppjv4","status":"confirmed","summary":"National Day","region":"Maldives","date":"2025-08-25"},{"id":"20250905_8be4rj38i03jvb2hk0encvl6eg","status":"confirmed","summary":"Milad un Nabi (Mawlid)","region":"Maldives","date":"2025-09-05"},{"id":"20250924_feqmbpmj8msumiuobr0kvftd20","status":"confirmed","summary":"The Day Maldives Embraced Islam","region":"Maldives","date":"2025-09-24"},{"id":"20251103_issf3totok1mpdi0n24vdl3264","status":"confirmed","summary":"Victory Day","region":"Maldives","date":"2025-11-03"},{"id":"20251111_husivjqmk24vnmseo4303f1i04","status":"confirmed","summary":"Republic Day","region":"Maldives","date":"2025-11-11"}],"Malawi":[{"id":"20240101_2hpsoga0qn7l92n5ela66758rk","status":"confirmed","summary":"New Year","region":"Malawi","date":"2024-01-01"},{"id":"20240115_4e8gdguq51onk5k8rcdifc4en0","status":"confirmed","summary":"John Chilembwe Day","region":"Malawi","date":"2024-01-15"},{"id":"20240303_52ejunsm8o2kq7mlm2380c61a8","status":"confirmed","summary":"Martyrs\' Day","region":"Malawi","date":"2024-03-03"},{"id":"20240304_3n0u6qpnbo345d1pi0631cgtqs","status":"confirmed","summary":"Day off for Martyrs\' Day","region":"Malawi","date":"2024-03-04"},{"id":"20240312_2ajpkj8thc4roi26m43nrmh3cc","status":"confirmed","summary":"Ramadan Start","region":"Malawi","date":"2024-03-12"},{"id":"20240329_k0a9voo6t6pnfgah3psr09944s","status":"confirmed","summary":"Good Friday","region":"Malawi","date":"2024-03-29"},{"id":"20240330_531j8r5bnic7gfojsvoe6jljps","status":"confirmed","summary":"Easter Saturday","region":"Malawi","date":"2024-03-30"},{"id":"20240401_gcbnhl3fsgjaib3stch5ek9mjo","status":"confirmed","summary":"Easter Monday","region":"Malawi","date":"2024-04-01"},{"id":"20240411_907tuu763m5o6d03pcrvpdans8","status":"confirmed","summary":"Eid al-Fitr","region":"Malawi","date":"2024-04-11"},{"id":"20240501_4s8iqnkikb3q67imo3dcf3sc28","status":"confirmed","summary":"May Day","region":"Malawi","date":"2024-05-01"},{"id":"20240514_nkvss9km04a1vb0uet8jqp4h1g","status":"confirmed","summary":"Kamuzu Day","region":"Malawi","date":"2024-05-14"},{"id":"20240706_6p3fr0lahidiqb4229kjmbgs8c","status":"confirmed","summary":"Independence Day","region":"Malawi","date":"2024-07-06"},{"id":"20240708_nhfbnr2d6b2v602eeu8dlvobg4","status":"confirmed","summary":"Day off for Independence Day","region":"Malawi","date":"2024-07-08"},{"id":"20241015_ilc4ltljaeo3noe8bt2k7fpju4","status":"confirmed","summary":"Mother\'s Day","region":"Malawi","date":"2024-10-15"},{"id":"20241225_fog62b52hl562md4k48otvjb5k","status":"confirmed","summary":"Christmas Day","region":"Malawi","date":"2024-12-25"},{"id":"20241226_hjaoe10pmf3d0dt2ab5cc90eto","status":"confirmed","summary":"Boxing Day","region":"Malawi","date":"2024-12-26"},{"id":"20250101_uekrfi4hqtqvaqt5dv609aot9g","status":"confirmed","summary":"New Year","region":"Malawi","date":"2025-01-01"},{"id":"20250115_3vsetcilqses8e7r3o7eg2u16k","status":"confirmed","summary":"John Chilembwe Day","region":"Malawi","date":"2025-01-15"},{"id":"20250301_jq8mb1pttq2p68gud69ao3rf9s","status":"confirmed","summary":"Ramadan Start","region":"Malawi","date":"2025-03-01"},{"id":"20250303_a2epdcf26dhp4tvc3p0187dcig","status":"confirmed","summary":"Martyrs\' Day","region":"Malawi","date":"2025-03-03"},{"id":"20250331_d0qp1gdj5a4ecbtv1dv0qtndck","status":"confirmed","summary":"Eid al-Fitr","region":"Malawi","date":"2025-03-31"},{"id":"20250418_r131pb1c1l7a0l5hu20dgnn4r8","status":"confirmed","summary":"Good Friday","region":"Malawi","date":"2025-04-18"},{"id":"20250419_861vl8v0u1u7s23ggvoqs0u1ek","status":"confirmed","summary":"Easter Saturday","region":"Malawi","date":"2025-04-19"},{"id":"20250421_lcuh7eadkq88o1f1igtmku10qo","status":"confirmed","summary":"Easter Monday","region":"Malawi","date":"2025-04-21"},{"id":"20250501_sioucs5hf26u9o6pehde49ttpg","status":"confirmed","summary":"May Day","region":"Malawi","date":"2025-05-01"},{"id":"20250514_2fn2m24lmsv73rplm88tqc2i9g","status":"confirmed","summary":"Kamuzu Day","region":"Malawi","date":"2025-05-14"},{"id":"20250706_h4g1b5nam73k3t8kgcvfl4apt4","status":"confirmed","summary":"Independence Day","region":"Malawi","date":"2025-07-06"},{"id":"20250707_9aurkofu9aj2liukagnmkg0o40","status":"confirmed","summary":"Day off for Independence Day","region":"Malawi","date":"2025-07-07"},{"id":"20251015_oj811sjfrnuruhskq4fos473h4","status":"confirmed","summary":"Mother\'s Day","region":"Malawi","date":"2025-10-15"},{"id":"20251225_3t1qpbrv8op32391339d9rsrnk","status":"confirmed","summary":"Christmas Day","region":"Malawi","date":"2025-12-25"},{"id":"20251226_tmmgcecaookf6fh1vr53jrfvuk","status":"confirmed","summary":"Boxing Day","region":"Malawi","date":"2025-12-26"}],"Mozambique":[{"id":"20240101_sk5q8q8dp6c2h7vqg8iri0cbg8","status":"confirmed","summary":"New Year","region":"Mozambique","date":"2024-01-01"},{"id":"20240203_plfh9ri7q4grr6pqalpfln4gb8","status":"confirmed","summary":"Mozambican Heroes Day","region":"Mozambique","date":"2024-02-03"},{"id":"20240329_oc12rkrq97csa2fafe4t5fv7ag","status":"confirmed","summary":"Good Friday","region":"Mozambique","date":"2024-03-29"},{"id":"20240407_pklii1nfu6qikosouom4v535gc","status":"confirmed","summary":"Mozambican Woman\'s Day","region":"Mozambique","date":"2024-04-07"},{"id":"20240408_097o6d6q8apajcqng6k2rfhtlo","status":"confirmed","summary":"Mozambican Woman\'s Day observed","region":"Mozambique","date":"2024-04-08"},{"id":"20240501_adustajni4p4bs1r1hajre4jog","status":"confirmed","summary":"May Day","region":"Mozambique","date":"2024-05-01"},{"id":"20240625_8ki5o2at321vg43h5caq3v3oi4","status":"confirmed","summary":"Independence Day","region":"Mozambique","date":"2024-06-25"},{"id":"20240907_padb6pgplqmmrbdq2q16tkv6nk","status":"confirmed","summary":"Victory Day","region":"Mozambique","date":"2024-09-07"},{"id":"20240925_lsnjbcqsmrimn4f5rd2c17iljc","status":"confirmed","summary":"Armed Forces Day","region":"Mozambique","date":"2024-09-25"},{"id":"20241004_0qov9bfnc649kqm6lt2h21tofo","status":"confirmed","summary":"Peace and Reconciliation Day","region":"Mozambique","date":"2024-10-04"},{"id":"20241225_tpmmr56j3q6a6soo6ejup1g3rc","status":"confirmed","summary":"Family Day","region":"Mozambique","date":"2024-12-25"},{"id":"20250101_o7etdk3obtemc9dhcgimefqgjo","status":"confirmed","summary":"New Year","region":"Mozambique","date":"2025-01-01"},{"id":"20250203_m31iak6v9ho78k4dveqeil3o04","status":"confirmed","summary":"Mozambican Heroes Day","region":"Mozambique","date":"2025-02-03"},{"id":"20250407_7vmhf7ohlfkqjvm7gfk4ujbvn8","status":"confirmed","summary":"Mozambican Woman\'s Day","region":"Mozambique","date":"2025-04-07"},{"id":"20250418_k6v4dembmpocm46f59fup5hbqg","status":"confirmed","summary":"Good Friday","region":"Mozambique","date":"2025-04-18"},{"id":"20250501_usv1rjrp4en7cqt42f7qsle72c","status":"confirmed","summary":"May Day","region":"Mozambique","date":"2025-05-01"},{"id":"20250625_htoron9ij711lp5eh12iqqpkts","status":"confirmed","summary":"Independence Day","region":"Mozambique","date":"2025-06-25"},{"id":"20250907_u38h0g8c60opm7mth1kvp5l624","status":"confirmed","summary":"Victory Day","region":"Mozambique","date":"2025-09-07"},{"id":"20250908_iqtigtsjmenmbigm7nsuis5bps","status":"confirmed","summary":"Victory Day observed","region":"Mozambique","date":"2025-09-08"},{"id":"20250925_3kgobe64njmo2ebet8vlqa3ncs","status":"confirmed","summary":"Armed Forces Day","region":"Mozambique","date":"2025-09-25"},{"id":"20251004_8ooe23h2vlfbn9vnkoeli4p5c0","status":"confirmed","summary":"Peace and Reconciliation Day","region":"Mozambique","date":"2025-10-04"},{"id":"20251225_hmc3m0u4ddq1int8mpa2h7pldo","status":"confirmed","summary":"Family Day","region":"Mozambique","date":"2025-12-25"}],"Namibia":[{"id":"20240101_bu9tn642okthid4d3a5otn6qvg","status":"confirmed","summary":"New Year","region":"Namibia","date":"2024-01-01"},{"id":"20240225_83gg416lb19sg7m63kuinabc9k","status":"confirmed","summary":"Mourning Day for President Hage Geingob","region":"Namibia","date":"2024-02-25"},{"id":"20240226_ohpeua27oldjsmv0hd4vdienfg","status":"confirmed","summary":"Mourning Day for President Hage Geingob observed","region":"Namibia","date":"2024-02-26"},{"id":"20240321_pokj3n6mien87lsik7q8n56atg","status":"confirmed","summary":"Independence Day","region":"Namibia","date":"2024-03-21"},{"id":"20240329_clkfdlac021tgqt2m379jcl4r8","status":"confirmed","summary":"Good Friday","region":"Namibia","date":"2024-03-29"},{"id":"20240331_rapl1ututvcbnmfpu9kn3tpmcs","status":"confirmed","summary":"Easter Sunday","region":"Namibia","date":"2024-03-31"},{"id":"20240401_h13cbn50aslfa59p7drscp6ce4","status":"confirmed","summary":"Easter Monday","region":"Namibia","date":"2024-04-01"},{"id":"20240501_tgq7rjqv80v0t1a13ci4rlbr28","status":"confirmed","summary":"Workers\' Day","region":"Namibia","date":"2024-05-01"},{"id":"20240504_i4th6a7dj9e8v0lsgvv6rovt94","status":"confirmed","summary":"Cassinga Day","region":"Namibia","date":"2024-05-04"},{"id":"20240509_johel6scrs49avk0nq566q5fa0","status":"confirmed","summary":"Ascension Day","region":"Namibia","date":"2024-05-09"},{"id":"20240525_hvedkilf41s42ags5fpqm9qg0o","status":"confirmed","summary":"Africa Day","region":"Namibia","date":"2024-05-25"},{"id":"20240826_r8fo583o78tpeei581bnab2no4","status":"confirmed","summary":"Heroes\' Day","region":"Namibia","date":"2024-08-26"},{"id":"20241210_unbnrstjo12utrqk9ckuqp7its","status":"confirmed","summary":"Day of the Namibian Women and International Human Rights Day","region":"Namibia","date":"2024-12-10"},{"id":"20241225_h8rpghnhrorie8oj4met4at4bs","status":"confirmed","summary":"Christmas Day","region":"Namibia","date":"2024-12-25"},{"id":"20241226_mg6nbk5s3026k0b6oph9u5s15c","status":"confirmed","summary":"Family Day","region":"Namibia","date":"2024-12-26"},{"id":"20250101_aop715l6lee62svanl64kf5i0c","status":"confirmed","summary":"New Year","region":"Namibia","date":"2025-01-01"},{"id":"20250321_msbt97k76724c5qct4i7pmhdo4","status":"confirmed","summary":"Independence Day","region":"Namibia","date":"2025-03-21"},{"id":"20250418_rbrkl747vcpli2t4ks0vmsc5cs","status":"confirmed","summary":"Good Friday","region":"Namibia","date":"2025-04-18"},{"id":"20250420_2pi7snarn6fu04nirf8pegogq0","status":"confirmed","summary":"Easter Sunday","region":"Namibia","date":"2025-04-20"},{"id":"20250421_l5hch20aoc56tp2iaen4rfrekk","status":"confirmed","summary":"Easter Monday","region":"Namibia","date":"2025-04-21"},{"id":"20250501_j6hqjfff6nenmabisu7q20taqs","status":"confirmed","summary":"Workers\' Day","region":"Namibia","date":"2025-05-01"},{"id":"20250504_dmok4548maj71022gbgajhq4fk","status":"confirmed","summary":"Cassinga Day","region":"Namibia","date":"2025-05-04"},{"id":"20250505_ahaflf3ks9hapra6n9bs1oqd2s","status":"confirmed","summary":"Cassinga Day observed","region":"Namibia","date":"2025-05-05"},{"id":"20250525_r3bqr15u9hlgjlta20d8olo74k","status":"confirmed","summary":"Africa Day","region":"Namibia","date":"2025-05-25"},{"id":"20250526_945rg99c4qsins2ib2j15qeqmk","status":"confirmed","summary":"Africa Day observed","region":"Namibia","date":"2025-05-26"},{"id":"20250529_k4ma6s4t3hequmcid09iaekbmo","status":"confirmed","summary":"Ascension Day","region":"Namibia","date":"2025-05-29"},{"id":"20250826_2eglp7uitt09lf553ufqucbce8","status":"confirmed","summary":"Heroes\' Day","region":"Namibia","date":"2025-08-26"},{"id":"20251210_suveod7l2t7h66r7nt3q61l8k8","status":"confirmed","summary":"Day of the Namibian Women and International Human Rights Day","region":"Namibia","date":"2025-12-10"},{"id":"20251225_b1ldgfaarc8k92emhmt73ha4gc","status":"confirmed","summary":"Christmas Day","region":"Namibia","date":"2025-12-25"},{"id":"20251226_lq4upakog2bscqnretie3uvgts","status":"confirmed","summary":"Family Day","region":"Namibia","date":"2025-12-26"}],"New Caledonia":[{"id":"20240101_2778ot0llgj565l7m790bfukks","status":"confirmed","summary":"New Year\'s Day","region":"New Caledonia","date":"2024-01-01"},{"id":"20240329_7f3poksctlpd2688ufd8p5ml0c","status":"confirmed","summary":"Good Friday","region":"New Caledonia","date":"2024-03-29"},{"id":"20240331_2jib1ogffrf9rhfei5f1t0682o","status":"confirmed","summary":"Easter Sunday","region":"New Caledonia","date":"2024-03-31"},{"id":"20240401_fchod90em8glhulk9v8na1nt7o","status":"confirmed","summary":"Easter Monday","region":"New Caledonia","date":"2024-04-01"},{"id":"20240501_8rfl9a5anh14t75rfl5q3jav9o","status":"confirmed","summary":"Labor Day / May Day","region":"New Caledonia","date":"2024-05-01"},{"id":"20240508_m9f125hdub8fpuarftq6k8gtuk","status":"confirmed","summary":"Victory Day","region":"New Caledonia","date":"2024-05-08"},{"id":"20240509_h0fosbg85evs74ba84t34e2pmk","status":"confirmed","summary":"Ascension Day","region":"New Caledonia","date":"2024-05-09"},{"id":"20240519_45nrf5dhjpgdhcb6s2vign77do","status":"confirmed","summary":"Whit Sunday","region":"New Caledonia","date":"2024-05-19"},{"id":"20240520_h1kc7oat8o40nd7mqhm9au7cg4","status":"confirmed","summary":"Whit Monday","region":"New Caledonia","date":"2024-05-20"},{"id":"20240714_m20e55o9b43cp4f6vlhs9notas","status":"confirmed","summary":"French National Day","region":"New Caledonia","date":"2024-07-14"},{"id":"20240815_ifirm8i0go8qj8kor87hi1clqo","status":"confirmed","summary":"Assumption of Mary","region":"New Caledonia","date":"2024-08-15"},{"id":"20240924_cnv3ooehidnagenljmum44347c","status":"confirmed","summary":"New Caledonia Day","region":"New Caledonia","date":"2024-09-24"},{"id":"20241101_g7nflhfnb7ttjorke4tun6l9b0","status":"confirmed","summary":"All Saints\' Day","region":"New Caledonia","date":"2024-11-01"},{"id":"20241111_l11lf41ml4rfk8akpu21tpp0i0","status":"confirmed","summary":"Armistice Day","region":"New Caledonia","date":"2024-11-11"},{"id":"20241225_349fq1aa59b4f7lohjfdck6ug8","status":"confirmed","summary":"Christmas Day","region":"New Caledonia","date":"2024-12-25"},{"id":"20241231_aabqdst287r7acriuhk7bqavuc","status":"confirmed","summary":"New Year\'s Eve","region":"New Caledonia","date":"2024-12-31"},{"id":"20250101_m5aiep00i8jupp8ob2n2jv421o","status":"confirmed","summary":"New Year\'s Day","region":"New Caledonia","date":"2025-01-01"},{"id":"20250418_kree6rvn6e7g05r7op876vbhc0","status":"confirmed","summary":"Good Friday","region":"New Caledonia","date":"2025-04-18"},{"id":"20250420_h550majs19m92acoft1qehcqag","status":"confirmed","summary":"Easter Sunday","region":"New Caledonia","date":"2025-04-20"},{"id":"20250421_k3hn6t9r2dqne1cmfh1v6n4r3k","status":"confirmed","summary":"Easter Monday","region":"New Caledonia","date":"2025-04-21"},{"id":"20250501_hrabn0vm660rcrnaj8rhsrmqmc","status":"confirmed","summary":"Labor Day / May Day","region":"New Caledonia","date":"2025-05-01"},{"id":"20250508_nr1s6dkhlj3u58can6r3k97ufk","status":"confirmed","summary":"Victory Day","region":"New Caledonia","date":"2025-05-08"},{"id":"20250529_k31m5f2ad42d6ihat5t9s8od50","status":"confirmed","summary":"Ascension Day","region":"New Caledonia","date":"2025-05-29"},{"id":"20250608_spgnf09ue288l3gfsh1da3eiuo","status":"confirmed","summary":"Whit Sunday","region":"New Caledonia","date":"2025-06-08"},{"id":"20250609_7h8v2bqjckeol6t9q03pgbmqv4","status":"confirmed","summary":"Whit Monday","region":"New Caledonia","date":"2025-06-09"},{"id":"20250714_ip9bch6lte83mb6s0441f9au10","status":"confirmed","summary":"French National Day","region":"New Caledonia","date":"2025-07-14"},{"id":"20250815_f7e7661sa6g2083abkerft1k0o","status":"confirmed","summary":"Assumption of Mary","region":"New Caledonia","date":"2025-08-15"},{"id":"20250924_vi2g6am3g28qvt9bvn5b2e5cp0","status":"confirmed","summary":"New Caledonia Day","region":"New Caledonia","date":"2025-09-24"},{"id":"20251101_afgf5bhl40eg8sdlvnfncdgmik","status":"confirmed","summary":"All Saints\' Day","region":"New Caledonia","date":"2025-11-01"},{"id":"20251111_jdobjmj82kfmq0lffbrld1t3gs","status":"confirmed","summary":"Armistice Day","region":"New Caledonia","date":"2025-11-11"},{"id":"20251225_dijm1qmrpbsklfmijkbe67m9vc","status":"confirmed","summary":"Christmas Day","region":"New Caledonia","date":"2025-12-25"},{"id":"20251231_e5u1anv760phsecutlbq5vcc1c","status":"confirmed","summary":"New Year\'s Eve","region":"New Caledonia","date":"2025-12-31"}],"Niger":[{"id":"20240101_6ttgop48a70bbc058022jg2qko","status":"confirmed","summary":"New Year","region":"Niger","date":"2024-01-01"},{"id":"20240311_34pqqbutrgea1fsnssq0uqp3ng","status":"confirmed","summary":"Ramadan Start","region":"Niger","date":"2024-03-11"},{"id":"20240401_209vr7j5l4rlf8p4r3tc55q9pc","status":"confirmed","summary":"Easter Monday","region":"Niger","date":"2024-04-01"},{"id":"20240406_vle837ih8iejtcfqc136q0rvtk","status":"confirmed","summary":"Lailat al-Qadr","region":"Niger","date":"2024-04-06"},{"id":"20240409_2nnt146v0u8e4kukvh8bp0h2h0","status":"confirmed","summary":"Eid al-Fitr","region":"Niger","date":"2024-04-09"},{"id":"20240424_u8atq4hk4qkhcqtugde38sue74","status":"confirmed","summary":"Concord Day","region":"Niger","date":"2024-04-24"},{"id":"20240501_1rg9dskplstqpco67kq1a9mbms","status":"confirmed","summary":"Labour Day","region":"Niger","date":"2024-05-01"},{"id":"20240616_p5dvi5jdnllmbdps209jdi0cas","status":"confirmed","summary":"Father\'s Day","region":"Niger","date":"2024-06-16"},{"id":"20240617_m98kgjvtgt9mqv9thv2psn8mu0","status":"confirmed","summary":"Eid al-Adha","region":"Niger","date":"2024-06-17"},{"id":"20240618_b47umvd45efo795o5cquvu1aa4","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Niger","date":"2024-06-18"},{"id":"20240708_bgm7tj5kssmruvma6sllu0sau8","status":"confirmed","summary":"Muharram","region":"Niger","date":"2024-07-08"},{"id":"20240803_uiaqq4duv9p4f7l3kr61jqgens","status":"confirmed","summary":"Nigerien Independence Day","region":"Niger","date":"2024-08-03"},{"id":"20240916_g7s255k8cejn3nirmmkq8toalk","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Niger","date":"2024-09-16"},{"id":"20241218_9bl17misduntv2h4oae4rc8av0","status":"confirmed","summary":"Nigerien Republic Day","region":"Niger","date":"2024-12-18"},{"id":"20241225_a8610vt4qa37nbl4p20l8om19c","status":"confirmed","summary":"Christmas Day","region":"Niger","date":"2024-12-25"},{"id":"20250101_hqc0c2i3m2gooc4pb63si1bthc","status":"confirmed","summary":"New Year","region":"Niger","date":"2025-01-01"},{"id":"20250301_ng3oksiniesv5dshdlhqkmvb3k","status":"confirmed","summary":"Ramadan Start","region":"Niger","date":"2025-03-01"},{"id":"20250327_qctfsun9vnsvo8b31j8uc3m860","status":"confirmed","summary":"Lailat al-Qadr","region":"Niger","date":"2025-03-27"},{"id":"20250331_uqr515vaae2jkmqlt150jss278","status":"confirmed","summary":"Eid al-Fitr","region":"Niger","date":"2025-03-31"},{"id":"20250421_a90kh1qb46lpfevcvej1r0leuc","status":"confirmed","summary":"Easter Monday","region":"Niger","date":"2025-04-21"},{"id":"20250424_nk9sjbnf73650gok59adnp3944","status":"confirmed","summary":"Concord Day","region":"Niger","date":"2025-04-24"},{"id":"20250501_mgii40upme2i98bilfen7h5ajk","status":"confirmed","summary":"Labour Day","region":"Niger","date":"2025-05-01"},{"id":"20250607_ko15ato22i4mq7htlrhn57m1fs","status":"confirmed","summary":"Eid al-Adha","region":"Niger","date":"2025-06-07"},{"id":"20250608_0jdlh91okoqjd4sldaci0pkdl4","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Niger","date":"2025-06-08"},{"id":"20250615_a6b517infoj7gneo53ol9anj20","status":"confirmed","summary":"Father\'s Day","region":"Niger","date":"2025-06-15"},{"id":"20250627_0sq7nscbuo2t8j40l04l0lrbps","status":"confirmed","summary":"Muharram","region":"Niger","date":"2025-06-27"},{"id":"20250803_onh30rqhnijv7dogm6vbfdic8c","status":"confirmed","summary":"Nigerien Independence Day","region":"Niger","date":"2025-08-03"},{"id":"20250905_b48llvib44a2575dav69iav868","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Niger","date":"2025-09-05"},{"id":"20251218_uiqkdc4q9hq81btlt0dmp7p3s8","status":"confirmed","summary":"Nigerien Republic Day","region":"Niger","date":"2025-12-18"},{"id":"20251225_9fvhpsni1v6id5u8vgrc0u0bao","status":"confirmed","summary":"Christmas Day","region":"Niger","date":"2025-12-25"}],"New Zealand":[{"id":"20240101_gvdv6fbpoprbcjnh5bsbsojpjc","status":"confirmed","summary":"New Year\'s Day","region":"New Zealand","date":"2024-01-01"},{"id":"20240102_0pgkmgk4f4flgvqfbqgdmavmlk","status":"confirmed","summary":"Day after New Year\'s Day","region":"New Zealand","date":"2024-01-02"},{"id":"20240122_1tni2bel4bmsh5f1e4oai6r6o8","status":"confirmed","summary":"Wellington Anniversary Day (regional holiday)","region":"New Zealand","date":"2024-01-22"},{"id":"20240129_4eva8ecm4lqpj90rhsos1ausvc","status":"confirmed","summary":"Northland Anniversary Day (Northland)","region":"New Zealand","date":"2024-01-29"},{"id":"20240129_cj55td6qb10h9s0l3k8o09oia0","status":"confirmed","summary":"Auckland Anniversary Day (regional holiday)","region":"New Zealand","date":"2024-01-29"},{"id":"20240129_dlp9lmepm0abc22vpubpu33734","status":"confirmed","summary":"Nelson Anniversary Day (regional holiday)","region":"New Zealand","date":"2024-01-29"},{"id":"20240206_mluurdbpvaccrdaoq7l0cuc2lo","status":"confirmed","summary":"Waitangi Day","region":"New Zealand","date":"2024-02-06"},{"id":"20240214_87738hgarlim51rb6ag4ooav84","status":"confirmed","summary":"Valentine\'s Day","region":"New Zealand","date":"2024-02-14"},{"id":"20240311_0u9bpulbsvhrcujgef5mo11j18","status":"confirmed","summary":"Taranaki Anniversary Day (Taranaki)","region":"New Zealand","date":"2024-03-11"},{"id":"20240325_553k13h0vu65n1ja9c4357l9as","status":"confirmed","summary":"Otago Anniversary Day (Otago)","region":"New Zealand","date":"2024-03-25"},{"id":"20240329_i29962jdsveopvdkolr106m4n8","status":"confirmed","summary":"Good Friday","region":"New Zealand","date":"2024-03-29"},{"id":"20240330_vlvfurnvf9ujhm58nnan5g15j0","status":"confirmed","summary":"Holy Saturday","region":"New Zealand","date":"2024-03-30"},{"id":"20240331_hpvufod1530u0s2bhfehcj0d40","status":"confirmed","summary":"Easter Sunday","region":"New Zealand","date":"2024-03-31"},{"id":"20240401_j9oojji95j1el1ot3bel4m812o","status":"confirmed","summary":"April Fools","region":"New Zealand","date":"2024-04-01"},{"id":"20240401_khk0o23ce3ugvhgq6848jpner8","status":"confirmed","summary":"Easter Monday","region":"New Zealand","date":"2024-04-01"},{"id":"20240402_p8inlvbggjmiuhn7hko4ivh4cc","status":"confirmed","summary":"Southland Anniversary Day (Southland)","region":"New Zealand","date":"2024-04-02"},{"id":"20240425_kvid833r1ucifm3jlu0j5ftfo4","status":"confirmed","summary":"ANZAC Day","region":"New Zealand","date":"2024-04-25"},{"id":"20240512_45rhmjci5ejhndggdlf4n189e4","status":"confirmed","summary":"Mother\'s Day","region":"New Zealand","date":"2024-05-12"},{"id":"20240603_tht7go2s84js49kpfnjetdmo4c","status":"confirmed","summary":"King\'s Birthday","region":"New Zealand","date":"2024-06-03"},{"id":"20240628_s2bfitmc8c1ua07l6fd9qor4j0","status":"confirmed","summary":"Matariki","region":"New Zealand","date":"2024-06-28"},{"id":"20240901_7s9doavdkj902d2tjgar9cb8j4","status":"confirmed","summary":"Fathers\' Day","region":"New Zealand","date":"2024-09-01"},{"id":"20240923_p1pv2a9otu8rt2d8e5vctja5t8","status":"confirmed","summary":"South Canterbury Anniversary Day (Canterbury)","region":"New Zealand","date":"2024-09-23"},{"id":"20241025_nd5ltpinruk5baj4uehoua6gio","status":"confirmed","summary":"Hawke\'s Bay Anniversary Day (Hawke\'s Bay)","region":"New Zealand","date":"2024-10-25"},{"id":"20241028_2h2bqpto6c7g2aevokmmd36icc","status":"confirmed","summary":"Labour Day","region":"New Zealand","date":"2024-10-28"},{"id":"20241104_eirvdrqggbjtlqbuf4sg78jj8g","status":"confirmed","summary":"Marlborough Anniversary Day (Marlborough)","region":"New Zealand","date":"2024-11-04"},{"id":"20241105_0fuesju64942nph1ac8vqm92rs","status":"confirmed","summary":"Guy Fawkes Night","region":"New Zealand","date":"2024-11-05"},{"id":"20241115_i6md6cga7tmqm5hi0e22saqju8","status":"confirmed","summary":"Canterbury Anniversary Day (Canterbury)","region":"New Zealand","date":"2024-11-15"},{"id":"20241202_5n2aj7i2mqhapethj2dllvedd8","status":"confirmed","summary":"Chatham Islands Anniversary Day (Chatham Islands)","region":"New Zealand","date":"2024-12-02"},{"id":"20241202_97oa6ql8s6jdutid98p7nh284g","status":"confirmed","summary":"Westland Anniversary Day (West Coast)","region":"New Zealand","date":"2024-12-02"},{"id":"20241224_luv3hms49r4mo5r5nt8qtk28io","status":"confirmed","summary":"Christmas Eve","region":"New Zealand","date":"2024-12-24"},{"id":"20241225_p14l9gpaf44g92iqg59v3djlgo","status":"confirmed","summary":"Christmas Day","region":"New Zealand","date":"2024-12-25"},{"id":"20241226_gi3ormmfc1s6qqav040pujcsoo","status":"confirmed","summary":"Boxing Day","region":"New Zealand","date":"2024-12-26"},{"id":"20241231_laoesrj9kbg1f3invaicuohaec","status":"confirmed","summary":"New Year\'s Eve","region":"New Zealand","date":"2024-12-31"},{"id":"20250101_32s0m7c57858omcdvb47fc5hgo","status":"confirmed","summary":"New Year\'s Day","region":"New Zealand","date":"2025-01-01"},{"id":"20250102_qvco374n8iiqdlmjn2hpqu1slg","status":"confirmed","summary":"Day after New Year\'s Day","region":"New Zealand","date":"2025-01-02"},{"id":"20250120_4mtlju7kni2jsttisnjs0r16dg","status":"confirmed","summary":"Wellington Anniversary Day (regional holiday)","region":"New Zealand","date":"2025-01-20"},{"id":"20250127_4maceueecl0ahulofiu4id2qug","status":"confirmed","summary":"Auckland Anniversary Day (regional holiday)","region":"New Zealand","date":"2025-01-27"},{"id":"20250127_m9lume2i8p0s3vi8dbc0kf81a0","status":"confirmed","summary":"Northland Anniversary Day (Northland)","region":"New Zealand","date":"2025-01-27"},{"id":"20250203_q8qqll5hrta5hk1hma54nr40bg","status":"confirmed","summary":"Nelson Anniversary Day (regional holiday)","region":"New Zealand","date":"2025-02-03"},{"id":"20250206_pr8csacmssloimq8h4jh3nlm5g","status":"confirmed","summary":"Waitangi Day","region":"New Zealand","date":"2025-02-06"},{"id":"20250214_le49qqg207d4cc2l3nlr2rokq4","status":"confirmed","summary":"Valentine\'s Day","region":"New Zealand","date":"2025-02-14"},{"id":"20250310_c273a8precc78j1ui3k5h0upns","status":"confirmed","summary":"Taranaki Anniversary Day (Taranaki)","region":"New Zealand","date":"2025-03-10"},{"id":"20250324_sec94cch52qkuil9vfifo07ggc","status":"confirmed","summary":"Otago Anniversary Day (Otago)","region":"New Zealand","date":"2025-03-24"},{"id":"20250401_1066jksbmgbukn8m1fsq0lchg0","status":"confirmed","summary":"April Fools","region":"New Zealand","date":"2025-04-01"},{"id":"20250418_paadfao1fg2in6c7o4gs9p7cjc","status":"confirmed","summary":"Good Friday","region":"New Zealand","date":"2025-04-18"},{"id":"20250419_rtpi717lffedfeb5sc3e4lcbio","status":"confirmed","summary":"Holy Saturday","region":"New Zealand","date":"2025-04-19"},{"id":"20250420_r5p87lfvjegfl6qas0bhat2hbg","status":"confirmed","summary":"Easter Sunday","region":"New Zealand","date":"2025-04-20"},{"id":"20250421_skpbbud10vijb408ro4s1fdhs8","status":"confirmed","summary":"Easter Monday","region":"New Zealand","date":"2025-04-21"},{"id":"20250422_pgor7qeu076r16n2nvr5s9nl40","status":"confirmed","summary":"Southland Anniversary Day (Southland)","region":"New Zealand","date":"2025-04-22"},{"id":"20250425_5h3br0vkkb64r13e6j1jin55f0","status":"confirmed","summary":"ANZAC Day","region":"New Zealand","date":"2025-04-25"},{"id":"20250511_tt1gtb81al7qfbfu6ifabar5b8","status":"confirmed","summary":"Mother\'s Day","region":"New Zealand","date":"2025-05-11"},{"id":"20250602_r9lj56u23gdplm8qcq8asqmtu0","status":"confirmed","summary":"King\'s Birthday","region":"New Zealand","date":"2025-06-02"},{"id":"20250620_803mjv0mu0v027cik90mnsoiac","status":"confirmed","summary":"Matariki","region":"New Zealand","date":"2025-06-20"},{"id":"20250907_fvmn0or9gge16fe868vhbbjvqs","status":"confirmed","summary":"Fathers\' Day","region":"New Zealand","date":"2025-09-07"},{"id":"20250922_hkb1tkh5qe4fd2vueegkr4sk3s","status":"confirmed","summary":"South Canterbury Anniversary Day (Canterbury)","region":"New Zealand","date":"2025-09-22"},{"id":"20251024_j22glg0a9rsblq61acbdaagn18","status":"confirmed","summary":"Hawke\'s Bay Anniversary Day (Hawke\'s Bay)","region":"New Zealand","date":"2025-10-24"},{"id":"20251027_etcjdmmn32rqipca6qfl7jltgo","status":"confirmed","summary":"Labour Day","region":"New Zealand","date":"2025-10-27"},{"id":"20251103_svd16i00nbk1ocrggvoteofims","status":"confirmed","summary":"Marlborough Anniversary Day (Marlborough)","region":"New Zealand","date":"2025-11-03"},{"id":"20251105_5260hrrku3uelip05l23pjsk2k","status":"confirmed","summary":"Guy Fawkes Night","region":"New Zealand","date":"2025-11-05"},{"id":"20251114_2634qptuhefe6ifp5de3g2q1io","status":"confirmed","summary":"Canterbury Anniversary Day (Canterbury)","region":"New Zealand","date":"2025-11-14"},{"id":"20251201_5dk6usuhjhb2i9vcgjt7n1pr08","status":"confirmed","summary":"Westland Anniversary Day (West Coast)","region":"New Zealand","date":"2025-12-01"},{"id":"20251201_fsjnge3pvqjvg5m5ulnq8vhsd8","status":"confirmed","summary":"Chatham Islands Anniversary Day (Chatham Islands)","region":"New Zealand","date":"2025-12-01"},{"id":"20251224_25hm7ltgan37htab1q6n6p27m0","status":"confirmed","summary":"Christmas Eve","region":"New Zealand","date":"2025-12-24"},{"id":"20251225_4v1rpqu2p0tjdl481abe1n4jfk","status":"confirmed","summary":"Christmas Day","region":"New Zealand","date":"2025-12-25"},{"id":"20251226_mvihvrkd7ikt12auebnkv4kgg0","status":"confirmed","summary":"Boxing Day","region":"New Zealand","date":"2025-12-26"},{"id":"20251231_r0kohccmeu3pk5ljfdkvpn8ec0","status":"confirmed","summary":"New Year\'s Eve","region":"New Zealand","date":"2025-12-31"}],"Nigeria":[{"id":"20240101_u3rtk5on3jdkcgfg7cu81616oc","status":"confirmed","summary":"New Year\'s Day","region":"Nigeria","date":"2024-01-01"},{"id":"20240214_710qh8i0ch7fcf0enbvan7uk88","status":"confirmed","summary":"Ash Wednesday","region":"Nigeria","date":"2024-02-14"},{"id":"20240214_k20es7kd43t9s9oc0g2iktino4","status":"confirmed","summary":"Valentine\'s Day","region":"Nigeria","date":"2024-02-14"},{"id":"20240308_rjd292fm0n9j1b1i1eo7h3eld0","status":"confirmed","summary":"Women\'s Day","region":"Nigeria","date":"2024-03-08"},{"id":"20240310_7ctskgfvpc2k8evm7saukkt7no","status":"confirmed","summary":"Mothering Sunday","region":"Nigeria","date":"2024-03-10"},{"id":"20240311_2p5a5nup36ks83aqu7geob60ug","status":"confirmed","summary":"Ramadan Start","region":"Nigeria","date":"2024-03-11"},{"id":"20240329_tbqo7rij7h0pbg6igik3huqb6g","status":"confirmed","summary":"Good Friday","region":"Nigeria","date":"2024-03-29"},{"id":"20240330_ubit5uuuts8so0t56c0vemc32o","status":"confirmed","summary":"Holy Saturday","region":"Nigeria","date":"2024-03-30"},{"id":"20240331_1dkqcb6omb0kjgf6o2nl120s80","status":"confirmed","summary":"Easter Sunday","region":"Nigeria","date":"2024-03-31"},{"id":"20240401_23qtqrp18om6jnvqk9ppllovvc","status":"confirmed","summary":"Easter Monday","region":"Nigeria","date":"2024-04-01"},{"id":"20240410_43g3h4hs8cmnn6eluac6fb4nmc","status":"confirmed","summary":"Id el Fitr","region":"Nigeria","date":"2024-04-10"},{"id":"20240411_0hum2cqb62eu734fn0cnj05hj0","status":"confirmed","summary":"Id el Fitr holiday","region":"Nigeria","date":"2024-04-11"},{"id":"20240501_6b9nn577cevo21kjslnrhruor4","status":"confirmed","summary":"Workers\' Day","region":"Nigeria","date":"2024-05-01"},{"id":"20240527_prl1d2k3c870gmcvim6lh0m9bs","status":"confirmed","summary":"Children\'s Day","region":"Nigeria","date":"2024-05-27"},{"id":"20240612_e6u13760jt4c0kfuifakh5n950","status":"confirmed","summary":"Democracy Day","region":"Nigeria","date":"2024-06-12"},{"id":"20240616_1u50stjc083as433c9ip600be0","status":"confirmed","summary":"Father\'s Day","region":"Nigeria","date":"2024-06-16"},{"id":"20240617_cqljssp5m0rv6ekg82rgfmh2ko","status":"confirmed","summary":"Id el Kabir","region":"Nigeria","date":"2024-06-17"},{"id":"20240618_2qi33mc02lburaap6ravdbmtak","status":"confirmed","summary":"Id el Kabir additional holiday","region":"Nigeria","date":"2024-06-18"},{"id":"20240916_cp101a9r4autmcd43o2kk2k1es","status":"confirmed","summary":"Id el Maulud","region":"Nigeria","date":"2024-09-16"},{"id":"20241001_j04rp8covpe3pi56pdr9uch0n8","status":"confirmed","summary":"National Day","region":"Nigeria","date":"2024-10-01"},{"id":"20241224_b4qirt9gf090ihd3op5cvaemjc","status":"confirmed","summary":"Christmas Eve","region":"Nigeria","date":"2024-12-24"},{"id":"20241225_qmal17ooslmibeiof8kscvb57k","status":"confirmed","summary":"Christmas Day","region":"Nigeria","date":"2024-12-25"},{"id":"20241226_mdj0pr2l9frli8tu3tdau7bfo4","status":"confirmed","summary":"Boxing Day","region":"Nigeria","date":"2024-12-26"},{"id":"20241231_e25rfmv105aeaeru2agorboses","status":"confirmed","summary":"New Year\'s Eve","region":"Nigeria","date":"2024-12-31"},{"id":"20250101_q01c6bidealhqmdvd0j7t5bj5c","status":"confirmed","summary":"New Year\'s Day","region":"Nigeria","date":"2025-01-01"},{"id":"20250214_ejpsjl9a1lkj9k8knjq7ma98p4","status":"confirmed","summary":"Valentine\'s Day","region":"Nigeria","date":"2025-02-14"},{"id":"20250301_pgrsfajjts0q1h0apj73ghpen0","status":"confirmed","summary":"Ramadan Start","region":"Nigeria","date":"2025-03-01"},{"id":"20250305_7otudsqq8tn4secfk588lfdt88","status":"confirmed","summary":"Ash Wednesday","region":"Nigeria","date":"2025-03-05"},{"id":"20250308_1dm9mt3dm5vvhjarjl00fllaic","status":"confirmed","summary":"Women\'s Day","region":"Nigeria","date":"2025-03-08"},{"id":"20250330_jpummg40nojo99o1pov9mjhkss","status":"confirmed","summary":"Mothering Sunday","region":"Nigeria","date":"2025-03-30"},{"id":"20250331_cre1m3g6a96ml9lk4v7hkg5v38","status":"confirmed","summary":"Id el Fitr","region":"Nigeria","date":"2025-03-31"},{"id":"20250401_h2p94j7nk4muj6t6sm7atckob4","status":"confirmed","summary":"Id el Fitr holiday","region":"Nigeria","date":"2025-04-01"},{"id":"20250418_tjcr69fts25iq4s42g6tknlluk","status":"confirmed","summary":"Good Friday","region":"Nigeria","date":"2025-04-18"},{"id":"20250419_dmdaqoeegpu1sjum7qn3m7f72o","status":"confirmed","summary":"Holy Saturday","region":"Nigeria","date":"2025-04-19"},{"id":"20250420_ef21r364798sdpkr4nu0mnptr4","status":"confirmed","summary":"Easter Sunday","region":"Nigeria","date":"2025-04-20"},{"id":"20250421_6ovkr1dbgk94fno6gjq6kttig8","status":"confirmed","summary":"Easter Monday","region":"Nigeria","date":"2025-04-21"},{"id":"20250501_5c31ecj8dpthrf41fq61eo0pr8","status":"confirmed","summary":"Workers\' Day","region":"Nigeria","date":"2025-05-01"},{"id":"20250527_ilm14jbvfc57g7k9lmt9ro0b44","status":"confirmed","summary":"Children\'s Day","region":"Nigeria","date":"2025-05-27"},{"id":"20250607_585jprkje530j92cb8bon96hek","status":"confirmed","summary":"Id el Kabir","region":"Nigeria","date":"2025-06-07"},{"id":"20250608_92mn4tnk98oqq2158na3omn408","status":"confirmed","summary":"Id el Kabir additional holiday","region":"Nigeria","date":"2025-06-08"},{"id":"20250612_inge74l3966iev08u66kflf0h8","status":"confirmed","summary":"Democracy Day","region":"Nigeria","date":"2025-06-12"},{"id":"20250615_deetjl6ldtiao0f5sekotsgluk","status":"confirmed","summary":"Father\'s Day","region":"Nigeria","date":"2025-06-15"},{"id":"20250905_cd9i8904egactlgmugbmd4mn0k","status":"confirmed","summary":"Id el Maulud","region":"Nigeria","date":"2025-09-05"},{"id":"20251001_h44bjaip2jtvu0udmivqr3pqpc","status":"confirmed","summary":"National Day","region":"Nigeria","date":"2025-10-01"},{"id":"20251224_coie09cbmb1hqn4o6r4hgfd0s0","status":"confirmed","summary":"Christmas Eve","region":"Nigeria","date":"2025-12-24"},{"id":"20251225_aei4fgecp3lvb3r070ftvbm9u0","status":"confirmed","summary":"Christmas Day","region":"Nigeria","date":"2025-12-25"},{"id":"20251226_8tu7cc0cmnlab3r4bqvnsnarvg","status":"confirmed","summary":"Boxing Day","region":"Nigeria","date":"2025-12-26"},{"id":"20251231_fmmqgkkej67fpnmhonqgs6f0h8","status":"confirmed","summary":"New Year\'s Eve","region":"Nigeria","date":"2025-12-31"}],"Nicaragua":[{"id":"20240101_38lmk9ipnfmijq1a0p8tsngovk","status":"confirmed","summary":"New Year\'s Day","region":"Nicaragua","date":"2024-01-01"},{"id":"20240214_ccvecn4u6b5d6pb50rqoeiousk","status":"confirmed","summary":"Day of Love and Friendship","region":"Nicaragua","date":"2024-02-14"},{"id":"20240328_k1n4lscm3s4ccfsiu284vv04f8","status":"confirmed","summary":"Maundy Thursday","region":"Nicaragua","date":"2024-03-28"},{"id":"20240329_2cpe014n2l9klcnsfi5cjla2uo","status":"confirmed","summary":"Good Friday","region":"Nicaragua","date":"2024-03-29"},{"id":"20240330_8ff2cen4m9ba6sj45lk2rdek7o","status":"confirmed","summary":"Holy Saturday","region":"Nicaragua","date":"2024-03-30"},{"id":"20240331_ihdkdl5ppvbp5gjm14ri1otf40","status":"confirmed","summary":"Easter Sunday","region":"Nicaragua","date":"2024-03-31"},{"id":"20240501_gpdenv3ndhpmu46452g6ibab20","status":"confirmed","summary":"Labor Day / May Day","region":"Nicaragua","date":"2024-05-01"},{"id":"20240530_u77mn6se90eirdmvgc12uu6c88","status":"confirmed","summary":"Mothers\' Day","region":"Nicaragua","date":"2024-05-30"},{"id":"20240719_f46i1kvg303td063hvrqbq701o","status":"confirmed","summary":"The Sandinista Revolution Day","region":"Nicaragua","date":"2024-07-19"},{"id":"20240902_udk925lk7kqgm73au39uubi9hg","status":"confirmed","summary":"Army Day","region":"Nicaragua","date":"2024-09-02"},{"id":"20240914_uj7li19qbiqgaegsu0hrfebq70","status":"confirmed","summary":"Battle of San Jacinto","region":"Nicaragua","date":"2024-09-14"},{"id":"20240915_400a3firml9qbivk5h8g2u6po4","status":"confirmed","summary":"Independence Day","region":"Nicaragua","date":"2024-09-15"},{"id":"20241012_desmuneg1iqgno7rli2e9ishj0","status":"confirmed","summary":"Indigenous Resistance Day","region":"Nicaragua","date":"2024-10-12"},{"id":"20241102_bb9k393q592j44ur9o6n5h6op8","status":"confirmed","summary":"All Souls\' Day","region":"Nicaragua","date":"2024-11-02"},{"id":"20241208_35jefqrmedjqangga6pko9dbok","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Nicaragua","date":"2024-12-08"},{"id":"20241225_vqo3io0dg9oc20afdf90s936r0","status":"confirmed","summary":"Christmas Day","region":"Nicaragua","date":"2024-12-25"},{"id":"20241231_hkq2b5fmcnnkatokcjrk91ja00","status":"confirmed","summary":"New Year´s Eve","region":"Nicaragua","date":"2024-12-31"},{"id":"20250101_rb8gb41b01pm91sjil70cbmq4g","status":"confirmed","summary":"New Year\'s Day","region":"Nicaragua","date":"2025-01-01"},{"id":"20250214_sts7om1bg9c0jcdjvh56ha5tpk","status":"confirmed","summary":"Day of Love and Friendship","region":"Nicaragua","date":"2025-02-14"},{"id":"20250417_ndi7qq0i1mj7ren4iqmd6oq050","status":"confirmed","summary":"Maundy Thursday","region":"Nicaragua","date":"2025-04-17"},{"id":"20250418_25nja6tg3500n2va8jplb8bo34","status":"confirmed","summary":"Good Friday","region":"Nicaragua","date":"2025-04-18"},{"id":"20250419_0lctr72ue69dlm5icc1sp9jpnc","status":"confirmed","summary":"Holy Saturday","region":"Nicaragua","date":"2025-04-19"},{"id":"20250420_54apd7fecfhmvbq05upc42fdoo","status":"confirmed","summary":"Easter Sunday","region":"Nicaragua","date":"2025-04-20"},{"id":"20250501_2kj7kh0r7s81id7r72ii6hd7jg","status":"confirmed","summary":"Labor Day / May Day","region":"Nicaragua","date":"2025-05-01"},{"id":"20250530_btnequ9hgpqjr4joj9pm11lf3s","status":"confirmed","summary":"Mothers\' Day","region":"Nicaragua","date":"2025-05-30"},{"id":"20250719_686cgl58tp87t6abt7vfofa5s4","status":"confirmed","summary":"The Sandinista Revolution Day","region":"Nicaragua","date":"2025-07-19"},{"id":"20250902_i2o42cca2oqlp6ovboke05ua7c","status":"confirmed","summary":"Army Day","region":"Nicaragua","date":"2025-09-02"},{"id":"20250914_ppi6f9baatvf14djlhjq57idg8","status":"confirmed","summary":"Battle of San Jacinto","region":"Nicaragua","date":"2025-09-14"},{"id":"20250915_17b1nmh7bsfclo6l9enf6go9d4","status":"confirmed","summary":"Independence Day","region":"Nicaragua","date":"2025-09-15"},{"id":"20251012_r9vortbuj60n64jkije01jodpk","status":"confirmed","summary":"Indigenous Resistance Day","region":"Nicaragua","date":"2025-10-12"},{"id":"20251102_rrgukiu606i4rlf2391jb6utmc","status":"confirmed","summary":"All Souls\' Day","region":"Nicaragua","date":"2025-11-02"},{"id":"20251208_9lig3vap3824e4d7dokaithuo4","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Nicaragua","date":"2025-12-08"},{"id":"20251225_79o4d3egn3lh3bvq6a3m65ild4","status":"confirmed","summary":"Christmas Day","region":"Nicaragua","date":"2025-12-25"},{"id":"20251231_amv4d4ur1j6ltfvtv6f0785pg4","status":"confirmed","summary":"New Year´s Eve","region":"Nicaragua","date":"2025-12-31"}],"Norway":[{"id":"20240101_8a75tftvqlpm7d4vckjsdd9cbo","status":"confirmed","summary":"New Year\'s Day","region":"Norway","date":"2024-01-01"},{"id":"20240121_qd35nuul8rtkhidooot18cncus","status":"confirmed","summary":"Princess Ingrid Alexandra\'s Day","region":"Norway","date":"2024-01-21"},{"id":"20240206_k025ca9idib7bifjnh4cqb7vi4","status":"confirmed","summary":"Saami National Day","region":"Norway","date":"2024-02-06"},{"id":"20240211_le356k8v5jfd26847ibln81i78","status":"confirmed","summary":"Carnival","region":"Norway","date":"2024-02-11"},{"id":"20240221_nvqjefmcj64615n3jbak4pk28g","status":"confirmed","summary":"King Harald V\'s Day","region":"Norway","date":"2024-02-21"},{"id":"20240324_hfgao03fvvrcgsg2946b0h223g","status":"confirmed","summary":"Palm Sunday","region":"Norway","date":"2024-03-24"},{"id":"20240328_rdvf4rb90328pg4g35q99ki5uk","status":"confirmed","summary":"Maundy Thursday","region":"Norway","date":"2024-03-28"},{"id":"20240329_50sbrtng6a8hcbabj4gnspcctg","status":"confirmed","summary":"Good Friday","region":"Norway","date":"2024-03-29"},{"id":"20240330_h11m3bo43cdheerqaljqsnqt3k","status":"confirmed","summary":"Holy Saturday","region":"Norway","date":"2024-03-30"},{"id":"20240331_bg2usrt3h2an9l84vulva3hs34","status":"confirmed","summary":"Daylight Saving Time starts","region":"Norway","date":"2024-03-31"},{"id":"20240331_jpfupoa1g73463uqjk3gp3gjsg","status":"confirmed","summary":"Easter Sunday","region":"Norway","date":"2024-03-31"},{"id":"20240401_kng1n73tmep4e2tscfpoi1idhs","status":"confirmed","summary":"Easter Monday","region":"Norway","date":"2024-04-01"},{"id":"20240501_imil3uor92kaef7p6atom0j4qs","status":"confirmed","summary":"Labor Day","region":"Norway","date":"2024-05-01"},{"id":"20240508_ct6sqnjvs04a7i95bep1rgl9l4","status":"confirmed","summary":"Day of Liberation","region":"Norway","date":"2024-05-08"},{"id":"20240509_35d3e5ibbcqtmctikgv27rplnk","status":"confirmed","summary":"Ascension Day","region":"Norway","date":"2024-05-09"},{"id":"20240517_btv6nfqvnaak92bstif088p6no","status":"confirmed","summary":"17 May Constitution Day (1814)","region":"Norway","date":"2024-05-17"},{"id":"20240518_v1k12u2679ili1tl66jbf9u3is","status":"confirmed","summary":"Whit Saturday","region":"Norway","date":"2024-05-18"},{"id":"20240519_im9gpq9jq64ltqrglvm3lh3qlk","status":"confirmed","summary":"Whit Sunday","region":"Norway","date":"2024-05-19"},{"id":"20240520_ivg30le6uoev60llu6fcme7uks","status":"confirmed","summary":"Whit Monday","region":"Norway","date":"2024-05-20"},{"id":"20240607_k4l08ga4gi45n18hpeaaj1c2gg","status":"confirmed","summary":"Dissolution of Union With Sweden (1905)","region":"Norway","date":"2024-06-07"},{"id":"20240704_9lgofk5pqbt79ko0lhf416qtu0","status":"confirmed","summary":"Queen Sonja\'s Day","region":"Norway","date":"2024-07-04"},{"id":"20240720_arbo450ritte5iivsni0p8s200","status":"confirmed","summary":"Crown Prince Haakon\'s Day","region":"Norway","date":"2024-07-20"},{"id":"20240729_mtqoloj5bfgmg9b0t1ebi8lgvs","status":"confirmed","summary":"St. Olaf\'s Day","region":"Norway","date":"2024-07-29"},{"id":"20240819_plt6lbdubbhd7hbpiffv1m5mqs","status":"confirmed","summary":"Crown Princess Mette-Marit\'s Day","region":"Norway","date":"2024-08-19"},{"id":"20241027_oqqok0ohkv41b43r39vhtl4j54","status":"confirmed","summary":"Daylight Saving Time ends","region":"Norway","date":"2024-10-27"},{"id":"20241027_s9inrpkq7eoco6nn7t6olqui2o","status":"confirmed","summary":"Repentance Day","region":"Norway","date":"2024-10-27"},{"id":"20241103_55va7o523c0pibleb7mrug5fak","status":"confirmed","summary":"All Saints\' Day","region":"Norway","date":"2024-11-03"},{"id":"20241201_mb6vdemr333firsjr1b1r5m3h0","status":"confirmed","summary":"First Advent Sunday","region":"Norway","date":"2024-12-01"},{"id":"20241208_81fem6logordvag9jot0e0chf0","status":"confirmed","summary":"Second Advent Sunday","region":"Norway","date":"2024-12-08"},{"id":"20241215_qv8v7occdtrq0bs8n7m6thdaqc","status":"confirmed","summary":"Third Advent Sunday","region":"Norway","date":"2024-12-15"},{"id":"20241222_opito0fisf99vcjv4c0qukks88","status":"confirmed","summary":"Fourth Advent Sunday","region":"Norway","date":"2024-12-22"},{"id":"20241224_rmmdi6sq1oe95iedjuvoensehk","status":"confirmed","summary":"Christmas Eve","region":"Norway","date":"2024-12-24"},{"id":"20241225_uqnct61lfjlibmmgso44sc6uds","status":"confirmed","summary":"Christmas Day","region":"Norway","date":"2024-12-25"},{"id":"20241226_2s9ngfnntkun3ha9l54sv0jhu0","status":"confirmed","summary":"Boxing Day","region":"Norway","date":"2024-12-26"},{"id":"20241231_csqqgc5r8ifgnoqso0dlvhq07s","status":"confirmed","summary":"New Year\'s Eve","region":"Norway","date":"2024-12-31"},{"id":"20250101_s6lkmaagvjkmacfup2et7d2q2o","status":"confirmed","summary":"New Year\'s Day","region":"Norway","date":"2025-01-01"},{"id":"20250121_ijltrp1vfd1e19lh6ik2i9ghp0","status":"confirmed","summary":"Princess Ingrid Alexandra\'s Day","region":"Norway","date":"2025-01-21"},{"id":"20250206_j463bj5cllb7tjt6u0t5mkmp98","status":"confirmed","summary":"Saami National Day","region":"Norway","date":"2025-02-06"},{"id":"20250221_rjvh69knlngp59fudl7cgphj70","status":"confirmed","summary":"King Harald V\'s Day","region":"Norway","date":"2025-02-21"},{"id":"20250302_itmff309s59ehksp75aro3t2vs","status":"confirmed","summary":"Carnival","region":"Norway","date":"2025-03-02"},{"id":"20250330_0oivgdft748d8ciqm7196doddg","status":"confirmed","summary":"Daylight Saving Time starts","region":"Norway","date":"2025-03-30"},{"id":"20250413_ptg49rb6j842j97b6v5l9at5ok","status":"confirmed","summary":"Palm Sunday","region":"Norway","date":"2025-04-13"},{"id":"20250417_k4vicv58tphp1p560bd2pmbppo","status":"confirmed","summary":"Maundy Thursday","region":"Norway","date":"2025-04-17"},{"id":"20250418_gsblm8mvmkq3vt1m4sa20e9hgg","status":"confirmed","summary":"Good Friday","region":"Norway","date":"2025-04-18"},{"id":"20250419_rk889479ta5jpgfmutb88ei5ho","status":"confirmed","summary":"Holy Saturday","region":"Norway","date":"2025-04-19"},{"id":"20250420_7qa7q3abrgq52ihbc05r5vii7g","status":"confirmed","summary":"Easter Sunday","region":"Norway","date":"2025-04-20"},{"id":"20250421_p9u9ijs3vcpur7smf11fb7ggsc","status":"confirmed","summary":"Easter Monday","region":"Norway","date":"2025-04-21"},{"id":"20250501_7hbjopkpg739isch4b8npl52tg","status":"confirmed","summary":"Labor Day","region":"Norway","date":"2025-05-01"},{"id":"20250508_40vg11qlgrvg6p50frn3ash5kk","status":"confirmed","summary":"Day of Liberation","region":"Norway","date":"2025-05-08"},{"id":"20250517_47pho53e2p3felcv2rtb1dd5f4","status":"confirmed","summary":"17 May Constitution Day (1814)","region":"Norway","date":"2025-05-17"},{"id":"20250529_bem0t3gfaam9u0r9oqv4kqbui0","status":"confirmed","summary":"Ascension Day","region":"Norway","date":"2025-05-29"},{"id":"20250607_o7hqk044u0kgahstjk4alvoj98","status":"confirmed","summary":"Whit Saturday","region":"Norway","date":"2025-06-07"},{"id":"20250607_qsq5qd96150d2f11hbemiph5u8","status":"confirmed","summary":"Dissolution of Union With Sweden (1905)","region":"Norway","date":"2025-06-07"},{"id":"20250608_0qgge9r740qtfnj1h7qqb1v14k","status":"confirmed","summary":"Whit Sunday","region":"Norway","date":"2025-06-08"},{"id":"20250609_pop2qghoitc50p42djfmemviv0","status":"confirmed","summary":"Whit Monday","region":"Norway","date":"2025-06-09"},{"id":"20250704_kg8bslro1ptbm8tlnlp35q8pfc","status":"confirmed","summary":"Queen Sonja\'s Day","region":"Norway","date":"2025-07-04"},{"id":"20250720_8hmdhljituduo002bk85pse58s","status":"confirmed","summary":"Crown Prince Haakon\'s Day","region":"Norway","date":"2025-07-20"},{"id":"20250729_924jv3c8ma8rjp41j15d5sm3qg","status":"confirmed","summary":"St. Olaf\'s Day","region":"Norway","date":"2025-07-29"},{"id":"20250819_dlu99k0ou7ndr9beuh8gdsv2is","status":"confirmed","summary":"Crown Princess Mette-Marit\'s Day","region":"Norway","date":"2025-08-19"},{"id":"20250915_ltk2jaovjgh21f6j5r3cf6v174","status":"confirmed","summary":"Election Day","region":"Norway","date":"2025-09-15"},{"id":"20251026_d220tcoff7pk58efue2k3tra8s","status":"confirmed","summary":"Daylight Saving Time ends","region":"Norway","date":"2025-10-26"},{"id":"20251026_l0a074f385jb2srh89pk9j36vs","status":"confirmed","summary":"Repentance Day","region":"Norway","date":"2025-10-26"},{"id":"20251102_uqb50g1oemdg2n28ml6mcv4k30","status":"confirmed","summary":"All Saints\' Day","region":"Norway","date":"2025-11-02"},{"id":"20251130_hqrtofdcl9qdvo5tp6sthrj11o","status":"confirmed","summary":"First Advent Sunday","region":"Norway","date":"2025-11-30"},{"id":"20251207_jfvp612eockved10gsppe75tbs","status":"confirmed","summary":"Second Advent Sunday","region":"Norway","date":"2025-12-07"},{"id":"20251214_4ocgnoa1qaq9i9kgiuqr6e48po","status":"confirmed","summary":"Third Advent Sunday","region":"Norway","date":"2025-12-14"},{"id":"20251221_f7dj2gne3dk2luup12msq74abg","status":"confirmed","summary":"Fourth Advent Sunday","region":"Norway","date":"2025-12-21"},{"id":"20251224_02r5ssjiq9uqt2iqaupt34ntso","status":"confirmed","summary":"Christmas Eve","region":"Norway","date":"2025-12-24"},{"id":"20251225_6lgavichh0vsl6opsbajkuh8lc","status":"confirmed","summary":"Christmas Day","region":"Norway","date":"2025-12-25"},{"id":"20251226_99ki883hrm52o49ajlbu95phtk","status":"confirmed","summary":"Boxing Day","region":"Norway","date":"2025-12-26"},{"id":"20251231_ko4ch4ngfrnh2qo7ahfl3dbatc","status":"confirmed","summary":"New Year\'s Eve","region":"Norway","date":"2025-12-31"}],"Nepal":[{"id":"20240112_0otdf2mpfbcmorb0t07g5dd8v8","status":"confirmed","summary":"Prithvi Jayanti","region":"Nepal","date":"2024-01-12"},{"id":"20240115_h13scfcbkgrlc160ob88u3rbgk","status":"confirmed","summary":"Maghe Sankranti","region":"Nepal","date":"2024-01-15"},{"id":"20240210_1k5bb05al6v8du7qbsp7sgc028","status":"confirmed","summary":"Sonam Losar (Tamang New Year)","region":"Nepal","date":"2024-02-10"},{"id":"20240219_2chr9m48q2f3qidmre4l8qqtac","status":"confirmed","summary":"National Democracy Day","region":"Nepal","date":"2024-02-19"},{"id":"20240308_fmrh4t07naleja1jmb36dp0ss4","status":"confirmed","summary":"Maha Shivaratri","region":"Nepal","date":"2024-03-08"},{"id":"20240308_j3r9tkr06d5ecl2m384usmskkg","status":"confirmed","summary":"Nari Dibas","region":"Nepal","date":"2024-03-08"},{"id":"20240311_gtr8pd3tnrtqfrvi83s59osa58","status":"confirmed","summary":"Gyalpo Losar","region":"Nepal","date":"2024-03-11"},{"id":"20240312_flc8nlo4rld1u4g2d3m6k2thlo","status":"confirmed","summary":"Ramadan Start","region":"Nepal","date":"2024-03-12"},{"id":"20240411_d0s0vlfm0ps8e49bd7bjb5rc1o","status":"confirmed","summary":"Ramjan Edul Fikra","region":"Nepal","date":"2024-04-11"},{"id":"20240413_6psge7iu3fc4ia6hren1tl8n5s","status":"confirmed","summary":"Nepali New Year","region":"Nepal","date":"2024-04-13"},{"id":"20240417_iom2ja2nm4kpmh8b1aibvs0hgs","status":"confirmed","summary":"Ram Nawami","region":"Nepal","date":"2024-04-17"},{"id":"20240423_n4btfa48sf20vt1kpe7m9lbuis","status":"confirmed","summary":"Holiday for Emir of Qatar\'s Visit","region":"Nepal","date":"2024-04-23"},{"id":"20240501_49avrkkpq3ps07dkp1nbj4r4ms","status":"confirmed","summary":"Majdoor Divas","region":"Nepal","date":"2024-05-01"},{"id":"20240523_4tks32n3lhpgpobofr6n1li4fc","status":"confirmed","summary":"Ubhauli Parva","region":"Nepal","date":"2024-05-23"},{"id":"20240523_mijtrv9jlmo3m5b4oaljmh70ps","status":"confirmed","summary":"Buddha Jayanti","region":"Nepal","date":"2024-05-23"},{"id":"20240528_djfqknpiff5uoqecb2vja1ll34","status":"confirmed","summary":"Ganatantra Diwas (Republic Day)","region":"Nepal","date":"2024-05-28"},{"id":"20240617_ro05jeotfv80uolmvlgtcp18l0","status":"confirmed","summary":"Edul Aajaha","region":"Nepal","date":"2024-06-17"},{"id":"20240819_dr9o5967bnb28k2cfaa0edjm2o","status":"confirmed","summary":"Janai Purnima","region":"Nepal","date":"2024-08-19"},{"id":"20240820_f88brm7ll7u7mnamnqjfuqfo2g","status":"confirmed","summary":"Gai Jatra","region":"Nepal","date":"2024-08-20"},{"id":"20240826_f9lvam45als432k00ok3f4la2k","status":"confirmed","summary":"Gaura Parba","region":"Nepal","date":"2024-08-26"},{"id":"20240826_v4hlc84ae4bn510opti9kc9638","status":"confirmed","summary":"Shree Krishna Janamashtami","region":"Nepal","date":"2024-08-26"},{"id":"20240906_emafathokreusiu3m1qlr8m6dc","status":"confirmed","summary":"Hartalika Teej","region":"Nepal","date":"2024-09-06"},{"id":"20240919_38207eh3eugisc200jhik9u2ag","status":"confirmed","summary":"Constitution Day","region":"Nepal","date":"2024-09-19"},{"id":"20240925_i9groju6r9pc5hvhiv3d69vtg0","status":"confirmed","summary":"Jitiya Parwa","region":"Nepal","date":"2024-09-25"},{"id":"20241003_vdp66snsl9b7bb6gd1dedb6t2s","status":"confirmed","summary":"Ghatasthapana","region":"Nepal","date":"2024-10-03"},{"id":"20241010_lg76mp4r26ua79n4t8ivbta3h4","status":"confirmed","summary":"Astami (Dashain)","region":"Nepal","date":"2024-10-10"},{"id":"20241010_o2bek19h1h80bhn7o39hag21tk","status":"confirmed","summary":"Phulpati (Dashain)","region":"Nepal","date":"2024-10-10"},{"id":"20241011_tq61vrgvdptqhnfgvf56847il4","status":"confirmed","summary":"Nawami (Dashain)","region":"Nepal","date":"2024-10-11"},{"id":"20241012_svp9m2i8v95uej14oaq987k5e8","status":"confirmed","summary":"Dashami (Dashain)","region":"Nepal","date":"2024-10-12"},{"id":"20241013_v5rcqb9tra4d45ofq57g75jkvg","status":"confirmed","summary":"Ekadashi (Dashain)","region":"Nepal","date":"2024-10-13"},{"id":"20241101_51rkkburr3k69oppjiom2a98j4","status":"confirmed","summary":"Laxmi Puja (Tihar)","region":"Nepal","date":"2024-11-01"},{"id":"20241102_7qtlarmk5d6cnafbqan728nj6c","status":"confirmed","summary":"Gobhardan Pujan (Tihar)","region":"Nepal","date":"2024-11-02"},{"id":"20241103_r912b34o7duujscpaq15ophro8","status":"confirmed","summary":"Bhai Tika (Tihar)","region":"Nepal","date":"2024-11-03"},{"id":"20241107_idnei9nu7f043rdgvokefke5f0","status":"confirmed","summary":"Chhat Parwa","region":"Nepal","date":"2024-11-07"},{"id":"20241110_f9uu85o6i582qoj5od1ddhu8lo","status":"confirmed","summary":"Phalgunanda Jayanti","region":"Nepal","date":"2024-11-10"},{"id":"20241115_542mrs5019o427a8k4n6vpdp2s","status":"confirmed","summary":"Guru Nanak Jayanti","region":"Nepal","date":"2024-11-15"},{"id":"20241203_a13c8ou2nc05bt4gu65s3vqmog","status":"confirmed","summary":"International Day of Disabled Persons","region":"Nepal","date":"2024-12-03"},{"id":"20241215_62mhevtbf5tjacqfks9nsoqc1g","status":"confirmed","summary":"Udhauli Parva","region":"Nepal","date":"2024-12-15"},{"id":"20241225_ja1vb14ttf2raaagnfuosmb25s","status":"confirmed","summary":"Christmas Day","region":"Nepal","date":"2024-12-25"},{"id":"20241230_k6hf4nv491oi1rdnip71kuqj1s","status":"confirmed","summary":"Tamu Lhosar","region":"Nepal","date":"2024-12-30"}],"Nauru":[{"id":"20240101_qno6mtda9mld2pqd9vvc4hkrec","status":"confirmed","summary":"New Year\'s Day","region":"Nauru","date":"2024-01-01"},{"id":"20240131_nklmn6pjej76m73drpd1q6aoag","status":"confirmed","summary":"Independence Day","region":"Nauru","date":"2024-01-31"},{"id":"20240201_qq4ncoctcrb7n8jhogjvac4up4","status":"confirmed","summary":"Independence Day Holiday","region":"Nauru","date":"2024-02-01"},{"id":"20240308_8o34npfl51mv0gn291hgovet6o","status":"confirmed","summary":"International Women\'s Day","region":"Nauru","date":"2024-03-08"},{"id":"20240329_sst3rnd1b7of9o2jntc9huli9g","status":"confirmed","summary":"Good Friday","region":"Nauru","date":"2024-03-29"},{"id":"20240401_6u9kt1d9qftfie88a0r0nm29og","status":"confirmed","summary":"Easter Monday","region":"Nauru","date":"2024-04-01"},{"id":"20240402_s9705esj7470anl4ki0ljsref4","status":"confirmed","summary":"Easter Tuesday","region":"Nauru","date":"2024-04-02"},{"id":"20240517_vjqlssbhcib40bmqtoblloe53c","status":"confirmed","summary":"Constitution Day","region":"Nauru","date":"2024-05-17"},{"id":"20240701_q5r5il2jkheb3grmr0ju6d0jos","status":"confirmed","summary":"RONPhos Handover","region":"Nauru","date":"2024-07-01"},{"id":"20240819_82155v17rs3f1s4hg4ea92biac","status":"confirmed","summary":"Day of the Tribes","region":"Nauru","date":"2024-08-19"},{"id":"20240925_ofegij8d4hdlfk9qs3sfbf6enc","status":"confirmed","summary":"Sir Hammer DeRoburt Day","region":"Nauru","date":"2024-09-25"},{"id":"20241026_6g96199ih4eup0vvvja0cqv8mo","status":"confirmed","summary":"Angam Day","region":"Nauru","date":"2024-10-26"},{"id":"20241028_f13838uep5t7a0mbgp2hjvlvdo","status":"confirmed","summary":"Day off for Angam Day","region":"Nauru","date":"2024-10-28"},{"id":"20241225_f6f10qdl4so6o12tgurkodjtt8","status":"confirmed","summary":"Christmas Day","region":"Nauru","date":"2024-12-25"},{"id":"20241226_0rnvep2q1i9girpgbqfjqj45tk","status":"confirmed","summary":"Boxing Day","region":"Nauru","date":"2024-12-26"},{"id":"20250101_764b3ad9i7vavpjv63visstm7g","status":"confirmed","summary":"New Year\'s Day","region":"Nauru","date":"2025-01-01"},{"id":"20250131_6ge387373g1i5e3795p1c8f2ds","status":"confirmed","summary":"Independence Day","region":"Nauru","date":"2025-01-31"},{"id":"20250201_7gub379foanpu93n5l3ji5fovo","status":"confirmed","summary":"Independence Day Holiday","region":"Nauru","date":"2025-02-01"},{"id":"20250308_eqprrp0pn1q29qbvppqc6jjffg","status":"confirmed","summary":"International Women\'s Day","region":"Nauru","date":"2025-03-08"},{"id":"20250310_f8pg3u1k9ctd622fi647dcl9tg","status":"confirmed","summary":"International Women\'s Day observed","region":"Nauru","date":"2025-03-10"},{"id":"20250418_la8i8hdh1vv4otco3jvf4b9vdc","status":"confirmed","summary":"Good Friday","region":"Nauru","date":"2025-04-18"},{"id":"20250421_gv1g774js6qti4ghk1l45osm20","status":"confirmed","summary":"Easter Monday","region":"Nauru","date":"2025-04-21"},{"id":"20250422_ti1575jk1c9d9hprep5vchseo4","status":"confirmed","summary":"Easter Tuesday","region":"Nauru","date":"2025-04-22"},{"id":"20250517_gbr47u6dstfiaqj209qndq5qd4","status":"confirmed","summary":"Constitution Day","region":"Nauru","date":"2025-05-17"},{"id":"20250519_3g4t8m1o54up2tfhm8hf0bpnp4","status":"confirmed","summary":"Constitution Day observed","region":"Nauru","date":"2025-05-19"},{"id":"20250701_egqra2ocv5db26vf1uv2iifi5o","status":"confirmed","summary":"RONPhos Handover","region":"Nauru","date":"2025-07-01"},{"id":"20250819_5v43m6jl35mkk9b6gcpo69ht3o","status":"confirmed","summary":"Day of the Tribes","region":"Nauru","date":"2025-08-19"},{"id":"20250925_kfn4t6cl54norp44dss7uk3c7g","status":"confirmed","summary":"Sir Hammer DeRoburt Day","region":"Nauru","date":"2025-09-25"},{"id":"20251026_lvrfa5l85qkfu4ki4lsmgnpmb8","status":"confirmed","summary":"Angam Day","region":"Nauru","date":"2025-10-26"},{"id":"20251027_nvuk5gh19totcnd2gnhkspk5bk","status":"confirmed","summary":"Day off for Angam Day","region":"Nauru","date":"2025-10-27"},{"id":"20251225_v9lqirbcg2url7c4iao2lsobr0","status":"confirmed","summary":"Christmas Day","region":"Nauru","date":"2025-12-25"},{"id":"20251226_a48c44hl2d4ddncsrc5il6li38","status":"confirmed","summary":"Boxing Day","region":"Nauru","date":"2025-12-26"}],"Oman":[{"id":"20240101_240bi4sgqh9lctn3gqjn5i5np8","status":"confirmed","summary":"New Year","region":"Oman","date":"2024-01-01"},{"id":"20240111_14cirgbdr8tc4cmevd6khfnq50","status":"confirmed","summary":"Accession Day of Sultan Haitham bin Tarik","region":"Oman","date":"2024-01-11"},{"id":"20240208_tu46rem1427uvgclq8925bpn88","status":"confirmed","summary":"Isra and Mi\'raj","region":"Oman","date":"2024-02-08"},{"id":"20240312_4peqhdrhpvr8fdru5vg28hlhvg","status":"confirmed","summary":"Ramadan Start","region":"Oman","date":"2024-03-12"},{"id":"20240409_r6k626jh8c6ba5ggm0rgodhchs","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Oman","date":"2024-04-09"},{"id":"20240410_2amjrhp2a6he46ob4fiq3ugj74","status":"confirmed","summary":"Eid al-Fitr","region":"Oman","date":"2024-04-10"},{"id":"20240411_jvditidhorsrsvsj0m9ieurfe8","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Oman","date":"2024-04-11"},{"id":"20240412_cfvtuaotqrglcarmc7ibhij804","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Oman","date":"2024-04-12"},{"id":"20240413_0f776975dcqnlo96tc01hpuq6o","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Oman","date":"2024-04-13"},{"id":"20240617_6ernt22ju3mmrh9bllrmqldc80","status":"confirmed","summary":"Eid al-Adha","region":"Oman","date":"2024-06-17"},{"id":"20240618_imptl32nshslrqorhc4gve6vcg","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Oman","date":"2024-06-18"},{"id":"20240619_1auem6lr9c75mn50g43meios5g","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Oman","date":"2024-06-19"},{"id":"20240620_eeb4rilkaush0qrgsb5c294rig","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Oman","date":"2024-06-20"},{"id":"20240708_jmm3379pf4m3fheuj54p1gattg","status":"confirmed","summary":"Muharram","region":"Oman","date":"2024-07-08"},{"id":"20240916_hhm2ae2cff8nbg6t0ep1tq0fbg","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Oman","date":"2024-09-16"},{"id":"20241118_4t68gesg5m1dgamdvdqe8hi16c","status":"confirmed","summary":"National Day","region":"Oman","date":"2024-11-18"},{"id":"20241119_mjpium5ob2sd5l82l2utqh84g8","status":"confirmed","summary":"National Day Holiday","region":"Oman","date":"2024-11-19"},{"id":"20250101_q8h8hfci5p45iru98orkn1plak","status":"confirmed","summary":"New Year","region":"Oman","date":"2025-01-01"},{"id":"20250127_7gmi2o0used4v0p91s1f5fll38","status":"confirmed","summary":"Isra and Mi\'raj","region":"Oman","date":"2025-01-27"},{"id":"20250301_jf55p5g4lsc15f14gkm6b5brik","status":"confirmed","summary":"Ramadan Start","region":"Oman","date":"2025-03-01"},{"id":"20250331_43389qaghl4863j5bcrplbuklg","status":"confirmed","summary":"Eid al-Fitr","region":"Oman","date":"2025-03-31"},{"id":"20250401_3l15p2f61civsdfljc2e9vmo94","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Oman","date":"2025-04-01"},{"id":"20250402_mdafeoolghcqljinhr6tc5b9jo","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Oman","date":"2025-04-02"},{"id":"20250403_otfsia5j0drdk945apumtdmbcc","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Oman","date":"2025-04-03"},{"id":"20250606_8c37lb4sfn3l0pedlruqmeu6vc","status":"confirmed","summary":"Eid al-Adha","region":"Oman","date":"2025-06-06"},{"id":"20250607_pmjghtpojhsh19a211lkq1194s","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Oman","date":"2025-06-07"},{"id":"20250608_jb8vgasamp6d97j2o6gu67sa2g","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Oman","date":"2025-06-08"},{"id":"20250609_2kloq9ifcgh72vor6ggisl9qcg","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Oman","date":"2025-06-09"},{"id":"20250627_mel1r5tpvlhr5mbjp4slgfl1hs","status":"confirmed","summary":"Muharram","region":"Oman","date":"2025-06-27"},{"id":"20250905_t3r022gk0m1ioioqa1qo85hp6o","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Oman","date":"2025-09-05"},{"id":"20251118_07m1u0fefugjedu5hnabt6d44o","status":"confirmed","summary":"National Day","region":"Oman","date":"2025-11-18"}],"Panama":[{"id":"20240101_7pdmmnimn5gfpfg7l2kt5m02l0","status":"confirmed","summary":"New Year\'s Day","region":"Panama","date":"2024-01-01"},{"id":"20240109_oprlvetksqiieak0hoqo0tl7ec","status":"confirmed","summary":"Martyr\'s Day","region":"Panama","date":"2024-01-09"},{"id":"20240210_re08c36fnrcvevifo4pf54m7eo","status":"confirmed","summary":"Carnival","region":"Panama","date":"2024-02-10"},{"id":"20240211_9uvqrbgnj9q8db06jfcqevm5vo","status":"confirmed","summary":"Carnival","region":"Panama","date":"2024-02-11"},{"id":"20240213_9nf3b11v4npqrqkiclk90t5090","status":"confirmed","summary":"Carnival / Shrove Tuesday / Pancake Day","region":"Panama","date":"2024-02-13"},{"id":"20240328_0s9tkotea7bnduam2pm7p3kaeo","status":"confirmed","summary":"Maundy Thursday","region":"Panama","date":"2024-03-28"},{"id":"20240329_2qa8pqetgj2ijtc946bpjs1q70","status":"confirmed","summary":"Good Friday","region":"Panama","date":"2024-03-29"},{"id":"20240331_sv33l4dgh6e4u16g3nu2r36fh0","status":"confirmed","summary":"Easter Sunday","region":"Panama","date":"2024-03-31"},{"id":"20240501_qu2c2u1imov0lnjeo8scktmvf8","status":"confirmed","summary":"Labor Day / May Day","region":"Panama","date":"2024-05-01"},{"id":"20241103_0obimmrium6eqv8pr85nb8b554","status":"confirmed","summary":"Independence Day","region":"Panama","date":"2024-11-03"},{"id":"20241104_736sb4cispi6ci7u52t2tmehd4","status":"confirmed","summary":"National Symbols Day","region":"Panama","date":"2024-11-04"},{"id":"20241105_ulf26280jrt9notvumucchcds8","status":"confirmed","summary":"Colón Day","region":"Panama","date":"2024-11-05"},{"id":"20241110_up5b382efge8d58id9mr66qm6o","status":"confirmed","summary":"Shout in Villa de los Santos","region":"Panama","date":"2024-11-10"},{"id":"20241128_9ap2iuoosivq1v5teg5devhn08","status":"confirmed","summary":"Independence from Spain","region":"Panama","date":"2024-11-28"},{"id":"20241208_3m9jg5f5ir5necngqvl29j2qs0","status":"confirmed","summary":"Mother\'s Day","region":"Panama","date":"2024-12-08"},{"id":"20241220_k1b4hnnqplrfo7p9pk4lrnqbk0","status":"confirmed","summary":"National Day of Mourning","region":"Panama","date":"2024-12-20"},{"id":"20241225_orhkvt6qct63mmv46k60g344g4","status":"confirmed","summary":"Christmas Day","region":"Panama","date":"2024-12-25"},{"id":"20250101_cur4b9e8fsm3ogceddjkb6pduk","status":"confirmed","summary":"New Year\'s Day","region":"Panama","date":"2025-01-01"},{"id":"20250109_7311pvikh78ijjfljh3qm5d3ns","status":"confirmed","summary":"Martyr\'s Day","region":"Panama","date":"2025-01-09"},{"id":"20250301_pokq9tubtidmlip6l2ltkbgarc","status":"confirmed","summary":"Carnival","region":"Panama","date":"2025-03-01"},{"id":"20250302_c0c2b11f8ps9o03b729k1ofbsk","status":"confirmed","summary":"Carnival","region":"Panama","date":"2025-03-02"},{"id":"20250304_alm47m5aq94mald29h2qcvo4u4","status":"confirmed","summary":"Carnival / Shrove Tuesday / Pancake Day","region":"Panama","date":"2025-03-04"},{"id":"20250417_7q5qho2t7rdl5d33i4p3folp7s","status":"confirmed","summary":"Maundy Thursday","region":"Panama","date":"2025-04-17"},{"id":"20250418_1r51338hqqbv5ab3bqr8gb6t4k","status":"confirmed","summary":"Good Friday","region":"Panama","date":"2025-04-18"},{"id":"20250420_ta66vnkj9sqb8b86ebe1ts8fis","status":"confirmed","summary":"Easter Sunday","region":"Panama","date":"2025-04-20"},{"id":"20250501_23jde3i6u0is0i31bntklm7nck","status":"confirmed","summary":"Labor Day / May Day","region":"Panama","date":"2025-05-01"},{"id":"20251103_ig6q0vkb69n0hc7j6ocd0vsoq8","status":"confirmed","summary":"Independence Day","region":"Panama","date":"2025-11-03"},{"id":"20251104_i89r5tfa5if3mg4pqqrtdpdf4k","status":"confirmed","summary":"National Symbols Day","region":"Panama","date":"2025-11-04"},{"id":"20251105_sm1k78qmpr7td3o3ic6ban4ne0","status":"confirmed","summary":"Colón Day","region":"Panama","date":"2025-11-05"},{"id":"20251110_sokt3mf33sikqqgq4guetoepc0","status":"confirmed","summary":"Shout in Villa de los Santos","region":"Panama","date":"2025-11-10"},{"id":"20251128_3n3dmqo3fervt957ci934o4d7s","status":"confirmed","summary":"Independence from Spain","region":"Panama","date":"2025-11-28"},{"id":"20251208_0dlpag6oisgq3m6o36d4ajthq4","status":"confirmed","summary":"Mother\'s Day","region":"Panama","date":"2025-12-08"},{"id":"20251220_b5acnth8qnakkvs63tlhgg4ejc","status":"confirmed","summary":"National Day of Mourning","region":"Panama","date":"2025-12-20"},{"id":"20251225_vbkpc4pta26onhi9pnm1d1689g","status":"confirmed","summary":"Christmas Day","region":"Panama","date":"2025-12-25"}],"Peru":[{"id":"20240101_rfahuasf0u668pc443bua0s6bg","status":"confirmed","summary":"New Year\'s Day","region":"Peru","date":"2024-01-01"},{"id":"20240106_42pfvv0pkm14kalcvrgnk8odvc","status":"confirmed","summary":"The Three Wise Men Day","region":"Peru","date":"2024-01-06"},{"id":"20240328_4vfguhocnpqan6ddlt48sabic0","status":"confirmed","summary":"Maundy Thursday","region":"Peru","date":"2024-03-28"},{"id":"20240329_kbn2puuvnjo1kuo8u6284gjbn0","status":"confirmed","summary":"Good Friday","region":"Peru","date":"2024-03-29"},{"id":"20240331_lolvitebuv563un980a1luasqc","status":"confirmed","summary":"Easter Sunday","region":"Peru","date":"2024-03-31"},{"id":"20240501_2tbs92mcvao1ntrgqp674h4od8","status":"confirmed","summary":"Labor Day / May Day","region":"Peru","date":"2024-05-01"},{"id":"20240512_nh8ncdoiub9e422lc5olqop3ko","status":"confirmed","summary":"Mothers\' Day","region":"Peru","date":"2024-05-12"},{"id":"20240607_52mbl9unjhhm5nf66alb80p5mc","status":"confirmed","summary":"Flag Day","region":"Peru","date":"2024-06-07"},{"id":"20240607_d6agqaf5cgclb35n54489nlec8","status":"confirmed","summary":"Battle of Arica","region":"Peru","date":"2024-06-07"},{"id":"20240616_vc44j2rab6iitp1gvpjdmfl6so","status":"confirmed","summary":"Fathers\' Day","region":"Peru","date":"2024-06-16"},{"id":"20240624_ad6rbaiqd6j4ku5t6gtrpsudqk","status":"confirmed","summary":"Inti Raymi Day","region":"Peru","date":"2024-06-24"},{"id":"20240624_j09898h0okk3vm07afr2i82vf0","status":"confirmed","summary":"Farmer Day","region":"Peru","date":"2024-06-24"},{"id":"20240629_a1jpckta7reo40amjlnu9k4tno","status":"confirmed","summary":"St Peter and St Paul","region":"Peru","date":"2024-06-29"},{"id":"20240723_n42mbtj2geog8doom3g1vhnn8k","status":"confirmed","summary":"Peruvian Air Force Day","region":"Peru","date":"2024-07-23"},{"id":"20240726_uih4qd3dnmsnoapk8q4am1q8fk","status":"confirmed","summary":"Public Sector Holiday","region":"Peru","date":"2024-07-26"},{"id":"20240728_usfh3259iqfbjl0g60e8er25hk","status":"confirmed","summary":"Independence Day","region":"Peru","date":"2024-07-28"},{"id":"20240729_r4avbesral23ldjpe02qn0jlok","status":"confirmed","summary":"Independence Day (day 2)","region":"Peru","date":"2024-07-29"},{"id":"20240806_babofpbg7seo6j1mpp2obk916s","status":"confirmed","summary":"Battle of Junín","region":"Peru","date":"2024-08-06"},{"id":"20240830_k1n8joqimtf02a961vkvojm6hc","status":"confirmed","summary":"Santa Rosa De Lima","region":"Peru","date":"2024-08-30"},{"id":"20240924_he0h8ppkg9c1pltbtogp45krms","status":"confirmed","summary":"Armed Forces Day","region":"Peru","date":"2024-09-24"},{"id":"20241007_7f77fo4mvfoodhcjvcn45jrm38","status":"confirmed","summary":"Public Sector Holiday","region":"Peru","date":"2024-10-07"},{"id":"20241008_o3ckr6qlm1046ppb1hhb9udn58","status":"confirmed","summary":"Battle of Angamos","region":"Peru","date":"2024-10-08"},{"id":"20241101_4qc4gknebme20bun0dtrda7t10","status":"confirmed","summary":"All Saints\' Day","region":"Peru","date":"2024-11-01"},{"id":"20241102_mq5t23qtf060htrrt2082llmak","status":"confirmed","summary":"All Souls\' Day","region":"Peru","date":"2024-11-02"},{"id":"20241206_avmjudjvhtufbvbgj30vnkcbs8","status":"confirmed","summary":"Public Sector Holiday","region":"Peru","date":"2024-12-06"},{"id":"20241208_96j6avjfhjg6m0okgmfbrqlbq0","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Peru","date":"2024-12-08"},{"id":"20241209_p5vmqolbvp662v8ute59vjrh8c","status":"confirmed","summary":"Battle of Ayacucho","region":"Peru","date":"2024-12-09"},{"id":"20241223_ea50bdbifif1q58igd8emtqi5k","status":"confirmed","summary":"Public Sector Holiday","region":"Peru","date":"2024-12-23"},{"id":"20241224_2tu2chco4jns87sitckbrrmvb0","status":"confirmed","summary":"Christmas Eve","region":"Peru","date":"2024-12-24"},{"id":"20241224_akr1jf8ianh4au248tiivnghtg","status":"confirmed","summary":"Public Sector Holiday","region":"Peru","date":"2024-12-24"},{"id":"20241225_snljo78hi4fj68jm3ekpukp0mc","status":"confirmed","summary":"Christmas Day","region":"Peru","date":"2024-12-25"},{"id":"20241230_6v6g3nfg2q0n4qh1re8k8bpmh4","status":"confirmed","summary":"Public Sector Holiday","region":"Peru","date":"2024-12-30"},{"id":"20241231_447m6eem15nsc40f2d598q8er0","status":"confirmed","summary":"Public Sector Holiday","region":"Peru","date":"2024-12-31"},{"id":"20241231_otb6ffqe468ud4bq4rnhb1a0q4","status":"confirmed","summary":"New Year\'s Eve","region":"Peru","date":"2024-12-31"},{"id":"20250101_mthpbvfqikufq4b9bd38lqsbjg","status":"confirmed","summary":"New Year\'s Day","region":"Peru","date":"2025-01-01"},{"id":"20250106_icnv0vhmd54u73lc693p8il8j0","status":"confirmed","summary":"The Three Wise Men Day","region":"Peru","date":"2025-01-06"},{"id":"20250417_k188fd46n4ogb4suc29g2v4ne8","status":"confirmed","summary":"Maundy Thursday","region":"Peru","date":"2025-04-17"},{"id":"20250418_4s0irtrj0f08m29s8nq522tkok","status":"confirmed","summary":"Good Friday","region":"Peru","date":"2025-04-18"},{"id":"20250420_t5uk4kd6qh2fovor99ofj809ro","status":"confirmed","summary":"Easter Sunday","region":"Peru","date":"2025-04-20"},{"id":"20250501_rk0a89v4qfls1hv7amgjisj7sc","status":"confirmed","summary":"Labor Day / May Day","region":"Peru","date":"2025-05-01"},{"id":"20250511_obfptfg8kv2dle8j9u3p5fdmpg","status":"confirmed","summary":"Mothers\' Day","region":"Peru","date":"2025-05-11"},{"id":"20250607_6ll6a5c3m5id73u6f06vpjvvtk","status":"confirmed","summary":"Battle of Arica","region":"Peru","date":"2025-06-07"},{"id":"20250607_dhg0gijit262t9ftfk5tmr4mcs","status":"confirmed","summary":"Flag Day","region":"Peru","date":"2025-06-07"},{"id":"20250615_h91qqk4pvgda80kop8eevhk4v0","status":"confirmed","summary":"Fathers\' Day","region":"Peru","date":"2025-06-15"},{"id":"20250624_ichn1c62tg134hp0e6dcsoshjk","status":"confirmed","summary":"Farmer Day","region":"Peru","date":"2025-06-24"},{"id":"20250624_n644ihi0qqs2dekvsoa4767k88","status":"confirmed","summary":"Inti Raymi Day","region":"Peru","date":"2025-06-24"},{"id":"20250629_7gvqtpbg5a0vta25ucmr5f66f8","status":"confirmed","summary":"St Peter and St Paul","region":"Peru","date":"2025-06-29"},{"id":"20250723_kmkuahrhj4pv5u6lbsutdth3sk","status":"confirmed","summary":"Peruvian Air Force Day","region":"Peru","date":"2025-07-23"},{"id":"20250728_r46usqraiup1okkapvekicc778","status":"confirmed","summary":"Independence Day","region":"Peru","date":"2025-07-28"},{"id":"20250729_afro3ttci4t5a09eailtkce19s","status":"confirmed","summary":"Independence Day (day 2)","region":"Peru","date":"2025-07-29"},{"id":"20250806_j00gtkgsptigdqt5h78mmjp930","status":"confirmed","summary":"Battle of Junín","region":"Peru","date":"2025-08-06"},{"id":"20250830_2q9kvej5cbcsa5sqkpgag9qcfs","status":"confirmed","summary":"Santa Rosa De Lima","region":"Peru","date":"2025-08-30"},{"id":"20250924_r8pn1otkllmnpcddfliuasasr8","status":"confirmed","summary":"Armed Forces Day","region":"Peru","date":"2025-09-24"},{"id":"20251008_5tkqqg95u1m9im62ljm6svdtj0","status":"confirmed","summary":"Battle of Angamos","region":"Peru","date":"2025-10-08"},{"id":"20251101_rse0mkl7r4o0iln724h69tqh0o","status":"confirmed","summary":"All Saints\' Day","region":"Peru","date":"2025-11-01"},{"id":"20251102_tggli26i2jhf0555h1294ojmpc","status":"confirmed","summary":"All Souls\' Day","region":"Peru","date":"2025-11-02"},{"id":"20251208_4tup1e5qjpvhegt6f0sgcct7ho","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Peru","date":"2025-12-08"},{"id":"20251209_m5o200uuroeqttsnpbodelmgco","status":"confirmed","summary":"Battle of Ayacucho","region":"Peru","date":"2025-12-09"},{"id":"20251224_theos1c42stkegs3l2i601kg5g","status":"confirmed","summary":"Christmas Eve","region":"Peru","date":"2025-12-24"},{"id":"20251225_d7h6b5eis25dgrgqoi43k071qg","status":"confirmed","summary":"Christmas Day","region":"Peru","date":"2025-12-25"},{"id":"20251231_ncbiacaecd6gabgcqomo8shllc","status":"confirmed","summary":"New Year\'s Eve","region":"Peru","date":"2025-12-31"}],"French Polynesia":[{"id":"20240101_nil1lg47c79cpj43ruba8cqmrc","status":"confirmed","summary":"New Year\'s Day","region":"French Polynesia","date":"2024-01-01"},{"id":"20240305_a24sj7g6f3uagvrnd5ts0l70g0","status":"confirmed","summary":"Missionary Day","region":"French Polynesia","date":"2024-03-05"},{"id":"20240329_rqpbpf452hfr8tnsiol0b02h0k","status":"confirmed","summary":"Good Friday","region":"French Polynesia","date":"2024-03-29"},{"id":"20240401_10alsuke9mogeqi7e712sn3tik","status":"confirmed","summary":"Easter Monday","region":"French Polynesia","date":"2024-04-01"},{"id":"20240501_eequohbrvrlebs6oifums3rb58","status":"confirmed","summary":"Labor Day / May Day","region":"French Polynesia","date":"2024-05-01"},{"id":"20240508_02bpbq56igmkgdb8tqbs76etrg","status":"confirmed","summary":"Victory Day","region":"French Polynesia","date":"2024-05-08"},{"id":"20240509_a0oqvbk2gdd0i0qs35b8ft59to","status":"confirmed","summary":"Ascension Day","region":"French Polynesia","date":"2024-05-09"},{"id":"20240520_q4uvgcudaano5trjag1f8jjfqo","status":"confirmed","summary":"Whit Monday","region":"French Polynesia","date":"2024-05-20"},{"id":"20240629_b90tl87d8m27ojph75kquqq8qg","status":"confirmed","summary":"Autonomy Day","region":"French Polynesia","date":"2024-06-29"},{"id":"20240714_80h5ljeb9jdvm3t2bpk31jhlpc","status":"confirmed","summary":"French National Day","region":"French Polynesia","date":"2024-07-14"},{"id":"20240815_kua1k0et79fo46qg3860eub5ik","status":"confirmed","summary":"Assumption of Mary","region":"French Polynesia","date":"2024-08-15"},{"id":"20241101_47hap4nru1hmg854h1s8nkfcuk","status":"confirmed","summary":"All Saints\' Day","region":"French Polynesia","date":"2024-11-01"},{"id":"20241111_ibg3i8453tf9liu33a7ppkrv74","status":"confirmed","summary":"Armistice Day","region":"French Polynesia","date":"2024-11-11"},{"id":"20241225_f4pt5s6hau5j60sq13gabg5cc4","status":"confirmed","summary":"Christmas Day","region":"French Polynesia","date":"2024-12-25"},{"id":"20250101_nlq111cacfsmebukh9nvc4eci4","status":"confirmed","summary":"New Year\'s Day","region":"French Polynesia","date":"2025-01-01"},{"id":"20250305_q7h00bres0ol2chmlkinsash28","status":"confirmed","summary":"Missionary Day","region":"French Polynesia","date":"2025-03-05"},{"id":"20250418_8mrhlcbcr7q6j8s84as9o09m2g","status":"confirmed","summary":"Good Friday","region":"French Polynesia","date":"2025-04-18"},{"id":"20250421_cvvmhqkp5sprnd0189bl4hgo2o","status":"confirmed","summary":"Easter Monday","region":"French Polynesia","date":"2025-04-21"},{"id":"20250501_v74b31897b56j27rub4ml1v8e8","status":"confirmed","summary":"Labor Day / May Day","region":"French Polynesia","date":"2025-05-01"},{"id":"20250508_nctmrubf85rlpd7kkvgmnm5m9k","status":"confirmed","summary":"Victory Day","region":"French Polynesia","date":"2025-05-08"},{"id":"20250529_p32tb6b440m66djathng7m6en0","status":"confirmed","summary":"Ascension Day","region":"French Polynesia","date":"2025-05-29"},{"id":"20250609_cdlfj4ucrcqd0em3uplsh4mn34","status":"confirmed","summary":"Whit Monday","region":"French Polynesia","date":"2025-06-09"},{"id":"20250629_ppqju894st3m4fhc683nead6ik","status":"confirmed","summary":"Autonomy Day","region":"French Polynesia","date":"2025-06-29"},{"id":"20250714_kljpf7lk1i27g7o72rnl392vbo","status":"confirmed","summary":"French National Day","region":"French Polynesia","date":"2025-07-14"},{"id":"20250815_1gusgn2pmj3b0jou915rbm2ekc","status":"confirmed","summary":"Assumption of Mary","region":"French Polynesia","date":"2025-08-15"},{"id":"20251101_h42ac6iaunl7e9ndm4b2tsce38","status":"confirmed","summary":"All Saints\' Day","region":"French Polynesia","date":"2025-11-01"},{"id":"20251111_9mhecq0km8546rpmeb1cvm8lu0","status":"confirmed","summary":"Armistice Day","region":"French Polynesia","date":"2025-11-11"},{"id":"20251225_bha861ilkl6aj8e94qni9hljuk","status":"confirmed","summary":"Christmas Day","region":"French Polynesia","date":"2025-12-25"}],"Papua New Guinea":[{"id":"20240101_602f38qlfc2lge76it930tlpk8","status":"confirmed","summary":"New Year\'s Day","region":"Papua New Guinea","date":"2024-01-01"},{"id":"20240226_a05ugnrv95m1b8geaitcftsh6c","status":"confirmed","summary":"National Remembrance Day In Memory of Late Grand Chief Sir Michael Somare","region":"Papua New Guinea","date":"2024-02-26"},{"id":"20240329_6n3d1slprl7reks5s6dcng5aqs","status":"confirmed","summary":"Good Friday","region":"Papua New Guinea","date":"2024-03-29"},{"id":"20240330_d0jg430qqkk448n9finpgg19p0","status":"confirmed","summary":"Holy Saturday","region":"Papua New Guinea","date":"2024-03-30"},{"id":"20240401_abn8p7sf8527f8ep3prpiub5m8","status":"confirmed","summary":"Easter Monday","region":"Papua New Guinea","date":"2024-04-01"},{"id":"20240617_iidq68k9ke9dvrcmhhbui22m40","status":"confirmed","summary":"King\'s Birthday","region":"Papua New Guinea","date":"2024-06-17"},{"id":"20240723_7hdoc768au3jhj7b01f7gp16ds","status":"confirmed","summary":"National Remembrance Day","region":"Papua New Guinea","date":"2024-07-23"},{"id":"20240826_9l4joqtfc8u5946ibf1qbgg3bk","status":"confirmed","summary":"National Day of Repentance","region":"Papua New Guinea","date":"2024-08-26"},{"id":"20240916_ib3sg60hcr3itl6bbfoc063rho","status":"confirmed","summary":"Independence Day","region":"Papua New Guinea","date":"2024-09-16"},{"id":"20241225_4aagsrbnfo96uuk72q8hqb21ko","status":"confirmed","summary":"Christmas Day","region":"Papua New Guinea","date":"2024-12-25"},{"id":"20241226_ui6dgpq4ertgd0i0vn47gv6kts","status":"confirmed","summary":"Boxing Day","region":"Papua New Guinea","date":"2024-12-26"},{"id":"20250101_tro2eon2hj97epojn2999dhol0","status":"confirmed","summary":"New Year\'s Day","region":"Papua New Guinea","date":"2025-01-01"},{"id":"20250418_u6qdeegobftaqvpib9npmi567o","status":"confirmed","summary":"Good Friday","region":"Papua New Guinea","date":"2025-04-18"},{"id":"20250419_knnf0euigpa5f0i5vd3d792kr8","status":"confirmed","summary":"Holy Saturday","region":"Papua New Guinea","date":"2025-04-19"},{"id":"20250421_1e2r12v3ctj69ibrrm0nnfdc4c","status":"confirmed","summary":"Easter Monday","region":"Papua New Guinea","date":"2025-04-21"},{"id":"20250617_s38mm4dl10oj6aql4phmtpgpq0","status":"confirmed","summary":"King\'s Birthday","region":"Papua New Guinea","date":"2025-06-17"},{"id":"20250723_1ubuo10a55vg7a4q3qjpebkp94","status":"confirmed","summary":"National Remembrance Day","region":"Papua New Guinea","date":"2025-07-23"},{"id":"20250826_hu0fom5uhadmeg3lk6tueh1p2s","status":"confirmed","summary":"National Day of Repentance","region":"Papua New Guinea","date":"2025-08-26"},{"id":"20250916_4g99902frln2jn5n95ttib6ubg","status":"confirmed","summary":"Independence Day","region":"Papua New Guinea","date":"2025-09-16"},{"id":"20251225_9f1hkb5ug89b1lhfb5sr2g94mc","status":"confirmed","summary":"Christmas Day","region":"Papua New Guinea","date":"2025-12-25"},{"id":"20251226_fvpraqocre3jkmoicijo6fq338","status":"confirmed","summary":"Boxing Day","region":"Papua New Guinea","date":"2025-12-26"}],"Philippines":[{"id":"20240101_jk83rnvn27n7hg0g0112mntc58","status":"confirmed","summary":"New Year\'s Day","region":"Philippines","date":"2024-01-01"},{"id":"20240209_ldsmq3ke5g9c10usjnicpl3ik4","status":"confirmed","summary":"Lunar New Year Holiday","region":"Philippines","date":"2024-02-09"},{"id":"20240210_op166gerbcb43ghcfemiqicjjk","status":"confirmed","summary":"Lunar New Year\'s Day","region":"Philippines","date":"2024-02-10"},{"id":"20240225_cku5g28ignb3kodomegor8lcak","status":"confirmed","summary":"People Power Anniversary","region":"Philippines","date":"2024-02-25"},{"id":"20240312_0d1rc1fqdh5pqvn9jvgm7sfrfg","status":"confirmed","summary":"Ramadan Start","region":"Philippines","date":"2024-03-12"},{"id":"20240328_do3ui8aurs1nf0s37124oar2fk","status":"confirmed","summary":"Maundy Thursday","region":"Philippines","date":"2024-03-28"},{"id":"20240329_e0fbgoqkc22ogqpjuj1ekd3neo","status":"confirmed","summary":"Good Friday","region":"Philippines","date":"2024-03-29"},{"id":"20240330_jegumheuu6e1kciagotd8cfbso","status":"confirmed","summary":"Black Saturday","region":"Philippines","date":"2024-03-30"},{"id":"20240331_kkpmiavc14bqot7cuh3263tkbo","status":"confirmed","summary":"Easter Sunday","region":"Philippines","date":"2024-03-31"},{"id":"20240409_h81ni99j0rlqhb8hlaoiqlt5f4","status":"confirmed","summary":"The Day of Valor","region":"Philippines","date":"2024-04-09"},{"id":"20240410_2o9b673n68uhvsi89l5tj15cls","status":"confirmed","summary":"Eidul-Fitar","region":"Philippines","date":"2024-04-10"},{"id":"20240501_cm7t4450bnrv5t8cj5agomtf4g","status":"confirmed","summary":"Labor Day","region":"Philippines","date":"2024-05-01"},{"id":"20240612_5tqkeu231q3rdmin1kg6c5ttr8","status":"confirmed","summary":"Independence Day","region":"Philippines","date":"2024-06-12"},{"id":"20240617_t588korarrhchrascs7kmg17qs","status":"confirmed","summary":"Eid al-Adha (Feast of the Sacrifice)","region":"Philippines","date":"2024-06-17"},{"id":"20240821_hjbpnmaaopoh6v2qetb4kjb03s","status":"confirmed","summary":"Ninoy Aquino Day","region":"Philippines","date":"2024-08-21"},{"id":"20240826_6k46joif593bbrfp18fijpvb6g","status":"confirmed","summary":"National Heroes Day","region":"Philippines","date":"2024-08-26"},{"id":"20241101_1dqokokelpfbp4s4jdu27i8128","status":"confirmed","summary":"All Saints\' Day","region":"Philippines","date":"2024-11-01"},{"id":"20241102_h8dahsjjb006l5tn9mtv63lghg","status":"confirmed","summary":"All Souls\' Day","region":"Philippines","date":"2024-11-02"},{"id":"20241130_lfq379tk8ge70dnl9n866otp38","status":"confirmed","summary":"Bonifacio Day","region":"Philippines","date":"2024-11-30"},{"id":"20241208_j6mi8rlfsj2rtpoakvunm1fqoc","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Philippines","date":"2024-12-08"},{"id":"20241224_so19v7e6ca0o76kep46831db1k","status":"confirmed","summary":"Christmas Eve","region":"Philippines","date":"2024-12-24"},{"id":"20241225_vooehscpjd53vnra54e4j4j6lk","status":"confirmed","summary":"Christmas Day","region":"Philippines","date":"2024-12-25"},{"id":"20241230_aadf0k63l2sol6veff0j9gm7e8","status":"confirmed","summary":"Rizal Day","region":"Philippines","date":"2024-12-30"},{"id":"20241231_m6oidm7tg05vq53lg05jq7demc","status":"confirmed","summary":"New Year\'s Eve","region":"Philippines","date":"2024-12-31"},{"id":"20250101_1fh3c5qfn0eb6957759nceipbg","status":"confirmed","summary":"New Year\'s Day","region":"Philippines","date":"2025-01-01"},{"id":"20250129_5podahbgj69cqssl2r7dlcb5a8","status":"confirmed","summary":"Lunar New Year\'s Day","region":"Philippines","date":"2025-01-29"},{"id":"20250225_jpn7vq2aobbpqmto6j4n0fui28","status":"confirmed","summary":"People Power Anniversary","region":"Philippines","date":"2025-02-25"},{"id":"20250301_d64l302vnkodq2v0vehvt96d10","status":"confirmed","summary":"Ramadan Start","region":"Philippines","date":"2025-03-01"},{"id":"20250331_lema62qq0iap9m8ulnjpb3jgv8","status":"confirmed","summary":"Eidul-Fitar","region":"Philippines","date":"2025-03-31"},{"id":"20250409_ii8oh558dbsgk964292f8g2etc","status":"confirmed","summary":"The Day of Valor","region":"Philippines","date":"2025-04-09"},{"id":"20250417_auqobn256itm6qhcihorbo8uv0","status":"confirmed","summary":"Maundy Thursday","region":"Philippines","date":"2025-04-17"},{"id":"20250418_ufennoa4ir7tek7oivb3tis4lk","status":"confirmed","summary":"Good Friday","region":"Philippines","date":"2025-04-18"},{"id":"20250419_u9lthssgre3giv1n3sc9q4tcjo","status":"confirmed","summary":"Black Saturday","region":"Philippines","date":"2025-04-19"},{"id":"20250420_j6mqk82cv2eeirsf27ohjdjva8","status":"confirmed","summary":"Easter Sunday","region":"Philippines","date":"2025-04-20"},{"id":"20250501_45b8olgtg2r79k20r7fvesqh1k","status":"confirmed","summary":"Labor Day","region":"Philippines","date":"2025-05-01"},{"id":"20250607_af1qhi6mb6jhl27mqmn6it9n24","status":"confirmed","summary":"Eid al-Adha (Feast of the Sacrifice)","region":"Philippines","date":"2025-06-07"},{"id":"20250612_9ch0rf3u24bejp6glrv75as9bc","status":"confirmed","summary":"Independence Day","region":"Philippines","date":"2025-06-12"},{"id":"20250821_r27rtglkt8pff4h395f7r9enhs","status":"confirmed","summary":"Ninoy Aquino Day","region":"Philippines","date":"2025-08-21"},{"id":"20250825_pvhhevcd85pqfu997m5ivte9vo","status":"confirmed","summary":"National Heroes Day","region":"Philippines","date":"2025-08-25"},{"id":"20251101_1g2cpt42d1shunpsqi9gi7kjak","status":"confirmed","summary":"All Saints\' Day","region":"Philippines","date":"2025-11-01"},{"id":"20251102_mbke3h2qth47hqjb9l6971smbc","status":"confirmed","summary":"All Souls\' Day","region":"Philippines","date":"2025-11-02"},{"id":"20251130_j7oofpdpvklecej7hdti1biqis","status":"confirmed","summary":"Bonifacio Day","region":"Philippines","date":"2025-11-30"},{"id":"20251208_i17q2fnpsu9r79lknivd5u0h30","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Philippines","date":"2025-12-08"},{"id":"20251224_kj0d4ok1r5o0h107e7h9n5hb1o","status":"confirmed","summary":"Christmas Eve","region":"Philippines","date":"2025-12-24"},{"id":"20251225_h4rut01mjdjfjh4nkbonh07lrs","status":"confirmed","summary":"Christmas Day","region":"Philippines","date":"2025-12-25"},{"id":"20251230_953tse88cg3817p724no1dbs54","status":"confirmed","summary":"Rizal Day","region":"Philippines","date":"2025-12-30"},{"id":"20251231_f41kpcptk9nassurkeiueo9nmc","status":"confirmed","summary":"New Year\'s Eve","region":"Philippines","date":"2025-12-31"}],"Pakistan":[{"id":"20240101_b3kvbqaoffq0e8kncugmusk88c","status":"confirmed","summary":"New Year\'s Day","region":"Pakistan","date":"2024-01-01"},{"id":"20240205_j8de2gdlu3jgpfh16totghn1kk","status":"confirmed","summary":"Kashmir Day","region":"Pakistan","date":"2024-02-05"},{"id":"20240208_5oitc9ghg0835ecltmn0gk755g","status":"confirmed","summary":"Election Day","region":"Pakistan","date":"2024-02-08"},{"id":"20240208_ioc2ae09il7q8cda66h4qkrvpc","status":"confirmed","summary":"Shab e-Meraj","region":"Pakistan","date":"2024-02-08"},{"id":"20240214_cqv5ljptubjls3ae160i2hcjlg","status":"confirmed","summary":"Basant Panchami","region":"Pakistan","date":"2024-02-14"},{"id":"20240226_g63pqvrsetuhj36t677vkdv6n8","status":"confirmed","summary":"Shab e-Barat","region":"Pakistan","date":"2024-02-26"},{"id":"20240308_ra6d2q03m76glk6qrqgjhi8otk","status":"confirmed","summary":"Shivaratri","region":"Pakistan","date":"2024-03-08"},{"id":"20240312_mbl6adhk9jd4eelj2q8art94bc","status":"confirmed","summary":"Ramadan Start","region":"Pakistan","date":"2024-03-12"},{"id":"20240323_73ootkltmjfkbidr14ibih7tnk","status":"confirmed","summary":"Pakistan Day","region":"Pakistan","date":"2024-03-23"},{"id":"20240323_m22dsh8of0l62cr8643h88c7vg","status":"confirmed","summary":"Buddha Purnima","region":"Pakistan","date":"2024-03-23"},{"id":"20240324_rpaiu4di2qloc9n1vqirrvrp3g","status":"confirmed","summary":"Holi","region":"Pakistan","date":"2024-03-24"},{"id":"20240325_4bah6p832e1972pp6c59kkrrkc","status":"confirmed","summary":"Dulhandi","region":"Pakistan","date":"2024-03-25"},{"id":"20240329_h14rs8dvejavor2rgsu8ss2le0","status":"confirmed","summary":"Good Friday","region":"Pakistan","date":"2024-03-29"},{"id":"20240331_5k26namvtccb2a9lrgkh1ntc40","status":"confirmed","summary":"Easter Sunday","region":"Pakistan","date":"2024-03-31"},{"id":"20240401_n5ub2td4ugcsvspbeglu0e0ja0","status":"confirmed","summary":"Easter Monday","region":"Pakistan","date":"2024-04-01"},{"id":"20240410_s0iiqla0vhjt90t0ohakp2jhoo","status":"confirmed","summary":"Eid-ul-Fitr","region":"Pakistan","date":"2024-04-10"},{"id":"20240411_7fgs5ut3223e0ucoj7lpfr85as","status":"confirmed","summary":"Eid-ul-Fitr Holiday","region":"Pakistan","date":"2024-04-11"},{"id":"20240412_6g6qloo7khbfc7ql5irlmvo37o","status":"confirmed","summary":"Eid-ul-Fitr Holiday","region":"Pakistan","date":"2024-04-12"},{"id":"20240413_2qkt39hpc618l6716lgcvomh0k","status":"confirmed","summary":"Baisakhi","region":"Pakistan","date":"2024-04-13"},{"id":"20240413_fi4496rvculrhjrkt276ojc0po","status":"confirmed","summary":"Eid-ul-Fitr Holiday","region":"Pakistan","date":"2024-04-13"},{"id":"20240421_divuqrtf4orvq8ab45459i9s8o","status":"confirmed","summary":"Ridván","region":"Pakistan","date":"2024-04-21"},{"id":"20240501_4gt4r621r11amsfik4e1h6jfq8","status":"confirmed","summary":"Labour Day","region":"Pakistan","date":"2024-05-01"},{"id":"20240617_e6db2r4il6j12lp0ub5csmhtpg","status":"confirmed","summary":"Eid al-Adha","region":"Pakistan","date":"2024-06-17"},{"id":"20240618_jv5fkoss746vhdmjf21uff3f30","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Pakistan","date":"2024-06-18"},{"id":"20240619_3u36k0e488jcpeud6letqt2d1g","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Pakistan","date":"2024-06-19"},{"id":"20240701_3g5s2v4qvpcibvkc8qlkdc16jk","status":"confirmed","summary":"July 1 Bank Holiday","region":"Pakistan","date":"2024-07-01"},{"id":"20240716_e4fp0d64c0kek18l86kuoj934k","status":"confirmed","summary":"Ashura","region":"Pakistan","date":"2024-07-16"},{"id":"20240717_4a7bk1svbgdud4d17d2uvkjlmo","status":"confirmed","summary":"Ashura Holiday","region":"Pakistan","date":"2024-07-17"},{"id":"20240814_qife9ssdefvfql2n7rm35a7ls4","status":"confirmed","summary":"Independence Day","region":"Pakistan","date":"2024-08-14"},{"id":"20240820_e1mr857o1foof7qd628jnlt3q8","status":"confirmed","summary":"Birthday of Lord Zoroaster (Khordad Sal)","region":"Pakistan","date":"2024-08-20"},{"id":"20240826_d3s4mj47o9hil16afocldvav4g","status":"confirmed","summary":"Janmashtami","region":"Pakistan","date":"2024-08-26"},{"id":"20240827_cipci676fspil490qc7n7cifs4","status":"confirmed","summary":"Chelum","region":"Pakistan","date":"2024-08-27"},{"id":"20240906_p1g7oikjlo9im3s41eddrflnok","status":"confirmed","summary":"Defence Day","region":"Pakistan","date":"2024-09-06"},{"id":"20240916_n1djpv5p9iibog7snp864bi30g","status":"confirmed","summary":"Eid Milad un-Nabi","region":"Pakistan","date":"2024-09-16"},{"id":"20241011_ph7igmkfqmcjkp85b1nr5gak48","status":"confirmed","summary":"Durga Puja","region":"Pakistan","date":"2024-10-11"},{"id":"20241012_m3at75o0pu8boiu5nu31shu714","status":"confirmed","summary":"Dussehra","region":"Pakistan","date":"2024-10-12"},{"id":"20241016_d9pm32t50j05vue7iov2j4u9tk","status":"confirmed","summary":"Giarhwin Sharief","region":"Pakistan","date":"2024-10-16"},{"id":"20241017_l1a339ootlk8spcbu5kd0f585k","status":"confirmed","summary":"Birthday of Guru Balmik Sawami Ji","region":"Pakistan","date":"2024-10-17"},{"id":"20241101_s6fv4fq47osk2ap3019o895374","status":"confirmed","summary":"Diwali/Deepavali","region":"Pakistan","date":"2024-11-01"},{"id":"20241109_m7mtn3lcp4jonaj9msef2tt5k4","status":"confirmed","summary":"Iqbal Day","region":"Pakistan","date":"2024-11-09"},{"id":"20241115_16ndm1rdjfadnr076o0de1hp3c","status":"confirmed","summary":"Guru Nanak\'s Birthday","region":"Pakistan","date":"2024-11-15"},{"id":"20241224_ukuq4bibcn9j0f9fl78m0p3lec","status":"confirmed","summary":"Christmas Eve","region":"Pakistan","date":"2024-12-24"},{"id":"20241225_accf6t9f0keqah1qaf6br1b388","status":"confirmed","summary":"Christmas Day","region":"Pakistan","date":"2024-12-25"},{"id":"20241225_ls1boscug08vp48pn3r9mf871k","status":"confirmed","summary":"Quaid-e-Azam Day","region":"Pakistan","date":"2024-12-25"},{"id":"20241226_55jeoono0alpvftt20kf93mkpk","status":"confirmed","summary":"Day After Christmas (Christians only)","region":"Pakistan","date":"2024-12-26"},{"id":"20241231_cssh0bgtp99crrot1tkafbh4k4","status":"confirmed","summary":"New Year\'s Eve","region":"Pakistan","date":"2024-12-31"},{"id":"20250101_cip6bcmkei6uhdhmtqfe5uq4ag","status":"confirmed","summary":"New Year\'s Day","region":"Pakistan","date":"2025-01-01"},{"id":"20250127_rbfajdm2su51t22l3l6thhsir8","status":"confirmed","summary":"Shab e-Meraj","region":"Pakistan","date":"2025-01-27"},{"id":"20250202_7m7v8199pqnjrp14antgrne4s0","status":"confirmed","summary":"Basant Panchami","region":"Pakistan","date":"2025-02-02"},{"id":"20250205_cukgn2te0jktgqarr3v8b1dba4","status":"confirmed","summary":"Kashmir Day","region":"Pakistan","date":"2025-02-05"},{"id":"20250214_t884leuqk9uajg3q2j6tsm2ofk","status":"confirmed","summary":"Shab e-Barat","region":"Pakistan","date":"2025-02-14"},{"id":"20250301_ti083lqoh2ld653b9so2gn3eoo","status":"confirmed","summary":"Ramadan Start","region":"Pakistan","date":"2025-03-01"},{"id":"20250313_f236to4assrbmkeg1cbg3q7sbs","status":"confirmed","summary":"Holi","region":"Pakistan","date":"2025-03-13"},{"id":"20250323_9r60sig4iiah0r5hkvmk5gliv4","status":"confirmed","summary":"Pakistan Day","region":"Pakistan","date":"2025-03-23"},{"id":"20250331_t0ajbi2vt92bh0s82p6lqtjtqs","status":"confirmed","summary":"Eid-ul-Fitr","region":"Pakistan","date":"2025-03-31"},{"id":"20250401_totobf3b0b1562v6vulebfdul0","status":"confirmed","summary":"Eid-ul-Fitr Holiday","region":"Pakistan","date":"2025-04-01"},{"id":"20250402_49thbogb21p6d5d8u98rfbjh0c","status":"confirmed","summary":"Eid-ul-Fitr Holiday","region":"Pakistan","date":"2025-04-02"},{"id":"20250403_e7c6puf39sfu351uqcblle98jo","status":"confirmed","summary":"Eid-ul-Fitr Holiday","region":"Pakistan","date":"2025-04-03"},{"id":"20250414_4qaf6vq16rns7q3c3ro05urn80","status":"confirmed","summary":"Baisakhi","region":"Pakistan","date":"2025-04-14"},{"id":"20250418_i19ovcb957broiftdt9fk7nuq4","status":"confirmed","summary":"Good Friday","region":"Pakistan","date":"2025-04-18"},{"id":"20250421_ciptqmut31ubq06css9485v37c","status":"confirmed","summary":"Ridván","region":"Pakistan","date":"2025-04-21"},{"id":"20250421_i0j2rv4scpmiua6a7rpg7nksp4","status":"confirmed","summary":"Easter Monday","region":"Pakistan","date":"2025-04-21"},{"id":"20250501_qo3ubhakcj1d1tkf6vdor3o0lg","status":"confirmed","summary":"Labour Day","region":"Pakistan","date":"2025-05-01"},{"id":"20250512_0j6b9iqkv44n1vcsthusu625ug","status":"confirmed","summary":"Buddha Purnima","region":"Pakistan","date":"2025-05-12"},{"id":"20250607_8v3otfj18aukn9pqeqbhjh8fm4","status":"confirmed","summary":"Eid al-Adha","region":"Pakistan","date":"2025-06-07"},{"id":"20250608_39frnmae82qk194t9upfkc79go","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Pakistan","date":"2025-06-08"},{"id":"20250609_n1et1v2vntopshcpoofg4h64b4","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Pakistan","date":"2025-06-09"},{"id":"20250701_ot713qfbfl4tvh44iqr7clborc","status":"confirmed","summary":"July 1 Bank Holiday","region":"Pakistan","date":"2025-07-01"},{"id":"20250705_t8b8vlnab8111052sa2o4qrrf4","status":"confirmed","summary":"Ashura","region":"Pakistan","date":"2025-07-05"},{"id":"20250706_teud4uf2ul40801e0jbm7800kc","status":"confirmed","summary":"Ashura Holiday","region":"Pakistan","date":"2025-07-06"},{"id":"20250814_d7v3ej8qveao3v2vkqbd7mt084","status":"confirmed","summary":"Independence Day","region":"Pakistan","date":"2025-08-14"},{"id":"20250815_rml950t49mhqaq2r7pkicvfhn8","status":"confirmed","summary":"Chelum","region":"Pakistan","date":"2025-08-15"},{"id":"20250904_77ghad1sj80dj5los7jr1lp9as","status":"confirmed","summary":"Giarhwin Sharief","region":"Pakistan","date":"2025-09-04"},{"id":"20250905_45t1kd1g724p6uminnk756723s","status":"confirmed","summary":"Eid Milad un-Nabi","region":"Pakistan","date":"2025-09-05"},{"id":"20250906_mi1eb1mi7f7pcp981eniv7iadk","status":"confirmed","summary":"Defence Day","region":"Pakistan","date":"2025-09-06"},{"id":"20250930_09ud577c3csbf9ik0g203gvfv0","status":"confirmed","summary":"Durga Puja","region":"Pakistan","date":"2025-09-30"},{"id":"20251002_g9npr1s8lj97d1ip1spf39cdg8","status":"confirmed","summary":"Dussehra","region":"Pakistan","date":"2025-10-02"},{"id":"20251007_ifibbtvdbb7q6hmmmlksf2klac","status":"confirmed","summary":"Birthday of Guru Balmik Sawami Ji","region":"Pakistan","date":"2025-10-07"},{"id":"20251020_91eojie1lt4g1et52n1n1d8cgk","status":"confirmed","summary":"Diwali/Deepavali","region":"Pakistan","date":"2025-10-20"},{"id":"20251109_htj1b8vdurvvgf58hg1mgiqlac","status":"confirmed","summary":"Iqbal Day","region":"Pakistan","date":"2025-11-09"},{"id":"20251224_e69428mj25sv23agvf1nn6cgms","status":"confirmed","summary":"Christmas Eve","region":"Pakistan","date":"2025-12-24"},{"id":"20251225_9c6069ocvs5rvh9j0io1gje8r0","status":"confirmed","summary":"Quaid-e-Azam Day","region":"Pakistan","date":"2025-12-25"},{"id":"20251225_hraqnlr6t5oub9j5b1e92bn83k","status":"confirmed","summary":"Christmas Day","region":"Pakistan","date":"2025-12-25"},{"id":"20251226_dfi2q3jluifiu9hmbv8cd58kkk","status":"confirmed","summary":"Day After Christmas (Christians only)","region":"Pakistan","date":"2025-12-26"},{"id":"20251231_466gkcr27h146k4sdjb6fseumk","status":"confirmed","summary":"New Year\'s Eve","region":"Pakistan","date":"2025-12-31"}],"St. Pierre & Miquelon":[{"id":"20240101_aq54bd2qap85rjdfim3dp21rfg","status":"confirmed","summary":"New Year\'s Day","region":"St. Pierre & Miquelon","date":"2024-01-01"},{"id":"20240310_k3j4ru79qje6irbk988b5ck7ao","status":"confirmed","summary":"Daylight Saving Time starts","region":"St. Pierre & Miquelon","date":"2024-03-10"},{"id":"20240401_mioc5grig0ad0b7m7l51pf12bk","status":"confirmed","summary":"Easter Monday","region":"St. Pierre & Miquelon","date":"2024-04-01"},{"id":"20240501_0et724309msi148a01ouf6s9p0","status":"confirmed","summary":"Labor Day / May Day","region":"St. Pierre & Miquelon","date":"2024-05-01"},{"id":"20240508_q5095ej3s1mb57t7o74ucglpv0","status":"confirmed","summary":"Victory Day","region":"St. Pierre & Miquelon","date":"2024-05-08"},{"id":"20240509_ack1e0gjp9hmg3visbuuutmvs8","status":"confirmed","summary":"Ascension Day","region":"St. Pierre & Miquelon","date":"2024-05-09"},{"id":"20240520_jn1g6bu3vcn8dj2op7jf6bukhs","status":"confirmed","summary":"Whit Monday","region":"St. Pierre & Miquelon","date":"2024-05-20"},{"id":"20240714_34bqf29vrq00ohra4g93qmqcmg","status":"confirmed","summary":"French National Day","region":"St. Pierre & Miquelon","date":"2024-07-14"},{"id":"20240815_tea98vidql10i5m17gt0dnggm0","status":"confirmed","summary":"Assumption of Mary","region":"St. Pierre & Miquelon","date":"2024-08-15"},{"id":"20241101_pinlhqtv22uu83884p8fn20hpo","status":"confirmed","summary":"All Saints\' Day","region":"St. Pierre & Miquelon","date":"2024-11-01"},{"id":"20241103_eftom8dhhcp4pjo02n3juvkofk","status":"confirmed","summary":"Daylight Saving Time ends","region":"St. Pierre & Miquelon","date":"2024-11-03"},{"id":"20241111_4026q1tjs6ltne1jh86d0638uc","status":"confirmed","summary":"Armistice Day","region":"St. Pierre & Miquelon","date":"2024-11-11"},{"id":"20241225_3j48qtqubsq2bvke111fqkss10","status":"confirmed","summary":"Christmas Day","region":"St. Pierre & Miquelon","date":"2024-12-25"},{"id":"20241231_r96t6vi4tc0spla407h0nil608","status":"confirmed","summary":"New Year\'s Eve","region":"St. Pierre & Miquelon","date":"2024-12-31"},{"id":"20250101_kqvdl7sev8i9geo875aaqhl64k","status":"confirmed","summary":"New Year\'s Day","region":"St. Pierre & Miquelon","date":"2025-01-01"},{"id":"20250309_t0it7ic33rka1g7ubh1221a6ug","status":"confirmed","summary":"Daylight Saving Time starts","region":"St. Pierre & Miquelon","date":"2025-03-09"},{"id":"20250421_c3hudppihqabl9gpnm91ncu5lc","status":"confirmed","summary":"Easter Monday","region":"St. Pierre & Miquelon","date":"2025-04-21"},{"id":"20250501_37tvqi5qruuvt5c1c8iqql2434","status":"confirmed","summary":"Labor Day / May Day","region":"St. Pierre & Miquelon","date":"2025-05-01"},{"id":"20250508_83vn4p9cvj14ugbfj3hvn74k84","status":"confirmed","summary":"Victory Day","region":"St. Pierre & Miquelon","date":"2025-05-08"},{"id":"20250529_i2cmr22c4rsb9uduj293stg2gg","status":"confirmed","summary":"Ascension Day","region":"St. Pierre & Miquelon","date":"2025-05-29"},{"id":"20250609_eldas2rp87s1830ghlq7vkmiis","status":"confirmed","summary":"Whit Monday","region":"St. Pierre & Miquelon","date":"2025-06-09"},{"id":"20250714_91kin2jmq6rhosqknb4iq3kt74","status":"confirmed","summary":"French National Day","region":"St. Pierre & Miquelon","date":"2025-07-14"},{"id":"20250815_3s41ptgp27r1r0nrg99gphu764","status":"confirmed","summary":"Assumption of Mary","region":"St. Pierre & Miquelon","date":"2025-08-15"},{"id":"20251101_84e248480n9a91jqfov13o4b44","status":"confirmed","summary":"All Saints\' Day","region":"St. Pierre & Miquelon","date":"2025-11-01"},{"id":"20251102_e19jad5ur4q1es7ttobledp724","status":"confirmed","summary":"Daylight Saving Time ends","region":"St. Pierre & Miquelon","date":"2025-11-02"},{"id":"20251111_1olar7sgcnb13elugenvoo8d68","status":"confirmed","summary":"Armistice Day","region":"St. Pierre & Miquelon","date":"2025-11-11"},{"id":"20251225_ashr8ng6lbmf2ggq2bcs7c0ff0","status":"confirmed","summary":"Christmas Day","region":"St. Pierre & Miquelon","date":"2025-12-25"},{"id":"20251231_83r1mc2n7el7ckghme9fogun7g","status":"confirmed","summary":"New Year\'s Eve","region":"St. Pierre & Miquelon","date":"2025-12-31"}],"Poland":[{"id":"20240101_l9lejedfstuv2oc8u0ri1u03o8","status":"confirmed","summary":"New Year\'s Day","region":"Poland","date":"2024-01-01"},{"id":"20240106_ptt47vgapsd4p2la886beid5sg","status":"confirmed","summary":"Epiphany","region":"Poland","date":"2024-01-06"},{"id":"20240214_4ferpfsqphe9tdf3420rlnfut0","status":"confirmed","summary":"Valentine\'s Day","region":"Poland","date":"2024-02-14"},{"id":"20240329_53e6emqo72sa0md6g58camko80","status":"confirmed","summary":"Good Friday","region":"Poland","date":"2024-03-29"},{"id":"20240330_qiu6lu5ki6d68bc5793iq017u4","status":"confirmed","summary":"Holy Saturday","region":"Poland","date":"2024-03-30"},{"id":"20240331_j3odj83usrtpi6i4n96fnjo8l8","status":"confirmed","summary":"Easter Sunday","region":"Poland","date":"2024-03-31"},{"id":"20240401_96pdu83lnmueid3vicd41e9mfk","status":"confirmed","summary":"Easter Monday","region":"Poland","date":"2024-04-01"},{"id":"20240501_rljpgi7a742afra1f9iue6ngbg","status":"confirmed","summary":"Labor Day / May Day","region":"Poland","date":"2024-05-01"},{"id":"20240502_rupk33hnt7braua62gv5r81hb8","status":"confirmed","summary":"Day of the Flag","region":"Poland","date":"2024-05-02"},{"id":"20240503_lhn522g5j390kga91jve2764b4","status":"confirmed","summary":"Constitution Day","region":"Poland","date":"2024-05-03"},{"id":"20240519_76tabu7br2qne16ll4mk5nceho","status":"confirmed","summary":"Whit Sunday","region":"Poland","date":"2024-05-19"},{"id":"20240526_teqijebj3ac02tdg89579qumtg","status":"confirmed","summary":"Mothers\' Day","region":"Poland","date":"2024-05-26"},{"id":"20240530_18251rl9q5f1jeg76nbsbvpjc0","status":"confirmed","summary":"Corpus Christi","region":"Poland","date":"2024-05-30"},{"id":"20240601_2dbr6vs4g6ouk9temnkrb49gf4","status":"confirmed","summary":"Children\'s Day","region":"Poland","date":"2024-06-01"},{"id":"20240623_dgehaj20t5hkg7904fo6hnt0ek","status":"confirmed","summary":"Fathers\' Day","region":"Poland","date":"2024-06-23"},{"id":"20240815_6k19uqfhrmhaulgnoum5jm1pg8","status":"confirmed","summary":"Assumption of Mary","region":"Poland","date":"2024-08-15"},{"id":"20241101_vlcj2b4e4bc0ef21obj7clh5to","status":"confirmed","summary":"All Saints\' Day","region":"Poland","date":"2024-11-01"},{"id":"20241111_uchk8qla7mdbk7pivi758v2me4","status":"confirmed","summary":"Independence Day","region":"Poland","date":"2024-11-11"},{"id":"20241224_pt11knih37prqmeali71aukjjs","status":"confirmed","summary":"Christmas Eve","region":"Poland","date":"2024-12-24"},{"id":"20241225_u8k557timb584loqsrda62sam0","status":"confirmed","summary":"Christmas Day","region":"Poland","date":"2024-12-25"},{"id":"20241226_a85k6a94ifgk3v6kmpq8uah8go","status":"confirmed","summary":"Second Day of Christmas","region":"Poland","date":"2024-12-26"},{"id":"20241227_n85fanjbel3u9pntdae8oilp3k","status":"confirmed","summary":"National Day of the Victorious Greater Poland Uprising","region":"Poland","date":"2024-12-27"},{"id":"20241231_g2ufpsoe5pgspkc29etcermrn8","status":"confirmed","summary":"New Year\'s Eve","region":"Poland","date":"2024-12-31"},{"id":"20250101_b6jqf20fehunb7vldt5bhm8tbk","status":"confirmed","summary":"New Year\'s Day","region":"Poland","date":"2025-01-01"},{"id":"20250106_c0t1ugeao65jiok63njkulv8vo","status":"confirmed","summary":"Epiphany","region":"Poland","date":"2025-01-06"},{"id":"20250214_dvf4fpa2aqn5kpka4kk1pnuo20","status":"confirmed","summary":"Valentine\'s Day","region":"Poland","date":"2025-02-14"},{"id":"20250418_djigarl1cjojidau9tlsmbanns","status":"confirmed","summary":"Good Friday","region":"Poland","date":"2025-04-18"},{"id":"20250419_vbhvipg494jg3m5n8n20ifk3oc","status":"confirmed","summary":"Holy Saturday","region":"Poland","date":"2025-04-19"},{"id":"20250420_0ma6l4s7jsnorelof90f49seco","status":"confirmed","summary":"Easter Sunday","region":"Poland","date":"2025-04-20"},{"id":"20250421_ib0cgopq6pff821nq5rg6hdtt4","status":"confirmed","summary":"Easter Monday","region":"Poland","date":"2025-04-21"},{"id":"20250501_lnqn0apav98judki36jui301n8","status":"confirmed","summary":"Labor Day / May Day","region":"Poland","date":"2025-05-01"},{"id":"20250502_0g03pvro2r49a62t1bv0t6p04s","status":"confirmed","summary":"Day of the Flag","region":"Poland","date":"2025-05-02"},{"id":"20250503_44m6vnliqe0tj10pe56gg7n6v8","status":"confirmed","summary":"Constitution Day","region":"Poland","date":"2025-05-03"},{"id":"20250526_tpsq2h9r9m19r5g4kcgbqla11c","status":"confirmed","summary":"Mothers\' Day","region":"Poland","date":"2025-05-26"},{"id":"20250601_8lenppluqanqeuhjo6ipt4gsok","status":"confirmed","summary":"Children\'s Day","region":"Poland","date":"2025-06-01"},{"id":"20250608_584lahcf98urd4t213dse97pco","status":"confirmed","summary":"Whit Sunday","region":"Poland","date":"2025-06-08"},{"id":"20250619_h2j2d20osjpsjbca2qivuf9hbs","status":"confirmed","summary":"Corpus Christi","region":"Poland","date":"2025-06-19"},{"id":"20250623_r2h6p71g6o43kdncij0vmaapvg","status":"confirmed","summary":"Fathers\' Day","region":"Poland","date":"2025-06-23"},{"id":"20250815_fcd5o4rvh0vb2er3buksf2o9cc","status":"confirmed","summary":"Assumption of Mary","region":"Poland","date":"2025-08-15"},{"id":"20251101_qeluqa2io836i9phfu7tsjbkl0","status":"confirmed","summary":"All Saints\' Day","region":"Poland","date":"2025-11-01"},{"id":"20251111_c8161pio09ctnmb70p8un1u9no","status":"confirmed","summary":"Independence Day","region":"Poland","date":"2025-11-11"},{"id":"20251224_lkvmanfeubglh7apo4pbdfbqis","status":"confirmed","summary":"Christmas Eve","region":"Poland","date":"2025-12-24"},{"id":"20251225_hdpbtdh14na823a2e7gg5fmu08","status":"confirmed","summary":"Christmas Day","region":"Poland","date":"2025-12-25"},{"id":"20251226_anp1v56i53j2mo7u8g8to6kgvk","status":"confirmed","summary":"Second Day of Christmas","region":"Poland","date":"2025-12-26"},{"id":"20251227_8sfbdp20gt9h1ekrhltq5lhlm4","status":"confirmed","summary":"National Day of the Victorious Greater Poland Uprising","region":"Poland","date":"2025-12-27"},{"id":"20251231_ae0nu8alj518pge2ev7vibflqs","status":"confirmed","summary":"New Year\'s Eve","region":"Poland","date":"2025-12-31"}],"Portugal":[{"id":"20240101_5lmfvqcp3fvbqnrgm91jm8bqm8","status":"confirmed","summary":"New Year\'s Day","region":"Portugal","date":"2024-01-01"},{"id":"20240213_7m0e2vupp79tnrkvvsrn8o3fi0","status":"confirmed","summary":"Carnival / Shrove Tuesday / Pancake Day","region":"Portugal","date":"2024-02-13"},{"id":"20240214_20lagsq8e6nuvncl6kqs2r9n8c","status":"confirmed","summary":"Valentine\'s Day","region":"Portugal","date":"2024-02-14"},{"id":"20240319_3m6hed3cv704lv739l8jfbiv70","status":"confirmed","summary":"St. Joseph\'s Day (Santarém)","region":"Portugal","date":"2024-03-19"},{"id":"20240319_ptrbu3io98u2tchgdssv35icc4","status":"confirmed","summary":"Fathers\' Day","region":"Portugal","date":"2024-03-19"},{"id":"20240329_vsi5oinpa9cnnevovakie7okjs","status":"confirmed","summary":"Good Friday","region":"Portugal","date":"2024-03-29"},{"id":"20240331_gsm444rk5uropj08u2p540vopo","status":"confirmed","summary":"Easter Sunday","region":"Portugal","date":"2024-03-31"},{"id":"20240331_jbpqeqakq64ap91r43us2qia6s","status":"confirmed","summary":"Daylight Saving Time starts","region":"Portugal","date":"2024-03-31"},{"id":"20240416_mo6qd2q938abc3hmklu2k6uhvk","status":"confirmed","summary":"Our Lady of Mércoles (Castelo Branco)","region":"Portugal","date":"2024-04-16"},{"id":"20240425_0v2cr05t9a6085pkc97u78jhhs","status":"confirmed","summary":"Liberty Day","region":"Portugal","date":"2024-04-25"},{"id":"20240501_v10vja1ecjuc2qf7rjnrsep6cg","status":"confirmed","summary":"Labor Day / May Day","region":"Portugal","date":"2024-05-01"},{"id":"20240505_fcssntt8o8irt93bn17i09jcnk","status":"confirmed","summary":"Mothers\' Day","region":"Portugal","date":"2024-05-05"},{"id":"20240509_2or0852c6cjr47ics01kki98bc","status":"confirmed","summary":"Ascension Day (Beja)","region":"Portugal","date":"2024-05-09"},{"id":"20240512_vls3atk97fpe8bsegmq9o7jgfs","status":"confirmed","summary":"St. Joana\'s Day (Aveiro)","region":"Portugal","date":"2024-05-12"},{"id":"20240520_k2etbl2cqj6co2osn5n3uqen1g","status":"confirmed","summary":"Azores Day (Azores)","region":"Portugal","date":"2024-05-20"},{"id":"20240522_t651ipj8cua32auugij6qbum6s","status":"confirmed","summary":"Leiria Day (Leiria)","region":"Portugal","date":"2024-05-22"},{"id":"20240523_jph0l5aqi7f1b1blktanler6sg","status":"confirmed","summary":"Portalegre Day (Portalegre)","region":"Portugal","date":"2024-05-23"},{"id":"20240530_cv25j9k97ctu2ge31p5v9rj01g","status":"confirmed","summary":"Corpus Christi","region":"Portugal","date":"2024-05-30"},{"id":"20240610_tqhtv592112tqtab6r2aajctd8","status":"confirmed","summary":"Portugal Day","region":"Portugal","date":"2024-06-10"},{"id":"20240613_9svophc2bpau8l9jhmid2ra8ls","status":"confirmed","summary":"St. Anthony\'s Day (regional holiday)","region":"Portugal","date":"2024-06-13"},{"id":"20240624_78cb5nrs6hpfd2gpbtcl5nqe24","status":"confirmed","summary":"St. John\'s Day (regional holiday)","region":"Portugal","date":"2024-06-24"},{"id":"20240629_e5om4bfl7544sida7lglss173g","status":"confirmed","summary":"St. Peter\'s Day (Évora)","region":"Portugal","date":"2024-06-29"},{"id":"20240701_kdrmbht59bi9fhh4ot7dlu3jcs","status":"confirmed","summary":"Madeira Day (Madeira)","region":"Portugal","date":"2024-07-01"},{"id":"20240704_bsee0cg3b2jgv2a1t6jbjlonmc","status":"confirmed","summary":"St. Elizabeth\'s Day (Coimbra)","region":"Portugal","date":"2024-07-04"},{"id":"20240815_fpsrlotmchdeetpi89smq3b7qk","status":"confirmed","summary":"Assumption of Mary","region":"Portugal","date":"2024-08-15"},{"id":"20240820_9blhsjg7uio388l86a5qbkdl2o","status":"confirmed","summary":"Our Lady of Sorrows (Viana do Castelo)","region":"Portugal","date":"2024-08-20"},{"id":"20240822_hr00dp0973o40k35khpi88pe04","status":"confirmed","summary":"Our Lady of Graces (Bragança)","region":"Portugal","date":"2024-08-22"},{"id":"20240907_bflg450947i9ek7qdi08kg3bsc","status":"confirmed","summary":"Faro Day (Faro)","region":"Portugal","date":"2024-09-07"},{"id":"20240915_i19gvk9v5hho7l3l7athc0fajc","status":"confirmed","summary":"Birth of Bocage (Setúbal)","region":"Portugal","date":"2024-09-15"},{"id":"20240921_cugndsdp4518g1cj4ou955s22g","status":"confirmed","summary":"St. Matthew\'s Day (Viseu)","region":"Portugal","date":"2024-09-21"},{"id":"20241005_smqaelur18l0k8nhbh4ikavpqg","status":"confirmed","summary":"Republic Day","region":"Portugal","date":"2024-10-05"},{"id":"20241027_fb6ri677munko8p02snclkh548","status":"confirmed","summary":"Daylight Saving Time ends","region":"Portugal","date":"2024-10-27"},{"id":"20241101_6ne92l4vjgat5544mdsmuqovms","status":"confirmed","summary":"All Saints\' Day","region":"Portugal","date":"2024-11-01"},{"id":"20241127_hva53cnmkkehban4c2p0n9phkk","status":"confirmed","summary":"Foral of Sancho I (Guarda)","region":"Portugal","date":"2024-11-27"},{"id":"20241201_ei2ipqoqvfgt653ob5dmrn5ugg","status":"confirmed","summary":"Restoration of Independence","region":"Portugal","date":"2024-12-01"},{"id":"20241208_g98to5h49vkqi2at4jgk20fmo0","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Portugal","date":"2024-12-08"},{"id":"20241224_igbjcghd25eeommsi3lqojr27k","status":"confirmed","summary":"Christmas Eve","region":"Portugal","date":"2024-12-24"},{"id":"20241225_jldesbd3ekhlbvp7m0e9e5k2hc","status":"confirmed","summary":"Christmas Day","region":"Portugal","date":"2024-12-25"},{"id":"20241231_6al7ilfb15o4qdujgr0g5o9cq0","status":"confirmed","summary":"New Year\'s Eve","region":"Portugal","date":"2024-12-31"},{"id":"20250101_n4ljks24mibh7si0jebt13ufs4","status":"confirmed","summary":"New Year\'s Day","region":"Portugal","date":"2025-01-01"},{"id":"20250214_rebrrt34t6a6627aetepusgj4o","status":"confirmed","summary":"Valentine\'s Day","region":"Portugal","date":"2025-02-14"},{"id":"20250304_icg6tcgcla8ofssjkkolol9b7o","status":"confirmed","summary":"Carnival / Shrove Tuesday / Pancake Day","region":"Portugal","date":"2025-03-04"},{"id":"20250319_29g070406t6rt65gtutlq2e6q4","status":"confirmed","summary":"St. Joseph\'s Day (Santarém)","region":"Portugal","date":"2025-03-19"},{"id":"20250319_gp5s2cu46lvguoltsj044f3qro","status":"confirmed","summary":"Fathers\' Day","region":"Portugal","date":"2025-03-19"},{"id":"20250330_o3hpu4h09lkubspmb9r3qa5vmc","status":"confirmed","summary":"Daylight Saving Time starts","region":"Portugal","date":"2025-03-30"},{"id":"20250418_4m6kfq0huipjpj9h1q2kd8b9q4","status":"confirmed","summary":"Good Friday","region":"Portugal","date":"2025-04-18"},{"id":"20250420_ftbn7epc06ds2jdc15gksu424k","status":"confirmed","summary":"Easter Sunday","region":"Portugal","date":"2025-04-20"},{"id":"20250425_cl0ue670e2elehrtm17eqaogm8","status":"confirmed","summary":"Liberty Day","region":"Portugal","date":"2025-04-25"},{"id":"20250501_bs4nkpgcvcp6aceph2trhggqhc","status":"confirmed","summary":"Labor Day / May Day","region":"Portugal","date":"2025-05-01"},{"id":"20250504_eqamp2b1brt61b1h6rm4av1kto","status":"confirmed","summary":"Mothers\' Day","region":"Portugal","date":"2025-05-04"},{"id":"20250506_unlq90sesrjh0a34vqkb9oc2jo","status":"confirmed","summary":"Our Lady of Mércoles (Castelo Branco)","region":"Portugal","date":"2025-05-06"},{"id":"20250512_44777ceci9shhossgs2pcjakgo","status":"confirmed","summary":"St. Joana\'s Day (Aveiro)","region":"Portugal","date":"2025-05-12"},{"id":"20250522_6pgq47dnni2ctep6d78r8qjquk","status":"confirmed","summary":"Leiria Day (Leiria)","region":"Portugal","date":"2025-05-22"},{"id":"20250523_ip8grlmo393u5456cn51at0fic","status":"confirmed","summary":"Portalegre Day (Portalegre)","region":"Portugal","date":"2025-05-23"},{"id":"20250529_27mind6v7gldrouuv9k5j76vns","status":"confirmed","summary":"Ascension Day (Beja)","region":"Portugal","date":"2025-05-29"},{"id":"20250609_99q5lakuq83gt8r8qpqb9i298s","status":"confirmed","summary":"Azores Day (Azores)","region":"Portugal","date":"2025-06-09"},{"id":"20250610_a4oqrqnfq6jno1l2re1951a19o","status":"confirmed","summary":"Portugal Day","region":"Portugal","date":"2025-06-10"},{"id":"20250613_pn0rs2696ddr0ps4p9utodiuqs","status":"confirmed","summary":"St. Anthony\'s Day (regional holiday)","region":"Portugal","date":"2025-06-13"},{"id":"20250619_r0t7dnv149ha0mmojsvr21h8g8","status":"confirmed","summary":"Corpus Christi","region":"Portugal","date":"2025-06-19"},{"id":"20250624_q4396p9l5lccp8i5rkuga9jdm0","status":"confirmed","summary":"St. John\'s Day (regional holiday)","region":"Portugal","date":"2025-06-24"},{"id":"20250629_d7b12jjq1r90fdda80ose6ufs0","status":"confirmed","summary":"St. Peter\'s Day (Évora)","region":"Portugal","date":"2025-06-29"},{"id":"20250701_d1mttph6vp7sh2s9imdcn304u8","status":"confirmed","summary":"Madeira Day (Madeira)","region":"Portugal","date":"2025-07-01"},{"id":"20250704_qj8brrcudnedoqh766ah5ls9bs","status":"confirmed","summary":"St. Elizabeth\'s Day (Coimbra)","region":"Portugal","date":"2025-07-04"},{"id":"20250815_jqto12e9jucpq3b6jg03fcgrs4","status":"confirmed","summary":"Assumption of Mary","region":"Portugal","date":"2025-08-15"},{"id":"20250820_m4ts20udrumng9rof2at4rt534","status":"confirmed","summary":"Our Lady of Sorrows (Viana do Castelo)","region":"Portugal","date":"2025-08-20"},{"id":"20250822_kvks8s9emgmo42h9ek880f4v7g","status":"confirmed","summary":"Our Lady of Graces (Bragança)","region":"Portugal","date":"2025-08-22"},{"id":"20250907_d7oc9a5jgkmu20i1t7gp490qvk","status":"confirmed","summary":"Faro Day (Faro)","region":"Portugal","date":"2025-09-07"},{"id":"20250915_ia5fe57e986fns7jv64287mhpc","status":"confirmed","summary":"Birth of Bocage (Setúbal)","region":"Portugal","date":"2025-09-15"},{"id":"20250921_il19vbmo5s6vom5094t36gh0cc","status":"confirmed","summary":"St. Matthew\'s Day (Viseu)","region":"Portugal","date":"2025-09-21"},{"id":"20251005_m6d6ev3tqgqc2nevno8ugdtums","status":"confirmed","summary":"Republic Day","region":"Portugal","date":"2025-10-05"},{"id":"20251026_joc9nfa9qchtu0oas5qmhqolug","status":"confirmed","summary":"Daylight Saving Time ends","region":"Portugal","date":"2025-10-26"},{"id":"20251101_4j79q9pclo86pa9vl27o8ome3s","status":"confirmed","summary":"All Saints\' Day","region":"Portugal","date":"2025-11-01"},{"id":"20251127_2d3qrvmjmdaohqh07c5g3k9vbk","status":"confirmed","summary":"Foral of Sancho I (Guarda)","region":"Portugal","date":"2025-11-27"},{"id":"20251201_f6ihh4n4kohkvjr9fl0vjh36ns","status":"confirmed","summary":"Restoration of Independence","region":"Portugal","date":"2025-12-01"},{"id":"20251208_2agq5qi33b1fdopbgvmot3phtk","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Portugal","date":"2025-12-08"},{"id":"20251224_ak0om1pmdg1s63gsde9raqdsjk","status":"confirmed","summary":"Christmas Eve","region":"Portugal","date":"2025-12-24"},{"id":"20251225_s6icgkc2ajflggp7go2bicr2e4","status":"confirmed","summary":"Christmas Day","region":"Portugal","date":"2025-12-25"},{"id":"20251231_mhupmedk280l6mr95cttrchd5k","status":"confirmed","summary":"New Year\'s Eve","region":"Portugal","date":"2025-12-31"}],"Puerto Rico":[{"id":"20240101_s1b75frk8066j33omtomfshsjg","status":"confirmed","summary":"New Year\'s Day","region":"Puerto Rico","date":"2024-01-01"},{"id":"20240106_b162tv86ftj7mohq0hedt141rg","status":"confirmed","summary":"Epiphany","region":"Puerto Rico","date":"2024-01-06"},{"id":"20240111_npq4ojq9hdvlq5f0sult63fv04","status":"confirmed","summary":"Birthday of Eugenio María de Hostos","region":"Puerto Rico","date":"2024-01-11"},{"id":"20240213_hmq8nk8cmnn8feergijfht0bv4","status":"confirmed","summary":"Carnival/Shrove Tuesday","region":"Puerto Rico","date":"2024-02-13"},{"id":"20240214_rbtavl6qjv5nmcajlo9s187bok","status":"confirmed","summary":"Valentine\'s Day","region":"Puerto Rico","date":"2024-02-14"},{"id":"20240218_hv1c8s2iqa2h1jgh8v1cqremag","status":"confirmed","summary":"Day in Commemoration of the Birthday of Don Luis Muñoz-Marín","region":"Puerto Rico","date":"2024-02-18"},{"id":"20240329_i7e4ibuku8rgflfo86id7sc6jo","status":"confirmed","summary":"Good Friday","region":"Puerto Rico","date":"2024-03-29"},{"id":"20240331_6lp75mk6msf1ojoupj80p28m50","status":"confirmed","summary":"Easter Sunday","region":"Puerto Rico","date":"2024-03-31"},{"id":"20240416_ud2l4kun7msis9plg939esrfec","status":"confirmed","summary":"José de Diego’s Birthday","region":"Puerto Rico","date":"2024-04-16"},{"id":"20240512_i3cl90p8jfg9oqtlggcbhl48dg","status":"confirmed","summary":"Mothers\' Day","region":"Puerto Rico","date":"2024-05-12"},{"id":"20240616_nd8vrt27tktsvn6ujs6t8ifb68","status":"confirmed","summary":"Fathers\' Day","region":"Puerto Rico","date":"2024-06-16"},{"id":"20240619_lrpgkuoqp2s08q1711n96jb588","status":"confirmed","summary":"Juneteenth National Independence Day","region":"Puerto Rico","date":"2024-06-19"},{"id":"20240727_agkenr3op11mqc97bq2qvuhuik","status":"confirmed","summary":"José Celso Barbosa’s Birthday","region":"Puerto Rico","date":"2024-07-27"},{"id":"20241105_0qpboa8m9fmki609seg4ruanao","status":"confirmed","summary":"Election Day","region":"Puerto Rico","date":"2024-11-05"},{"id":"20241128_dblb46unj9hmdap6auhrsv14qc","status":"confirmed","summary":"Thanksgiving Day","region":"Puerto Rico","date":"2024-11-28"},{"id":"20241224_gpkan428kufjeb9ee5s8r82ch0","status":"confirmed","summary":"Christmas Eve","region":"Puerto Rico","date":"2024-12-24"},{"id":"20241225_0h68dg8l8go3po4f0p7h1gljm4","status":"confirmed","summary":"Christmas Day","region":"Puerto Rico","date":"2024-12-25"},{"id":"20241231_dmljmts98kvvndqo8lg6re7ads","status":"confirmed","summary":"New Year\'s Eve","region":"Puerto Rico","date":"2024-12-31"},{"id":"20250101_ffmsvbfhe4h521e2rg4sptuvp8","status":"confirmed","summary":"New Year\'s Day","region":"Puerto Rico","date":"2025-01-01"},{"id":"20250106_jkcmuuhjals2tpts8h8ouvkojo","status":"confirmed","summary":"Epiphany","region":"Puerto Rico","date":"2025-01-06"},{"id":"20250111_vi2r75frvkta8mulc3o6gp06e0","status":"confirmed","summary":"Birthday of Eugenio María de Hostos","region":"Puerto Rico","date":"2025-01-11"},{"id":"20250214_df8th2j3093b9ejfjgaoj78ito","status":"confirmed","summary":"Valentine\'s Day","region":"Puerto Rico","date":"2025-02-14"},{"id":"20250218_29837p0tl993sgnr5mkrdhpkgc","status":"confirmed","summary":"Day in Commemoration of the Birthday of Don Luis Muñoz-Marín","region":"Puerto Rico","date":"2025-02-18"},{"id":"20250304_llfb35d5c3nor71opi9mmnd5c4","status":"confirmed","summary":"Carnival/Shrove Tuesday","region":"Puerto Rico","date":"2025-03-04"},{"id":"20250416_i1mpi0bqnbslbja1883dt7co2c","status":"confirmed","summary":"José de Diego’s Birthday","region":"Puerto Rico","date":"2025-04-16"},{"id":"20250418_achirrj4fm6smmg4cpeqvma49s","status":"confirmed","summary":"Good Friday","region":"Puerto Rico","date":"2025-04-18"},{"id":"20250420_f69npfcek8n49n0r5sqhnad79g","status":"confirmed","summary":"Easter Sunday","region":"Puerto Rico","date":"2025-04-20"},{"id":"20250511_immomr0m8vuf7gh6i5n1a5erp8","status":"confirmed","summary":"Mothers\' Day","region":"Puerto Rico","date":"2025-05-11"},{"id":"20250615_qpjg49jld3qg6uv4vtg8mel1mo","status":"confirmed","summary":"Fathers\' Day","region":"Puerto Rico","date":"2025-06-15"},{"id":"20250619_nd6sjpd93g8a2k8027br33v2fo","status":"confirmed","summary":"Juneteenth National Independence Day","region":"Puerto Rico","date":"2025-06-19"},{"id":"20250727_u6mjdkvnr5ajs6mca6fne2ucsg","status":"confirmed","summary":"José Celso Barbosa’s Birthday","region":"Puerto Rico","date":"2025-07-27"},{"id":"20251127_9n96crpqh7podmuqrj33gmq150","status":"confirmed","summary":"Thanksgiving Day","region":"Puerto Rico","date":"2025-11-27"},{"id":"20251224_53um1f9h3r36d6ass16hc1mjjs","status":"confirmed","summary":"Christmas Eve","region":"Puerto Rico","date":"2025-12-24"},{"id":"20251225_pse5b38cdgoalu71uvog63caa0","status":"confirmed","summary":"Christmas Day","region":"Puerto Rico","date":"2025-12-25"},{"id":"20251231_0ur3qe2iblegk650b3n8rsb520","status":"confirmed","summary":"New Year\'s Eve","region":"Puerto Rico","date":"2025-12-31"}],"Palau":[{"id":"20240101_to378f3lpdrft99atvdr0lqmog","status":"confirmed","summary":"New Year\'s Day","region":"Palau","date":"2024-01-01"},{"id":"20240315_5o079pm46o883vdid44r5mviq8","status":"confirmed","summary":"Youth Day","region":"Palau","date":"2024-03-15"},{"id":"20240505_k5iuevpn066hgrerldgal3obu0","status":"confirmed","summary":"Senior Citizens Day","region":"Palau","date":"2024-05-05"},{"id":"20240506_h13bslf300m00b1n0l7695261c","status":"confirmed","summary":"Day off for Senior Citizens Day","region":"Palau","date":"2024-05-06"},{"id":"20240531_quuri9mdo67g1tjcpsekrknrfs","status":"confirmed","summary":"Day off for President\'s Day","region":"Palau","date":"2024-05-31"},{"id":"20240601_s7o5ba94rc4r21nn4969eo7bgo","status":"confirmed","summary":"President\'s Day","region":"Palau","date":"2024-06-01"},{"id":"20240709_e185r4bothvhrm98gjg7vsgstg","status":"confirmed","summary":"Constitution Day","region":"Palau","date":"2024-07-09"},{"id":"20240902_2rt8v923t010ni4t7nclp5m9i8","status":"confirmed","summary":"Labor Day","region":"Palau","date":"2024-09-02"},{"id":"20241001_2fnf7tli87n95vahleat45tq34","status":"confirmed","summary":"Independence Day","region":"Palau","date":"2024-10-01"},{"id":"20241024_m5vr17puilf15el6r9rrdpahu8","status":"confirmed","summary":"United Nations Day","region":"Palau","date":"2024-10-24"},{"id":"20241122_2sc6rbocmd66pqqaa5ap57r1b0","status":"confirmed","summary":"Family Day","region":"Palau","date":"2024-11-22"},{"id":"20241128_0e7qvinct963natbtq6dkuqkq8","status":"confirmed","summary":"Thanksgiving","region":"Palau","date":"2024-11-28"},{"id":"20241225_v0432loffggv5j0h9hvoqc7rtc","status":"confirmed","summary":"Christmas Day","region":"Palau","date":"2024-12-25"},{"id":"20250101_ppjl8mf1bttgcn35357mv17g10","status":"confirmed","summary":"New Year\'s Day","region":"Palau","date":"2025-01-01"},{"id":"20250314_04ubuqpdmnfdaqfe16kr52sk9k","status":"confirmed","summary":"Day off for Youth Day","region":"Palau","date":"2025-03-14"},{"id":"20250315_7i8bca4gnc9v32dtihblf7u2h0","status":"confirmed","summary":"Youth Day","region":"Palau","date":"2025-03-15"},{"id":"20250505_ffu48btjsojn0sobuidkn9abcs","status":"confirmed","summary":"Senior Citizens Day","region":"Palau","date":"2025-05-05"},{"id":"20250601_ut84o3v04pb0c12sot2mlh32bo","status":"confirmed","summary":"President\'s Day","region":"Palau","date":"2025-06-01"},{"id":"20250602_ftksqj02kb3stegv18g1nv5858","status":"confirmed","summary":"Day off for President\'s Day","region":"Palau","date":"2025-06-02"},{"id":"20250709_giutfs9etjfdln24gvd9jmun7c","status":"confirmed","summary":"Constitution Day","region":"Palau","date":"2025-07-09"},{"id":"20250901_jm4ghiatdnpisn0ucmuot3fnc0","status":"confirmed","summary":"Labor Day","region":"Palau","date":"2025-09-01"},{"id":"20251001_sb7qmtdu3vi0mjm5rnlqbl4beo","status":"confirmed","summary":"Independence Day","region":"Palau","date":"2025-10-01"},{"id":"20251024_btigsjl3bcjchm4rdpk7hdarms","status":"confirmed","summary":"United Nations Day","region":"Palau","date":"2025-10-24"},{"id":"20251127_5edj8rbm8eel4a844ovp48fr34","status":"confirmed","summary":"Thanksgiving","region":"Palau","date":"2025-11-27"},{"id":"20251128_k1n35gvlkv56fc72igq36hio5k","status":"confirmed","summary":"Family Day","region":"Palau","date":"2025-11-28"},{"id":"20251225_uf0a2mrc9gvn6n8m4etvkd4tqg","status":"confirmed","summary":"Christmas Day","region":"Palau","date":"2025-12-25"}],"Paraguay":[{"id":"20240101_clr13r8mo04f8f0gp7d57r9ijg","status":"confirmed","summary":"New Year\'s Day","region":"Paraguay","date":"2024-01-01"},{"id":"20240301_g69hfmt6hvhtedev6pvcbggdg0","status":"confirmed","summary":"Heroes\' Day","region":"Paraguay","date":"2024-03-01"},{"id":"20240324_84j0eps02j1u1j0b65keq0q1vs","status":"confirmed","summary":"Daylight Saving Time ends","region":"Paraguay","date":"2024-03-24"},{"id":"20240328_l75jt3nmg9cp6o451aneea9lr0","status":"confirmed","summary":"Maundy Thursday","region":"Paraguay","date":"2024-03-28"},{"id":"20240329_2kfkmoe8qlr9tdjdvrelh9ikjg","status":"confirmed","summary":"Good Friday","region":"Paraguay","date":"2024-03-29"},{"id":"20240501_85akt17lc0eqcjjt8u3ve5l75g","status":"confirmed","summary":"Labor Day / May Day","region":"Paraguay","date":"2024-05-01"},{"id":"20240514_mfco68gbecfl2b8qe435ffv9m8","status":"confirmed","summary":"National Holiday","region":"Paraguay","date":"2024-05-14"},{"id":"20240515_91evrfs1n46mlhd6tt365991t8","status":"confirmed","summary":"Independence Day","region":"Paraguay","date":"2024-05-15"},{"id":"20240610_3sn380m9uvgm03608m0oeg3t2o","status":"confirmed","summary":"Chaco Armistice","region":"Paraguay","date":"2024-06-10"},{"id":"20240612_orhnemmtn5ld8qhfiojcj76vi0","status":"confirmed","summary":"Chaco Armistice","region":"Paraguay","date":"2024-06-12"},{"id":"20240815_39k99fbnsepe8p2556ipktp82o","status":"confirmed","summary":"Founding of Asuncion","region":"Paraguay","date":"2024-08-15"},{"id":"20240929_upd9nja2piiedvesqeo4i02d8o","status":"confirmed","summary":"Boqueron Battle Victory Day","region":"Paraguay","date":"2024-09-29"},{"id":"20241006_kk15e4qmhjkum6ibmkf56m72hg","status":"confirmed","summary":"Daylight Saving Time starts","region":"Paraguay","date":"2024-10-06"},{"id":"20241208_fq34tsn58fgetd5qpm025lnstc","status":"confirmed","summary":"Virgin of Caacupé Day","region":"Paraguay","date":"2024-12-08"},{"id":"20241224_pn7ilafomd18fd3od7iq5g4fm8","status":"confirmed","summary":"Christmas Eve","region":"Paraguay","date":"2024-12-24"},{"id":"20241225_kri0lbsr2rivhf1rqrek153bbc","status":"confirmed","summary":"Christmas Day","region":"Paraguay","date":"2024-12-25"},{"id":"20241231_pf0ek0ld4b93emplhbn3rr030s","status":"confirmed","summary":"New Year\'s Eve","region":"Paraguay","date":"2024-12-31"},{"id":"20250101_cqrk0ap9ged5ltg8qpo39v2g7g","status":"confirmed","summary":"New Year\'s Day","region":"Paraguay","date":"2025-01-01"},{"id":"20250301_irt2oks8456hae6smc9aq461m4","status":"confirmed","summary":"Heroes\' Day","region":"Paraguay","date":"2025-03-01"},{"id":"20250323_3nirfasb26kijq8p4rs4034p88","status":"confirmed","summary":"Daylight Saving Time ends","region":"Paraguay","date":"2025-03-23"},{"id":"20250417_f94cr118rlvl09jp9j1kv17v4s","status":"confirmed","summary":"Maundy Thursday","region":"Paraguay","date":"2025-04-17"},{"id":"20250418_0s01h1uglougcp3bcik16b4nhk","status":"confirmed","summary":"Good Friday","region":"Paraguay","date":"2025-04-18"},{"id":"20250501_pqq997osqfhi4d0bba1ng7fkhs","status":"confirmed","summary":"Labor Day / May Day","region":"Paraguay","date":"2025-05-01"},{"id":"20250514_lb0a40733g72ts9p8u8g52omco","status":"confirmed","summary":"National Holiday","region":"Paraguay","date":"2025-05-14"},{"id":"20250515_kmb1ei6um3bv2vi606lop62pko","status":"confirmed","summary":"Independence Day","region":"Paraguay","date":"2025-05-15"},{"id":"20250612_tdikn2pv3c2hqfa8l3p5ralgc8","status":"confirmed","summary":"Chaco Armistice","region":"Paraguay","date":"2025-06-12"},{"id":"20250815_niqjl4t2gafkhd7ur9sera4ess","status":"confirmed","summary":"Founding of Asuncion","region":"Paraguay","date":"2025-08-15"},{"id":"20250929_j3lolhipqq4v3iiggnf7u5e910","status":"confirmed","summary":"Boqueron Battle Victory Day","region":"Paraguay","date":"2025-09-29"},{"id":"20251005_apdven90pucbksruk08op2lu1c","status":"confirmed","summary":"Daylight Saving Time starts","region":"Paraguay","date":"2025-10-05"},{"id":"20251208_hhtsv5i6kn6vla857jcoj5adhg","status":"confirmed","summary":"Virgin of Caacupé Day","region":"Paraguay","date":"2025-12-08"},{"id":"20251224_9at99a4gabh7ukfae9kkkcu8mc","status":"confirmed","summary":"Christmas Eve","region":"Paraguay","date":"2025-12-24"},{"id":"20251225_rma3jmdjiut7ukv2o4jtfkol2k","status":"confirmed","summary":"Christmas Day","region":"Paraguay","date":"2025-12-25"},{"id":"20251231_j1hu3f6vjmia05sqt9cv67emsc","status":"confirmed","summary":"New Year\'s Eve","region":"Paraguay","date":"2025-12-31"}],"Qatar":[{"id":"20240213_6bpag1mfogttfffmii9f7s6hs4","status":"confirmed","summary":"National Sports Day","region":"Qatar","date":"2024-02-13"},{"id":"20240311_8gr4c6b0pihfdereug077hneg0","status":"confirmed","summary":"Ramadan Start","region":"Qatar","date":"2024-03-11"},{"id":"20240410_nta23i5151oukff0g9rtr10bts","status":"confirmed","summary":"Eid al-Fitr","region":"Qatar","date":"2024-04-10"},{"id":"20240411_b7bov2sj6l7kcrb99l00q6i8ug","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Qatar","date":"2024-04-11"},{"id":"20240412_q3vefq8be9l12qvg4g7b59atmo","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Qatar","date":"2024-04-12"},{"id":"20240617_r9m0tdtbk43ehbff6elatkqojo","status":"confirmed","summary":"Eid al-Adha (Feast of Sacrifice)","region":"Qatar","date":"2024-06-17"},{"id":"20240618_uoogase7bbf348kl2pgjut8628","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Qatar","date":"2024-06-18"},{"id":"20240619_qnva20a7d80u53dapo2ugtgpec","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Qatar","date":"2024-06-19"},{"id":"20241218_d3d2jts68qrjbckiiv9gjgcllo","status":"confirmed","summary":"National Day","region":"Qatar","date":"2024-12-18"},{"id":"20241231_l8n0c9e1dq6mjdu10cusfoj17s","status":"confirmed","summary":"New Year\'s Eve","region":"Qatar","date":"2024-12-31"},{"id":"20250211_6q805nj652ks23h31erpd102o4","status":"confirmed","summary":"National Sports Day","region":"Qatar","date":"2025-02-11"},{"id":"20250301_um0jdqggfsn3b8h2eovvj2kqnc","status":"confirmed","summary":"Ramadan Start","region":"Qatar","date":"2025-03-01"},{"id":"20250331_j9cik7bpjhim3k3kqetbvinbdg","status":"confirmed","summary":"Eid al-Fitr","region":"Qatar","date":"2025-03-31"},{"id":"20250401_n157a7imgltgknptl752dvls2k","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Qatar","date":"2025-04-01"},{"id":"20250402_00josb4bc35dkp165fdr98k90g","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Qatar","date":"2025-04-02"},{"id":"20250607_i5it0423pdq33tro65c44duoho","status":"confirmed","summary":"Eid al-Adha (Feast of Sacrifice)","region":"Qatar","date":"2025-06-07"},{"id":"20250608_ak9t5g3s14oor4vo23ol44ahu4","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Qatar","date":"2025-06-08"},{"id":"20250609_qc207q13ndnr40vi28pjhmlacs","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Qatar","date":"2025-06-09"},{"id":"20251218_fuvbsvml642203vl6qci4ii12k","status":"confirmed","summary":"National Day","region":"Qatar","date":"2025-12-18"},{"id":"20251231_0cv6v16hdqjluuv26ugl3ocdes","status":"confirmed","summary":"New Year\'s Eve","region":"Qatar","date":"2025-12-31"}],"Réunion":[{"id":"20240101_ns9qmup750fl5kkdfm4pccpohc","status":"confirmed","summary":"New Year","region":"Réunion","date":"2024-01-01"},{"id":"20240401_94egmicks6r9rm7hvfc4r3ef2c","status":"confirmed","summary":"Easter Monday","region":"Réunion","date":"2024-04-01"},{"id":"20240501_poqdi89ei7u2q3h6oq6hh4cm1g","status":"confirmed","summary":"Labour Day","region":"Réunion","date":"2024-05-01"},{"id":"20240508_dfirvfo6jjen43u2r8lua2aq88","status":"confirmed","summary":"WWII Victory Day","region":"Réunion","date":"2024-05-08"},{"id":"20240509_69usukh1p5nlmfk4jq6qroa1pg","status":"confirmed","summary":"Ascension Day","region":"Réunion","date":"2024-05-09"},{"id":"20240520_2lrl2ls7lm65t3k7lsut8mr7m8","status":"confirmed","summary":"Whit Monday","region":"Réunion","date":"2024-05-20"},{"id":"20240714_9s4nfk0bj3euhr7dg26bdlrhvc","status":"confirmed","summary":"French National Day","region":"Réunion","date":"2024-07-14"},{"id":"20240815_j1begbgv6em6t5m8k747er2eh0","status":"confirmed","summary":"Assumption of Mary","region":"Réunion","date":"2024-08-15"},{"id":"20241101_8q4nabvcqg55ko2glvmanqv3fo","status":"confirmed","summary":"All Saints\' Day","region":"Réunion","date":"2024-11-01"},{"id":"20241111_uq7pvr63alblht1dqusvbn441c","status":"confirmed","summary":"Armistice Day","region":"Réunion","date":"2024-11-11"},{"id":"20241220_ijs60ukn42on7a2p7c54bt5sso","status":"confirmed","summary":"Abolition of Slavery","region":"Réunion","date":"2024-12-20"},{"id":"20241225_tu09lu9dtgn51scnti5murje7g","status":"confirmed","summary":"Christmas Day","region":"Réunion","date":"2024-12-25"},{"id":"20250101_f9d94849jtpb02l7car90v6jdg","status":"confirmed","summary":"New Year","region":"Réunion","date":"2025-01-01"},{"id":"20250421_rb0g7043mjr3n1cqjhhqsdpj44","status":"confirmed","summary":"Easter Monday","region":"Réunion","date":"2025-04-21"},{"id":"20250501_ejo2t8njk7477ajqiohshok9c8","status":"confirmed","summary":"Labour Day","region":"Réunion","date":"2025-05-01"},{"id":"20250508_43p6gqq45sim8g66h9o56en5d8","status":"confirmed","summary":"WWII Victory Day","region":"Réunion","date":"2025-05-08"},{"id":"20250529_4scr6s68p03a9g6dqurno1pgts","status":"confirmed","summary":"Ascension Day","region":"Réunion","date":"2025-05-29"},{"id":"20250609_klrpmg7uig53i756fkljk0qtc8","status":"confirmed","summary":"Whit Monday","region":"Réunion","date":"2025-06-09"},{"id":"20250714_p0110ntsq88s8e60sr93ofv90s","status":"confirmed","summary":"French National Day","region":"Réunion","date":"2025-07-14"},{"id":"20250815_g1dm0kdcokjon5gk004v5n24jk","status":"confirmed","summary":"Assumption of Mary","region":"Réunion","date":"2025-08-15"},{"id":"20251101_dvc34a4u8vab7p411vl7jo5i90","status":"confirmed","summary":"All Saints\' Day","region":"Réunion","date":"2025-11-01"},{"id":"20251111_snrvvp6cij01fbr04ti22d4t24","status":"confirmed","summary":"Armistice Day","region":"Réunion","date":"2025-11-11"},{"id":"20251220_afpvaamc8qnl6kppmehc70t2ak","status":"confirmed","summary":"Abolition of Slavery","region":"Réunion","date":"2025-12-20"},{"id":"20251225_19grvgb8qnu5biv6m5985javg0","status":"confirmed","summary":"Christmas Day","region":"Réunion","date":"2025-12-25"}],"Romania":[{"id":"20240101_4r1aq334juvv085mo8q8kicm44","status":"confirmed","summary":"New Year\'s Day","region":"Romania","date":"2024-01-01"},{"id":"20240102_ehhh3iqshslrpe0dc7nmon757k","status":"confirmed","summary":"Day after New Year\'s Day","region":"Romania","date":"2024-01-02"},{"id":"20240106_ft6cgdd8i9500ad0mip4scpkus","status":"confirmed","summary":"Epiphany","region":"Romania","date":"2024-01-06"},{"id":"20240107_e7ptg69b9iv4vonnjguqq94j3s","status":"confirmed","summary":"Synaxis of St. John the Baptist","region":"Romania","date":"2024-01-07"},{"id":"20240124_rjv4jhuaak0h6l8j6g3rb2ob00","status":"confirmed","summary":"Unification Day","region":"Romania","date":"2024-01-24"},{"id":"20240219_9bl00i19c8396isj5drg3vg1c0","status":"confirmed","summary":"Constantin Brancusi Day","region":"Romania","date":"2024-02-19"},{"id":"20240224_jp34d0k0ob9vqfvk309cj86k0o","status":"confirmed","summary":"Dragobete","region":"Romania","date":"2024-02-24"},{"id":"20240301_7u1vo02q085cktdtm2l4f3ri0s","status":"confirmed","summary":"Mărțișor","region":"Romania","date":"2024-03-01"},{"id":"20240308_lf7le1rvb2p3m98dqoui4udn1g","status":"confirmed","summary":"International Women\'s Day","region":"Romania","date":"2024-03-08"},{"id":"20240501_nqs88gfvu7q0l6v37kiv1fns9o","status":"confirmed","summary":"Labor Day / May Day","region":"Romania","date":"2024-05-01"},{"id":"20240503_28f1l2f3tglpv68i7o2ev0sh4s","status":"confirmed","summary":"Orthodox Good Friday","region":"Romania","date":"2024-05-03"},{"id":"20240505_kflsr7c0j7a6p46aea57q6juok","status":"confirmed","summary":"Mothers\' Day","region":"Romania","date":"2024-05-05"},{"id":"20240505_thnksp8ovpi2eqvt7jab558dq8","status":"confirmed","summary":"Orthodox Easter Day","region":"Romania","date":"2024-05-05"},{"id":"20240506_eeakpi5n575pbcup7tufbre1jo","status":"confirmed","summary":"Orthodox Easter Monday","region":"Romania","date":"2024-05-06"},{"id":"20240510_3243f71ovpv89dud233jjk6ht0","status":"confirmed","summary":"National Independence Day","region":"Romania","date":"2024-05-10"},{"id":"20240510_odmpao523iecqoio2hm1pjq3pk","status":"confirmed","summary":"Monarchy Day","region":"Romania","date":"2024-05-10"},{"id":"20240512_pbub9v6hrgnnqmh0k9rj1vqks4","status":"confirmed","summary":"Fathers\' Day","region":"Romania","date":"2024-05-12"},{"id":"20240601_luqevjg2555qgdo8bh7abfh3ac","status":"confirmed","summary":"Children\'s Day","region":"Romania","date":"2024-06-01"},{"id":"20240613_g234gmk4lfit8riako1fudmf3c","status":"confirmed","summary":"Orthodox Ascension Day","region":"Romania","date":"2024-06-13"},{"id":"20240623_8inc1qg08s3etjbfss7ci5s2vg","status":"confirmed","summary":"Orthodox Pentecost","region":"Romania","date":"2024-06-23"},{"id":"20240624_sog2qe9l9v332vaksft5t4bdi4","status":"confirmed","summary":"Orthodox Pentecost Monday","region":"Romania","date":"2024-06-24"},{"id":"20240626_vlab1hhbonjv5c3l5pu2ti5rjs","status":"confirmed","summary":"Flag Day","region":"Romania","date":"2024-06-26"},{"id":"20240729_i5t7cnkbudpj0ccnbohe8he640","status":"confirmed","summary":"National Anthem Day","region":"Romania","date":"2024-07-29"},{"id":"20240815_din710m46u9t0uen3lrenvvdfo","status":"confirmed","summary":"St Mary\'s Day","region":"Romania","date":"2024-08-15"},{"id":"20241031_9ft86lgl56gcn2fc34megfi7sg","status":"confirmed","summary":"Halloween","region":"Romania","date":"2024-10-31"},{"id":"20241130_psc8ro26b9i1hvdbdq533p3p04","status":"confirmed","summary":"St Andrew\'s Day","region":"Romania","date":"2024-11-30"},{"id":"20241201_2afnv4p3dtn13g3053ombbb72k","status":"confirmed","summary":"National Day","region":"Romania","date":"2024-12-01"},{"id":"20241208_7k20e4l4m6ottr3di61ff7e64k","status":"confirmed","summary":"Constitution Day","region":"Romania","date":"2024-12-08"},{"id":"20241224_5o1p7ljgbitfdhc9d1ush3li3k","status":"confirmed","summary":"Christmas Eve","region":"Romania","date":"2024-12-24"},{"id":"20241225_d4q2hclmuq2ndcar6043ci70e0","status":"confirmed","summary":"Christmas Day","region":"Romania","date":"2024-12-25"},{"id":"20241226_rraugs2amodrbbutbd9ae2v3og","status":"confirmed","summary":"Second day of Christmas","region":"Romania","date":"2024-12-26"},{"id":"20241231_2fdo2la8vn0inabppqu2kogolg","status":"confirmed","summary":"New Year\'s Eve","region":"Romania","date":"2024-12-31"},{"id":"20250101_oal2535b22f7f7pbln8th2k43g","status":"confirmed","summary":"New Year\'s Day","region":"Romania","date":"2025-01-01"},{"id":"20250102_nfsjdcnrinnpul4l1vaq3dou48","status":"confirmed","summary":"Day after New Year\'s Day","region":"Romania","date":"2025-01-02"},{"id":"20250106_ovdggd80p133q4o5cmtof7mmco","status":"confirmed","summary":"Epiphany","region":"Romania","date":"2025-01-06"},{"id":"20250107_burag180dc0o3r2c1mkkhsftss","status":"confirmed","summary":"Synaxis of St. John the Baptist","region":"Romania","date":"2025-01-07"},{"id":"20250124_c3s482jgip1htptlik25n7prt8","status":"confirmed","summary":"Unification Day","region":"Romania","date":"2025-01-24"},{"id":"20250219_td66daf9db4nmvch3o13s8pgro","status":"confirmed","summary":"Constantin Brancusi Day","region":"Romania","date":"2025-02-19"},{"id":"20250224_87arkfmv1og5dpud17p90bsn08","status":"confirmed","summary":"Dragobete","region":"Romania","date":"2025-02-24"},{"id":"20250301_l2f7k01tuspvnpmk0dmuh81u78","status":"confirmed","summary":"Mărțișor","region":"Romania","date":"2025-03-01"},{"id":"20250308_cg9a2htu0u5kn9tdhq11av1ogo","status":"confirmed","summary":"International Women\'s Day","region":"Romania","date":"2025-03-08"},{"id":"20250418_pfcodnednmgsj86imvcobo7s0g","status":"confirmed","summary":"Orthodox Good Friday","region":"Romania","date":"2025-04-18"},{"id":"20250420_ro7e8u46d5ijlttqcj46nq4v6s","status":"confirmed","summary":"Orthodox Easter Day","region":"Romania","date":"2025-04-20"},{"id":"20250421_6h0bvut3nsr0vf1ratrvg92u8c","status":"confirmed","summary":"Orthodox Easter Monday","region":"Romania","date":"2025-04-21"},{"id":"20250501_141mtrc00nlcbsv57oek8coh3k","status":"confirmed","summary":"Labor Day / May Day","region":"Romania","date":"2025-05-01"},{"id":"20250504_7h9itfvbiv7agaalbrqndibph4","status":"confirmed","summary":"Mothers\' Day","region":"Romania","date":"2025-05-04"},{"id":"20250510_1k1k7l0j0davun0g4bctv6ptmo","status":"confirmed","summary":"Monarchy Day","region":"Romania","date":"2025-05-10"},{"id":"20250510_9ujhdn1d9d03vl1r8bpcs56c78","status":"confirmed","summary":"National Independence Day","region":"Romania","date":"2025-05-10"},{"id":"20250511_7f9fdasoenprmt3umb038dqobo","status":"confirmed","summary":"Fathers\' Day","region":"Romania","date":"2025-05-11"},{"id":"20250529_3tsmig4c9gjktobg5clae2vbog","status":"confirmed","summary":"Orthodox Ascension Day","region":"Romania","date":"2025-05-29"},{"id":"20250601_7u767b2ovaos337qodb0q45nkc","status":"confirmed","summary":"Children\'s Day","region":"Romania","date":"2025-06-01"},{"id":"20250608_5b0qi2onhrvau1ihtc1cjgrd4o","status":"confirmed","summary":"Orthodox Pentecost","region":"Romania","date":"2025-06-08"},{"id":"20250609_710haea91f5lkrffstmmi381s0","status":"confirmed","summary":"Orthodox Pentecost Monday","region":"Romania","date":"2025-06-09"},{"id":"20250626_0hj2qssrdhka614tjnu6u8f930","status":"confirmed","summary":"Flag Day","region":"Romania","date":"2025-06-26"},{"id":"20250729_f217ptk3vrnlo1umiuftu3e38k","status":"confirmed","summary":"National Anthem Day","region":"Romania","date":"2025-07-29"},{"id":"20250815_q3u6sjlectdo51bepphg2886ss","status":"confirmed","summary":"St Mary\'s Day","region":"Romania","date":"2025-08-15"},{"id":"20251031_006i1jf6sfvic8npjej1ic2u98","status":"confirmed","summary":"Halloween","region":"Romania","date":"2025-10-31"},{"id":"20251130_v87el99lttj4ufcr8jd8ut10ig","status":"confirmed","summary":"St Andrew\'s Day","region":"Romania","date":"2025-11-30"},{"id":"20251201_vt0kl43dmc04a0goqmb7c66050","status":"confirmed","summary":"National Day","region":"Romania","date":"2025-12-01"},{"id":"20251208_oaca8bpnv8qqcibaqrgun1tb8s","status":"confirmed","summary":"Constitution Day","region":"Romania","date":"2025-12-08"},{"id":"20251224_um8dil0igihaf4jpann8h5a5ts","status":"confirmed","summary":"Christmas Eve","region":"Romania","date":"2025-12-24"},{"id":"20251225_r2likho2cjv1d9icu9vgr0j8lk","status":"confirmed","summary":"Christmas Day","region":"Romania","date":"2025-12-25"},{"id":"20251226_gg0fqir5psj4mvikqotofade78","status":"confirmed","summary":"Second day of Christmas","region":"Romania","date":"2025-12-26"},{"id":"20251231_5kgjvt6buklvamns9635mqtkvc","status":"confirmed","summary":"New Year\'s Eve","region":"Romania","date":"2025-12-31"}],"Serbia":[{"id":"20240101_1eig5r04i3ho2s75nlkop6hmtg","status":"confirmed","summary":"Western New Year\'s Day","region":"Serbia","date":"2024-01-01"},{"id":"20240102_noua8072mss33bd3pm131iqgsg","status":"confirmed","summary":"Second Day of Western New Year\'s Day","region":"Serbia","date":"2024-01-02"},{"id":"20240106_k2no306p4ihl6ma36diogdce6g","status":"confirmed","summary":"First Day of Baptism","region":"Serbia","date":"2024-01-06"},{"id":"20240107_1t692qvkfskvcgevf7lvom96ao","status":"confirmed","summary":"Christmas Day","region":"Serbia","date":"2024-01-07"},{"id":"20240114_18dsmm42q4qq01bq4k0jcclp00","status":"confirmed","summary":"New Year","region":"Serbia","date":"2024-01-14"},{"id":"20240127_gt0dghpu1vv4e3jtr0emnuovco","status":"confirmed","summary":"Spirituality Day/St Sava\'s Day","region":"Serbia","date":"2024-01-27"},{"id":"20240215_ac7muaqikdi42khci8kh1cdbi0","status":"confirmed","summary":"Statehood Day of the Republic of Serbia","region":"Serbia","date":"2024-02-15"},{"id":"20240216_o9m3h1edrus3erg53po326h97s","status":"confirmed","summary":"Statehood Day of the Republic of Serbia (Day 2)","region":"Serbia","date":"2024-02-16"},{"id":"20240311_acpd91p4qv6jac4m21nhidi600","status":"confirmed","summary":"Ramadan Start","region":"Serbia","date":"2024-03-11"},{"id":"20240329_idgt2s4fh1nv6uec4o0ncoepcc","status":"confirmed","summary":"Western Good Friday","region":"Serbia","date":"2024-03-29"},{"id":"20240330_tak1olq88vcj1ebne2enrilsd0","status":"confirmed","summary":"Western Easter Saturday","region":"Serbia","date":"2024-03-30"},{"id":"20240331_ap35e5eeqm9d6rjd8bdu5d9urs","status":"confirmed","summary":"Western Easter Sunday","region":"Serbia","date":"2024-03-31"},{"id":"20240401_kbhggu46snpu49560tppgdjam4","status":"confirmed","summary":"Western Easter Monday","region":"Serbia","date":"2024-04-01"},{"id":"20240410_0mve9qc3vou3ds4h5ojkp5bj58","status":"confirmed","summary":"Eid al-Fitr","region":"Serbia","date":"2024-04-10"},{"id":"20240422_c91brm2bn0siqdck6s83fq68as","status":"confirmed","summary":"Holocaust Remembrance Day","region":"Serbia","date":"2024-04-22"},{"id":"20240501_onhav56jaju61h0ntr73t7ata0","status":"confirmed","summary":"Labor holiday","region":"Serbia","date":"2024-05-01"},{"id":"20240502_0j4haqc45kbcati96eae5vo7ik","status":"confirmed","summary":"Labor Day Holiday","region":"Serbia","date":"2024-05-02"},{"id":"20240503_j14d7plkpblh0cfiuaagjmj7ts","status":"confirmed","summary":"Good Friday","region":"Serbia","date":"2024-05-03"},{"id":"20240504_geugkumn4m3ru8i0t89h90p644","status":"confirmed","summary":"Holy Saturday","region":"Serbia","date":"2024-05-04"},{"id":"20240505_3pr7sirhbcsphn9k7gis7vfejo","status":"confirmed","summary":"Easter Day","region":"Serbia","date":"2024-05-05"},{"id":"20240506_o3bns6adqrfcbt75t72o3tcsfk","status":"confirmed","summary":"Easter Monday","region":"Serbia","date":"2024-05-06"},{"id":"20240509_2qvk8hho56vd0brkqc17s4dn0s","status":"confirmed","summary":"Victory Day","region":"Serbia","date":"2024-05-09"},{"id":"20240617_u4td33s0mf9eq342g29gdpl12c","status":"confirmed","summary":"First Day of Eid al-Adha","region":"Serbia","date":"2024-06-17"},{"id":"20240628_ilml9918ks8s4pcl865o1knsc4","status":"confirmed","summary":"St Vitus\' Day","region":"Serbia","date":"2024-06-28"},{"id":"20241012_e0vsih1puqq88lrq16kbptt8vk","status":"confirmed","summary":"Yom Kippur","region":"Serbia","date":"2024-10-12"},{"id":"20241021_1poja15k3k19e1h4jh5e8b3ddc","status":"confirmed","summary":"World War II Victims Remembrance Day","region":"Serbia","date":"2024-10-21"},{"id":"20241111_3con9h1pjm8pk8drkm1qiunh6c","status":"confirmed","summary":"Armistice Day","region":"Serbia","date":"2024-11-11"},{"id":"20241225_iq8a4m577dgndraag6fbhdiq3k","status":"confirmed","summary":"First Day of Western Christmas","region":"Serbia","date":"2024-12-25"},{"id":"20241229_ordqeb4u8n6pfi8ttidle0llkc","status":"confirmed","summary":"Mothers\' Day","region":"Serbia","date":"2024-12-29"},{"id":"20241231_rk6j45ng1cc7h2ob77jtf9k4jk","status":"confirmed","summary":"Western New Year\'s Eve","region":"Serbia","date":"2024-12-31"},{"id":"20250101_65lejqtrois5ceuf82is2s79lg","status":"confirmed","summary":"Western New Year\'s Day","region":"Serbia","date":"2025-01-01"},{"id":"20250102_7dn8kmk9rg1rhv5ih0i8462u74","status":"confirmed","summary":"Second Day of Western New Year\'s Day","region":"Serbia","date":"2025-01-02"},{"id":"20250105_e58oju2rst2kjp16gb6f42gqmo","status":"confirmed","summary":"Fathers\' Day","region":"Serbia","date":"2025-01-05"},{"id":"20250106_ajv6e5ds78fqe9d75oe28vk148","status":"confirmed","summary":"First Day of Baptism","region":"Serbia","date":"2025-01-06"},{"id":"20250107_ldcqada12flupm2qt3q2l54004","status":"confirmed","summary":"Christmas Day","region":"Serbia","date":"2025-01-07"},{"id":"20250114_q7qqgjpbv0smdda22br967ectg","status":"confirmed","summary":"New Year","region":"Serbia","date":"2025-01-14"},{"id":"20250127_860hs10p4ugap06pqvu5qtbb3k","status":"confirmed","summary":"Spirituality Day/St Sava\'s Day","region":"Serbia","date":"2025-01-27"},{"id":"20250215_r8b48kd1mvgit3ji6pq9vk987c","status":"confirmed","summary":"Statehood Day of the Republic of Serbia","region":"Serbia","date":"2025-02-15"},{"id":"20250217_46igl100ea1ree9uecinb275ac","status":"confirmed","summary":"Statehood Day of the Republic of Serbia (Day 2)","region":"Serbia","date":"2025-02-17"},{"id":"20250301_de6umhar7aptctbsneg7tf641c","status":"confirmed","summary":"Ramadan Start","region":"Serbia","date":"2025-03-01"},{"id":"20250331_dpboi2cr9fpt2pmoocbiuuvfq0","status":"confirmed","summary":"Eid al-Fitr","region":"Serbia","date":"2025-03-31"},{"id":"20250418_drs7od8hqptd339bnra15lfkbc","status":"confirmed","summary":"Western Good Friday","region":"Serbia","date":"2025-04-18"},{"id":"20250418_e6cmrp3s6idssc6hl00lvmdkmk","status":"confirmed","summary":"Good Friday","region":"Serbia","date":"2025-04-18"},{"id":"20250419_2s6gf8f1q99vf75d6p6hqnsm04","status":"confirmed","summary":"Holy Saturday","region":"Serbia","date":"2025-04-19"},{"id":"20250419_bvnlov4b8jlele3h8tp0lckhto","status":"confirmed","summary":"Western Easter Saturday","region":"Serbia","date":"2025-04-19"},{"id":"20250420_7ijsqagacdfr0scu472o22mcq4","status":"confirmed","summary":"Western Easter Sunday","region":"Serbia","date":"2025-04-20"},{"id":"20250420_f527thnm3rq1ehs4jb0qure2kc","status":"confirmed","summary":"Easter Day","region":"Serbia","date":"2025-04-20"},{"id":"20250421_huq7ogiug9d9vqd3ilcjceidsg","status":"confirmed","summary":"Western Easter Monday","region":"Serbia","date":"2025-04-21"},{"id":"20250421_va73ptn1jbs5q3v6etl7afrbmk","status":"confirmed","summary":"Easter Monday","region":"Serbia","date":"2025-04-21"},{"id":"20250422_of8g7fo1s8jn7a58i0tcc5g4n0","status":"confirmed","summary":"Holocaust Remembrance Day","region":"Serbia","date":"2025-04-22"},{"id":"20250501_0durad3b0vbgkteag36hfa2qbc","status":"confirmed","summary":"Labor holiday","region":"Serbia","date":"2025-05-01"},{"id":"20250502_00mm5hmc1t79n0k7edsq0qfb38","status":"confirmed","summary":"Labor Day Holiday","region":"Serbia","date":"2025-05-02"},{"id":"20250509_k35e283360647bhefpbnckajt4","status":"confirmed","summary":"Victory Day","region":"Serbia","date":"2025-05-09"},{"id":"20250607_gsdormr6dm50u6lmi48oh99100","status":"confirmed","summary":"First Day of Eid al-Adha","region":"Serbia","date":"2025-06-07"},{"id":"20250628_76e9k5o66lqvc15b570n1o0l8k","status":"confirmed","summary":"St Vitus\' Day","region":"Serbia","date":"2025-06-28"},{"id":"20251002_6krpu77lk2a9p95kn61fa8aphs","status":"confirmed","summary":"Yom Kippur","region":"Serbia","date":"2025-10-02"},{"id":"20251021_itdiqpl5fleikbuuv7h7063ig0","status":"confirmed","summary":"World War II Victims Remembrance Day","region":"Serbia","date":"2025-10-21"},{"id":"20251111_4puv7p7dtkrs02e3b4osgjhnog","status":"confirmed","summary":"Armistice Day","region":"Serbia","date":"2025-11-11"},{"id":"20251225_kg0ei8vmb3kfq2b5h8jcn5mci0","status":"confirmed","summary":"First Day of Western Christmas","region":"Serbia","date":"2025-12-25"},{"id":"20251228_0uh16lpkhmbo1auf81if4frdbc","status":"confirmed","summary":"Mothers\' Day","region":"Serbia","date":"2025-12-28"},{"id":"20251231_qa28q0fbe6p0t9u62d6sleppe8","status":"confirmed","summary":"Western New Year\'s Eve","region":"Serbia","date":"2025-12-31"}],"Russia":[{"id":"20240101_e9ie1nsapv9h1boldb6n12pr6o","status":"confirmed","summary":"New Year\'s Day","region":"Russia","date":"2024-01-01"},{"id":"20240102_3hltuk91bsgf0bu05541rusdes","status":"confirmed","summary":"New Year Holiday","region":"Russia","date":"2024-01-02"},{"id":"20240103_g17rb2hs9149ttfou7a1lv4oas","status":"confirmed","summary":"New Year Holiday","region":"Russia","date":"2024-01-03"},{"id":"20240104_agvrcak4kf27fo9qm1t1jbori0","status":"confirmed","summary":"New Year Holiday","region":"Russia","date":"2024-01-04"},{"id":"20240105_98tsprfg08d9ekuic5ghssblo4","status":"confirmed","summary":"New Year Holiday","region":"Russia","date":"2024-01-05"},{"id":"20240106_8at7rkh1hmh9e2iupvbc9ndod4","status":"confirmed","summary":"New Year Holiday","region":"Russia","date":"2024-01-06"},{"id":"20240107_4dgc36ngmljo5hi3r1v0ac8mpo","status":"confirmed","summary":"Orthodox Christmas Day","region":"Russia","date":"2024-01-07"},{"id":"20240108_asj9clt9avse5758m0m7m8enhs","status":"confirmed","summary":"New Year Holiday","region":"Russia","date":"2024-01-08"},{"id":"20240223_kce2uo6cil3ht1np7gk7sghaco","status":"confirmed","summary":"Defender of the Fatherland Day","region":"Russia","date":"2024-02-23"},{"id":"20240308_9jrshg5dnjm7stvc8579ffj21g","status":"confirmed","summary":"International Women\'s Day","region":"Russia","date":"2024-03-08"},{"id":"20240428_1iqmtidtt1k87icpnaa9l3mum0","status":"confirmed","summary":"Spring and Labor Day Holiday","region":"Russia","date":"2024-04-28"},{"id":"20240429_orl6rlaism7v19gbf1bv6kklu4","status":"confirmed","summary":"Spring and Labor Day Holiday","region":"Russia","date":"2024-04-29"},{"id":"20240430_oukg9ns23bd8oi0r2sesv2mbo4","status":"confirmed","summary":"Spring and Labor Day Holiday","region":"Russia","date":"2024-04-30"},{"id":"20240501_disfdfua3lfqhvf93dq1jjeosc","status":"confirmed","summary":"Spring and Labor Day","region":"Russia","date":"2024-05-01"},{"id":"20240509_cv882l6crv51slihj816c1ibc0","status":"confirmed","summary":"Victory Day","region":"Russia","date":"2024-05-09"},{"id":"20240510_7c5cn3rca5j8d77jot5jp443ok","status":"confirmed","summary":"Victory Day Holiday","region":"Russia","date":"2024-05-10"},{"id":"20240612_t64k3g0jaad40lgpnlca8rcg04","status":"confirmed","summary":"Russia Day","region":"Russia","date":"2024-06-12"},{"id":"20241005_5509081nm9u8hurlufdrr2lirc","status":"confirmed","summary":"Teacher\'s Day","region":"Russia","date":"2024-10-05"},{"id":"20241103_g83852no099eirbtjtjmccc8u8","status":"confirmed","summary":"Unity Day Holiday","region":"Russia","date":"2024-11-03"},{"id":"20241104_mat9ajq3j50je6pe3pn9p7nn14","status":"confirmed","summary":"Unity Day","region":"Russia","date":"2024-11-04"},{"id":"20241230_p8v48782231t1lca1q1hrivsrs","status":"confirmed","summary":"New Year Holiday","region":"Russia","date":"2024-12-30"},{"id":"20241231_j02c4609ofd3njsivu2m5ehui0","status":"confirmed","summary":"New Year Holiday","region":"Russia","date":"2024-12-31"},{"id":"20250101_i01o0a3gdqlnsmosq9apa4qonk","status":"confirmed","summary":"New Year\'s Day","region":"Russia","date":"2025-01-01"},{"id":"20250102_bdm5s2m9hf4c4r1fc8g17bd91g","status":"confirmed","summary":"New Year Holiday","region":"Russia","date":"2025-01-02"},{"id":"20250103_9ro1jla83at6p2qp54aj67j6ec","status":"confirmed","summary":"New Year Holiday","region":"Russia","date":"2025-01-03"},{"id":"20250106_k4m7i2qi81mv91lepaobgufajc","status":"confirmed","summary":"New Year Holiday","region":"Russia","date":"2025-01-06"},{"id":"20250107_c90gftbtlaj28amqt8bci6nfto","status":"confirmed","summary":"Orthodox Christmas Day","region":"Russia","date":"2025-01-07"},{"id":"20250108_ddrgs3ul7ab7lfn1aeorcu7q5s","status":"confirmed","summary":"New Year Holiday","region":"Russia","date":"2025-01-08"},{"id":"20250223_o3pjigq1te6so0f2aolo9lv5rk","status":"confirmed","summary":"Defender of the Fatherland Day","region":"Russia","date":"2025-02-23"},{"id":"20250224_9rtfqgpk32tsods1rvvpk30q00","status":"confirmed","summary":"Day off for Defender of the Fatherland Day","region":"Russia","date":"2025-02-24"},{"id":"20250308_mh4sca6kn9tuch27hv4fbjltq4","status":"confirmed","summary":"International Women\'s Day","region":"Russia","date":"2025-03-08"},{"id":"20250310_7bsdmp22squ9c4erlh26dvu4vg","status":"confirmed","summary":"Day off for International Women\'s Day","region":"Russia","date":"2025-03-10"},{"id":"20250501_a4mqc69iqpik0k38g1phk1q1l4","status":"confirmed","summary":"Spring and Labor Day","region":"Russia","date":"2025-05-01"},{"id":"20250502_r0bqjv74etide6ld12mglh6kv0","status":"confirmed","summary":"Spring and Labor Day Holiday","region":"Russia","date":"2025-05-02"},{"id":"20250509_q2lq1vt48mq6t1uqkk8ig95ugk","status":"confirmed","summary":"Victory Day","region":"Russia","date":"2025-05-09"},{"id":"20250612_n0m897uihv36cnanfnigcb9ui8","status":"confirmed","summary":"Russia Day","region":"Russia","date":"2025-06-12"},{"id":"20250613_4tvqr44bn6g3chd6rqqlnpkids","status":"confirmed","summary":"Russia Day Weekend","region":"Russia","date":"2025-06-13"},{"id":"20251005_nqiq5d5dvo5mf0eofqdhbjj68o","status":"confirmed","summary":"Teacher\'s Day","region":"Russia","date":"2025-10-05"},{"id":"20251104_j7rb9nd15f8arcrso0mecrs7uo","status":"confirmed","summary":"Unity Day","region":"Russia","date":"2025-11-04"}],"Rwanda":[{"id":"20240101_e13dudkfhh09jjhq72h0tm7rn0","status":"confirmed","summary":"New Year","region":"Rwanda","date":"2024-01-01"},{"id":"20240102_to091l318h7fdhtmvila6ejkqo","status":"confirmed","summary":"Day After New Year\'s Day","region":"Rwanda","date":"2024-01-02"},{"id":"20240201_oun5ef897rt3tqvin35i8teq3k","status":"confirmed","summary":"National Heroes\' Day","region":"Rwanda","date":"2024-02-01"},{"id":"20240329_2e0m55ohmjuctv4t3609gkgdvo","status":"confirmed","summary":"Good Friday","region":"Rwanda","date":"2024-03-29"},{"id":"20240401_bnlocldf5qbokna0b8t5ivti58","status":"confirmed","summary":"Easter Monday","region":"Rwanda","date":"2024-04-01"},{"id":"20240407_kg58qf0ki38p3n5qloc4slkm4s","status":"confirmed","summary":"Genocide Against the Tutsi Memorial Day","region":"Rwanda","date":"2024-04-07"},{"id":"20240408_ov3pfcakc14vbgs4uoshubtih8","status":"confirmed","summary":"Genocide Against the Tutsi Memorial Day","region":"Rwanda","date":"2024-04-08"},{"id":"20240410_0qsqd37a25c3o6qh8qj729uosk","status":"confirmed","summary":"Eid al-Fitr","region":"Rwanda","date":"2024-04-10"},{"id":"20240501_pkkhbr0eh3jgoij0lirruvi19c","status":"confirmed","summary":"Labor Day","region":"Rwanda","date":"2024-05-01"},{"id":"20240617_p2kt5469c5hmvsmo2i8s8is7oo","status":"confirmed","summary":"Eid al-Adha","region":"Rwanda","date":"2024-06-17"},{"id":"20240701_ggabdvifpebkk1gvsb14chpvng","status":"confirmed","summary":"Independence Day","region":"Rwanda","date":"2024-07-01"},{"id":"20240704_705o26sca3na4n6sdviani7gi8","status":"confirmed","summary":"Liberation Day","region":"Rwanda","date":"2024-07-04"},{"id":"20240802_7esllcscdlahecru0nukh4o4h0","status":"confirmed","summary":"Umuganura Day","region":"Rwanda","date":"2024-08-02"},{"id":"20240815_7n9ja5cjkabh9f6k8d305dekm0","status":"confirmed","summary":"Assumption of Mary","region":"Rwanda","date":"2024-08-15"},{"id":"20241225_f5aah043bvue386tia20i5kmk8","status":"confirmed","summary":"Christmas Day","region":"Rwanda","date":"2024-12-25"},{"id":"20241226_2m72oa0jvrfjcprg1anmap8hb8","status":"confirmed","summary":"Boxing Day","region":"Rwanda","date":"2024-12-26"},{"id":"20250101_ubvacp4cfaopskh6t59kdpip90","status":"confirmed","summary":"New Year","region":"Rwanda","date":"2025-01-01"},{"id":"20250102_l14u048t2m4cn794fpibdrfqv0","status":"confirmed","summary":"Day After New Year\'s Day","region":"Rwanda","date":"2025-01-02"},{"id":"20250201_leov7tpa5s3sl3lgvap8jlh70o","status":"confirmed","summary":"National Heroes\' Day","region":"Rwanda","date":"2025-02-01"},{"id":"20250203_3ol2abm2hopo225ape6phek8qk","status":"confirmed","summary":"National Heroes\' Day observed","region":"Rwanda","date":"2025-02-03"},{"id":"20250331_m532ru8ctb96fekteagvq5lp0c","status":"confirmed","summary":"Eid al-Fitr","region":"Rwanda","date":"2025-03-31"},{"id":"20250407_6nkinkeir48t739ek80o28sujk","status":"confirmed","summary":"Genocide Against the Tutsi Memorial Day","region":"Rwanda","date":"2025-04-07"},{"id":"20250418_tt2ft78c1dmhhiidsj1dmhulu0","status":"confirmed","summary":"Good Friday","region":"Rwanda","date":"2025-04-18"},{"id":"20250421_fgr1s7317f1n2f6pm5aooh20l0","status":"confirmed","summary":"Easter Monday","region":"Rwanda","date":"2025-04-21"},{"id":"20250501_cm2mjh5vgfg1a2it4a06b80uc8","status":"confirmed","summary":"Labor Day","region":"Rwanda","date":"2025-05-01"},{"id":"20250607_efktama5pjl3qvqm0bpjojqdk4","status":"confirmed","summary":"Eid al-Adha","region":"Rwanda","date":"2025-06-07"},{"id":"20250701_3kqt5rpmgmc6ad6cb1qc7oggak","status":"confirmed","summary":"Independence Day","region":"Rwanda","date":"2025-07-01"},{"id":"20250704_q5n82qko7iqgg39najcs46boj4","status":"confirmed","summary":"Liberation Day","region":"Rwanda","date":"2025-07-04"},{"id":"20250801_trmqur7b43m1u81gq0mg4fhms4","status":"confirmed","summary":"Umuganura Day","region":"Rwanda","date":"2025-08-01"},{"id":"20250815_ae416bh4fi1e49vsgp6ch3dblo","status":"confirmed","summary":"Assumption of Mary","region":"Rwanda","date":"2025-08-15"},{"id":"20251225_mue87dmo31rb945a6kjrner130","status":"confirmed","summary":"Christmas Day","region":"Rwanda","date":"2025-12-25"},{"id":"20251226_dm73hmb19174jmodjl25vs5b5o","status":"confirmed","summary":"Boxing Day","region":"Rwanda","date":"2025-12-26"}],"South Africa":[{"id":"20240101_36vqj3v2paut3esetj0i3oprtk","status":"confirmed","summary":"New Year\'s Day","region":"South Africa","date":"2024-01-01"},{"id":"20240102_62u33ve0i8tk2gjjbmorpkkkuc","status":"confirmed","summary":"Tweede Nuwe Jaar","region":"South Africa","date":"2024-01-02"},{"id":"20240221_jq9tdvai9a6lqd5hc7kh0q7aro","status":"confirmed","summary":"Armed Forces Day","region":"South Africa","date":"2024-02-21"},{"id":"20240321_q8ak669ociqe8bg7a4kovt7idg","status":"confirmed","summary":"Human Rights Day","region":"South Africa","date":"2024-03-21"},{"id":"20240329_9kgqqugc0s47lofkhn6el7m1ss","status":"confirmed","summary":"Good Friday","region":"South Africa","date":"2024-03-29"},{"id":"20240330_c7tcmvlkid9cnnq450bgfrl8qg","status":"confirmed","summary":"Holy Saturday","region":"South Africa","date":"2024-03-30"},{"id":"20240331_tvrsthkc406ulmngtth86kdm88","status":"confirmed","summary":"Easter Sunday","region":"South Africa","date":"2024-03-31"},{"id":"20240401_cgiopp2d0u4fccj9bva6pedv1g","status":"confirmed","summary":"Family Day","region":"South Africa","date":"2024-04-01"},{"id":"20240427_73k7thkb62pkicl5gk546eb6r8","status":"confirmed","summary":"Freedom Day","region":"South Africa","date":"2024-04-27"},{"id":"20240501_muq6g3qbg9kt3he4u6gvb09d88","status":"confirmed","summary":"Workers\' Day","region":"South Africa","date":"2024-05-01"},{"id":"20240512_dnotcv11134kb51m3131d0rr9o","status":"confirmed","summary":"Mother\'s Day","region":"South Africa","date":"2024-05-12"},{"id":"20240529_s28hm3qjb37mgpl9582dl2v77k","status":"confirmed","summary":"Election Day","region":"South Africa","date":"2024-05-29"},{"id":"20240616_6nn1hs2i5rlgoodfr1iujfka60","status":"confirmed","summary":"Father\'s Day","region":"South Africa","date":"2024-06-16"},{"id":"20240616_kbhq6i81vqa65ag907lm32ts04","status":"confirmed","summary":"Youth Day","region":"South Africa","date":"2024-06-16"},{"id":"20240617_3atm3hcp309lsb3pv8i3q3nvjo","status":"confirmed","summary":"Day off for Youth Day","region":"South Africa","date":"2024-06-17"},{"id":"20240718_v19aqk62u9vbmtncvrfqn2p9p0","status":"confirmed","summary":"Nelson Mandela Day","region":"South Africa","date":"2024-07-18"},{"id":"20240809_11j00f56l0ji83uogqqb50p5k4","status":"confirmed","summary":"National Women\'s Day","region":"South Africa","date":"2024-08-09"},{"id":"20240924_uq9f73nc9ivf1ae3k87t2q0ft4","status":"confirmed","summary":"Heritage Day","region":"South Africa","date":"2024-09-24"},{"id":"20241216_8cnbgqfbg93dgftgqm04ic7u68","status":"confirmed","summary":"Day of Reconciliation","region":"South Africa","date":"2024-12-16"},{"id":"20241224_1gbpj64ohpb6rq2a7vp8op5nls","status":"confirmed","summary":"Christmas Eve","region":"South Africa","date":"2024-12-24"},{"id":"20241225_q47l5kf0rcg0a3fc1kcmqhl0s8","status":"confirmed","summary":"Christmas Day","region":"South Africa","date":"2024-12-25"},{"id":"20241226_t88mvntl43dfh2l4kpat1d9qqg","status":"confirmed","summary":"Day of Goodwill","region":"South Africa","date":"2024-12-26"},{"id":"20241231_jr8thcdbhsr4tg8u941shtp39c","status":"confirmed","summary":"New Year\'s Eve","region":"South Africa","date":"2024-12-31"},{"id":"20250101_au7pmt4pq4gj6j0nn4ta25grg8","status":"confirmed","summary":"New Year\'s Day","region":"South Africa","date":"2025-01-01"},{"id":"20250102_dkal73s0fu8cjt27cflql5dshk","status":"confirmed","summary":"Tweede Nuwe Jaar","region":"South Africa","date":"2025-01-02"},{"id":"20250221_72fk39f2a2dk2emvumdfbftlmo","status":"confirmed","summary":"Armed Forces Day","region":"South Africa","date":"2025-02-21"},{"id":"20250321_2a74a0leubhhho4dfcaf63jj14","status":"confirmed","summary":"Human Rights Day","region":"South Africa","date":"2025-03-21"},{"id":"20250418_sqio6jne754on7fon612hi8fvo","status":"confirmed","summary":"Good Friday","region":"South Africa","date":"2025-04-18"},{"id":"20250419_51ongov8eos1ng6dig77ir26rc","status":"confirmed","summary":"Holy Saturday","region":"South Africa","date":"2025-04-19"},{"id":"20250420_8dfah8st3kgjm0qjpc994ainfc","status":"confirmed","summary":"Easter Sunday","region":"South Africa","date":"2025-04-20"},{"id":"20250421_bp79hcumj0s9drad7o0luv26f0","status":"confirmed","summary":"Family Day","region":"South Africa","date":"2025-04-21"},{"id":"20250427_o0mjltgcs99q73fqspcfc1eo00","status":"confirmed","summary":"Freedom Day","region":"South Africa","date":"2025-04-27"},{"id":"20250428_uphn6j2o980ord6dt1gm4ap2qo","status":"confirmed","summary":"Freedom Day observed","region":"South Africa","date":"2025-04-28"},{"id":"20250501_8rf2k9q9i7et8a7hki3t8r04js","status":"confirmed","summary":"Workers\' Day","region":"South Africa","date":"2025-05-01"},{"id":"20250511_gn42ju98m8gmnvtqjat13qdlos","status":"confirmed","summary":"Mother\'s Day","region":"South Africa","date":"2025-05-11"},{"id":"20250615_qq7e0psjbq9kh45gl6e7ndtsl8","status":"confirmed","summary":"Father\'s Day","region":"South Africa","date":"2025-06-15"},{"id":"20250616_069egcftkdjt0q15l396d445k0","status":"confirmed","summary":"Youth Day","region":"South Africa","date":"2025-06-16"},{"id":"20250718_ctv4temk8tgp86pebnsjj7ujds","status":"confirmed","summary":"Nelson Mandela Day","region":"South Africa","date":"2025-07-18"},{"id":"20250809_j3dmfh29p0sihmol1qq0l3n7lg","status":"confirmed","summary":"National Women\'s Day","region":"South Africa","date":"2025-08-09"},{"id":"20250924_0l7jo1sb79gr9m2rjg681dikao","status":"confirmed","summary":"Heritage Day","region":"South Africa","date":"2025-09-24"},{"id":"20251216_u1di5e77n0qck4mvm02hlde0e0","status":"confirmed","summary":"Day of Reconciliation","region":"South Africa","date":"2025-12-16"},{"id":"20251224_3tpuoh7hq8js7umrhr6snqjmt0","status":"confirmed","summary":"Christmas Eve","region":"South Africa","date":"2025-12-24"},{"id":"20251225_j1tbmv8i3n9ipk5jbg09c77khs","status":"confirmed","summary":"Christmas Day","region":"South Africa","date":"2025-12-25"},{"id":"20251226_a1jc06rf3p45f9drjiu54hb424","status":"confirmed","summary":"Day of Goodwill","region":"South Africa","date":"2025-12-26"},{"id":"20251231_sjv7mna3gc045k1v5fnjbr1n84","status":"confirmed","summary":"New Year\'s Eve","region":"South Africa","date":"2025-12-31"}],"Saudi Arabia":[{"id":"20240222_d70dhaqd57f036ktq43npg3f0c","status":"confirmed","summary":"Founding Day","region":"Saudi Arabia","date":"2024-02-22"},{"id":"20240311_ic5j40h7itbhse8s1v33gkenhg","status":"confirmed","summary":"Flag Day","region":"Saudi Arabia","date":"2024-03-11"},{"id":"20240311_rgkhn6srbqrosss3fsdl24gg64","status":"confirmed","summary":"Ramadan begins","region":"Saudi Arabia","date":"2024-03-11"},{"id":"20240409_m8eldpi6j44p7dgvk70i3j3b7g","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Saudi Arabia","date":"2024-04-09"},{"id":"20240410_sa3jlejqsru6r0jbq5r8orifvg","status":"confirmed","summary":"Eid al-Fitr","region":"Saudi Arabia","date":"2024-04-10"},{"id":"20240411_9jdtskfnk0g4ptegs3ah1b1mhg","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Saudi Arabia","date":"2024-04-11"},{"id":"20240412_g7bh6nis0hf98nfjf0nh15c4tg","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Saudi Arabia","date":"2024-04-12"},{"id":"20240413_lgkfomlrbepr2t1nihg0g0ckgg","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Saudi Arabia","date":"2024-04-13"},{"id":"20240615_55tn118imhcgaag137rid88lkg","status":"confirmed","summary":"Arafat Day","region":"Saudi Arabia","date":"2024-06-15"},{"id":"20240616_fsve5sssargkdpm4amh9hvs270","status":"confirmed","summary":"Eid al-Adha","region":"Saudi Arabia","date":"2024-06-16"},{"id":"20240617_82gi9q7nk9t4gicbnog8bckr6g","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Saudi Arabia","date":"2024-06-17"},{"id":"20240618_rv1n9htsc63svnetbkur5c2fk0","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Saudi Arabia","date":"2024-06-18"},{"id":"20240707_67bsa34dhofkmptr7ulmds865o","status":"confirmed","summary":"Muharram (Muslim New Year)","region":"Saudi Arabia","date":"2024-07-07"},{"id":"20240923_6bb7b469ol2q3pmbm6scn728ug","status":"confirmed","summary":"Saudi National Day","region":"Saudi Arabia","date":"2024-09-23"},{"id":"20250222_l8d96p2dh9bu1d3kbsitfqi540","status":"confirmed","summary":"Founding Day","region":"Saudi Arabia","date":"2025-02-22"},{"id":"20250301_2520v4o9ecprj8135a7b6ri62c","status":"confirmed","summary":"Ramadan begins","region":"Saudi Arabia","date":"2025-03-01"},{"id":"20250311_onfdb58p6mc53ueks2e07np47s","status":"confirmed","summary":"Flag Day","region":"Saudi Arabia","date":"2025-03-11"},{"id":"20250331_4shn2r2ua3ccs32hm78r2ar740","status":"confirmed","summary":"Eid al-Fitr","region":"Saudi Arabia","date":"2025-03-31"},{"id":"20250401_5thokd7338k9bi17i41rpm6u64","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Saudi Arabia","date":"2025-04-01"},{"id":"20250402_vevoei2tf5lu75s9kmb21nccoc","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Saudi Arabia","date":"2025-04-02"},{"id":"20250403_dp8s97bhvit3v6scps66uok61o","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Saudi Arabia","date":"2025-04-03"},{"id":"20250605_3gvrgd2k170jlonqi2e2ogaa50","status":"confirmed","summary":"Arafat Day","region":"Saudi Arabia","date":"2025-06-05"},{"id":"20250606_p0qcenop59thb8fuos4vmltl4g","status":"confirmed","summary":"Eid al-Adha","region":"Saudi Arabia","date":"2025-06-06"},{"id":"20250607_ec2nboqk3c6vlivglbngo6m2nc","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Saudi Arabia","date":"2025-06-07"},{"id":"20250608_p3fibp8jn34rb6h4fh39cn9v6g","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Saudi Arabia","date":"2025-06-08"},{"id":"20250626_6f5cfb6958lgklquqvqfj8tdi8","status":"confirmed","summary":"Muharram (Muslim New Year)","region":"Saudi Arabia","date":"2025-06-26"},{"id":"20250923_qqkqqlc8eckb303g866pt22710","status":"confirmed","summary":"Saudi National Day","region":"Saudi Arabia","date":"2025-09-23"}],"Solomon Islands":[{"id":"20240101_kc0onruos0h4vp3uvpep41bdn8","status":"confirmed","summary":"New Year\'s Day","region":"Solomon Islands","date":"2024-01-01"},{"id":"20240329_ap8er5djlik66buq59nt50a7co","status":"confirmed","summary":"Good Friday","region":"Solomon Islands","date":"2024-03-29"},{"id":"20240330_8pbs08v3ham1chgk7kl8i98st8","status":"confirmed","summary":"Holy Saturday","region":"Solomon Islands","date":"2024-03-30"},{"id":"20240331_qgirgnsjsv7ofl15pjke89pgu8","status":"confirmed","summary":"Easter Sunday","region":"Solomon Islands","date":"2024-03-31"},{"id":"20240401_04ss5idsungbpl68p18blcmhk8","status":"confirmed","summary":"Easter Monday","region":"Solomon Islands","date":"2024-04-01"},{"id":"20240417_0gclnj22kjlmg73fnj2bblhd10","status":"confirmed","summary":"Election Day","region":"Solomon Islands","date":"2024-04-17"},{"id":"20240520_rokbg5e65seuj03u8g19vuf5t8","status":"confirmed","summary":"Whit Monday","region":"Solomon Islands","date":"2024-05-20"},{"id":"20240707_a6lr34274i6lcaarq5v0htc7vg","status":"confirmed","summary":"Independence Day","region":"Solomon Islands","date":"2024-07-07"},{"id":"20240708_kingsguap1kjf630fp8caff98k","status":"confirmed","summary":"Day off for Independence Day","region":"Solomon Islands","date":"2024-07-08"},{"id":"20241225_k0eo29nttr1s77lnvpsnj5qu9k","status":"confirmed","summary":"Christmas Day","region":"Solomon Islands","date":"2024-12-25"},{"id":"20241226_o2u0kaal0u5o3iq0u9qggcjrd0","status":"confirmed","summary":"National Day of Thanksgiving","region":"Solomon Islands","date":"2024-12-26"},{"id":"20250101_a90mk30m7g62co2j60mba4mpds","status":"confirmed","summary":"New Year\'s Day","region":"Solomon Islands","date":"2025-01-01"},{"id":"20250418_ua5cdi8dk352vh52qs1lmgs098","status":"confirmed","summary":"Good Friday","region":"Solomon Islands","date":"2025-04-18"},{"id":"20250419_837n4gj9e0pooctb3lhld371ls","status":"confirmed","summary":"Holy Saturday","region":"Solomon Islands","date":"2025-04-19"},{"id":"20250420_fg0khinme5lrd5mk5jgt064vv8","status":"confirmed","summary":"Easter Sunday","region":"Solomon Islands","date":"2025-04-20"},{"id":"20250421_pb1vmsvjqc47cgc1mb5qjdlf0o","status":"confirmed","summary":"Easter Monday","region":"Solomon Islands","date":"2025-04-21"},{"id":"20250609_b9vj8khjmbob4lvf85bapmol7o","status":"confirmed","summary":"Whit Monday","region":"Solomon Islands","date":"2025-06-09"},{"id":"20250707_b2cs5eb7dknmonne89tmbrht74","status":"confirmed","summary":"Independence Day","region":"Solomon Islands","date":"2025-07-07"},{"id":"20251225_gkidq8iq8lrorho382hlq9hjng","status":"confirmed","summary":"Christmas Day","region":"Solomon Islands","date":"2025-12-25"},{"id":"20251226_ouqsvo35bme4jq24gvbd7apemo","status":"confirmed","summary":"National Day of Thanksgiving","region":"Solomon Islands","date":"2025-12-26"}],"Seychelles":[{"id":"20240101_bft87ak3n3beps3s89bbee22ss","status":"confirmed","summary":"New Year","region":"Seychelles","date":"2024-01-01"},{"id":"20240102_vm8t2fnlkacjlq1j696scuagfc","status":"confirmed","summary":"New Year holiday","region":"Seychelles","date":"2024-01-02"},{"id":"20240329_c9nbbesqlfinehc25shlogt22k","status":"confirmed","summary":"Good Friday","region":"Seychelles","date":"2024-03-29"},{"id":"20240330_hv0mu0fs6br48dccg86gse5m2o","status":"confirmed","summary":"Holy Saturday","region":"Seychelles","date":"2024-03-30"},{"id":"20240331_ksv2dcm3trv99d9snm4r6em758","status":"confirmed","summary":"Easter Sunday","region":"Seychelles","date":"2024-03-31"},{"id":"20240401_k8jlhkgcfrca2pcef52k17dru8","status":"confirmed","summary":"Easter Monday","region":"Seychelles","date":"2024-04-01"},{"id":"20240501_cqfdsed58j6krorkjjsvrimuik","status":"confirmed","summary":"Labour Day","region":"Seychelles","date":"2024-05-01"},{"id":"20240530_fda2k8hcsf2u49ac4d3obv1llg","status":"confirmed","summary":"Corpus Christi","region":"Seychelles","date":"2024-05-30"},{"id":"20240618_8e1kdd3jefof9i4fusn5kcbchg","status":"confirmed","summary":"Constitution Day","region":"Seychelles","date":"2024-06-18"},{"id":"20240629_ah6hr3p0ol4grg0eeoihgokgs4","status":"confirmed","summary":"National Day","region":"Seychelles","date":"2024-06-29"},{"id":"20240815_2m3ktkuqv42u1qahavpdtpq234","status":"confirmed","summary":"Assumption of Mary","region":"Seychelles","date":"2024-08-15"},{"id":"20241101_m3gehtkmsp1j20ipmpecifi04g","status":"confirmed","summary":"All Saints\' Day","region":"Seychelles","date":"2024-11-01"},{"id":"20241208_30s67609sll8o5ei64rjvohepk","status":"confirmed","summary":"Immaculate Conception","region":"Seychelles","date":"2024-12-08"},{"id":"20241209_rvuhhvc20mtoncmgnnao25u4tc","status":"confirmed","summary":"Day off for Immaculate Conception","region":"Seychelles","date":"2024-12-09"},{"id":"20241225_sglk6mcubjk9mhnjqs15b0vlt4","status":"confirmed","summary":"Christmas Day","region":"Seychelles","date":"2024-12-25"},{"id":"20250101_gclqa4pr80jo6tisokfgnldtt4","status":"confirmed","summary":"New Year","region":"Seychelles","date":"2025-01-01"},{"id":"20250102_mcmlq42e13ne675027cdvost44","status":"confirmed","summary":"New Year holiday","region":"Seychelles","date":"2025-01-02"},{"id":"20250418_bnq2925la5k6lpkjvnllrmp8lg","status":"confirmed","summary":"Good Friday","region":"Seychelles","date":"2025-04-18"},{"id":"20250419_akjtgfk5k1mq85ers02dc2fkvc","status":"confirmed","summary":"Holy Saturday","region":"Seychelles","date":"2025-04-19"},{"id":"20250420_r8m2ksoau1g4c7f5rca847qqtk","status":"confirmed","summary":"Easter Sunday","region":"Seychelles","date":"2025-04-20"},{"id":"20250421_8hul102re5jdbsviutu1l02bv4","status":"confirmed","summary":"Easter Monday","region":"Seychelles","date":"2025-04-21"},{"id":"20250501_ac58ie99l83jtd6oh3f2slghf8","status":"confirmed","summary":"Labour Day","region":"Seychelles","date":"2025-05-01"},{"id":"20250618_qt15puagv2lobbnlqr6eedtbog","status":"confirmed","summary":"Constitution Day","region":"Seychelles","date":"2025-06-18"},{"id":"20250619_5tf2bjqc2harm38d77taih941g","status":"confirmed","summary":"Corpus Christi","region":"Seychelles","date":"2025-06-19"},{"id":"20250629_hrjn1e6fv2k2tg4i0qjhbi4p2o","status":"confirmed","summary":"National Day","region":"Seychelles","date":"2025-06-29"},{"id":"20250630_upr6pemk6r69ikvn8upa9hvjtc","status":"confirmed","summary":"Day off for National Day","region":"Seychelles","date":"2025-06-30"},{"id":"20250815_3h9ss5orqjc8246rpcg85r4l8c","status":"confirmed","summary":"Assumption of Mary","region":"Seychelles","date":"2025-08-15"},{"id":"20251101_tlhq9plb667oi5lttbuhgivf44","status":"confirmed","summary":"All Saints\' Day","region":"Seychelles","date":"2025-11-01"},{"id":"20251208_vpc0pq66ius5btoj61fj7dv9m4","status":"confirmed","summary":"Immaculate Conception","region":"Seychelles","date":"2025-12-08"},{"id":"20251225_l146f3vpauspqoj2f4hogb8hb0","status":"confirmed","summary":"Christmas Day","region":"Seychelles","date":"2025-12-25"}],"Sudan":[{"id":"20240101_9npmmjqe4r1se7mo763r34ck4s","status":"confirmed","summary":"Independence Day","region":"Sudan","date":"2024-01-01"},{"id":"20240107_li2gsbtper9g5j0ojvodjd6j10","status":"confirmed","summary":"Coptic Christmas","region":"Sudan","date":"2024-01-07"},{"id":"20240311_nnh5rh1gpn4acvc6n1fkoln238","status":"confirmed","summary":"Ramadan Start","region":"Sudan","date":"2024-03-11"},{"id":"20240410_pp3r68gdmktsjpeptld0r3j5hg","status":"confirmed","summary":"Eid al-Fitr","region":"Sudan","date":"2024-04-10"},{"id":"20240411_hjnekvprgle1kkoe3pi435shg8","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Sudan","date":"2024-04-11"},{"id":"20240412_m2iqjee5b4nuuv4jof3614bruc","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Sudan","date":"2024-04-12"},{"id":"20240413_si31bsn9kb8ef9cmdvbqdrec18","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Sudan","date":"2024-04-13"},{"id":"20240505_nbcefvbni5ksh13pit9l4ou890","status":"confirmed","summary":"Coptic Easter","region":"Sudan","date":"2024-05-05"},{"id":"20240616_bnm22r782l7k53u9ovj8febvh8","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Sudan","date":"2024-06-16"},{"id":"20240617_4eolh0p1kee7a8ds1hu966d5tk","status":"confirmed","summary":"Eid al-Adha","region":"Sudan","date":"2024-06-17"},{"id":"20240618_bi2k3ru392pk5si8nkm3oqvj7o","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Sudan","date":"2024-06-18"},{"id":"20240619_35qut90duc2b3n6i0ibcrhjvd8","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Sudan","date":"2024-06-19"},{"id":"20240620_q9ecmcgdnps6gq2streo0kmngk","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Sudan","date":"2024-06-20"},{"id":"20240708_m17eakgtrs8vevr44n0qle7koo","status":"confirmed","summary":"Muharram","region":"Sudan","date":"2024-07-08"},{"id":"20240916_lm9ikk0u1p53ki8ad1dehs1qeo","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Sudan","date":"2024-09-16"},{"id":"20241225_cstlbjvpcssojs5iclqcennr0c","status":"confirmed","summary":"Christmas Day","region":"Sudan","date":"2024-12-25"},{"id":"20250101_jaqc7lfs9eg01ro8f4f02qh95g","status":"confirmed","summary":"Independence Day","region":"Sudan","date":"2025-01-01"},{"id":"20250107_rd6jp35tp5etpsvhqn5ltlh97g","status":"confirmed","summary":"Coptic Christmas","region":"Sudan","date":"2025-01-07"},{"id":"20250301_ncg67hbvhprudir7umgmr32n48","status":"confirmed","summary":"Ramadan Start","region":"Sudan","date":"2025-03-01"},{"id":"20250331_qapeshpg5lthl3sn448st7q8fg","status":"confirmed","summary":"Eid al-Fitr","region":"Sudan","date":"2025-03-31"},{"id":"20250401_767me4aa5llsqbtf9821kiqrf4","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Sudan","date":"2025-04-01"},{"id":"20250402_eigaftt1edslgfvgnkiaegsd78","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Sudan","date":"2025-04-02"},{"id":"20250403_gahv6ga55r9mnhrqhefdnlrvfo","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Sudan","date":"2025-04-03"},{"id":"20250420_5nd77d7tsr2qb75icvbi15157k","status":"confirmed","summary":"Coptic Easter","region":"Sudan","date":"2025-04-20"},{"id":"20250606_4pbohotpc00rvs405eqbotef9s","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Sudan","date":"2025-06-06"},{"id":"20250607_fl3ldom65jruglrdag18lj9kt4","status":"confirmed","summary":"Eid al-Adha","region":"Sudan","date":"2025-06-07"},{"id":"20250608_1tm1cfo66uubtb1gjjqnvqvdoo","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Sudan","date":"2025-06-08"},{"id":"20250609_k00spbvkqcnoo47g5m1dq4h3bk","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Sudan","date":"2025-06-09"},{"id":"20250610_kbgkvoqmnsqic7ptv27micbjdo","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Sudan","date":"2025-06-10"},{"id":"20250627_u2e35den64f6gfaueooktb3tqs","status":"confirmed","summary":"Muharram","region":"Sudan","date":"2025-06-27"},{"id":"20250905_d1046uelk6v4ecjt0qg8u58mg4","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Sudan","date":"2025-09-05"},{"id":"20251225_t4j7l6tv04408uqcttuig1ukbo","status":"confirmed","summary":"Christmas Day","region":"Sudan","date":"2025-12-25"}],"St. Helena":[{"id":"20240101_if8i04mu7ajs2g4v8sjaf8kbh4","status":"confirmed","summary":"New Year","region":"St. Helena","date":"2024-01-01"},{"id":"20240124_h0mtj4nd39240b17s4dmvosgk4","status":"confirmed","summary":"The Duke of Edinburgh Visit","region":"St. Helena","date":"2024-01-24"},{"id":"20240329_hqc82i1i7gk7l2monqp4tflrmk","status":"confirmed","summary":"Good Friday","region":"St. Helena","date":"2024-03-29"},{"id":"20240331_fpcrqbu3630vdeofl98d2c1l7s","status":"confirmed","summary":"Easter Sunday","region":"St. Helena","date":"2024-03-31"},{"id":"20240401_gt7vqbbcj8aqv2s4vk49fhgr1o","status":"confirmed","summary":"Easter Monday","region":"St. Helena","date":"2024-04-01"},{"id":"20240520_d64banhl89ks59cge3uoq0omok","status":"confirmed","summary":"Whit Monday","region":"St. Helena","date":"2024-05-20"},{"id":"20240521_od9gkc25s7r1kvds4pmudb3v9o","status":"confirmed","summary":"Saint Helena Day","region":"St. Helena","date":"2024-05-21"},{"id":"20240617_8v2micj3un9cbq5beied39luj0","status":"confirmed","summary":"King Charles III\'s Birthday","region":"St. Helena","date":"2024-06-17"},{"id":"20240826_424b1pf92659ogjqtiag3mu4js","status":"confirmed","summary":"August Bank Holiday","region":"St. Helena","date":"2024-08-26"},{"id":"20241225_r58lma9hr94sl146tqi61e8jtk","status":"confirmed","summary":"Christmas Day","region":"St. Helena","date":"2024-12-25"},{"id":"20241226_n5te6fe0eoru0nda5m3lhkfaus","status":"confirmed","summary":"Boxing Day","region":"St. Helena","date":"2024-12-26"},{"id":"20250101_c1n5kad9t471q4q79lot7dvujg","status":"confirmed","summary":"New Year","region":"St. Helena","date":"2025-01-01"},{"id":"20250418_3kovr1qn5l7gilt4po60sdbhec","status":"confirmed","summary":"Good Friday","region":"St. Helena","date":"2025-04-18"},{"id":"20250420_8dh53tkdk3bosg9u60g6mqe8d0","status":"confirmed","summary":"Easter Sunday","region":"St. Helena","date":"2025-04-20"},{"id":"20250421_cd9vpgfe3nmv0soe11um56laec","status":"confirmed","summary":"Easter Monday","region":"St. Helena","date":"2025-04-21"},{"id":"20250521_lip10j31a76tlokh2b71fineok","status":"confirmed","summary":"Saint Helena Day","region":"St. Helena","date":"2025-05-21"},{"id":"20250609_6jdgh4197kig4helvaq4b6a204","status":"confirmed","summary":"Whit Monday","region":"St. Helena","date":"2025-06-09"},{"id":"20250616_j7i9807l9jsoil3nqg18r57d3s","status":"confirmed","summary":"King Charles III\'s Birthday","region":"St. Helena","date":"2025-06-16"},{"id":"20250825_v058qgecs4g1m5gu75s9cm2qd8","status":"confirmed","summary":"August Bank Holiday","region":"St. Helena","date":"2025-08-25"},{"id":"20251225_867fobd8ihu0rgrs5e1tq780qg","status":"confirmed","summary":"Christmas Day","region":"St. Helena","date":"2025-12-25"},{"id":"20251226_k9npltomg5cgjdssfjhoi9irns","status":"confirmed","summary":"Boxing Day","region":"St. Helena","date":"2025-12-26"}],"Singapore":[{"id":"20240101_1ujsvrsnvu54659s8eb74opo2c","status":"confirmed","summary":"New Year\'s Day","region":"Singapore","date":"2024-01-01"},{"id":"20240210_s3vepmedeur5p080a6l6ef312o","status":"confirmed","summary":"Lunar New Year\'s Day","region":"Singapore","date":"2024-02-10"},{"id":"20240211_od4d0bj4nrpj6nmsf0nbo79ed0","status":"confirmed","summary":"Second Day of Lunar New Year","region":"Singapore","date":"2024-02-11"},{"id":"20240212_9v5ugea6l21jb8jd110uvb58vg","status":"confirmed","summary":"Day off for Lunar New Year\'s Day","region":"Singapore","date":"2024-02-12"},{"id":"20240312_opead8ovmg63t3715pn1qhnspc","status":"confirmed","summary":"Ramadan Start","region":"Singapore","date":"2024-03-12"},{"id":"20240329_ipl8f5douk4hqknhlgg8v9cuf4","status":"confirmed","summary":"Good Friday","region":"Singapore","date":"2024-03-29"},{"id":"20240330_ei6772153aeblr5nb9pa8n2tg8","status":"confirmed","summary":"Easter Saturday","region":"Singapore","date":"2024-03-30"},{"id":"20240331_i5igp4f4ahemtpifr1jkma46k0","status":"confirmed","summary":"Easter Sunday","region":"Singapore","date":"2024-03-31"},{"id":"20240410_bij882ku1fsmp62gnee29qm6pc","status":"confirmed","summary":"Hari Raya Puasa","region":"Singapore","date":"2024-04-10"},{"id":"20240501_ig7ddh8hrp6d9r4lenul7gvn84","status":"confirmed","summary":"Labour Day","region":"Singapore","date":"2024-05-01"},{"id":"20240522_icj7nvt2vbpfkt12q48odoodu8","status":"confirmed","summary":"Vesak Day","region":"Singapore","date":"2024-05-22"},{"id":"20240617_ctsosn0tjh52jv98eq0407v6ug","status":"confirmed","summary":"Hari Raya Haji","region":"Singapore","date":"2024-06-17"},{"id":"20240809_d2vrstmlmukp7gs4i2q6e8k2og","status":"confirmed","summary":"National Day","region":"Singapore","date":"2024-08-09"},{"id":"20240906_vvesbmllmn7nmc8im2mnppc2ck","status":"confirmed","summary":"Teachers\' Day","region":"Singapore","date":"2024-09-06"},{"id":"20241004_82iqn86db82d8ifk8dns3rimi8","status":"confirmed","summary":"Children\'s Day","region":"Singapore","date":"2024-10-04"},{"id":"20241031_b2cerqr27ji82a0cb437tk9ais","status":"confirmed","summary":"Diwali/Deepavali","region":"Singapore","date":"2024-10-31"},{"id":"20241224_c6mt68d2op20agd6eg4gpisumo","status":"confirmed","summary":"Christmas Eve","region":"Singapore","date":"2024-12-24"},{"id":"20241225_lmsqgelq6tbjfdr581oacr0lko","status":"confirmed","summary":"Christmas Day","region":"Singapore","date":"2024-12-25"},{"id":"20241231_is56dds9hkkafhp9odbjhe0ho8","status":"confirmed","summary":"New Year\'s Eve","region":"Singapore","date":"2024-12-31"},{"id":"20250101_em8709cbbrf894k16i9edbag40","status":"confirmed","summary":"New Year\'s Day","region":"Singapore","date":"2025-01-01"},{"id":"20250129_bkkn114cevp0qq6oasija9h7ng","status":"confirmed","summary":"Lunar New Year\'s Day","region":"Singapore","date":"2025-01-29"},{"id":"20250301_qjobdfjavt5rmkmulcsolrte0c","status":"confirmed","summary":"Ramadan Start","region":"Singapore","date":"2025-03-01"},{"id":"20250331_1uqv235stfn33f2stcl54tbqno","status":"confirmed","summary":"Hari Raya Puasa","region":"Singapore","date":"2025-03-31"},{"id":"20250418_tpvbim5a1u482frga7sb4svmug","status":"confirmed","summary":"Good Friday","region":"Singapore","date":"2025-04-18"},{"id":"20250419_p3519ucubs0j17gl0203tfosm0","status":"confirmed","summary":"Easter Saturday","region":"Singapore","date":"2025-04-19"},{"id":"20250420_44hmpc9ft4t4smu6ahvtavtl2o","status":"confirmed","summary":"Easter Sunday","region":"Singapore","date":"2025-04-20"},{"id":"20250501_8rcdm6jgv4d0bevvuu4j945svo","status":"confirmed","summary":"Labour Day","region":"Singapore","date":"2025-05-01"},{"id":"20250512_hicpffc4askh8s55dlimr9kuvg","status":"confirmed","summary":"Vesak Day","region":"Singapore","date":"2025-05-12"},{"id":"20250606_tq77f3ov23rscft7bhe75ct62k","status":"confirmed","summary":"Hari Raya Haji","region":"Singapore","date":"2025-06-06"},{"id":"20250809_i8eul5snvn07nmbj8phrfjlokc","status":"confirmed","summary":"National Day","region":"Singapore","date":"2025-08-09"},{"id":"20250905_acqtaafp5rnc3sfc9f4cottgc8","status":"confirmed","summary":"Teachers\' Day","region":"Singapore","date":"2025-09-05"},{"id":"20251003_hcmfuh89en8hmtkkmglq7okg64","status":"confirmed","summary":"Children\'s Day","region":"Singapore","date":"2025-10-03"},{"id":"20251021_b62rfftqcg6ugflleqt5v2eggc","status":"confirmed","summary":"Diwali/Deepavali","region":"Singapore","date":"2025-10-21"},{"id":"20251224_j472ggma2oga40c4685jplnl8c","status":"confirmed","summary":"Christmas Eve","region":"Singapore","date":"2025-12-24"},{"id":"20251225_5s9gj9fe1cto1rpjq9c1nhlrvo","status":"confirmed","summary":"Christmas Day","region":"Singapore","date":"2025-12-25"},{"id":"20251231_r9pqt2gur3gs03d16ekebaeeic","status":"confirmed","summary":"New Year\'s Eve","region":"Singapore","date":"2025-12-31"}],"Sierra Leone":[{"id":"20240101_49geqt0kuuch4jbs85jbajbpfg","status":"confirmed","summary":"New Year","region":"Sierra Leone","date":"2024-01-01"},{"id":"20240218_9mpgkvmnrm6mmei47q67jphn9o","status":"confirmed","summary":"Armed Forces Day","region":"Sierra Leone","date":"2024-02-18"},{"id":"20240219_lfnk4mfujg1g111m2vm0l26is0","status":"confirmed","summary":"Day off for Armed Forces Day","region":"Sierra Leone","date":"2024-02-19"},{"id":"20240308_3ps1knpvmqqqk85p0p18fh1qs8","status":"confirmed","summary":"International Women\'s Day","region":"Sierra Leone","date":"2024-03-08"},{"id":"20240311_p2k5n0kvfieg9hl052og6chiq4","status":"confirmed","summary":"Ramadan Start","region":"Sierra Leone","date":"2024-03-11"},{"id":"20240329_pmjufmok13sul46g4rm1mah5v0","status":"confirmed","summary":"Good Friday","region":"Sierra Leone","date":"2024-03-29"},{"id":"20240401_tmcpj73d65fptas1d2dc71mjpg","status":"confirmed","summary":"Easter Monday","region":"Sierra Leone","date":"2024-04-01"},{"id":"20240410_6kk3l1lmilmufda7e9o6jvokt0","status":"confirmed","summary":"Eid al-Fitr","region":"Sierra Leone","date":"2024-04-10"},{"id":"20240427_uubmbvr9dou03s99rpc49bvjpc","status":"confirmed","summary":"Independence Day","region":"Sierra Leone","date":"2024-04-27"},{"id":"20240501_avblpf2klhjnid3sfmaj5temk4","status":"confirmed","summary":"International Worker’s Day","region":"Sierra Leone","date":"2024-05-01"},{"id":"20240617_imaguhbvjca9b0h0271396fkv4","status":"confirmed","summary":"Tabaski","region":"Sierra Leone","date":"2024-06-17"},{"id":"20240916_kfbdegr0nf8cgk2odb80oun23g","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Sierra Leone","date":"2024-09-16"},{"id":"20241225_pdup2sjclbuvvitrtft3cl6nko","status":"confirmed","summary":"Christmas Day","region":"Sierra Leone","date":"2024-12-25"},{"id":"20241226_7794g6dtict2oflrr28jhhvsvc","status":"confirmed","summary":"Boxing Day","region":"Sierra Leone","date":"2024-12-26"},{"id":"20250101_83sum9p0na0k5kacm09ag1q5tc","status":"confirmed","summary":"New Year","region":"Sierra Leone","date":"2025-01-01"},{"id":"20250218_obc9jli3lmhb785ioo0irsuoi0","status":"confirmed","summary":"Armed Forces Day","region":"Sierra Leone","date":"2025-02-18"},{"id":"20250301_n6u2igh0cvntthri9eh89ep37k","status":"confirmed","summary":"Ramadan Start","region":"Sierra Leone","date":"2025-03-01"},{"id":"20250308_2b4a3imvv8p2s7ecfi0hq80nlk","status":"confirmed","summary":"International Women\'s Day","region":"Sierra Leone","date":"2025-03-08"},{"id":"20250331_s435cn735n794njk0gb7g61lbk","status":"confirmed","summary":"Eid al-Fitr","region":"Sierra Leone","date":"2025-03-31"},{"id":"20250418_187d7ejdgddtfuch6teevs9hb8","status":"confirmed","summary":"Good Friday","region":"Sierra Leone","date":"2025-04-18"},{"id":"20250421_memeljp98fshskk7nk7asqikls","status":"confirmed","summary":"Easter Monday","region":"Sierra Leone","date":"2025-04-21"},{"id":"20250427_72kvtr8b3407k6fn7bu9oi8b6c","status":"confirmed","summary":"Independence Day","region":"Sierra Leone","date":"2025-04-27"},{"id":"20250428_eaimgp7es6tto01nivr0f14sn4","status":"confirmed","summary":"Independence Day observed","region":"Sierra Leone","date":"2025-04-28"},{"id":"20250501_i80e683de8p1st2sqd18901f34","status":"confirmed","summary":"International Worker’s Day","region":"Sierra Leone","date":"2025-05-01"},{"id":"20250607_159ulhqs2gkc4ovf0a4nf3mgrg","status":"confirmed","summary":"Tabaski","region":"Sierra Leone","date":"2025-06-07"},{"id":"20250905_7jri5u6b76kcu4u0mcqpsl7evg","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Sierra Leone","date":"2025-09-05"},{"id":"20251225_jtdaq996tdjsrf8orkml0nh6h4","status":"confirmed","summary":"Christmas Day","region":"Sierra Leone","date":"2025-12-25"},{"id":"20251226_guoau4r34nvf0bgbmk8ad6l7bs","status":"confirmed","summary":"Boxing Day","region":"Sierra Leone","date":"2025-12-26"}],"Slovakia":[{"id":"20240101_8ca1eu60hcas5828qt7vlhr7qc","status":"confirmed","summary":"Republic Day","region":"Slovakia","date":"2024-01-01"},{"id":"20240106_q8ms1aq66qvqosp4cunskhv8rg","status":"confirmed","summary":"Epiphany","region":"Slovakia","date":"2024-01-06"},{"id":"20240329_7fd7dk9obip0vb1n5sqq4p99d0","status":"confirmed","summary":"Good Friday","region":"Slovakia","date":"2024-03-29"},{"id":"20240331_7ni4pq5qqn0pklc6q7taktrfu0","status":"confirmed","summary":"Easter Sunday","region":"Slovakia","date":"2024-03-31"},{"id":"20240401_pj8c061edggnlrlur70gtgsqd0","status":"confirmed","summary":"Easter Monday","region":"Slovakia","date":"2024-04-01"},{"id":"20240501_5du919e4i7jniu1qc6101r45es","status":"confirmed","summary":"Labor Day","region":"Slovakia","date":"2024-05-01"},{"id":"20240508_kau32co94p641mso9mfokhrtu0","status":"confirmed","summary":"Day of Victory Over Fascism","region":"Slovakia","date":"2024-05-08"},{"id":"20240705_ek75r7vl8251buct2m6j7or4uc","status":"confirmed","summary":"St. Cyril & St. Methodius Day","region":"Slovakia","date":"2024-07-05"},{"id":"20240829_mrlk4udf43gnnvvm3cof5463es","status":"confirmed","summary":"National Uprising Day","region":"Slovakia","date":"2024-08-29"},{"id":"20240901_sqsroegdrrfj7baofemo0v69n4","status":"confirmed","summary":"Constitution Day","region":"Slovakia","date":"2024-09-01"},{"id":"20240915_s05gg438aal49b9jbt1sbh92gc","status":"confirmed","summary":"Day of Our Lady of Sorrows","region":"Slovakia","date":"2024-09-15"},{"id":"20241101_282ir73bqlvvj2srlkr1c7eujg","status":"confirmed","summary":"All Saints\' Day","region":"Slovakia","date":"2024-11-01"},{"id":"20241117_qt1og62igpttc75bmhs2t3on4s","status":"confirmed","summary":"Fight for Freedom and Democracy Day","region":"Slovakia","date":"2024-11-17"},{"id":"20241224_bpnfqj1q52kbjidaekmm2sii7g","status":"confirmed","summary":"Christmas Eve","region":"Slovakia","date":"2024-12-24"},{"id":"20241225_qohnbs4mvfo6suhatgmav8g2rk","status":"confirmed","summary":"Christmas Day","region":"Slovakia","date":"2024-12-25"},{"id":"20241226_qnv5cac60t5abo91hi6k0imovg","status":"confirmed","summary":"St. Stephen\'s Day","region":"Slovakia","date":"2024-12-26"},{"id":"20250101_ds01k1jhjhvvu1endk7rgtjdeo","status":"confirmed","summary":"Republic Day","region":"Slovakia","date":"2025-01-01"},{"id":"20250106_b5ikjv4tlb8turah8gt1svot1k","status":"confirmed","summary":"Epiphany","region":"Slovakia","date":"2025-01-06"},{"id":"20250418_5i5lk4bt6kbjh10q436eacpcg8","status":"confirmed","summary":"Good Friday","region":"Slovakia","date":"2025-04-18"},{"id":"20250420_dphbcoqjm95fkk9u1sm8mqpkog","status":"confirmed","summary":"Easter Sunday","region":"Slovakia","date":"2025-04-20"},{"id":"20250421_v86t2lm7npgtj4ltff8q60b6cc","status":"confirmed","summary":"Easter Monday","region":"Slovakia","date":"2025-04-21"},{"id":"20250501_ii5puoqsmb7in564ncm9r9mqg0","status":"confirmed","summary":"Labor Day","region":"Slovakia","date":"2025-05-01"},{"id":"20250508_5gpa4lj2h8f7688667d9svgj0g","status":"confirmed","summary":"Day of Victory Over Fascism","region":"Slovakia","date":"2025-05-08"},{"id":"20250705_1kklshepia5jjecfpset30cqpo","status":"confirmed","summary":"St. Cyril & St. Methodius Day","region":"Slovakia","date":"2025-07-05"},{"id":"20250829_ce6h0ncc9j2lmid9jsbrau19io","status":"confirmed","summary":"National Uprising Day","region":"Slovakia","date":"2025-08-29"},{"id":"20250901_4ju31bg6vb9s8hn37cnvgeagek","status":"confirmed","summary":"Constitution Day","region":"Slovakia","date":"2025-09-01"},{"id":"20250915_q8sq8b3aalbcrac7pkqr2e66ns","status":"confirmed","summary":"Day of Our Lady of Sorrows","region":"Slovakia","date":"2025-09-15"},{"id":"20251101_f5i11dg54st5bnko2kha0quht8","status":"confirmed","summary":"All Saints\' Day","region":"Slovakia","date":"2025-11-01"},{"id":"20251117_k1io9t1svgfndli1a2vha7a19g","status":"confirmed","summary":"Fight for Freedom and Democracy Day","region":"Slovakia","date":"2025-11-17"},{"id":"20251224_87cbgbub6lc35rrlmhctvt10ug","status":"confirmed","summary":"Christmas Eve","region":"Slovakia","date":"2025-12-24"},{"id":"20251225_4icf60s0556p71pjmu2ui33tr0","status":"confirmed","summary":"Christmas Day","region":"Slovakia","date":"2025-12-25"},{"id":"20251226_0j9bjv0k898ks87b14fgonrep0","status":"confirmed","summary":"St. Stephen\'s Day","region":"Slovakia","date":"2025-12-26"}],"Slovenia":[{"id":"20240101_k4ecil95djvgppdv0g7ivf9ar8","status":"confirmed","summary":"New Year\'s Day","region":"Slovenia","date":"2024-01-01"},{"id":"20240102_i7or6otucm92bbc54pt1se5cdg","status":"confirmed","summary":"New Year holiday","region":"Slovenia","date":"2024-01-02"},{"id":"20240208_bl8a2fgcmqgca1hag7u755ctdc","status":"confirmed","summary":"Prešeren Day","region":"Slovenia","date":"2024-02-08"},{"id":"20240325_dgletil2du8hca46jfngef3ef0","status":"confirmed","summary":"Mothers\' Day","region":"Slovenia","date":"2024-03-25"},{"id":"20240331_2062ainrp4qmcfpbc0mfdnloag","status":"confirmed","summary":"Easter Sunday","region":"Slovenia","date":"2024-03-31"},{"id":"20240401_d69o6qj7ita2ejal69p14f6p78","status":"confirmed","summary":"Easter Monday","region":"Slovenia","date":"2024-04-01"},{"id":"20240427_t298bi62um7ivdeh1vi259c9ck","status":"confirmed","summary":"Day of Uprising Against Occupation","region":"Slovenia","date":"2024-04-27"},{"id":"20240501_frc0m7r9mb3pt46vm2nqd8jogk","status":"confirmed","summary":"Labor Day / May Day","region":"Slovenia","date":"2024-05-01"},{"id":"20240502_8foc06646ckb60o5lcqh91uvok","status":"confirmed","summary":"Labour Day holiday","region":"Slovenia","date":"2024-05-02"},{"id":"20240519_rtc8nojc6nk41d3ireug7nhvhs","status":"confirmed","summary":"Whit Sunday","region":"Slovenia","date":"2024-05-19"},{"id":"20240608_u5o6u2s8e160m4ljg0ec5he7s8","status":"confirmed","summary":"Primož Trubar Day","region":"Slovenia","date":"2024-06-08"},{"id":"20240616_5cq2i43qee23lmtgm7h5fu603k","status":"confirmed","summary":"Fathers\' Day","region":"Slovenia","date":"2024-06-16"},{"id":"20240625_ghpblu93gaq9g6rt21k2u9ktu8","status":"confirmed","summary":"Statehood Day","region":"Slovenia","date":"2024-06-25"},{"id":"20240815_mjqok7fdrp3i3alkdotpuva0i8","status":"confirmed","summary":"Assumption of Mary","region":"Slovenia","date":"2024-08-15"},{"id":"20240817_sn5lc8n91fgc4esjjt8jkqvpo4","status":"confirmed","summary":"Slovenians in Prekmurje Incorporated into the Mother Nation Day","region":"Slovenia","date":"2024-08-17"},{"id":"20240915_e6h75ll1vpb52326e9kr66q44o","status":"confirmed","summary":"Restoration of Primorska to the Motherland Day","region":"Slovenia","date":"2024-09-15"},{"id":"20240923_fgaiuklarkhr0hp905lrfp8gb8","status":"confirmed","summary":"Slovenian Sports Day","region":"Slovenia","date":"2024-09-23"},{"id":"20241025_uhhtvkfcvv9fe17mcrgna6fk7k","status":"confirmed","summary":"Sovereignty Day","region":"Slovenia","date":"2024-10-25"},{"id":"20241031_t1d9p8cc9ea5k5vrek6p47qr68","status":"confirmed","summary":"Reformation Day","region":"Slovenia","date":"2024-10-31"},{"id":"20241101_o8g5f5imie7psd52kjdrkn1flc","status":"confirmed","summary":"Remembrance Day","region":"Slovenia","date":"2024-11-01"},{"id":"20241123_tdgvkfhp3neglpr14lh0l2kh1k","status":"confirmed","summary":"Rudolf Maister Day","region":"Slovenia","date":"2024-11-23"},{"id":"20241225_9qlget86jejp6h76ikoiscdes4","status":"confirmed","summary":"Christmas Day","region":"Slovenia","date":"2024-12-25"},{"id":"20241226_8tbc18vk7fg03iie6iqnnrlj9o","status":"confirmed","summary":"Independence and Unity Day","region":"Slovenia","date":"2024-12-26"},{"id":"20250101_ak3o4vefvcsbheu4bsudc3hmcc","status":"confirmed","summary":"New Year\'s Day","region":"Slovenia","date":"2025-01-01"},{"id":"20250102_k4cq8qnepjq975lgfo6u3c2ijo","status":"confirmed","summary":"New Year holiday","region":"Slovenia","date":"2025-01-02"},{"id":"20250208_69bqm08276v0hv6dfrb3qh90c8","status":"confirmed","summary":"Prešeren Day","region":"Slovenia","date":"2025-02-08"},{"id":"20250325_lrh30d98jpi5jk85mp8v6jbmmk","status":"confirmed","summary":"Mothers\' Day","region":"Slovenia","date":"2025-03-25"},{"id":"20250420_5n4ot73utt5jda7h8mpfngk1dk","status":"confirmed","summary":"Easter Sunday","region":"Slovenia","date":"2025-04-20"},{"id":"20250421_gtmfc4igoovfmebulihlnan6b4","status":"confirmed","summary":"Easter Monday","region":"Slovenia","date":"2025-04-21"},{"id":"20250427_u4kce6ffd3utgvil85rvmv04rc","status":"confirmed","summary":"Day of Uprising Against Occupation","region":"Slovenia","date":"2025-04-27"},{"id":"20250501_h3sen80s2f26g105ubsgfpvgnk","status":"confirmed","summary":"Labor Day / May Day","region":"Slovenia","date":"2025-05-01"},{"id":"20250502_tc9tq8j4mge5cgnb72gncoms8g","status":"confirmed","summary":"Labour Day holiday","region":"Slovenia","date":"2025-05-02"},{"id":"20250608_f46k2bcj97olc805e2t518a7n0","status":"confirmed","summary":"Primož Trubar Day","region":"Slovenia","date":"2025-06-08"},{"id":"20250608_metpcln3q11p0pr6ia8gkqaj9s","status":"confirmed","summary":"Whit Sunday","region":"Slovenia","date":"2025-06-08"},{"id":"20250615_b80vs5h12ag7uhs4prnbkq2ohc","status":"confirmed","summary":"Fathers\' Day","region":"Slovenia","date":"2025-06-15"},{"id":"20250625_2tkdcb2vf1qe4nvnbe8ruqcfhs","status":"confirmed","summary":"Statehood Day","region":"Slovenia","date":"2025-06-25"},{"id":"20250815_djeu2ksacgmv6o5rifg80qjhr0","status":"confirmed","summary":"Assumption of Mary","region":"Slovenia","date":"2025-08-15"},{"id":"20250817_da5m5uuljgucoj5h0duc4tuit8","status":"confirmed","summary":"Slovenians in Prekmurje Incorporated into the Mother Nation Day","region":"Slovenia","date":"2025-08-17"},{"id":"20250915_k7uq0h1fnqhjg7aeeuht6ji1l4","status":"confirmed","summary":"Restoration of Primorska to the Motherland Day","region":"Slovenia","date":"2025-09-15"},{"id":"20250923_6u73tjvfvdoappbfvpvqc0cilk","status":"confirmed","summary":"Slovenian Sports Day","region":"Slovenia","date":"2025-09-23"},{"id":"20251025_pt0qtfihfnv8kjmi832974gcvk","status":"confirmed","summary":"Sovereignty Day","region":"Slovenia","date":"2025-10-25"},{"id":"20251031_ovgc9ba2ihasjiaolnc29004mg","status":"confirmed","summary":"Reformation Day","region":"Slovenia","date":"2025-10-31"},{"id":"20251101_l0fp9o4gipl0ipd0d9f3o1ran0","status":"confirmed","summary":"Remembrance Day","region":"Slovenia","date":"2025-11-01"},{"id":"20251123_9dk1v9i7qvdhumli5jls8oc9q8","status":"confirmed","summary":"Rudolf Maister Day","region":"Slovenia","date":"2025-11-23"},{"id":"20251225_7g0t31q07b4rqp09blrg25scp4","status":"confirmed","summary":"Christmas Day","region":"Slovenia","date":"2025-12-25"},{"id":"20251226_kt3vumcds3nm6p37o35mtdtbbg","status":"confirmed","summary":"Independence and Unity Day","region":"Slovenia","date":"2025-12-26"}],"San Marino":[{"id":"20240101_fubkaa30tcnfc03cb38dvdv488","status":"confirmed","summary":"New Year\'s Day","region":"San Marino","date":"2024-01-01"},{"id":"20240106_rl8dtfspckv1kus2irfi4ee46c","status":"confirmed","summary":"Epiphany","region":"San Marino","date":"2024-01-06"},{"id":"20240205_6o4393uktenpkej6d8kviguf9c","status":"confirmed","summary":"Feast of St Agatha","region":"San Marino","date":"2024-02-05"},{"id":"20240315_n1sssvpoalda0r1uhkbv9e4src","status":"confirmed","summary":"Mothers\' Day","region":"San Marino","date":"2024-03-15"},{"id":"20240319_ghgbvtnmhsum4h2d250038lp0c","status":"confirmed","summary":"Fathers\' Day","region":"San Marino","date":"2024-03-19"},{"id":"20240325_iq7ebrgnsd3cpjno1urehb6k78","status":"confirmed","summary":"Anniversary of the Arengo","region":"San Marino","date":"2024-03-25"},{"id":"20240329_j1sln3bl038f06d56hugh5chqc","status":"confirmed","summary":"Good Friday","region":"San Marino","date":"2024-03-29"},{"id":"20240330_0svv6m0ln1adp96ji68epnpti8","status":"confirmed","summary":"Holy Saturday","region":"San Marino","date":"2024-03-30"},{"id":"20240331_edf7g5l7u8q2kikp9912ts29t0","status":"confirmed","summary":"Daylight Saving Time starts","region":"San Marino","date":"2024-03-31"},{"id":"20240331_q1a1u4bnjt9mopjie400hdbekg","status":"confirmed","summary":"Easter Sunday","region":"San Marino","date":"2024-03-31"},{"id":"20240401_12vvvba9ajldcvnlkabugk9uig","status":"confirmed","summary":"Easter Monday","region":"San Marino","date":"2024-04-01"},{"id":"20240401_a490rdukquatthqjmhamhbi34c","status":"confirmed","summary":"Investiture Ceremony of the Captains Regent 1","region":"San Marino","date":"2024-04-01"},{"id":"20240501_l6dermfod0olou2r70nmm9qkl8","status":"confirmed","summary":"Labour Day/May Day","region":"San Marino","date":"2024-05-01"},{"id":"20240530_blldmps06t44lor3nkv8rhlsag","status":"confirmed","summary":"Corpus Christi","region":"San Marino","date":"2024-05-30"},{"id":"20240728_vk5fcc1ssji71qmhv29qkl69ak","status":"confirmed","summary":"Anniversary of the Fall of the Fascist Government","region":"San Marino","date":"2024-07-28"},{"id":"20240815_enlp1ufm0leenfc52idb58tqj0","status":"confirmed","summary":"Assumption of Mary","region":"San Marino","date":"2024-08-15"},{"id":"20240903_8hh923r282cj92k9r00tu8u294","status":"confirmed","summary":"The Feast of St Marinus and Republic Day","region":"San Marino","date":"2024-09-03"},{"id":"20241001_fjjsibj8jslfhj3h5lsa9r1228","status":"confirmed","summary":"Investiture Ceremony of the Captains Regent 2","region":"San Marino","date":"2024-10-01"},{"id":"20241027_dnkv4a3gmhpmmqv8gsh590q7qs","status":"confirmed","summary":"Daylight Saving Time ends","region":"San Marino","date":"2024-10-27"},{"id":"20241101_rb7uq54tjf5389niuh11mfk8b0","status":"confirmed","summary":"All Saints\' Day","region":"San Marino","date":"2024-11-01"},{"id":"20241102_oon15q5f17gr1vri50jmbifc7g","status":"confirmed","summary":"All Souls\' Day","region":"San Marino","date":"2024-11-02"},{"id":"20241208_absm40pfrkh1qt5abcidai1oks","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"San Marino","date":"2024-12-08"},{"id":"20241224_ubi1v6er5srk6tbdn0lviqj454","status":"confirmed","summary":"Christmas Eve","region":"San Marino","date":"2024-12-24"},{"id":"20241225_eub9q3pu3cvlssgpioqq0e3n1k","status":"confirmed","summary":"Christmas Day","region":"San Marino","date":"2024-12-25"},{"id":"20241226_3rh6dtlre1hdpqd73pth39g6nc","status":"confirmed","summary":"Boxing Day","region":"San Marino","date":"2024-12-26"},{"id":"20241231_3fs11066tk68e3mt6vr0fu85m8","status":"confirmed","summary":"New Year\'s Eve","region":"San Marino","date":"2024-12-31"},{"id":"20250101_if6bsjf3ro03kv8ba3lkr9482c","status":"confirmed","summary":"New Year\'s Day","region":"San Marino","date":"2025-01-01"},{"id":"20250106_fuinlq39cev31hvku7iqcfh69k","status":"confirmed","summary":"Epiphany","region":"San Marino","date":"2025-01-06"},{"id":"20250205_3lma142ragln4pu6pvu3iiehdo","status":"confirmed","summary":"Feast of St Agatha","region":"San Marino","date":"2025-02-05"},{"id":"20250315_f5qm6d77734t6nlpg22htu9i30","status":"confirmed","summary":"Mothers\' Day","region":"San Marino","date":"2025-03-15"},{"id":"20250319_9b5rhmc2v3lbndurik1jlp1blg","status":"confirmed","summary":"Fathers\' Day","region":"San Marino","date":"2025-03-19"},{"id":"20250325_j1riv70qokbt7lo6vpn0t324s0","status":"confirmed","summary":"Anniversary of the Arengo","region":"San Marino","date":"2025-03-25"},{"id":"20250330_vg5qljftaejt22sa1jc0jv9ggk","status":"confirmed","summary":"Daylight Saving Time starts","region":"San Marino","date":"2025-03-30"},{"id":"20250401_d3ict3gg02896oi0arog9fn2ok","status":"confirmed","summary":"Investiture Ceremony of the Captains Regent 1","region":"San Marino","date":"2025-04-01"},{"id":"20250418_68le0eciat3ike0nqipaccqv2s","status":"confirmed","summary":"Good Friday","region":"San Marino","date":"2025-04-18"},{"id":"20250419_q8l827s349f99usecuotnru3o4","status":"confirmed","summary":"Holy Saturday","region":"San Marino","date":"2025-04-19"},{"id":"20250420_ts2serjccdhiqo8efprmf126jg","status":"confirmed","summary":"Easter Sunday","region":"San Marino","date":"2025-04-20"},{"id":"20250421_5027894dspcmeasijtf7nee2ak","status":"confirmed","summary":"Easter Monday","region":"San Marino","date":"2025-04-21"},{"id":"20250501_r58cm1s9mfjauu19f172604bdc","status":"confirmed","summary":"Labour Day/May Day","region":"San Marino","date":"2025-05-01"},{"id":"20250619_a0rkaft3e4pj6aq0e5k4181f9c","status":"confirmed","summary":"Corpus Christi","region":"San Marino","date":"2025-06-19"},{"id":"20250728_jghgie1sb5988u9dgkl4m1ioa8","status":"confirmed","summary":"Anniversary of the Fall of the Fascist Government","region":"San Marino","date":"2025-07-28"},{"id":"20250815_ule5f0kaodh5kg6ggmelco2gt8","status":"confirmed","summary":"Assumption of Mary","region":"San Marino","date":"2025-08-15"},{"id":"20250903_vq4k7ptpto4cq13vrpgmkv1tuo","status":"confirmed","summary":"The Feast of St Marinus and Republic Day","region":"San Marino","date":"2025-09-03"},{"id":"20251001_0hrbu73k3m1ie7em85ituauonc","status":"confirmed","summary":"Investiture Ceremony of the Captains Regent 2","region":"San Marino","date":"2025-10-01"},{"id":"20251026_hmvai94eahg7j2fnlm237savgs","status":"confirmed","summary":"Daylight Saving Time ends","region":"San Marino","date":"2025-10-26"},{"id":"20251101_n906bhrv802aad8v32k2amnqps","status":"confirmed","summary":"All Saints\' Day","region":"San Marino","date":"2025-11-01"},{"id":"20251102_raoerr7ji2l5egtja8hnbd59tc","status":"confirmed","summary":"All Souls\' Day","region":"San Marino","date":"2025-11-02"},{"id":"20251208_o7nk7g6qe8iphkrg9vbbdnpdso","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"San Marino","date":"2025-12-08"},{"id":"20251224_urauh840ea54tff8j2dtitvv24","status":"confirmed","summary":"Christmas Eve","region":"San Marino","date":"2025-12-24"},{"id":"20251225_ndg92crjsgsqbbfj9pns139c70","status":"confirmed","summary":"Christmas Day","region":"San Marino","date":"2025-12-25"},{"id":"20251226_5qmq5g6670clhl46rm39b8gb6s","status":"confirmed","summary":"Boxing Day","region":"San Marino","date":"2025-12-26"},{"id":"20251231_e4sa13pt5v6b2365lendg59rcg","status":"confirmed","summary":"New Year\'s Eve","region":"San Marino","date":"2025-12-31"}],"Senegal":[{"id":"20240101_urpp0t1ibf4e7ofsm7odk7r5jk","status":"confirmed","summary":"New Year","region":"Senegal","date":"2024-01-01"},{"id":"20240311_14ae6bhe8fa759eurgp61u9n20","status":"confirmed","summary":"Ramadan Start","region":"Senegal","date":"2024-03-11"},{"id":"20240401_4gcle2jkmmt1trro88d1k4oqjc","status":"confirmed","summary":"Easter Monday","region":"Senegal","date":"2024-04-01"},{"id":"20240404_atrmnpoohn4q10uejktprfn77c","status":"confirmed","summary":"Independence Day","region":"Senegal","date":"2024-04-04"},{"id":"20240410_ijldj5l0bs1mh1h1r0a22p8ec8","status":"confirmed","summary":"Korité","region":"Senegal","date":"2024-04-10"},{"id":"20240501_2s08dln9qqsqafnps2jbqmocdg","status":"confirmed","summary":"Labour Day","region":"Senegal","date":"2024-05-01"},{"id":"20240509_luedh7cjd3ha2c9v16j13iu0o0","status":"confirmed","summary":"Ascension Day","region":"Senegal","date":"2024-05-09"},{"id":"20240520_se7asf6nrf5covdok138e26b1s","status":"confirmed","summary":"Whit Monday","region":"Senegal","date":"2024-05-20"},{"id":"20240526_h3hk4626qu50oh5im69tcb83n4","status":"confirmed","summary":"Mother\'s Day","region":"Senegal","date":"2024-05-26"},{"id":"20240616_29d5v01c0sbt5mlph96s2ir2sg","status":"confirmed","summary":"Father\'s Day","region":"Senegal","date":"2024-06-16"},{"id":"20240617_mj7q2h3g4oi3hp0kviaoorj2ro","status":"confirmed","summary":"Tabaski","region":"Senegal","date":"2024-06-17"},{"id":"20240717_phqggh9sl8ehgo0q4o2c1ll4n4","status":"confirmed","summary":"Tamkharit","region":"Senegal","date":"2024-07-17"},{"id":"20240815_pfkliq4mnnmv6pf8eiqeo8ctag","status":"confirmed","summary":"Assumption of Mary","region":"Senegal","date":"2024-08-15"},{"id":"20240824_721pvdrpbrd8aghfhn8m289oog","status":"confirmed","summary":"Grand Magal de Touba","region":"Senegal","date":"2024-08-24"},{"id":"20240916_qhc99mm42n068jh98m2dt5kspo","status":"confirmed","summary":"Maouloud","region":"Senegal","date":"2024-09-16"},{"id":"20241101_rc7vgl5m9cuc6rg967ieog0ngc","status":"confirmed","summary":"All Saints\' Day","region":"Senegal","date":"2024-11-01"},{"id":"20241225_vcmjj0q8u7qrj2ao4ikvomplpc","status":"confirmed","summary":"Christmas Day","region":"Senegal","date":"2024-12-25"},{"id":"20250101_urahbo2lregtar0b158ch5g29o","status":"confirmed","summary":"New Year","region":"Senegal","date":"2025-01-01"},{"id":"20250301_m2r40kfi24dcuh5q1tjfa5bdo0","status":"confirmed","summary":"Ramadan Start","region":"Senegal","date":"2025-03-01"},{"id":"20250331_47i7jugi0r7hmp71t4gf3r04qg","status":"confirmed","summary":"Korité","region":"Senegal","date":"2025-03-31"},{"id":"20250404_e8phs7e2dg6njidjosmt01r9us","status":"confirmed","summary":"Independence Day","region":"Senegal","date":"2025-04-04"},{"id":"20250421_s57mact20l8s40hvb7atm5fd90","status":"confirmed","summary":"Easter Monday","region":"Senegal","date":"2025-04-21"},{"id":"20250501_qu6g1e7rb0dso4qhb6ksq2eb0s","status":"confirmed","summary":"Labour Day","region":"Senegal","date":"2025-05-01"},{"id":"20250525_2o86plfdhidv6g8e4k7742ts3s","status":"confirmed","summary":"Mother\'s Day","region":"Senegal","date":"2025-05-25"},{"id":"20250529_to7kjte4ad0v04eh43e97o6g94","status":"confirmed","summary":"Ascension Day","region":"Senegal","date":"2025-05-29"},{"id":"20250607_fvdb3j8n8oi6mp3r41dkflgaks","status":"confirmed","summary":"Tabaski","region":"Senegal","date":"2025-06-07"},{"id":"20250609_oggmcsh6je0uona5dnksnnf88g","status":"confirmed","summary":"Whit Monday","region":"Senegal","date":"2025-06-09"},{"id":"20250615_3t700or5fjfeo08n0bat82b0t0","status":"confirmed","summary":"Father\'s Day","region":"Senegal","date":"2025-06-15"},{"id":"20250706_kr8spiparbl8n7b0cpmj2rkbjc","status":"confirmed","summary":"Tamkharit","region":"Senegal","date":"2025-07-06"},{"id":"20250813_0on4nea1td6jckhg3fdu64ubjk","status":"confirmed","summary":"Grand Magal de Touba","region":"Senegal","date":"2025-08-13"},{"id":"20250815_si5tn9b9vs1ldjrqr6ajk8gg2o","status":"confirmed","summary":"Assumption of Mary","region":"Senegal","date":"2025-08-15"},{"id":"20250905_360rpcts9r4bbf2ibv1gq6orjo","status":"confirmed","summary":"Maouloud","region":"Senegal","date":"2025-09-05"},{"id":"20251101_08ljgr3loj2glh29n4jk1ri3uc","status":"confirmed","summary":"All Saints\' Day","region":"Senegal","date":"2025-11-01"},{"id":"20251103_0a1b1rhv8e9t4us4mu4dd4hvc4","status":"confirmed","summary":"All Saints\' Day observed","region":"Senegal","date":"2025-11-03"},{"id":"20251225_a57svkh6oirsi8s3i4ufjhljh4","status":"confirmed","summary":"Christmas Day","region":"Senegal","date":"2025-12-25"}],"Somalia":[{"id":"20240101_9o7balhj2qst3jtflvjd1o5dsg","status":"confirmed","summary":"New Year","region":"Somalia","date":"2024-01-01"},{"id":"20240311_qltqdanmdqg61vv9r55r8ras0g","status":"confirmed","summary":"Ramadan Start","region":"Somalia","date":"2024-03-11"},{"id":"20240410_q2p55lkjqil3d1vhfe6m9sigkg","status":"confirmed","summary":"Eid al-Fitr","region":"Somalia","date":"2024-04-10"},{"id":"20240501_lme8alet5tu9r1lblat8q14nug","status":"confirmed","summary":"May Day","region":"Somalia","date":"2024-05-01"},{"id":"20240617_ku71415kgf2nn4mgu2pvce4tu0","status":"confirmed","summary":"Eid al-Adha","region":"Somalia","date":"2024-06-17"},{"id":"20240626_9t72t9bqn6pfjmsv0d72jhuq38","status":"confirmed","summary":"Independence Day","region":"Somalia","date":"2024-06-26"},{"id":"20240717_v0rk6256lc5r0encvji5ghcmho","status":"confirmed","summary":"Ashura","region":"Somalia","date":"2024-07-17"},{"id":"20240916_ths9vcciqvoafbq7f2mda5d5og","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Somalia","date":"2024-09-16"},{"id":"20250101_s72dq0m87bbcn5ap470isim4b0","status":"confirmed","summary":"New Year","region":"Somalia","date":"2025-01-01"},{"id":"20250301_r34thk7ft35c12upqlfjl4d6ik","status":"confirmed","summary":"Ramadan Start","region":"Somalia","date":"2025-03-01"},{"id":"20250331_9mtm6md1e689nukq3ee0u86tpc","status":"confirmed","summary":"Eid al-Fitr","region":"Somalia","date":"2025-03-31"},{"id":"20250501_qklccd47no53ne30hq48vjn640","status":"confirmed","summary":"May Day","region":"Somalia","date":"2025-05-01"},{"id":"20250607_5kchucr0kt4gr6eh2c8riidmp4","status":"confirmed","summary":"Eid al-Adha","region":"Somalia","date":"2025-06-07"},{"id":"20250626_4gj99lfgenigc84a103g6afcrs","status":"confirmed","summary":"Independence Day","region":"Somalia","date":"2025-06-26"},{"id":"20250706_629v35jfj1iig3i1j0kgm93ki8","status":"confirmed","summary":"Ashura","region":"Somalia","date":"2025-07-06"},{"id":"20250905_pfbe40dfuuact2u0p1o41ntj64","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Somalia","date":"2025-09-05"}],"South Korea":[{"id":"20240101_0ppaks97umpbajmucjnid95ivo","status":"confirmed","summary":"New Year\'s Day","region":"South Korea","date":"2024-01-01"},{"id":"20240209_po5hsj0ue550t6h541sg5coh4c","status":"confirmed","summary":"Seollal Holiday","region":"South Korea","date":"2024-02-09"},{"id":"20240210_vgr5n376ep4c78b590ovo773t4","status":"confirmed","summary":"Seollal","region":"South Korea","date":"2024-02-10"},{"id":"20240211_nslv8vu3f01cov668i44239oh8","status":"confirmed","summary":"Seollal Holiday","region":"South Korea","date":"2024-02-11"},{"id":"20240212_n87mr9amtogdm6h08mlvmism04","status":"confirmed","summary":"Seollal Holiday","region":"South Korea","date":"2024-02-12"},{"id":"20240301_vounrinvf6g0h9nlgs4lesl3gg","status":"confirmed","summary":"Independence Movement Day","region":"South Korea","date":"2024-03-01"},{"id":"20240405_mq6iocpb81c4rhka22sjm7dt0s","status":"confirmed","summary":"Arbor Day","region":"South Korea","date":"2024-04-05"},{"id":"20240410_m9mvj39pungrl47qt3u6e3cm24","status":"confirmed","summary":"National Assembly Election Day","region":"South Korea","date":"2024-04-10"},{"id":"20240501_09getgjjgp6racfandbpgnfjas","status":"confirmed","summary":"Labor Day","region":"South Korea","date":"2024-05-01"},{"id":"20240505_07jro56oe7k4ob9u82dou6onmo","status":"confirmed","summary":"Children\'s Day","region":"South Korea","date":"2024-05-05"},{"id":"20240506_t39jv9rkc0t5sbmjhb774282o8","status":"confirmed","summary":"Day off for Children\'s Day","region":"South Korea","date":"2024-05-06"},{"id":"20240508_r87ah24p5j1ser5en5919ru0m8","status":"confirmed","summary":"Parents\' Day","region":"South Korea","date":"2024-05-08"},{"id":"20240515_cl2pn3d1r7s5lr2emgqcjijukk","status":"confirmed","summary":"Buddha’s Birthday","region":"South Korea","date":"2024-05-15"},{"id":"20240515_l61qp7lsdqk23ac1261vbrem90","status":"confirmed","summary":"Teacher\'s Day","region":"South Korea","date":"2024-05-15"},{"id":"20240606_8akev54sjptg5a8k9i4b5d4214","status":"confirmed","summary":"Memorial Day","region":"South Korea","date":"2024-06-06"},{"id":"20240717_pc2msljqbh70oh2a3ov1sm9778","status":"confirmed","summary":"Constitution Day","region":"South Korea","date":"2024-07-17"},{"id":"20240815_f4slub818t47ddljl0nd7v00lk","status":"confirmed","summary":"Liberation Day","region":"South Korea","date":"2024-08-15"},{"id":"20240916_beafnnfvipsipfuqjuensf57r0","status":"confirmed","summary":"Chuseok Holiday","region":"South Korea","date":"2024-09-16"},{"id":"20240917_srg51hv9e594q2aga10s6qp5eo","status":"confirmed","summary":"Chuseok","region":"South Korea","date":"2024-09-17"},{"id":"20240918_vquqna25cj2vafb1m8g60d3aro","status":"confirmed","summary":"Chuseok Holiday","region":"South Korea","date":"2024-09-18"},{"id":"20241001_vbdhvt50jcoc2v5tvvfua17s3o","status":"confirmed","summary":"Armed Forces Day","region":"South Korea","date":"2024-10-01"},{"id":"20241003_usv26hbo5nmgu2n60s1ic09j6k","status":"confirmed","summary":"National Foundation Day","region":"South Korea","date":"2024-10-03"},{"id":"20241009_ihi4m3686ntvu7dms0231u6064","status":"confirmed","summary":"Hangeul Proclamation Day","region":"South Korea","date":"2024-10-09"},{"id":"20241224_h5jpaum4uvd9pd5v40q1m0jp8g","status":"confirmed","summary":"Christmas Eve","region":"South Korea","date":"2024-12-24"},{"id":"20241225_roarh5497c3uv55v1me5btsupo","status":"confirmed","summary":"Christmas Day","region":"South Korea","date":"2024-12-25"},{"id":"20241231_8i74s3am4ltjo523gc73qnie0o","status":"confirmed","summary":"New Year\'s Eve","region":"South Korea","date":"2024-12-31"},{"id":"20250101_mfkokhscfljov704n8eraulafg","status":"confirmed","summary":"New Year\'s Day","region":"South Korea","date":"2025-01-01"},{"id":"20250129_8uop0hhorilujse70tukt2i59g","status":"confirmed","summary":"Seollal","region":"South Korea","date":"2025-01-29"},{"id":"20250129_l062i3t9jll91otbnuum0c0nbo","status":"confirmed","summary":"Seollal Holiday","region":"South Korea","date":"2025-01-29"},{"id":"20250130_5me93lidkhc9cbrmo9f5th454o","status":"confirmed","summary":"Seollal Holiday","region":"South Korea","date":"2025-01-30"},{"id":"20250301_qn078ekp8t9o1feboqv67ovum8","status":"confirmed","summary":"Independence Movement Day","region":"South Korea","date":"2025-03-01"},{"id":"20250405_dcohd1v2mh0cp6dqo72sqdf4lg","status":"confirmed","summary":"Arbor Day","region":"South Korea","date":"2025-04-05"},{"id":"20250501_f14o0qe0mfau0qdfjd39g3e2sc","status":"confirmed","summary":"Labor Day","region":"South Korea","date":"2025-05-01"},{"id":"20250505_1cu22s16pe0sllf6v1b1g4551s","status":"confirmed","summary":"Buddha’s Birthday","region":"South Korea","date":"2025-05-05"},{"id":"20250505_hth6g0jmg9km5dqqq44fscp6f0","status":"confirmed","summary":"Children\'s Day","region":"South Korea","date":"2025-05-05"},{"id":"20250508_8qd9jd9vtn2hbeumh686ejiibo","status":"confirmed","summary":"Parents\' Day","region":"South Korea","date":"2025-05-08"},{"id":"20250515_etge9c4i09mijh0oo4dhnminbk","status":"confirmed","summary":"Teacher\'s Day","region":"South Korea","date":"2025-05-15"},{"id":"20250606_irkeeb2l2trfpfbgbcshbd90oc","status":"confirmed","summary":"Memorial Day","region":"South Korea","date":"2025-06-06"},{"id":"20250717_ogqtrnmcu7n23c8fk6s8pflbeg","status":"confirmed","summary":"Constitution Day","region":"South Korea","date":"2025-07-17"},{"id":"20250815_0o28h3v3hn8qjdvr8l7kl2iac8","status":"confirmed","summary":"Liberation Day","region":"South Korea","date":"2025-08-15"},{"id":"20251001_n8jotnq591djncgvmsh0t70tm0","status":"confirmed","summary":"Armed Forces Day","region":"South Korea","date":"2025-10-01"},{"id":"20251003_5muf2d8q4llabssabf7341l4vs","status":"confirmed","summary":"National Foundation Day","region":"South Korea","date":"2025-10-03"},{"id":"20251005_86kpgt9vkgb02coceihmb2t6b8","status":"confirmed","summary":"Chuseok Holiday","region":"South Korea","date":"2025-10-05"},{"id":"20251006_852hhq0e4fs06stkp24flhig8g","status":"confirmed","summary":"Chuseok","region":"South Korea","date":"2025-10-06"},{"id":"20251007_dqe4trvg0klj7u30vsj7n78pe4","status":"confirmed","summary":"Chuseok Holiday","region":"South Korea","date":"2025-10-07"},{"id":"20251009_cqkdpr1pu41nkjbb963iddaln4","status":"confirmed","summary":"Hangeul Proclamation Day","region":"South Korea","date":"2025-10-09"},{"id":"20251224_07f4fhg5h7lif97divm3takb00","status":"confirmed","summary":"Christmas Eve","region":"South Korea","date":"2025-12-24"},{"id":"20251225_d7qsvbba1tr9167aj5ml4psn4c","status":"confirmed","summary":"Christmas Day","region":"South Korea","date":"2025-12-25"},{"id":"20251231_3u4icsvg9r7kfvu5uv7dpf7l5k","status":"confirmed","summary":"New Year\'s Eve","region":"South Korea","date":"2025-12-31"}],"Spain":[{"id":"20240101_r93k98lqnitd96ep68dn59f7mk","status":"confirmed","summary":"New Year\'s Day","region":"Spain","date":"2024-01-01"},{"id":"20240106_lk3geokumbp1deio18hkgee050","status":"confirmed","summary":"Epiphany","region":"Spain","date":"2024-01-06"},{"id":"20240212_in6jh6qhve0cfqgisvcjerqqec","status":"confirmed","summary":"Carnival Monday","region":"Spain","date":"2024-02-12"},{"id":"20240213_7m7kg9efi99pfst2fgqr2uk15s","status":"confirmed","summary":"Carnival Tuesday (Extremadura)","region":"Spain","date":"2024-02-13"},{"id":"20240214_fplsq86ffmuipfctjgb5amq1n4","status":"confirmed","summary":"Ash Wednesday","region":"Spain","date":"2024-02-14"},{"id":"20240214_td36lpj0g44ssab6qpchfi97v4","status":"confirmed","summary":"Valentine\'s Day","region":"Spain","date":"2024-02-14"},{"id":"20240228_l8ovdo8v9gd2vaere5overvong","status":"confirmed","summary":"Day of Andalucía (Andalusia)","region":"Spain","date":"2024-02-28"},{"id":"20240301_9g5lkq5v9ef0l4v95e21gtqe64","status":"confirmed","summary":"Day of the Balearic Islands (Balearic Islands)","region":"Spain","date":"2024-03-01"},{"id":"20240319_17rchagl7mbjj2ehtn1aogtve4","status":"confirmed","summary":"San Jose (regional holiday)","region":"Spain","date":"2024-03-19"},{"id":"20240319_9s48ep6t1mi37lfv65um2aq368","status":"confirmed","summary":"Fathers\' Day","region":"Spain","date":"2024-03-19"},{"id":"20240324_id658edl50eameqnsn4nqq5hnc","status":"confirmed","summary":"Palm Sunday","region":"Spain","date":"2024-03-24"},{"id":"20240328_7eijls673pkvo8fon89802snuk","status":"confirmed","summary":"Maundy Thursday (regional holiday)","region":"Spain","date":"2024-03-28"},{"id":"20240329_r3l9gf9nt207vp1e8mihp7850c","status":"confirmed","summary":"Good Friday","region":"Spain","date":"2024-03-29"},{"id":"20240330_qilqi6hg5p348iuc499cosdf54","status":"confirmed","summary":"Holy Saturday","region":"Spain","date":"2024-03-30"},{"id":"20240331_7kjetmvfmgupto4qe9s7n90jj8","status":"confirmed","summary":"Easter Sunday","region":"Spain","date":"2024-03-31"},{"id":"20240331_bmccf5e3v4v34c6s2bghc8q1ck","status":"confirmed","summary":"Daylight Saving Time starts","region":"Spain","date":"2024-03-31"},{"id":"20240401_oji0diaj3rtmkfheev1gb98eno","status":"confirmed","summary":"Easter Monday (regional holiday)","region":"Spain","date":"2024-04-01"},{"id":"20240423_ec22bobtssidgenjn13befqit8","status":"confirmed","summary":"St George\'s Day","region":"Spain","date":"2024-04-23"},{"id":"20240423_kpqi9joc6cuj78in7ff773k42g","status":"confirmed","summary":"Castile and León Day (Castile-Leon)","region":"Spain","date":"2024-04-23"},{"id":"20240423_n65d0q57v9t7nkhnc9sh0bh5kg","status":"confirmed","summary":"Day of Aragón (Aragon)","region":"Spain","date":"2024-04-23"},{"id":"20240501_94putha1h4j43dkrnt8ocg4v3k","status":"confirmed","summary":"Labor Day / May Day","region":"Spain","date":"2024-05-01"},{"id":"20240502_9ig30gd8o30535pngtp7405mmo","status":"confirmed","summary":"Day of Madrid (Madrid)","region":"Spain","date":"2024-05-02"},{"id":"20240505_ti1jor555p5f0urdar6537n44g","status":"confirmed","summary":"Mothers\' Day","region":"Spain","date":"2024-05-05"},{"id":"20240517_snmbpvvbnn2ar43glj3dt85jlk","status":"confirmed","summary":"Galicia Literature Day (Galicia)","region":"Spain","date":"2024-05-17"},{"id":"20240519_mu13j064qv13n1gdqldul9a2e8","status":"confirmed","summary":"Whit Sunday/Pentecost","region":"Spain","date":"2024-05-19"},{"id":"20240520_ck98crtstmtd1h623fpajl89kk","status":"confirmed","summary":"Whit Monday","region":"Spain","date":"2024-05-20"},{"id":"20240530_anfkuq5j54l30gogegccn7cm8o","status":"confirmed","summary":"Corpus Christi (Castile-La Mancha)","region":"Spain","date":"2024-05-30"},{"id":"20240530_q7ut3nb5r1upn55dhulhh7qcbc","status":"confirmed","summary":"Day of the Canary Islands (Canary Islands)","region":"Spain","date":"2024-05-30"},{"id":"20240531_6cvpbehpqtk73m5r16jg7h799s","status":"confirmed","summary":"Day of Castile-La Mancha (Castile-La Mancha)","region":"Spain","date":"2024-05-31"},{"id":"20240609_ijvt1hjcak18kc6l88kh6f3pis","status":"confirmed","summary":"Day of La Rioja (La Rioja)","region":"Spain","date":"2024-06-09"},{"id":"20240610_vm9g4fc0n155or7ulrvpbvq61s","status":"confirmed","summary":"Day off for Day of La Rioja (La Rioja)","region":"Spain","date":"2024-06-10"},{"id":"20240617_3p7gap1kdakkovq51n16lgj7bs","status":"confirmed","summary":"Eid al-Adha (regional holiday)","region":"Spain","date":"2024-06-17"},{"id":"20240624_g909trkcng75r54g2da5g8p1ag","status":"confirmed","summary":"Saint John the Baptist Day (regional holiday)","region":"Spain","date":"2024-06-24"},{"id":"20240725_6fo4g6iukfgmmi0g8f0c89t15c","status":"confirmed","summary":"Feast of Saint James the Apostle (regional holiday)","region":"Spain","date":"2024-07-25"},{"id":"20240805_b9338lvl2kjui1e6go0kjkapq4","status":"confirmed","summary":"The Day of Our Lady of Africa (Ceuta)","region":"Spain","date":"2024-08-05"},{"id":"20240815_vi5uhqpviorj2temb20dcb69gg","status":"confirmed","summary":"Assumption of Mary","region":"Spain","date":"2024-08-15"},{"id":"20240908_i7tvvp6k0cnac6hdaaqgdmpdcs","status":"confirmed","summary":"Day of Asturias (Asturias)","region":"Spain","date":"2024-09-08"},{"id":"20240909_qv7kkg7iseu9c7gi3jig21el80","status":"confirmed","summary":"Day off for Day of Asturias (Asturias)","region":"Spain","date":"2024-09-09"},{"id":"20240911_2ir4t87hqtcvoiad88b9fiekn8","status":"confirmed","summary":"National Day of Catalonia (Catalonia)","region":"Spain","date":"2024-09-11"},{"id":"20240915_ucp0u9p994jb5up3507b8hrh5c","status":"confirmed","summary":"Nuestra Señora de la Bien Aparecida (Cantabria)","region":"Spain","date":"2024-09-15"},{"id":"20240917_ctb7mskn3s4na84kvkte7rdg1o","status":"confirmed","summary":"Day of Melilla (Melilla)","region":"Spain","date":"2024-09-17"},{"id":"20241009_jrdq92qgl4c97flvktmlplq9to","status":"confirmed","summary":"Day of the Valencian Community (Valencia)","region":"Spain","date":"2024-10-09"},{"id":"20241012_14v330r8sbj1nbss5jpfnrf7lg","status":"confirmed","summary":"Hispanic Day","region":"Spain","date":"2024-10-12"},{"id":"20241027_rbcdf4d6fhh6bs8kn86s1bq8ik","status":"confirmed","summary":"Daylight Saving Time ends","region":"Spain","date":"2024-10-27"},{"id":"20241101_02ked6f95af7rdeech9fb2n6hg","status":"confirmed","summary":"All Saints\' Day","region":"Spain","date":"2024-11-01"},{"id":"20241206_oerk4iun43urj1tj4c57crb4e0","status":"confirmed","summary":"Constitution Day","region":"Spain","date":"2024-12-06"},{"id":"20241208_op8h876js66h38mcr51ofnk7og","status":"confirmed","summary":"Immaculate Conception","region":"Spain","date":"2024-12-08"},{"id":"20241209_8dfi60rhu0d6i4moofl6vq2kuk","status":"confirmed","summary":"Immaculate Conception observed (regional holiday)","region":"Spain","date":"2024-12-09"},{"id":"20241224_b7e1evejj5l3e76no8nc8visa8","status":"confirmed","summary":"Christmas Eve","region":"Spain","date":"2024-12-24"},{"id":"20241225_6lf7lu315blklfeddmjqfmm05g","status":"confirmed","summary":"Christmas Day","region":"Spain","date":"2024-12-25"},{"id":"20241226_d61j6smq5nbc1muqi5a4s9d878","status":"confirmed","summary":"St Stephen\'s Day (Catalonia)","region":"Spain","date":"2024-12-26"},{"id":"20241229_m2buc8de739jp7qsl2vrt9kmoc","status":"confirmed","summary":"Feast of the Holy Family","region":"Spain","date":"2024-12-29"},{"id":"20241231_7cs9lp714ltkmmmhvv0uncuqko","status":"confirmed","summary":"New Year\'s Eve","region":"Spain","date":"2024-12-31"},{"id":"20250101_8v6fscsrabfglp6k5ft689onq8","status":"confirmed","summary":"New Year\'s Day","region":"Spain","date":"2025-01-01"},{"id":"20250106_9oll8d1f3lc73vslo44ribl2lg","status":"confirmed","summary":"Epiphany","region":"Spain","date":"2025-01-06"},{"id":"20250214_grsslcmebnhpp2338rd08crheo","status":"confirmed","summary":"Valentine\'s Day","region":"Spain","date":"2025-02-14"},{"id":"20250228_krgq42c8glo0762fgkbh8polds","status":"confirmed","summary":"Day of Andalucía (Andalusia)","region":"Spain","date":"2025-02-28"},{"id":"20250301_rjmcu29n4abva8skurcvid349g","status":"confirmed","summary":"Day of the Balearic Islands (Balearic Islands)","region":"Spain","date":"2025-03-01"},{"id":"20250303_atm15b1t26mj0aflu4at596n9s","status":"confirmed","summary":"Carnival Monday","region":"Spain","date":"2025-03-03"},{"id":"20250304_kmko4d2lageee4a99viltbkmo8","status":"confirmed","summary":"Carnival Tuesday","region":"Spain","date":"2025-03-04"},{"id":"20250305_kmg3uojdc8fffvmeca4pbracsg","status":"confirmed","summary":"Ash Wednesday","region":"Spain","date":"2025-03-05"},{"id":"20250319_inuper31qtodb9ns30sgns8bkk","status":"confirmed","summary":"Fathers\' Day","region":"Spain","date":"2025-03-19"},{"id":"20250319_kd32fbbie02toc8lvr283mh4t8","status":"confirmed","summary":"San Jose (regional holiday)","region":"Spain","date":"2025-03-19"},{"id":"20250330_hdm4edn4qg75tc5l2lm6cgcv7o","status":"confirmed","summary":"Daylight Saving Time starts","region":"Spain","date":"2025-03-30"},{"id":"20250331_1pgm45rvhvc5dma0a21ruojvgg","status":"confirmed","summary":"Eid al-Fitr (Melilla)","region":"Spain","date":"2025-03-31"},{"id":"20250413_8acc8n0ho6fdo12p3cnom23l1s","status":"confirmed","summary":"Palm Sunday","region":"Spain","date":"2025-04-13"},{"id":"20250417_5nocbgav9al19eue5g4lqm4jbg","status":"confirmed","summary":"Maundy Thursday (regional holiday)","region":"Spain","date":"2025-04-17"},{"id":"20250418_fe9etcdb39r2ochb2oplj1il84","status":"confirmed","summary":"Good Friday","region":"Spain","date":"2025-04-18"},{"id":"20250419_c75gm7lt06ejek0nvkglmtm3go","status":"confirmed","summary":"Holy Saturday","region":"Spain","date":"2025-04-19"},{"id":"20250420_6id7dpe1pue74pgtglslkk6n8g","status":"confirmed","summary":"Easter Sunday","region":"Spain","date":"2025-04-20"},{"id":"20250421_6bckq5uo07e3abjst90u63gg70","status":"confirmed","summary":"Easter Monday (regional holiday)","region":"Spain","date":"2025-04-21"},{"id":"20250423_8a5i1c01i1anp6khaf7n7jn1ok","status":"confirmed","summary":"St George\'s Day","region":"Spain","date":"2025-04-23"},{"id":"20250423_9ftq46re8rbu7t9nandoev7o2s","status":"confirmed","summary":"Castile and León Day (Castile-Leon)","region":"Spain","date":"2025-04-23"},{"id":"20250423_ptmb0nknin1epavvh70m6ihls0","status":"confirmed","summary":"Day of Aragón (Aragon)","region":"Spain","date":"2025-04-23"},{"id":"20250501_s8t4mp8rnvph4u7ljtb5qg5818","status":"confirmed","summary":"Labor Day / May Day","region":"Spain","date":"2025-05-01"},{"id":"20250502_qms5pk0h9q31qb7dsthlvkicv8","status":"confirmed","summary":"Day of Madrid (Madrid)","region":"Spain","date":"2025-05-02"},{"id":"20250504_bt66t3i807o11kc47p5pcla27s","status":"confirmed","summary":"Mothers\' Day","region":"Spain","date":"2025-05-04"},{"id":"20250517_968n2b46fd4mf9nth4eboacuf4","status":"confirmed","summary":"Galicia Literature Day (Galicia)","region":"Spain","date":"2025-05-17"},{"id":"20250530_s2m2q3vj4to1spt7eiv29bmp7s","status":"confirmed","summary":"Day of the Canary Islands (Canary Islands)","region":"Spain","date":"2025-05-30"},{"id":"20250531_cm1dv8nk8a7ksk8513rkl080uc","status":"confirmed","summary":"Day of Castile-La Mancha (Castile-La Mancha)","region":"Spain","date":"2025-05-31"},{"id":"20250607_8no10bi9n6nu9pf67l9s7ci0tg","status":"confirmed","summary":"Eid al-Adha (regional holiday)","region":"Spain","date":"2025-06-07"},{"id":"20250608_72gphkjlvq5ahlinohfukv6fa0","status":"confirmed","summary":"Whit Sunday/Pentecost","region":"Spain","date":"2025-06-08"},{"id":"20250609_e6a758f1m1b07otf0knq6coq24","status":"confirmed","summary":"Day of Murcia (Murcia)","region":"Spain","date":"2025-06-09"},{"id":"20250609_q1oaqgsuos444516opshaj6m4s","status":"confirmed","summary":"Whit Monday","region":"Spain","date":"2025-06-09"},{"id":"20250609_q1ui2nq35uef8t5a701ee4agn0","status":"confirmed","summary":"Day of La Rioja (La Rioja)","region":"Spain","date":"2025-06-09"},{"id":"20250613_rupsec1i3a8kgdseejj4r8of5k","status":"confirmed","summary":"San Antonio (Ceuta)","region":"Spain","date":"2025-06-13"},{"id":"20250619_qds28ptq6890locpucn73b91rs","status":"confirmed","summary":"Corpus Christi (Castile-La Mancha)","region":"Spain","date":"2025-06-19"},{"id":"20250624_m72fuhn7457jj4beb01jdt8dhk","status":"confirmed","summary":"Saint John the Baptist Day (regional holiday)","region":"Spain","date":"2025-06-24"},{"id":"20250725_tdte2n0fi496ttob8bglm5oaro","status":"confirmed","summary":"Feast of Saint James the Apostle (regional holiday)","region":"Spain","date":"2025-07-25"},{"id":"20250728_4s2vicc9our2ug6720n96661ic","status":"confirmed","summary":"Day of the Institutions (Cantabria)","region":"Spain","date":"2025-07-28"},{"id":"20250805_e16ehj8hbo60gbmgu0acamfvd4","status":"confirmed","summary":"The Day of Our Lady of Africa (Ceuta)","region":"Spain","date":"2025-08-05"},{"id":"20250815_1rqs7762o4ts00pk4ojqhjn978","status":"confirmed","summary":"Assumption of Mary","region":"Spain","date":"2025-08-15"},{"id":"20250902_p4u4kic9n67n0cu7ju9ub66vgc","status":"confirmed","summary":"Day of the Independent City of Ceuta (Ceuta)","region":"Spain","date":"2025-09-02"},{"id":"20250908_3j3vp079aulkt61g4lup519cpc","status":"confirmed","summary":"Day of Asturias (Asturias)","region":"Spain","date":"2025-09-08"},{"id":"20250908_ou1epmena7p2n4dgp75d88l6m8","status":"confirmed","summary":"Day of Extremadura (Extremadura)","region":"Spain","date":"2025-09-08"},{"id":"20250908_ovof7ombvr2scojia0vee1il6c","status":"confirmed","summary":"Virgin of the Victory (Melilla)","region":"Spain","date":"2025-09-08"},{"id":"20250911_scipro8dh93bi76ta1jub5rp6k","status":"confirmed","summary":"National Day of Catalonia (Catalonia)","region":"Spain","date":"2025-09-11"},{"id":"20250915_nr6s6ial9nlpnsju0k5om1ialo","status":"confirmed","summary":"Nuestra Señora de la Bien Aparecida (Cantabria)","region":"Spain","date":"2025-09-15"},{"id":"20250917_rq3ivstcfnul6emlf0oaa55j3k","status":"confirmed","summary":"Day of Melilla (Melilla)","region":"Spain","date":"2025-09-17"},{"id":"20251009_735n7p6b2qmrobdd513l4l4cbo","status":"confirmed","summary":"Day of the Valencian Community (Valencia)","region":"Spain","date":"2025-10-09"},{"id":"20251012_463uopaiqm3j3uldpusjo9npjo","status":"confirmed","summary":"Hispanic Day","region":"Spain","date":"2025-10-12"},{"id":"20251013_gu9mlod5ltu2aiqg8l9shiucq8","status":"confirmed","summary":"Hispanic Day observed (regional holiday)","region":"Spain","date":"2025-10-13"},{"id":"20251026_dci486k57lm7b51qkcksa5q05c","status":"confirmed","summary":"Daylight Saving Time ends","region":"Spain","date":"2025-10-26"},{"id":"20251101_4u9cmlo1h2cjh78q62td4m7l1s","status":"confirmed","summary":"All Saints\' Day","region":"Spain","date":"2025-11-01"},{"id":"20251203_93g0cc3m2s32ru6p9peso3no2o","status":"confirmed","summary":"Day of Navarre (Navarre)","region":"Spain","date":"2025-12-03"},{"id":"20251206_s7i15a1a1li7ld3s5o3rl73b38","status":"confirmed","summary":"Constitution Day","region":"Spain","date":"2025-12-06"},{"id":"20251208_pks73nnri6g11oamjfs2ohuh1g","status":"confirmed","summary":"Immaculate Conception","region":"Spain","date":"2025-12-08"},{"id":"20251224_62emtic2i1ekitg4u3uq9u2p9s","status":"confirmed","summary":"Christmas Eve","region":"Spain","date":"2025-12-24"},{"id":"20251225_dk69eptibb32atn7fadins1gkc","status":"confirmed","summary":"Christmas Day","region":"Spain","date":"2025-12-25"},{"id":"20251226_oeiek9gkqdr4sf7t4hnsv9fu6k","status":"confirmed","summary":"St Stephen\'s Day (Catalonia)","region":"Spain","date":"2025-12-26"},{"id":"20251228_1alr3hsr4qn36kk3f73j7t17gg","status":"confirmed","summary":"Feast of the Holy Family","region":"Spain","date":"2025-12-28"},{"id":"20251231_ba45egno4jvl7mtdl8lvrsit7o","status":"confirmed","summary":"New Year\'s Eve","region":"Spain","date":"2025-12-31"}],"Suriname":[{"id":"20240101_tv1ni0qlc11ptkc15nlmo1uee8","status":"confirmed","summary":"New Year","region":"Suriname","date":"2024-01-01"},{"id":"20240210_jteloeu6h8n7u9tcd31uurabek","status":"confirmed","summary":"Lunar New Year","region":"Suriname","date":"2024-02-10"},{"id":"20240312_hdpvspv3bhdchcdc15i2shterc","status":"confirmed","summary":"Ramadan Start","region":"Suriname","date":"2024-03-12"},{"id":"20240325_48mtp9hb6l96r8vv5enksg1bls","status":"confirmed","summary":"Holi Phagwa","region":"Suriname","date":"2024-03-25"},{"id":"20240329_crpi3knk4kg8u27trpnd7jhgc0","status":"confirmed","summary":"Good Friday","region":"Suriname","date":"2024-03-29"},{"id":"20240331_7oqs6sh54qei0sfdmq2ijdq758","status":"confirmed","summary":"Easter Sunday","region":"Suriname","date":"2024-03-31"},{"id":"20240401_tld0voil713i24b1per4cfvbto","status":"confirmed","summary":"Easter Monday","region":"Suriname","date":"2024-04-01"},{"id":"20240410_rv996bsn7vvv8nchurdddm1qvs","status":"confirmed","summary":"Eid al-Fitr","region":"Suriname","date":"2024-04-10"},{"id":"20240501_vgqdcf2njp90gju0opd5ircctk","status":"confirmed","summary":"Labor Day","region":"Suriname","date":"2024-05-01"},{"id":"20240617_im4vl18871aev294kfi31d7eas","status":"confirmed","summary":"Eid al-Adha","region":"Suriname","date":"2024-06-17"},{"id":"20240701_et069dfpn5iau38jg07s5va8n8","status":"confirmed","summary":"Freedom Day","region":"Suriname","date":"2024-07-01"},{"id":"20240809_0o4du3fqm0l57hqig88iqiosqg","status":"confirmed","summary":"Indigenous Peoples Day","region":"Suriname","date":"2024-08-09"},{"id":"20241010_0qif638fi1nicl5qnqfug5o520","status":"confirmed","summary":"Day of the Maroons","region":"Suriname","date":"2024-10-10"},{"id":"20241031_nlifqhubvu75lade8dsn8d3v8s","status":"confirmed","summary":"Diwali","region":"Suriname","date":"2024-10-31"},{"id":"20241125_2ecpqmvd10au33hho3pf85csmg","status":"confirmed","summary":"Independence Day","region":"Suriname","date":"2024-11-25"},{"id":"20241225_rbmgqmm0dhkgvncd0elhdrecco","status":"confirmed","summary":"Christmas Day","region":"Suriname","date":"2024-12-25"},{"id":"20241226_pm4dbsddsve54raq83s4eq5g8k","status":"confirmed","summary":"Boxing Day","region":"Suriname","date":"2024-12-26"},{"id":"20250101_bfk70f98hft7hvbs9pg2lg2chs","status":"confirmed","summary":"New Year","region":"Suriname","date":"2025-01-01"},{"id":"20250129_47tl2obvl0mp5pdab0ub3vdcgc","status":"confirmed","summary":"Lunar New Year","region":"Suriname","date":"2025-01-29"},{"id":"20250301_voknaqthqrqt1vt4ge4j2v7ric","status":"confirmed","summary":"Ramadan Start","region":"Suriname","date":"2025-03-01"},{"id":"20250314_11d4fa1jla2i3g2qpob5ujgtu4","status":"confirmed","summary":"Holi Phagwa","region":"Suriname","date":"2025-03-14"},{"id":"20250331_p8lgb5drb2mqb9nd4ds31rpcec","status":"confirmed","summary":"Eid al-Fitr","region":"Suriname","date":"2025-03-31"},{"id":"20250418_0gvjn41ifvkljerc3pivbv8kc0","status":"confirmed","summary":"Good Friday","region":"Suriname","date":"2025-04-18"},{"id":"20250420_1lie89e6764bald1s1sdlm3c9s","status":"confirmed","summary":"Easter Sunday","region":"Suriname","date":"2025-04-20"},{"id":"20250421_j5jd2ots388dpcu65huf2p35jo","status":"confirmed","summary":"Easter Monday","region":"Suriname","date":"2025-04-21"},{"id":"20250501_ghs3idupu8dlf39pc4q61pec0c","status":"confirmed","summary":"Labor Day","region":"Suriname","date":"2025-05-01"},{"id":"20250607_4jei24oklrotg34bn4mrhbt6bo","status":"confirmed","summary":"Eid al-Adha","region":"Suriname","date":"2025-06-07"},{"id":"20250701_obdkqgqasata9p68sf12h9jsd4","status":"confirmed","summary":"Freedom Day","region":"Suriname","date":"2025-07-01"},{"id":"20250809_cooofq0t978inmklpispgbknv8","status":"confirmed","summary":"Indigenous Peoples Day","region":"Suriname","date":"2025-08-09"},{"id":"20251010_rk2rfgfm4gf5qf5ck9gucu3k08","status":"confirmed","summary":"Day of the Maroons","region":"Suriname","date":"2025-10-10"},{"id":"20251020_afliv8b0nkng7j7vgiu9dptb8k","status":"confirmed","summary":"Diwali","region":"Suriname","date":"2025-10-20"},{"id":"20251125_tcaasgbp8uvqud9u3emv46o45o","status":"confirmed","summary":"Independence Day","region":"Suriname","date":"2025-11-25"},{"id":"20251225_kfpc0tf8ds1b7dilves29bkvro","status":"confirmed","summary":"Christmas Day","region":"Suriname","date":"2025-12-25"},{"id":"20251226_lei8gfn83emi6lonb90r4ft26o","status":"confirmed","summary":"Boxing Day","region":"Suriname","date":"2025-12-26"}],"South Sudan":[{"id":"20240101_36tmtqgdpbhlvrcpram97du2jk","status":"confirmed","summary":"New Year","region":"South Sudan","date":"2024-01-01"},{"id":"20240109_8a5lff2oli22bo59pf3p3rlvt0","status":"confirmed","summary":"Peace Agreement Day","region":"South Sudan","date":"2024-01-09"},{"id":"20240214_mhkrqdqbllcl1cjhd403jq037c","status":"confirmed","summary":"Valentine\'s Day","region":"South Sudan","date":"2024-02-14"},{"id":"20240308_as9sbuu97tt505ofvru8ah0fp8","status":"confirmed","summary":"International Women\'s Day","region":"South Sudan","date":"2024-03-08"},{"id":"20240311_jiqftf461qv1pgj39jvr05k85s","status":"confirmed","summary":"Ramadan Start","region":"South Sudan","date":"2024-03-11"},{"id":"20240410_qipgulcbp77d2mhbt7g146f6ic","status":"confirmed","summary":"Eid al-Fitr","region":"South Sudan","date":"2024-04-10"},{"id":"20240501_dp1j6bs4ldqbmhhscn3ckkja7c","status":"confirmed","summary":"May Day","region":"South Sudan","date":"2024-05-01"},{"id":"20240516_u7mopmopijopph3e5i9e1tpmo0","status":"confirmed","summary":"SPLA Day","region":"South Sudan","date":"2024-05-16"},{"id":"20240610_m6i6jgq45rffhvd59se1t1i3fs","status":"confirmed","summary":"Father\'s Day","region":"South Sudan","date":"2024-06-10"},{"id":"20240617_uejq2ogdsavfnugbjmvqeqeetc","status":"confirmed","summary":"Eid al-Adha","region":"South Sudan","date":"2024-06-17"},{"id":"20240701_1af5dtbgqqk1ihfgah2mpr97oc","status":"confirmed","summary":"Mother\'s Day","region":"South Sudan","date":"2024-07-01"},{"id":"20240709_mqvoblv9uehmlvdpvl5epfa0pc","status":"confirmed","summary":"Independence Day","region":"South Sudan","date":"2024-07-09"},{"id":"20240730_631vpqtdgmgpnktlihaeird8ro","status":"confirmed","summary":"Martyrs Day","region":"South Sudan","date":"2024-07-30"},{"id":"20241110_mjck8gdtve3cr2ljp60969mupg","status":"confirmed","summary":"Grandparents\' Day","region":"South Sudan","date":"2024-11-10"},{"id":"20241225_9ertq6nfoh22l1m3ksdit8aqmo","status":"confirmed","summary":"Christmas Day","region":"South Sudan","date":"2024-12-25"},{"id":"20241228_6n0ef5vj8muidpgk74cocja160","status":"confirmed","summary":"Republic Day","region":"South Sudan","date":"2024-12-28"},{"id":"20241231_230fhmomn1ct5sa7d9nbdi8id0","status":"confirmed","summary":"New Year\'s Eve","region":"South Sudan","date":"2024-12-31"},{"id":"20250101_n90i4feflkgvinfhub5skcpp7g","status":"confirmed","summary":"New Year","region":"South Sudan","date":"2025-01-01"},{"id":"20250109_jaqoe9egrbpdthmh33sua8ashg","status":"confirmed","summary":"Peace Agreement Day","region":"South Sudan","date":"2025-01-09"},{"id":"20250214_i98bbsmc5guh05cqrgmea4mo70","status":"confirmed","summary":"Valentine\'s Day","region":"South Sudan","date":"2025-02-14"},{"id":"20250301_m9av39ckiv7km7ic9thncl2k7c","status":"confirmed","summary":"Ramadan Start","region":"South Sudan","date":"2025-03-01"},{"id":"20250308_hquc49jel4kc31mhs83c5sbko4","status":"confirmed","summary":"International Women\'s Day","region":"South Sudan","date":"2025-03-08"},{"id":"20250331_v1lgk932s5j1d9d39q6086o8f0","status":"confirmed","summary":"Eid al-Fitr","region":"South Sudan","date":"2025-03-31"},{"id":"20250501_fu9l8ls9kjb1q560eu6p71lsck","status":"confirmed","summary":"May Day","region":"South Sudan","date":"2025-05-01"},{"id":"20250516_b2o4btb67gs4mg2j63l809vte0","status":"confirmed","summary":"SPLA Day","region":"South Sudan","date":"2025-05-16"},{"id":"20250607_26f35dlsq7k6hadi0lupbdj8s8","status":"confirmed","summary":"Eid al-Adha","region":"South Sudan","date":"2025-06-07"},{"id":"20250610_7481qivttoj18crg37kgjaksl0","status":"confirmed","summary":"Father\'s Day","region":"South Sudan","date":"2025-06-10"},{"id":"20250707_leg731jv894en8nkgh9rkq5888","status":"confirmed","summary":"Mother\'s Day","region":"South Sudan","date":"2025-07-07"},{"id":"20250709_m9fngfqovlsifllqer90d76q1c","status":"confirmed","summary":"Independence Day","region":"South Sudan","date":"2025-07-09"},{"id":"20250730_lnu6bp5m1r8u353bnt4m32u0jg","status":"confirmed","summary":"Martyrs Day","region":"South Sudan","date":"2025-07-30"},{"id":"20251109_oe90siuhmpleu7v2uni9p22e20","status":"confirmed","summary":"Grandparents\' Day","region":"South Sudan","date":"2025-11-09"},{"id":"20251225_f3oq0jkukr61sgo0as4a9fog54","status":"confirmed","summary":"Christmas Day","region":"South Sudan","date":"2025-12-25"},{"id":"20251228_us8tkdcsjo1ge3v5olcr20ndi8","status":"confirmed","summary":"Republic Day","region":"South Sudan","date":"2025-12-28"},{"id":"20251231_8dvsc6gvou7lchv3dnpa7qj7c8","status":"confirmed","summary":"New Year\'s Eve","region":"South Sudan","date":"2025-12-31"}],"São Tomé & Príncipe":[{"id":"20240101_vec4860ubjao49sdu26sfpju8g","status":"confirmed","summary":"New Year","region":"São Tomé & Príncipe","date":"2024-01-01"},{"id":"20240104_5bs2sg1senrd3plvg4dgivq3r8","status":"confirmed","summary":"Day of King Amador","region":"São Tomé & Príncipe","date":"2024-01-04"},{"id":"20240202_1j9vent69og58afjjaug7dse3k","status":"confirmed","summary":"Day off for Commemoration of the Batepá Massacre","region":"São Tomé & Príncipe","date":"2024-02-02"},{"id":"20240203_fo0hjgtn3iljt0kijmb6hk4lt8","status":"confirmed","summary":"Commemoration of the Batepá Massacre","region":"São Tomé & Príncipe","date":"2024-02-03"},{"id":"20240501_rbr6h0kkpef11qt5rndv995om4","status":"confirmed","summary":"Labour Day","region":"São Tomé & Príncipe","date":"2024-05-01"},{"id":"20240712_86q8lqu32n6hqt4idkvp0us1kg","status":"confirmed","summary":"Independence Day","region":"São Tomé & Príncipe","date":"2024-07-12"},{"id":"20240906_34dhadlrgog3s0jo5s4ojc9hpk","status":"confirmed","summary":"Armed Forces\' Day","region":"São Tomé & Príncipe","date":"2024-09-06"},{"id":"20240930_372pdho7dla7dr5pgihf9oa7kc","status":"confirmed","summary":"Nationalization of the Roças","region":"São Tomé & Príncipe","date":"2024-09-30"},{"id":"20241220_jach6oqmftpjn5aif6rcrd5jl8","status":"confirmed","summary":"Day off for São Tomé Day","region":"São Tomé & Príncipe","date":"2024-12-20"},{"id":"20241221_6lv82r332lqrm8qibdn0qb01rc","status":"confirmed","summary":"São Tomé Day","region":"São Tomé & Príncipe","date":"2024-12-21"},{"id":"20241225_onuvaph3eogg917ldocrpf0cmc","status":"confirmed","summary":"Christmas Day","region":"São Tomé & Príncipe","date":"2024-12-25"},{"id":"20250101_bflsabag5ue53pjac9q75c1f0g","status":"confirmed","summary":"New Year","region":"São Tomé & Príncipe","date":"2025-01-01"},{"id":"20250103_86tro78rc09lvhj96b60tg9obc","status":"confirmed","summary":"Day off for Day of King Amador","region":"São Tomé & Príncipe","date":"2025-01-03"},{"id":"20250104_1ukj8c674qd8qcsik6agh4rn00","status":"confirmed","summary":"Day of King Amador","region":"São Tomé & Príncipe","date":"2025-01-04"},{"id":"20250203_qeq9vqsk1oc5m4sf1r7oustr50","status":"confirmed","summary":"Commemoration of the Batepá Massacre","region":"São Tomé & Príncipe","date":"2025-02-03"},{"id":"20250501_f2orh996toecpg1mjdfep7u3qo","status":"confirmed","summary":"Labour Day","region":"São Tomé & Príncipe","date":"2025-05-01"},{"id":"20250711_776olopq0prpefq6kdgnjslmc8","status":"confirmed","summary":"Day off for Independence Day","region":"São Tomé & Príncipe","date":"2025-07-11"},{"id":"20250712_ff46pb79icl7ebn9et4jf0jnj8","status":"confirmed","summary":"Independence Day","region":"São Tomé & Príncipe","date":"2025-07-12"},{"id":"20250905_c18rfa7hr9kainhrmecev65kak","status":"confirmed","summary":"Day off for Armed Forces\' Day","region":"São Tomé & Príncipe","date":"2025-09-05"},{"id":"20250906_0ov86itd5ejo9egl3i9fejs9n4","status":"confirmed","summary":"Armed Forces\' Day","region":"São Tomé & Príncipe","date":"2025-09-06"},{"id":"20250930_ikmf9ofce3gupr3smuu0n8asjk","status":"confirmed","summary":"Nationalization of the Roças","region":"São Tomé & Príncipe","date":"2025-09-30"},{"id":"20251221_p7cf7e4tsa5ohf7a5c041vipas","status":"confirmed","summary":"São Tomé Day","region":"São Tomé & Príncipe","date":"2025-12-21"},{"id":"20251222_achjm6efg88loemj446dohlhgo","status":"confirmed","summary":"Day off for São Tomé Day","region":"São Tomé & Príncipe","date":"2025-12-22"},{"id":"20251225_uffkhfc4b5ov7m7l175g7ghnng","status":"confirmed","summary":"Christmas Day","region":"São Tomé & Príncipe","date":"2025-12-25"}],"El Salvador":[{"id":"20240101_lgu43lvdg00gh4a5b9ul6j4f5k","status":"confirmed","summary":"New Year\'s Day","region":"El Salvador","date":"2024-01-01"},{"id":"20240116_047i0s0cqp02cr89e8789m11ks","status":"confirmed","summary":"Signing of the Peace Accords","region":"El Salvador","date":"2024-01-16"},{"id":"20240308_0ms96psqigta0kfe8g5hhi20nk","status":"confirmed","summary":"Women\'s Day","region":"El Salvador","date":"2024-03-08"},{"id":"20240324_v6vjc74r3huvlpsss5pvq8183k","status":"confirmed","summary":"Palm Sunday","region":"El Salvador","date":"2024-03-24"},{"id":"20240328_6r3ltc186bfttbas3fhm4lumtc","status":"confirmed","summary":"Maundy Thursday","region":"El Salvador","date":"2024-03-28"},{"id":"20240329_mcsba1vm9hsr7est2lt0us7snc","status":"confirmed","summary":"Good Friday","region":"El Salvador","date":"2024-03-29"},{"id":"20240330_6tra3hql3f9udg1ndd2ti5n2cs","status":"confirmed","summary":"Holy Saturday","region":"El Salvador","date":"2024-03-30"},{"id":"20240331_2incifl2mhnl04s4clu0egdpgc","status":"confirmed","summary":"Easter Sunday","region":"El Salvador","date":"2024-03-31"},{"id":"20240501_vs2nhabklvmrv1oabfnrgj3gu8","status":"confirmed","summary":"Labor Day / May Day","region":"El Salvador","date":"2024-05-01"},{"id":"20240503_fc0lu3p6n64l6ltvtgnus6lohk","status":"confirmed","summary":"Cross Day","region":"El Salvador","date":"2024-05-03"},{"id":"20240507_cfas26eajnbhtarppknakujcg8","status":"confirmed","summary":"Soldiers\' Day","region":"El Salvador","date":"2024-05-07"},{"id":"20240510_v05216nin7bc9btuba7nbmd0d4","status":"confirmed","summary":"Mothers\' Day","region":"El Salvador","date":"2024-05-10"},{"id":"20240617_3b5na91bb4b4uabhe7kcteah3g","status":"confirmed","summary":"Fathers\' Day","region":"El Salvador","date":"2024-06-17"},{"id":"20240622_4vkl5qva2d6rns7tghpfsd9vn0","status":"confirmed","summary":"Teachers\' Day","region":"El Salvador","date":"2024-06-22"},{"id":"20240806_1gcm5u6mgbrs4hs7088hq8hjvc","status":"confirmed","summary":"Celebrations of San Salvador","region":"El Salvador","date":"2024-08-06"},{"id":"20240915_j2ikptdpi4uij6d4vk15lanthg","status":"confirmed","summary":"Independence Day","region":"El Salvador","date":"2024-09-15"},{"id":"20241001_v1tuvb9417sih49tik4dvh5ldc","status":"confirmed","summary":"Children\'s Day","region":"El Salvador","date":"2024-10-01"},{"id":"20241102_c3b3bie8aiearb7em4ag3oftak","status":"confirmed","summary":"All Saints Day","region":"El Salvador","date":"2024-11-02"},{"id":"20241224_h8v0rgcnqks928rri41jtblag4","status":"confirmed","summary":"Christmas Eve","region":"El Salvador","date":"2024-12-24"},{"id":"20241225_d9up6hddm94q1lur47nbisvu6g","status":"confirmed","summary":"Christmas Day","region":"El Salvador","date":"2024-12-25"},{"id":"20241231_gglenh2k0j1oksup6946n6k10g","status":"confirmed","summary":"New Year\'s Eve","region":"El Salvador","date":"2024-12-31"},{"id":"20250101_0fr0i4vb8jvtkk27nkdkvncre4","status":"confirmed","summary":"New Year\'s Day","region":"El Salvador","date":"2025-01-01"},{"id":"20250116_a079r94eit3boemboarkdskjf4","status":"confirmed","summary":"Signing of the Peace Accords","region":"El Salvador","date":"2025-01-16"},{"id":"20250308_af0q06ps314a2jcuvpro6e35t8","status":"confirmed","summary":"Women\'s Day","region":"El Salvador","date":"2025-03-08"},{"id":"20250413_700ri9s0t50uolf5eajdc9qo4o","status":"confirmed","summary":"Palm Sunday","region":"El Salvador","date":"2025-04-13"},{"id":"20250417_ic2ufuj0n41mq5ao2ceb8ki5t4","status":"confirmed","summary":"Maundy Thursday","region":"El Salvador","date":"2025-04-17"},{"id":"20250418_0aab9fbp8iks58jp9mdgufdhps","status":"confirmed","summary":"Good Friday","region":"El Salvador","date":"2025-04-18"},{"id":"20250419_cdpplbuu1sa0hcen60j3llv238","status":"confirmed","summary":"Holy Saturday","region":"El Salvador","date":"2025-04-19"},{"id":"20250420_o80e5vadeqgpnqqehcsc5pkb20","status":"confirmed","summary":"Easter Sunday","region":"El Salvador","date":"2025-04-20"},{"id":"20250501_329ngrj0m4k5n535u9hsr8ub7k","status":"confirmed","summary":"Labor Day / May Day","region":"El Salvador","date":"2025-05-01"},{"id":"20250503_k8onqp78fdo1t1vo1ejrbjmacs","status":"confirmed","summary":"Cross Day","region":"El Salvador","date":"2025-05-03"},{"id":"20250507_petsovkmtkf641ctem540h69ps","status":"confirmed","summary":"Soldiers\' Day","region":"El Salvador","date":"2025-05-07"},{"id":"20250510_i1mocj3kak48d8tgkaou6l7hj8","status":"confirmed","summary":"Mothers\' Day","region":"El Salvador","date":"2025-05-10"},{"id":"20250617_6o1o1e7qifijm76gmtbv24671k","status":"confirmed","summary":"Fathers\' Day","region":"El Salvador","date":"2025-06-17"},{"id":"20250622_4u533e6kk4m7q4aoa3lu1r137c","status":"confirmed","summary":"Teachers\' Day","region":"El Salvador","date":"2025-06-22"},{"id":"20250806_hqta5dgst07gvhmnc8cvaglf3s","status":"confirmed","summary":"Celebrations of San Salvador","region":"El Salvador","date":"2025-08-06"},{"id":"20250915_mto4vlqbnf3khqiuil1aaidc8c","status":"confirmed","summary":"Independence Day","region":"El Salvador","date":"2025-09-15"},{"id":"20251001_nfenk34hrpvqqd00nsjsrm3fjs","status":"confirmed","summary":"Children\'s Day","region":"El Salvador","date":"2025-10-01"},{"id":"20251102_r29ib82lnhdho37k0f5g6om1es","status":"confirmed","summary":"All Saints Day","region":"El Salvador","date":"2025-11-02"},{"id":"20251224_mmtuc3hamgp6bn0982fqu8ud8g","status":"confirmed","summary":"Christmas Eve","region":"El Salvador","date":"2025-12-24"},{"id":"20251225_ake33icoogmqq88soubl8fh95s","status":"confirmed","summary":"Christmas Day","region":"El Salvador","date":"2025-12-25"},{"id":"20251231_b3i1tm3b7u3lmoov9tjt02v1so","status":"confirmed","summary":"New Year\'s Eve","region":"El Salvador","date":"2025-12-31"}],"Sweden":[{"id":"20240101_0brdno57q1fdrqqu9ucmrref68","status":"confirmed","summary":"New Year\'s Day","region":"Sweden","date":"2024-01-01"},{"id":"20240106_bvf6evufruo9hk0aqnvuel9488","status":"confirmed","summary":"Epiphany","region":"Sweden","date":"2024-01-06"},{"id":"20240214_do4e5ak2hfuvgvbfpm92vpo27o","status":"confirmed","summary":"Valentine\'s Day","region":"Sweden","date":"2024-02-14"},{"id":"20240329_lbhaijbvopra3ljd7l64e5a57s","status":"confirmed","summary":"Good Friday","region":"Sweden","date":"2024-03-29"},{"id":"20240330_6udo5q8t8t6o7gftpvdrkrtmac","status":"confirmed","summary":"Holy Saturday","region":"Sweden","date":"2024-03-30"},{"id":"20240331_0as4fgse1ki23bgpn6pva1nob4","status":"confirmed","summary":"Daylight Saving Time starts","region":"Sweden","date":"2024-03-31"},{"id":"20240331_okmpbk4rd3jj5njle080a8lp14","status":"confirmed","summary":"Easter Sunday","region":"Sweden","date":"2024-03-31"},{"id":"20240401_de40a210crobdcmpehnlnfob4s","status":"confirmed","summary":"Easter Monday","region":"Sweden","date":"2024-04-01"},{"id":"20240501_gklta9id70o4dnalh20fdoant0","status":"confirmed","summary":"May 1st","region":"Sweden","date":"2024-05-01"},{"id":"20240509_len891tmthnk99bob01r850g9s","status":"confirmed","summary":"Ascension Day","region":"Sweden","date":"2024-05-09"},{"id":"20240518_d6flb6h6tdqi2rchj57qc5c9fk","status":"confirmed","summary":"Whit Saturday","region":"Sweden","date":"2024-05-18"},{"id":"20240519_3md20u33aiq3ju98lfm48dabuc","status":"confirmed","summary":"Whit Sunday","region":"Sweden","date":"2024-05-19"},{"id":"20240526_8ag7poip1mbb4jetf1bfkr300s","status":"confirmed","summary":"Mother\'s Day","region":"Sweden","date":"2024-05-26"},{"id":"20240606_hiir8a0rkrgthnui48hl3clm5k","status":"confirmed","summary":"National day","region":"Sweden","date":"2024-06-06"},{"id":"20240621_mi1h5uks1a021hmokcq9im8ogo","status":"confirmed","summary":"Midsummer Eve","region":"Sweden","date":"2024-06-21"},{"id":"20240622_gmav0efml7mf6ocir96i1siqc0","status":"confirmed","summary":"Midsummer Day","region":"Sweden","date":"2024-06-22"},{"id":"20241027_50m7b2f1u7e3pbsk2m8ldmopeg","status":"confirmed","summary":"Daylight Saving Time ends","region":"Sweden","date":"2024-10-27"},{"id":"20241102_esuj34a5k6bkc16bm8vfk27jd4","status":"confirmed","summary":"All Saints\' Day","region":"Sweden","date":"2024-11-02"},{"id":"20241110_pcrdq03it9bcr1vr1e6k383kbs","status":"confirmed","summary":"Father\'s Day","region":"Sweden","date":"2024-11-10"},{"id":"20241201_gdbm3uuvfoo9si93c91r5sg3pg","status":"confirmed","summary":"First Advent Sunday","region":"Sweden","date":"2024-12-01"},{"id":"20241208_sn5ijg6o3on0du2bgheoipaadc","status":"confirmed","summary":"Second Advent Sunday","region":"Sweden","date":"2024-12-08"},{"id":"20241215_kd0nu7lgmp1o1h6ulj8h309iqk","status":"confirmed","summary":"Third Advent Sunday","region":"Sweden","date":"2024-12-15"},{"id":"20241222_o25psceckt5p7tbcre720g0br0","status":"confirmed","summary":"Fourth Advent Sunday","region":"Sweden","date":"2024-12-22"},{"id":"20241224_r1u2fdh80rp4e0gdf0ei0qeklk","status":"confirmed","summary":"Christmas Eve","region":"Sweden","date":"2024-12-24"},{"id":"20241225_lr57kgoe9i2pjqnnotvdnkfg88","status":"confirmed","summary":"Christmas Day","region":"Sweden","date":"2024-12-25"},{"id":"20241226_oirurnnfm2r12i2kfaqrft91jk","status":"confirmed","summary":"Boxing Day","region":"Sweden","date":"2024-12-26"},{"id":"20241231_5svdcjeangdc03j4vio71sd31k","status":"confirmed","summary":"New Year\'s Eve","region":"Sweden","date":"2024-12-31"},{"id":"20250101_hgk6m0ect8glrnp0c1f8e1v0nc","status":"confirmed","summary":"New Year\'s Day","region":"Sweden","date":"2025-01-01"},{"id":"20250106_1opgg4hvlb0od654ji90a3b9ic","status":"confirmed","summary":"Epiphany","region":"Sweden","date":"2025-01-06"},{"id":"20250214_4dc23iv5nnlmm7lc60jbm924pc","status":"confirmed","summary":"Valentine\'s Day","region":"Sweden","date":"2025-02-14"},{"id":"20250330_bh3rvepp6u87mck6khv0ot5u68","status":"confirmed","summary":"Daylight Saving Time starts","region":"Sweden","date":"2025-03-30"},{"id":"20250418_pp8u3r2v89sqtutriuc9cv0ik4","status":"confirmed","summary":"Good Friday","region":"Sweden","date":"2025-04-18"},{"id":"20250419_k19l5dek9r5h23e2vmgf4b490g","status":"confirmed","summary":"Holy Saturday","region":"Sweden","date":"2025-04-19"},{"id":"20250420_c3oqashjnl6icf8ndsugn8neek","status":"confirmed","summary":"Easter Sunday","region":"Sweden","date":"2025-04-20"},{"id":"20250421_7h01k8dvtaslcva92aecnt6d7s","status":"confirmed","summary":"Easter Monday","region":"Sweden","date":"2025-04-21"},{"id":"20250501_2vhv962c9r67rk6jgji5k9j0qc","status":"confirmed","summary":"May 1st","region":"Sweden","date":"2025-05-01"},{"id":"20250525_r5ugitqij9viq7bbnf830nen6g","status":"confirmed","summary":"Mother\'s Day","region":"Sweden","date":"2025-05-25"},{"id":"20250529_jbtdg94effcfdbou5e2gmadse8","status":"confirmed","summary":"Ascension Day","region":"Sweden","date":"2025-05-29"},{"id":"20250606_2bviispjsjc2tte54jqcbh3s6g","status":"confirmed","summary":"National day","region":"Sweden","date":"2025-06-06"},{"id":"20250607_pnjgujb66sbdfdkc9oucjcqhp0","status":"confirmed","summary":"Whit Saturday","region":"Sweden","date":"2025-06-07"},{"id":"20250608_5te8ujj2eajnfi3akapn57beps","status":"confirmed","summary":"Whit Sunday","region":"Sweden","date":"2025-06-08"},{"id":"20250620_31v1jcg8mm0ljvpoiup5jn9k18","status":"confirmed","summary":"Midsummer Eve","region":"Sweden","date":"2025-06-20"},{"id":"20250621_kskcdim47fvie6qpps9bq16c64","status":"confirmed","summary":"Midsummer Day","region":"Sweden","date":"2025-06-21"},{"id":"20251026_kel2ovavu258pgsmjeavffivoc","status":"confirmed","summary":"Daylight Saving Time ends","region":"Sweden","date":"2025-10-26"},{"id":"20251101_slealvdi279beaj7jf6dvm1nu0","status":"confirmed","summary":"All Saints\' Day","region":"Sweden","date":"2025-11-01"},{"id":"20251109_8aqjrh8g0dl2284k82bok6mn60","status":"confirmed","summary":"Father\'s Day","region":"Sweden","date":"2025-11-09"},{"id":"20251130_l4k5e483dv6ktfpdun5cfcrs3c","status":"confirmed","summary":"First Advent Sunday","region":"Sweden","date":"2025-11-30"},{"id":"20251207_e2d7c5o0gn31p3dlckmcd9svbk","status":"confirmed","summary":"Second Advent Sunday","region":"Sweden","date":"2025-12-07"},{"id":"20251214_9q8b0hdonhlfgi2egg9jeg6ics","status":"confirmed","summary":"Third Advent Sunday","region":"Sweden","date":"2025-12-14"},{"id":"20251221_lu8f19p1804nvgqtp592oloiuk","status":"confirmed","summary":"Fourth Advent Sunday","region":"Sweden","date":"2025-12-21"},{"id":"20251224_p6h3tho51tvbthbi6gd392vdh4","status":"confirmed","summary":"Christmas Eve","region":"Sweden","date":"2025-12-24"},{"id":"20251225_ll8c2bp7jf7sqcdq1ohv10vto8","status":"confirmed","summary":"Christmas Day","region":"Sweden","date":"2025-12-25"},{"id":"20251226_7pnip40hpf8j7b1da0558075n0","status":"confirmed","summary":"Boxing Day","region":"Sweden","date":"2025-12-26"},{"id":"20251231_h1nrnj17rgmnfqrtpl4361vsg0","status":"confirmed","summary":"New Year\'s Eve","region":"Sweden","date":"2025-12-31"}],"Sint Maarten":[{"id":"20240101_r5n1vvg5ctsidh1uusj5l8askk","status":"confirmed","summary":"New Year\'s Day","region":"Sint Maarten","date":"2024-01-01"},{"id":"20240329_r0ljbkpvqtrk6ovln3cedtdteg","status":"confirmed","summary":"Good Friday","region":"Sint Maarten","date":"2024-03-29"},{"id":"20240331_hg2dc57ltdj0f0qp39lfqa0ncs","status":"confirmed","summary":"Easter Sunday","region":"Sint Maarten","date":"2024-03-31"},{"id":"20240401_a5cgsfsfpfru8ifg1ehebd7bn8","status":"confirmed","summary":"Easter Monday","region":"Sint Maarten","date":"2024-04-01"},{"id":"20240427_evoraov0b2p3eppnt5goj679os","status":"confirmed","summary":"King\'s Day","region":"Sint Maarten","date":"2024-04-27"},{"id":"20240430_e5tsonbf21bct9jl2a2hhqhupo","status":"confirmed","summary":"Carnival Day","region":"Sint Maarten","date":"2024-04-30"},{"id":"20240501_9aq87hhsc17j3785r6nr5jgvog","status":"confirmed","summary":"Labor Day / May Day","region":"Sint Maarten","date":"2024-05-01"},{"id":"20240509_o3j3rguaoiss7ho3o01n10o36c","status":"confirmed","summary":"Ascension Day","region":"Sint Maarten","date":"2024-05-09"},{"id":"20240519_0k2ntpep8t8gpbsglr031frjv0","status":"confirmed","summary":"Whit Sunday","region":"Sint Maarten","date":"2024-05-19"},{"id":"20240701_c5cs53ngmd8en2loodtqtma0h4","status":"confirmed","summary":"Emancipation Day","region":"Sint Maarten","date":"2024-07-01"},{"id":"20241014_1b7t0ra7nma347n69ui1adapik","status":"confirmed","summary":"Constitution Day","region":"Sint Maarten","date":"2024-10-14"},{"id":"20241111_njdpjk8058bgdvgnhefhl5e0t0","status":"confirmed","summary":"Sint Maarten\'s Day","region":"Sint Maarten","date":"2024-11-11"},{"id":"20241225_eb078vjuihmsbududvctv5k8fo","status":"confirmed","summary":"Christmas Day","region":"Sint Maarten","date":"2024-12-25"},{"id":"20241226_trt6e1ej8dkrtf12m7ffifb0pg","status":"confirmed","summary":"Boxing Day","region":"Sint Maarten","date":"2024-12-26"},{"id":"20250101_qla8o0h0elq00pn4quqsv2h9g0","status":"confirmed","summary":"New Year\'s Day","region":"Sint Maarten","date":"2025-01-01"},{"id":"20250418_ur4gfbjg9sj9t32hggav6l49rg","status":"confirmed","summary":"Good Friday","region":"Sint Maarten","date":"2025-04-18"},{"id":"20250420_bacl73338boch1dvrdftprd8jg","status":"confirmed","summary":"Easter Sunday","region":"Sint Maarten","date":"2025-04-20"},{"id":"20250421_n6ifvd6gaq0qp9er3t8mv5iv84","status":"confirmed","summary":"Easter Monday","region":"Sint Maarten","date":"2025-04-21"},{"id":"20250427_tckqnbmui39qmrba5b653bnnu8","status":"confirmed","summary":"King\'s Day","region":"Sint Maarten","date":"2025-04-27"},{"id":"20250430_jqnjg1gugvctklei5otp7imisc","status":"confirmed","summary":"Carnival Day","region":"Sint Maarten","date":"2025-04-30"},{"id":"20250501_euh9d0q2fu1gvp2gf9s5dc61j0","status":"confirmed","summary":"Labor Day / May Day","region":"Sint Maarten","date":"2025-05-01"},{"id":"20250529_8a6li6gae5gunnqbgl4fs652c0","status":"confirmed","summary":"Ascension Day","region":"Sint Maarten","date":"2025-05-29"},{"id":"20250608_oqs0pb4agr1a2kmuue0n34gick","status":"confirmed","summary":"Whit Sunday","region":"Sint Maarten","date":"2025-06-08"},{"id":"20250701_d4ajcadu7euuk5kj4olbop1oik","status":"confirmed","summary":"Emancipation Day","region":"Sint Maarten","date":"2025-07-01"},{"id":"20251013_7snj02169vs72di0v995lsf2k4","status":"confirmed","summary":"Constitution Day","region":"Sint Maarten","date":"2025-10-13"},{"id":"20251111_vj81rtir7psv43mdq0vrk13ee0","status":"confirmed","summary":"Sint Maarten\'s Day","region":"Sint Maarten","date":"2025-11-11"},{"id":"20251225_ad3j39k1nhdh4l8gue9kk6g4bg","status":"confirmed","summary":"Christmas Day","region":"Sint Maarten","date":"2025-12-25"},{"id":"20251226_2ajfcc1kf4ogkrme9dvndunun8","status":"confirmed","summary":"Boxing Day","region":"Sint Maarten","date":"2025-12-26"}],"Syria":[{"id":"20240101_9ls4rgtont80i6ddq9iqb49f24","status":"confirmed","summary":"New Year","region":"Syria","date":"2024-01-01"},{"id":"20240308_r2nmp5bvumv4u4bn16nvf546oo","status":"confirmed","summary":"Revolution Day","region":"Syria","date":"2024-03-08"},{"id":"20240311_g2j67tu68mtfj4hkamv7mjd6eo","status":"confirmed","summary":"Ramadan Start","region":"Syria","date":"2024-03-11"},{"id":"20240321_8c0fv7c1eroju6pic3tqj7odqg","status":"confirmed","summary":"Mothers\' Day","region":"Syria","date":"2024-03-21"},{"id":"20240331_lcn8qeq8t6htgmnrparv574734","status":"confirmed","summary":"Easter Sunday","region":"Syria","date":"2024-03-31"},{"id":"20240410_cbevdsk8m8kei568p45h62nnio","status":"confirmed","summary":"Eid al-Fitr","region":"Syria","date":"2024-04-10"},{"id":"20240417_meidj8nrbccimmek1qnjn8rn8s","status":"confirmed","summary":"Evacuation Day","region":"Syria","date":"2024-04-17"},{"id":"20240501_e4cd0kubbvinup1mgtqu8j0mf8","status":"confirmed","summary":"Labor Day","region":"Syria","date":"2024-05-01"},{"id":"20240505_5os361t57fpctiaaq6r0a5qolo","status":"confirmed","summary":"Orthodox Easter Day","region":"Syria","date":"2024-05-05"},{"id":"20240506_retdcj5v0kh6b3g6u8fmnkamq8","status":"confirmed","summary":"Martyrs\' Day","region":"Syria","date":"2024-05-06"},{"id":"20240616_59icm52qse75m523o1vdt9dfb0","status":"confirmed","summary":"Eid al-Adha","region":"Syria","date":"2024-06-16"},{"id":"20240708_94sv7kd5957tdbpvkcj14aggvc","status":"confirmed","summary":"Muharram","region":"Syria","date":"2024-07-08"},{"id":"20240801_kttnb5pirar5iobgp46dkfk9ng","status":"confirmed","summary":"Armed Forces Day","region":"Syria","date":"2024-08-01"},{"id":"20240916_6v3nqjpc412mm2r33a0p1r0ct4","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Syria","date":"2024-09-16"},{"id":"20241006_6ri8ej9g7a29025fml42vhhbjk","status":"confirmed","summary":"October Liberation Day","region":"Syria","date":"2024-10-06"},{"id":"20241225_7rcic4cuiu78oe6n55m9pv249k","status":"confirmed","summary":"Christmas Day","region":"Syria","date":"2024-12-25"},{"id":"20250101_kv0itgdtjn7k2vo1ajkhi939ps","status":"confirmed","summary":"New Year","region":"Syria","date":"2025-01-01"},{"id":"20250301_mir4g1i2ndn8qmbaloksg2ipr8","status":"confirmed","summary":"Ramadan Start","region":"Syria","date":"2025-03-01"},{"id":"20250308_ut9dvo56m4nlo7kqlb0h06kb0s","status":"confirmed","summary":"Revolution Day","region":"Syria","date":"2025-03-08"},{"id":"20250321_oatdq1k8vd7lo8lp265ridujts","status":"confirmed","summary":"Mothers\' Day","region":"Syria","date":"2025-03-21"},{"id":"20250331_1k1aqpa0rsc9iceoli6ouh2pr0","status":"confirmed","summary":"Eid al-Fitr","region":"Syria","date":"2025-03-31"},{"id":"20250417_loof2ooujmo4bomav8od8r4r7c","status":"confirmed","summary":"Evacuation Day","region":"Syria","date":"2025-04-17"},{"id":"20250420_dinbftsnokh46hbdgqqiid41qk","status":"confirmed","summary":"Easter Sunday","region":"Syria","date":"2025-04-20"},{"id":"20250420_i4fabdrrfhrkk0i9dog61ueio0","status":"confirmed","summary":"Orthodox Easter Day","region":"Syria","date":"2025-04-20"},{"id":"20250501_sjouh7e3bvtfogl4viapn0mch8","status":"confirmed","summary":"Labor Day","region":"Syria","date":"2025-05-01"},{"id":"20250506_62ti5s5omd6hhf0eurk7bvbpm4","status":"confirmed","summary":"Martyrs\' Day","region":"Syria","date":"2025-05-06"},{"id":"20250606_c15c4us563ik3h45ikokvrmi3s","status":"confirmed","summary":"Eid al-Adha","region":"Syria","date":"2025-06-06"},{"id":"20250627_9htimacre8err0m1lrk1uhs45c","status":"confirmed","summary":"Muharram","region":"Syria","date":"2025-06-27"},{"id":"20250801_esm49o0tnpcd7l8mfv5efi8fv0","status":"confirmed","summary":"Armed Forces Day","region":"Syria","date":"2025-08-01"},{"id":"20250905_8cnq7ah5cnkmshfrlgllhvmv3o","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Syria","date":"2025-09-05"},{"id":"20251006_3qalugirqqngd0arovilbopqdc","status":"confirmed","summary":"October Liberation Day","region":"Syria","date":"2025-10-06"},{"id":"20251225_vscbg25hu26d7cackb55sc75sk","status":"confirmed","summary":"Christmas Day","region":"Syria","date":"2025-12-25"}],"Eswatini":[{"id":"20240101_5qou6lrij0af8k0sskj5c686u0","status":"confirmed","summary":"New Year","region":"Eswatini","date":"2024-01-01"},{"id":"20240329_beesscuvpae1uju93b0e7obj2g","status":"confirmed","summary":"Good Friday","region":"Eswatini","date":"2024-03-29"},{"id":"20240401_mtkbldddlpid7q9ehp7fqh7m8s","status":"confirmed","summary":"Easter Monday","region":"Eswatini","date":"2024-04-01"},{"id":"20240419_k110am26jebkqr31gofnukfhd4","status":"confirmed","summary":"Birthday of King Mswati III","region":"Eswatini","date":"2024-04-19"},{"id":"20240425_g0pjm5213ilknfclitp8boid80","status":"confirmed","summary":"National Flag Day","region":"Eswatini","date":"2024-04-25"},{"id":"20240501_n62unheeojn6e05h17s7852c90","status":"confirmed","summary":"May Day","region":"Eswatini","date":"2024-05-01"},{"id":"20240509_klq3asvujf98natngc1i64gm0c","status":"confirmed","summary":"Ascension Day","region":"Eswatini","date":"2024-05-09"},{"id":"20240722_3nsa30ofrenmhu2ca0vf684d7c","status":"confirmed","summary":"Birthday of the late King Sobhuza","region":"Eswatini","date":"2024-07-22"},{"id":"20240902_eol2botgeochjsjiu6v3v6ibfo","status":"confirmed","summary":"Umhlanga Reed Dance","region":"Eswatini","date":"2024-09-02"},{"id":"20240906_6e71g57iuqm5802t829qjeomjo","status":"confirmed","summary":"Somhlolo Day (Independence Day)","region":"Eswatini","date":"2024-09-06"},{"id":"20241225_r2pbrql1l68ddlqvc92ad65mho","status":"confirmed","summary":"Christmas Day","region":"Eswatini","date":"2024-12-25"},{"id":"20241226_q9q2n9c4dl2rsfr9jfopq143e8","status":"confirmed","summary":"Boxing Day","region":"Eswatini","date":"2024-12-26"},{"id":"20241228_5apo0sk2curc3ki2eceios57lc","status":"confirmed","summary":"Incwala Day","region":"Eswatini","date":"2024-12-28"},{"id":"20241230_8l1qifaj0pe5j4a9ap8jff3u54","status":"confirmed","summary":"Day off for Incwala Day","region":"Eswatini","date":"2024-12-30"},{"id":"20250101_vlk1blfdfv82nsrq1erhk6eu84","status":"confirmed","summary":"New Year","region":"Eswatini","date":"2025-01-01"},{"id":"20250418_osr8625g2s7f6n8fean258kahc","status":"confirmed","summary":"Good Friday","region":"Eswatini","date":"2025-04-18"},{"id":"20250419_70084t4e3us9llctdvo6l5lbns","status":"confirmed","summary":"Birthday of King Mswati III","region":"Eswatini","date":"2025-04-19"},{"id":"20250421_ktg576q4vogv72feibriuo8s1k","status":"confirmed","summary":"Day off for Birthday of King Mswati III","region":"Eswatini","date":"2025-04-21"},{"id":"20250421_uuqagvonckio95pr32f39vnvf0","status":"confirmed","summary":"Easter Monday","region":"Eswatini","date":"2025-04-21"},{"id":"20250425_luflqita4gt3vasaki5rmvm3fs","status":"confirmed","summary":"National Flag Day","region":"Eswatini","date":"2025-04-25"},{"id":"20250501_i7ae0peiu08cgssu0rqq9m0ee0","status":"confirmed","summary":"May Day","region":"Eswatini","date":"2025-05-01"},{"id":"20250529_0hbp6i270vmfb4fob9o4bq3cgo","status":"confirmed","summary":"Ascension Day","region":"Eswatini","date":"2025-05-29"},{"id":"20250722_bnmk8jeu70tavb9j25jjbi8do8","status":"confirmed","summary":"Birthday of the late King Sobhuza","region":"Eswatini","date":"2025-07-22"},{"id":"20250901_umtkhdglv607vnece98ionant8","status":"confirmed","summary":"Umhlanga Reed Dance","region":"Eswatini","date":"2025-09-01"},{"id":"20250906_ercgjalak69f0b2b7n3b7d3p0g","status":"confirmed","summary":"Somhlolo Day (Independence Day)","region":"Eswatini","date":"2025-09-06"},{"id":"20250908_6dbnhtp75vtbhi6a431eo94ruk","status":"confirmed","summary":"Day off for Somhlolo Day (Independence Day)","region":"Eswatini","date":"2025-09-08"},{"id":"20251225_as2gv1oinq65j6po5nnkhf9gvo","status":"confirmed","summary":"Christmas Day","region":"Eswatini","date":"2025-12-25"},{"id":"20251226_s5uul0nlifjkm20dsop5qhk6e4","status":"confirmed","summary":"Boxing Day","region":"Eswatini","date":"2025-12-26"},{"id":"20251228_nu07dgeooo3amc5gqq0icrvf14","status":"confirmed","summary":"Incwala Day","region":"Eswatini","date":"2025-12-28"},{"id":"20251229_5h57b91qql9msq07qg5snjhnm0","status":"confirmed","summary":"Day off for Incwala Day","region":"Eswatini","date":"2025-12-29"}],"Taiwan":[{"id":"20240101_4m8r3g0avutvj1kc88p65vhbgo","status":"confirmed","summary":"Republic Day/New Year\'s Day","region":"Taiwan","date":"2024-01-01"},{"id":"20240204_e8b3ugluldft020ejo2m9ba39g","status":"confirmed","summary":"Farmer\'s Day","region":"Taiwan","date":"2024-02-04"},{"id":"20240208_q41ge8iqslmpihrce8sfhm7b30","status":"confirmed","summary":"Lunar New Year Holiday","region":"Taiwan","date":"2024-02-08"},{"id":"20240209_agk5etnn6gp2reqik7t4k91jmc","status":"confirmed","summary":"Lunar New Year\'s Eve","region":"Taiwan","date":"2024-02-09"},{"id":"20240210_i69ubsqe1uq2ls2ig7uke1q7j4","status":"confirmed","summary":"Lunar New Year\'s Day","region":"Taiwan","date":"2024-02-10"},{"id":"20240211_a8do218fkijo1mvb5gu6t6l53g","status":"confirmed","summary":"Lunar New Year Holiday","region":"Taiwan","date":"2024-02-11"},{"id":"20240212_6su70vucliftvlvc40rsohm3pc","status":"confirmed","summary":"Lunar New Year Holiday","region":"Taiwan","date":"2024-02-12"},{"id":"20240213_q50m504f8mf7lmdaopmnlhs670","status":"confirmed","summary":"Lunar New Year Holiday","region":"Taiwan","date":"2024-02-13"},{"id":"20240214_197s6k9m07mclugv4lbo2mg38c","status":"confirmed","summary":"Lunar New Year Holiday","region":"Taiwan","date":"2024-02-14"},{"id":"20240217_0d3vdamaen2mmpnanmm1e0ln18","status":"confirmed","summary":"Special Working Day","region":"Taiwan","date":"2024-02-17"},{"id":"20240224_lbrpo0ugfgtpqc8q2g4tvhp75g","status":"confirmed","summary":"Lantern Festival","region":"Taiwan","date":"2024-02-24"},{"id":"20240228_4qp7l2tt49ecesphhh262pivp0","status":"confirmed","summary":"Peace Memorial Day","region":"Taiwan","date":"2024-02-28"},{"id":"20240308_dstk2egoeb1kgd6s5ffldbrqfs","status":"confirmed","summary":"International Women\'s Day","region":"Taiwan","date":"2024-03-08"},{"id":"20240329_4get335ajvbl4nv8pb6ihnq698","status":"confirmed","summary":"Youth Day","region":"Taiwan","date":"2024-03-29"},{"id":"20240404_a2dcuunkv359l97a4ho2uakrq4","status":"confirmed","summary":"Tomb Sweeping Day","region":"Taiwan","date":"2024-04-04"},{"id":"20240404_atcmlphre0qeau8idc8q9ldh3g","status":"confirmed","summary":"Children\'s Day","region":"Taiwan","date":"2024-04-04"},{"id":"20240405_nmgmq52i5qqq8jcm08470lfkl8","status":"confirmed","summary":"Children\'s Day/Tomb Sweeping Day Holiday","region":"Taiwan","date":"2024-04-05"},{"id":"20240406_d842u7bvunp33vscsk30v5scu4","status":"confirmed","summary":"Children\'s Day/Tomb Sweeping Day Holiday","region":"Taiwan","date":"2024-04-06"},{"id":"20240407_rvmdatp8v9rs470h6ba45cn2b0","status":"confirmed","summary":"Children\'s Day/Tomb Sweeping Day Holiday","region":"Taiwan","date":"2024-04-07"},{"id":"20240501_e3m7ue14kb73bbjj788qlge77k","status":"confirmed","summary":"Labor Day","region":"Taiwan","date":"2024-05-01"},{"id":"20240610_9qbfnu2mb32ngh5210kgkvrau4","status":"confirmed","summary":"Dragon Boat Festival","region":"Taiwan","date":"2024-06-10"},{"id":"20240818_ud3lujhs9ub3i6nc2ki9ft0igs","status":"confirmed","summary":"Hungry Ghost Festival","region":"Taiwan","date":"2024-08-18"},{"id":"20240903_9t611ghmrk1inf648onqojdmjc","status":"confirmed","summary":"Armed Forces Day","region":"Taiwan","date":"2024-09-03"},{"id":"20240917_fmhea3l7mshtfmnnkpf0j1d9a0","status":"confirmed","summary":"Mid-Autumn Festival","region":"Taiwan","date":"2024-09-17"},{"id":"20240928_03i8pvdhb6qk3lsmc5tp8sljd4","status":"confirmed","summary":"Teachers\' Day","region":"Taiwan","date":"2024-09-28"},{"id":"20241010_ulukvtf528f1inmqsbjf4g3ujg","status":"confirmed","summary":"National Day","region":"Taiwan","date":"2024-10-10"},{"id":"20241011_m3mmcqi1qt9jri4ma2b5ebq8a0","status":"confirmed","summary":"Double Ninth Day","region":"Taiwan","date":"2024-10-11"},{"id":"20241025_li6vmjl3nd4rakh1hi37n6eiq4","status":"confirmed","summary":"Taiwan\'s Retrocession Day","region":"Taiwan","date":"2024-10-25"},{"id":"20241225_jgac1r627erscvoo83f66dmc7g","status":"confirmed","summary":"Constitution Day","region":"Taiwan","date":"2024-12-25"},{"id":"20250101_nafrd6k182mks8homh1j8q5ta4","status":"confirmed","summary":"Republic Day/New Year\'s Day","region":"Taiwan","date":"2025-01-01"},{"id":"20250128_7lgvqnhaa6c5gqq0lbchqd71eg","status":"confirmed","summary":"Lunar New Year\'s Eve","region":"Taiwan","date":"2025-01-28"},{"id":"20250129_6h4csfdakletg32vi2pgukrq2s","status":"confirmed","summary":"Lunar New Year\'s Day","region":"Taiwan","date":"2025-01-29"},{"id":"20250130_d1b79c73p5s0sdvl981anf048o","status":"confirmed","summary":"Lunar New Year Holiday","region":"Taiwan","date":"2025-01-30"},{"id":"20250131_6fa0d46ah3s27iq890rbt5vrnk","status":"confirmed","summary":"Lunar New Year Holiday","region":"Taiwan","date":"2025-01-31"},{"id":"20250201_ok0s21rg4l9033ddme2ifc61po","status":"confirmed","summary":"Lunar New Year Holiday","region":"Taiwan","date":"2025-02-01"},{"id":"20250202_398rtblhl1cv7p2npr13c7ub0c","status":"confirmed","summary":"Lunar New Year Holiday","region":"Taiwan","date":"2025-02-02"},{"id":"20250204_6vbh9s7u7okb7ic2mvoljb5hsg","status":"confirmed","summary":"Farmer\'s Day","region":"Taiwan","date":"2025-02-04"},{"id":"20250212_f2ms4s0hjicqdvlgvgbl4nu6r0","status":"confirmed","summary":"Lantern Festival","region":"Taiwan","date":"2025-02-12"},{"id":"20250228_9uedo089td46bem92pdbi1blgc","status":"confirmed","summary":"Peace Memorial Day","region":"Taiwan","date":"2025-02-28"},{"id":"20250308_3moehs54ct21r4832qd9auct9c","status":"confirmed","summary":"International Women\'s Day","region":"Taiwan","date":"2025-03-08"},{"id":"20250329_fap9p1onlt2oibopo11dav0i6g","status":"confirmed","summary":"Youth Day","region":"Taiwan","date":"2025-03-29"},{"id":"20250404_9e2nfu8lpme7dl73vm2k48rpss","status":"confirmed","summary":"Children\'s Day","region":"Taiwan","date":"2025-04-04"},{"id":"20250405_6gf1le8ts27uat59a3d8ifhn3c","status":"confirmed","summary":"Tomb Sweeping Day","region":"Taiwan","date":"2025-04-05"},{"id":"20250501_a9smqin0re26kq2o4sm90bppn4","status":"confirmed","summary":"Labor Day","region":"Taiwan","date":"2025-05-01"},{"id":"20250531_n7435r8hs06edd920kgkm27o4g","status":"confirmed","summary":"Dragon Boat Festival","region":"Taiwan","date":"2025-05-31"},{"id":"20250903_m88o9o0l9bopq2kfrdjs7a8mdk","status":"confirmed","summary":"Armed Forces Day","region":"Taiwan","date":"2025-09-03"},{"id":"20250906_41faj2ivd5mvcsfa21c92jgoe8","status":"confirmed","summary":"Hungry Ghost Festival","region":"Taiwan","date":"2025-09-06"},{"id":"20250928_qbn97acna8uqp8t99em19cdnk0","status":"confirmed","summary":"Teachers\' Day","region":"Taiwan","date":"2025-09-28"},{"id":"20251006_en8ejun0cbif3bs057kpoao2oc","status":"confirmed","summary":"Mid-Autumn Festival","region":"Taiwan","date":"2025-10-06"},{"id":"20251010_cmqn16125o8ho0ss4mgm4mapv0","status":"confirmed","summary":"National Day","region":"Taiwan","date":"2025-10-10"},{"id":"20251025_npb9j2je5aklemm3oploeo1tco","status":"confirmed","summary":"Taiwan\'s Retrocession Day","region":"Taiwan","date":"2025-10-25"},{"id":"20251029_nq2b6i5lb7p0s1god2hkci73bs","status":"confirmed","summary":"Double Ninth Day","region":"Taiwan","date":"2025-10-29"},{"id":"20251225_d5rjb0hjfq1entqt0820d2nd9s","status":"confirmed","summary":"Constitution Day","region":"Taiwan","date":"2025-12-25"}],"Turks & Caicos Islands":[{"id":"20240101_v2pt9i5odg2knhis4jbi4l1qas","status":"confirmed","summary":"New Year\'s Day","region":"Turks & Caicos Islands","date":"2024-01-01"},{"id":"20240311_v3mvm59ge540d4gc3t4fou9f84","status":"confirmed","summary":"Commonwealth Day","region":"Turks & Caicos Islands","date":"2024-03-11"},{"id":"20240329_bt0d8ogpgptmefn8ddsflpbhnk","status":"confirmed","summary":"Good Friday","region":"Turks & Caicos Islands","date":"2024-03-29"},{"id":"20240401_h40hd2i6egeaacoko9bd5e4t88","status":"confirmed","summary":"Easter Monday","region":"Turks & Caicos Islands","date":"2024-04-01"},{"id":"20240527_4jpiqjva9os6u2feppn1djf4m8","status":"confirmed","summary":"JAGS McCartney Day","region":"Turks & Caicos Islands","date":"2024-05-27"},{"id":"20240619_4jjnc3nk91t4m1hfhtpfddbfrk","status":"confirmed","summary":"King\'s Birthday","region":"Turks & Caicos Islands","date":"2024-06-19"},{"id":"20240801_qsl9pm9hsq4qmtaf4p055254pk","status":"confirmed","summary":"Emancipation Day","region":"Turks & Caicos Islands","date":"2024-08-01"},{"id":"20240927_qpelci7kmf4d7bmnv80u72gi6k","status":"confirmed","summary":"National Youth Day","region":"Turks & Caicos Islands","date":"2024-09-27"},{"id":"20241014_i2ctnj92i0fqoua0qontivkb6g","status":"confirmed","summary":"National Heritage Day","region":"Turks & Caicos Islands","date":"2024-10-14"},{"id":"20241110_1r8bo00m5ivvdb975g1emosu2c","status":"confirmed","summary":"Remembrance Day","region":"Turks & Caicos Islands","date":"2024-11-10"},{"id":"20241129_kaeg2b6unf13876ef96fpo9ar0","status":"confirmed","summary":"Thanksgiving Day","region":"Turks & Caicos Islands","date":"2024-11-29"},{"id":"20241210_g2i4eivrfigc2efv0g1ib5kme8","status":"confirmed","summary":"International Human Rights Day","region":"Turks & Caicos Islands","date":"2024-12-10"},{"id":"20241225_kns36i4u8v04isqo2s41c2l434","status":"confirmed","summary":"Christmas Day","region":"Turks & Caicos Islands","date":"2024-12-25"},{"id":"20241226_07t1hqqt5kil6bh5v70fhtf04s","status":"confirmed","summary":"Boxing Day","region":"Turks & Caicos Islands","date":"2024-12-26"},{"id":"20250101_ke1069oed21j7ehqknuk8nr4qk","status":"confirmed","summary":"New Year\'s Day","region":"Turks & Caicos Islands","date":"2025-01-01"},{"id":"20250310_i6edodsossqp71lq85ofcrf4q0","status":"confirmed","summary":"Commonwealth Day","region":"Turks & Caicos Islands","date":"2025-03-10"},{"id":"20250418_6o6uhrohm6kjlun07qkkjfh22c","status":"confirmed","summary":"Good Friday","region":"Turks & Caicos Islands","date":"2025-04-18"},{"id":"20250421_e7b5rdagb57sl7u48dei39j5do","status":"confirmed","summary":"Easter Monday","region":"Turks & Caicos Islands","date":"2025-04-21"},{"id":"20250526_gte4dtniridvi62fg6am012rj4","status":"confirmed","summary":"JAGS McCartney Day","region":"Turks & Caicos Islands","date":"2025-05-26"},{"id":"20250619_9mh4be998shlmmc92rvpst1jvs","status":"confirmed","summary":"King\'s Birthday","region":"Turks & Caicos Islands","date":"2025-06-19"},{"id":"20250801_ehjmhv2s4916nfqe9giso2c1nc","status":"confirmed","summary":"Emancipation Day","region":"Turks & Caicos Islands","date":"2025-08-01"},{"id":"20250926_ia1cnuk2dn5pv9ei5plohmrqlc","status":"confirmed","summary":"National Youth Day","region":"Turks & Caicos Islands","date":"2025-09-26"},{"id":"20251013_162sef334heikqmceo5kqkd1dc","status":"confirmed","summary":"National Heritage Day","region":"Turks & Caicos Islands","date":"2025-10-13"},{"id":"20251110_eiu9hejl4ba5ehb3gttd2eqec0","status":"confirmed","summary":"Remembrance Day","region":"Turks & Caicos Islands","date":"2025-11-10"},{"id":"20251128_tmcj4ckca3rhqo89jbih77rsm0","status":"confirmed","summary":"Thanksgiving Day","region":"Turks & Caicos Islands","date":"2025-11-28"},{"id":"20251210_sql09afck81athfukrh92r6hmg","status":"confirmed","summary":"International Human Rights Day","region":"Turks & Caicos Islands","date":"2025-12-10"},{"id":"20251225_mmfn98deosbt0bpqkn1vltvpr0","status":"confirmed","summary":"Christmas Day","region":"Turks & Caicos Islands","date":"2025-12-25"},{"id":"20251226_ef76gaa1ekljhuldouoabdkq90","status":"confirmed","summary":"Boxing Day","region":"Turks & Caicos Islands","date":"2025-12-26"}],"Chad":[{"id":"20240101_mdeklg5j8ku152s0566dkv082g","status":"confirmed","summary":"New Year","region":"Chad","date":"2024-01-01"},{"id":"20240308_vvlra0eqoiv0fgq8vbajcdpj7k","status":"confirmed","summary":"International Women\'s Day","region":"Chad","date":"2024-03-08"},{"id":"20240311_qblhiuerlq68rak94ujb4lbvss","status":"confirmed","summary":"Ramadan Start","region":"Chad","date":"2024-03-11"},{"id":"20240401_pu9eqhl32du3cet0o4m1g43j3s","status":"confirmed","summary":"Easter Monday","region":"Chad","date":"2024-04-01"},{"id":"20240410_s9rd73n4v8kcqbbbp41ne0toa4","status":"confirmed","summary":"Eid al-Fitr","region":"Chad","date":"2024-04-10"},{"id":"20240501_v8otdc9omcktha7pa8nqkgb0q0","status":"confirmed","summary":"May Day","region":"Chad","date":"2024-05-01"},{"id":"20240506_u8uqslrh69dlku8hkgh30um7fs","status":"confirmed","summary":"Presidential Election Day","region":"Chad","date":"2024-05-06"},{"id":"20240512_0gqbjmh5u23tfqflqclf3u9bkk","status":"confirmed","summary":"Mother\'s Day","region":"Chad","date":"2024-05-12"},{"id":"20240616_amefb2e5ce69ca4ofmq37nqti0","status":"confirmed","summary":"Father\'s Day","region":"Chad","date":"2024-06-16"},{"id":"20240617_qahnkt7uf05k4kuc6ne4e8ttfo","status":"confirmed","summary":"Eid al-Adha","region":"Chad","date":"2024-06-17"},{"id":"20240811_en0ivm1h1fvhf3bfn08gfbbdcc","status":"confirmed","summary":"Independence Day","region":"Chad","date":"2024-08-11"},{"id":"20240812_sf2b50e02j71sqetl6ve09hu18","status":"confirmed","summary":"Independence Day observed","region":"Chad","date":"2024-08-12"},{"id":"20240916_psmjjau63u0ibmtr5012r82g9c","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Chad","date":"2024-09-16"},{"id":"20241101_pbbdq3fj6ocaqcrh88ku43u2gg","status":"confirmed","summary":"All Saints\' Day","region":"Chad","date":"2024-11-01"},{"id":"20241128_c0u4m9l5gq8bu668vj1r40dv3g","status":"confirmed","summary":"Proclamation of the Republic","region":"Chad","date":"2024-11-28"},{"id":"20241201_7jbnklv7e8v937fodsp30a8p34","status":"confirmed","summary":"Freedom and Democracy Day","region":"Chad","date":"2024-12-01"},{"id":"20241202_ihiukklg0dt924j65v58dajrgg","status":"confirmed","summary":"Freedom and Democracy Day observed","region":"Chad","date":"2024-12-02"},{"id":"20241225_dtlh8rbbfrvcp4aherbucqasj0","status":"confirmed","summary":"Christmas Day","region":"Chad","date":"2024-12-25"},{"id":"20250101_i4qe2f1t00gg4b2iho95n1cnhs","status":"confirmed","summary":"New Year","region":"Chad","date":"2025-01-01"},{"id":"20250301_ecu1tfishhq81ev8lsdtv2tcbs","status":"confirmed","summary":"Ramadan Start","region":"Chad","date":"2025-03-01"},{"id":"20250308_q08bco09td5ran2thajr2i8f0c","status":"confirmed","summary":"International Women\'s Day","region":"Chad","date":"2025-03-08"},{"id":"20250331_03l50ul9des7stn5tvlpo9jp30","status":"confirmed","summary":"Eid al-Fitr","region":"Chad","date":"2025-03-31"},{"id":"20250421_pujmd57dgkpv0cqn3mjenu4u1g","status":"confirmed","summary":"Easter Monday","region":"Chad","date":"2025-04-21"},{"id":"20250501_p53eqagdegn0rurgevlj97ln3o","status":"confirmed","summary":"May Day","region":"Chad","date":"2025-05-01"},{"id":"20250511_mib48obn3i04il6uujckoavm5c","status":"confirmed","summary":"Mother\'s Day","region":"Chad","date":"2025-05-11"},{"id":"20250607_o3i7km68eo2v96om5c8s6g2jcc","status":"confirmed","summary":"Eid al-Adha","region":"Chad","date":"2025-06-07"},{"id":"20250615_c1i7a60uid3ftffrl632jn9qc4","status":"confirmed","summary":"Father\'s Day","region":"Chad","date":"2025-06-15"},{"id":"20250811_3lniihlafjj0c6tbn15q1r9r18","status":"confirmed","summary":"Independence Day","region":"Chad","date":"2025-08-11"},{"id":"20250905_rp1l5se299vkql6hqhhemltdmc","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Chad","date":"2025-09-05"},{"id":"20251101_3v84pla41b9ohnml1mdvglormc","status":"confirmed","summary":"All Saints\' Day","region":"Chad","date":"2025-11-01"},{"id":"20251128_3skjv94luklka86ljjfluruq8k","status":"confirmed","summary":"Proclamation of the Republic","region":"Chad","date":"2025-11-28"},{"id":"20251201_9bk0obe1gh4jhmvjp9f6eepf30","status":"confirmed","summary":"Freedom and Democracy Day","region":"Chad","date":"2025-12-01"},{"id":"20251225_m6ea2qq5vjf906rimrhr1l39rs","status":"confirmed","summary":"Christmas Day","region":"Chad","date":"2025-12-25"}],"Togo":[{"id":"20240101_1ghhbn4f8rts9etrvl8dnmisdk","status":"confirmed","summary":"New Year","region":"Togo","date":"2024-01-01"},{"id":"20240102_40ns3am23g3scn1fsedsh4rkts","status":"confirmed","summary":"New Year Holiday","region":"Togo","date":"2024-01-02"},{"id":"20240113_t42q7r3raq4uike37ova9psja0","status":"confirmed","summary":"Liberation Day","region":"Togo","date":"2024-01-13"},{"id":"20240311_hamob74hl3ufgvfdsmj8lsvk6c","status":"confirmed","summary":"Ramadan Start","region":"Togo","date":"2024-03-11"},{"id":"20240401_u8np19q3q7ooskr28m6fajdebc","status":"confirmed","summary":"Easter Monday","region":"Togo","date":"2024-04-01"},{"id":"20240410_pvtro4ulpj7uk732vb5orvc19c","status":"confirmed","summary":"Eid al-Fitr","region":"Togo","date":"2024-04-10"},{"id":"20240427_pvqgppteiutjg2k69nv21oek70","status":"confirmed","summary":"Independence Day","region":"Togo","date":"2024-04-27"},{"id":"20240429_j3m979t7cpou35uljs8b0geu5k","status":"confirmed","summary":"Election Day","region":"Togo","date":"2024-04-29"},{"id":"20240501_rjfn6sel74pt5c2amc82tf50dk","status":"confirmed","summary":"Labour Day","region":"Togo","date":"2024-05-01"},{"id":"20240509_p9ikqrlcqvscoecot7ftit9ifk","status":"confirmed","summary":"Ascension Day","region":"Togo","date":"2024-05-09"},{"id":"20240520_hb8hct2ovlcuils9ls6okolqbs","status":"confirmed","summary":"Whit Monday","region":"Togo","date":"2024-05-20"},{"id":"20240617_77u6ga1pcidverp8ieeh53nh6o","status":"confirmed","summary":"Tabaski","region":"Togo","date":"2024-06-17"},{"id":"20240621_1p7ecait0b6hvviog39qpipl40","status":"confirmed","summary":"Day of the Martyrs","region":"Togo","date":"2024-06-21"},{"id":"20240815_gbk1dhe9d66cfivfed9tsj7so4","status":"confirmed","summary":"Assumption of Mary","region":"Togo","date":"2024-08-15"},{"id":"20240916_n0lt6eekec688hba7d4si55d1c","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Togo","date":"2024-09-16"},{"id":"20240924_3tqag1lne6a92q927j05ibld04","status":"confirmed","summary":"Anniversary of the Failed Attack on Lomé","region":"Togo","date":"2024-09-24"},{"id":"20241101_r9fptgv4543temd4uagjm2f4v4","status":"confirmed","summary":"All Saints\' Day","region":"Togo","date":"2024-11-01"},{"id":"20241225_j71njspfql3nsmpe0eeqpscn58","status":"confirmed","summary":"Christmas Day","region":"Togo","date":"2024-12-25"},{"id":"20250101_le697vq5blti49t1123hhfn6m0","status":"confirmed","summary":"New Year","region":"Togo","date":"2025-01-01"},{"id":"20250113_i0su4eeud10uffeobn3hirae7o","status":"confirmed","summary":"Liberation Day","region":"Togo","date":"2025-01-13"},{"id":"20250301_8bvt24fo456dmm7o6tecfqm95c","status":"confirmed","summary":"Ramadan Start","region":"Togo","date":"2025-03-01"},{"id":"20250331_vhlkqo58uqbo57o7vp7eh7eef8","status":"confirmed","summary":"Eid al-Fitr","region":"Togo","date":"2025-03-31"},{"id":"20250421_mo42idsn3sjpis514578563rjk","status":"confirmed","summary":"Easter Monday","region":"Togo","date":"2025-04-21"},{"id":"20250427_0uus02imurqlg0afgdjpfert5c","status":"confirmed","summary":"Independence Day","region":"Togo","date":"2025-04-27"},{"id":"20250501_qsep10s9vh2925g04jplr4eebs","status":"confirmed","summary":"Labour Day","region":"Togo","date":"2025-05-01"},{"id":"20250529_5msccrgb28cv1s5jtq2k51bf78","status":"confirmed","summary":"Ascension Day","region":"Togo","date":"2025-05-29"},{"id":"20250607_1apm9lpprn6dom6dtbe2qu8e6o","status":"confirmed","summary":"Tabaski","region":"Togo","date":"2025-06-07"},{"id":"20250609_3ce330sc1uh9h1me1kbjp81774","status":"confirmed","summary":"Whit Monday","region":"Togo","date":"2025-06-09"},{"id":"20250621_s4510ind4niigrvt4rht3nfq9g","status":"confirmed","summary":"Day of the Martyrs","region":"Togo","date":"2025-06-21"},{"id":"20250815_5oivq4uffflc4coocvtije9enc","status":"confirmed","summary":"Assumption of Mary","region":"Togo","date":"2025-08-15"},{"id":"20250905_2fs9pfmpo49vj26mb531e4s09c","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Togo","date":"2025-09-05"},{"id":"20250924_a3mud9crf0qead1o0tq0f05914","status":"confirmed","summary":"Anniversary of the Failed Attack on Lomé","region":"Togo","date":"2025-09-24"},{"id":"20251101_e3drlkp1l239o3njdshaviuu7c","status":"confirmed","summary":"All Saints\' Day","region":"Togo","date":"2025-11-01"},{"id":"20251225_v6hq7p1d8elc9l51i2ccb90efs","status":"confirmed","summary":"Christmas Day","region":"Togo","date":"2025-12-25"}],"Thailand":[{"id":"20240101_gblpk1mr4hsc9fis5qlm9kad8o","status":"confirmed","summary":"New Year\'s Day","region":"Thailand","date":"2024-01-01"},{"id":"20240210_rms23mgmdfc0uuoajkvrh99qg4","status":"confirmed","summary":"Lunar New Year\'s Day","region":"Thailand","date":"2024-02-10"},{"id":"20240211_rmum0hg1ke7g5johf3fbagsmh4","status":"confirmed","summary":"Second Day of Lunar New Year","region":"Thailand","date":"2024-02-11"},{"id":"20240212_c675meli12lokolumj95ckvvec","status":"confirmed","summary":"Third Day of Lunar New Year","region":"Thailand","date":"2024-02-12"},{"id":"20240214_m2a5eav9d5b8gjslfbvf68t1rk","status":"confirmed","summary":"Valentine\'s Day","region":"Thailand","date":"2024-02-14"},{"id":"20240224_6j82aju7gmkv2rcsr05qcfankk","status":"confirmed","summary":"Makha Bucha","region":"Thailand","date":"2024-02-24"},{"id":"20240226_3f44qsu1piletp09eqliaavrpk","status":"confirmed","summary":"Day off for Makha Bucha","region":"Thailand","date":"2024-02-26"},{"id":"20240406_8klclf2faftv6ot5el00t81e0g","status":"confirmed","summary":"Chakri Day","region":"Thailand","date":"2024-04-06"},{"id":"20240408_v5fgdvbjj8r7apdnfrl6ngkhk4","status":"confirmed","summary":"Day off for Chakri Day","region":"Thailand","date":"2024-04-08"},{"id":"20240412_d25uemuqqaqei0jc89o9pielgo","status":"confirmed","summary":"Songkran Holiday","region":"Thailand","date":"2024-04-12"},{"id":"20240413_38k7gnqbp19eat7qcljcpurqds","status":"confirmed","summary":"Songkran","region":"Thailand","date":"2024-04-13"},{"id":"20240414_u199rb2ejgjnuvgp7mvdh7rdkg","status":"confirmed","summary":"Songkran Holiday","region":"Thailand","date":"2024-04-14"},{"id":"20240415_kqvalek3fni7u9mm7rt61rr7bk","status":"confirmed","summary":"Songkran Holiday","region":"Thailand","date":"2024-04-15"},{"id":"20240416_b20oad4vb4d1hsp0j2u3nn985k","status":"confirmed","summary":"Songkran Observed","region":"Thailand","date":"2024-04-16"},{"id":"20240501_30jqfkjjbj2iu641btuvjlg68s","status":"confirmed","summary":"Labor Day","region":"Thailand","date":"2024-05-01"},{"id":"20240504_4ev8j549pbp1nrhgcv8dert7n0","status":"confirmed","summary":"Coronation Day","region":"Thailand","date":"2024-05-04"},{"id":"20240506_ivdockji9n05lpkk6pdnniam80","status":"confirmed","summary":"Royal Ploughing Ceremony Day","region":"Thailand","date":"2024-05-06"},{"id":"20240506_mec81f9sq92dlg52a5k73bk7r0","status":"confirmed","summary":"Day off for Coronation Day","region":"Thailand","date":"2024-05-06"},{"id":"20240522_rhjjtom77kgv5nrbp6fthmrnv8","status":"confirmed","summary":"Visakha Bucha","region":"Thailand","date":"2024-05-22"},{"id":"20240603_u2b5ru6ov2jtudplsuc2vdfei8","status":"confirmed","summary":"Queen Suthida\'s Birthday","region":"Thailand","date":"2024-06-03"},{"id":"20240720_7lg2tm8mae5n4tq2jteb9mok0c","status":"confirmed","summary":"Buddhist Lent Day","region":"Thailand","date":"2024-07-20"},{"id":"20240722_llte4539kh32up4cue0tgmjhsc","status":"confirmed","summary":"Day off for Buddhist Lent Day","region":"Thailand","date":"2024-07-22"},{"id":"20240728_q7cd19g5gt938gg2kbhk1ur0f0","status":"confirmed","summary":"King Vajiralongkorn\'s Birthday","region":"Thailand","date":"2024-07-28"},{"id":"20240729_7j5qb29d4tbemtbjqi0enrcgko","status":"confirmed","summary":"Day off for King Vajiralongkorn\'s Birthday","region":"Thailand","date":"2024-07-29"},{"id":"20240812_p5f479l9ta9hs7d4adc7seijh8","status":"confirmed","summary":"The Queen\'s Birthday","region":"Thailand","date":"2024-08-12"},{"id":"20241013_iumgg4ve89anljrhf0v3su0t84","status":"confirmed","summary":"Anniversary of the Death of King Bhumibol","region":"Thailand","date":"2024-10-13"},{"id":"20241014_q99b47nqhf4jmjv07f3bf2r24g","status":"confirmed","summary":"Day off for Anniversary of the Death of King Bhumibol","region":"Thailand","date":"2024-10-14"},{"id":"20241023_3mo6vipqp4lgj01m3n4g62topk","status":"confirmed","summary":"Chulalongkorn Day","region":"Thailand","date":"2024-10-23"},{"id":"20241205_pabcdfnea6qef4hvqt7qde8664","status":"confirmed","summary":"King Bhumibol\'s Birthday/Father\'s Day","region":"Thailand","date":"2024-12-05"},{"id":"20241210_nhdvj3cgv003tu5k9og27lsch8","status":"confirmed","summary":"Constitution Day","region":"Thailand","date":"2024-12-10"},{"id":"20241224_1pkj4b0vn2m3ripe6omshc0k60","status":"confirmed","summary":"Christmas Eve","region":"Thailand","date":"2024-12-24"},{"id":"20241225_ta75vfqbfgo7r0p9oss5545bjc","status":"confirmed","summary":"Christmas Day","region":"Thailand","date":"2024-12-25"},{"id":"20241230_v0980m66cucju3g4fkqh3npvuc","status":"confirmed","summary":"New Year Special Holiday","region":"Thailand","date":"2024-12-30"},{"id":"20241231_guigfalsb40hds4mnidstj85pc","status":"confirmed","summary":"New Year\'s Eve","region":"Thailand","date":"2024-12-31"},{"id":"20250101_mgr9a48qou644trgevj10jdo3g","status":"confirmed","summary":"New Year\'s Day","region":"Thailand","date":"2025-01-01"},{"id":"20250129_chcdv7nf0umhhs7uqplf9mn3o0","status":"confirmed","summary":"Lunar New Year\'s Day","region":"Thailand","date":"2025-01-29"},{"id":"20250130_utk1vi9m0mt71pv1arclmjaqqk","status":"confirmed","summary":"Second Day of Lunar New Year","region":"Thailand","date":"2025-01-30"},{"id":"20250131_dbij4cc872plmk4u68ghrt53ic","status":"confirmed","summary":"Third Day of Lunar New Year","region":"Thailand","date":"2025-01-31"},{"id":"20250214_dj4vdieiu2b8n6m34fimqqbrpc","status":"confirmed","summary":"Valentine\'s Day","region":"Thailand","date":"2025-02-14"},{"id":"20250406_r8q6lougehdjokkhu3lbgnmtfs","status":"confirmed","summary":"Chakri Day","region":"Thailand","date":"2025-04-06"},{"id":"20250407_7kvtufv5phn557v6v7ok3alotc","status":"confirmed","summary":"Day off for Chakri Day","region":"Thailand","date":"2025-04-07"},{"id":"20250413_gnod6pslv64bogfcsbpoekjq60","status":"confirmed","summary":"Songkran","region":"Thailand","date":"2025-04-13"},{"id":"20250414_fgaho4fj7hi79edc20s7hd1it8","status":"confirmed","summary":"Songkran Holiday","region":"Thailand","date":"2025-04-14"},{"id":"20250415_cece9jdie1geqhs5soo0afcqd4","status":"confirmed","summary":"Songkran Holiday","region":"Thailand","date":"2025-04-15"},{"id":"20250416_ojp32s8df63tvf4r3bs6jus1lo","status":"confirmed","summary":"Songkran Observed","region":"Thailand","date":"2025-04-16"},{"id":"20250501_6r5gtsof93ni2egcolgpcu8l0o","status":"confirmed","summary":"Labor Day","region":"Thailand","date":"2025-05-01"},{"id":"20250504_qnt8n667ah9ui1mdl5nh9t3150","status":"confirmed","summary":"Coronation Day","region":"Thailand","date":"2025-05-04"},{"id":"20250505_vubr0a6qr3mt5m7j9q5em1emd0","status":"confirmed","summary":"Day off for Coronation Day","region":"Thailand","date":"2025-05-05"},{"id":"20250511_hf9kjg3eijasmfuo4kibld19j4","status":"confirmed","summary":"Visakha Bucha","region":"Thailand","date":"2025-05-11"},{"id":"20250512_7pdf8h5kg7mnt6v6gkr2fgmia4","status":"confirmed","summary":"Day off for Visakha Bucha","region":"Thailand","date":"2025-05-12"},{"id":"20250603_idjlqodq52fblr1k934ecolpqg","status":"confirmed","summary":"Queen Suthida\'s Birthday","region":"Thailand","date":"2025-06-03"},{"id":"20250721_f0ceo8iq08miv1oguloq64hp14","status":"confirmed","summary":"Buddhist Lent Day","region":"Thailand","date":"2025-07-21"},{"id":"20250728_91cm9ito8p2dm9aptc5o8lbmbk","status":"confirmed","summary":"King Vajiralongkorn\'s Birthday","region":"Thailand","date":"2025-07-28"},{"id":"20250812_u4dtgvmk5b932c8uv2bee1mupc","status":"confirmed","summary":"The Queen\'s Birthday","region":"Thailand","date":"2025-08-12"},{"id":"20251013_apcai8d5qq8rua139tbuglbptk","status":"confirmed","summary":"Anniversary of the Death of King Bhumibol","region":"Thailand","date":"2025-10-13"},{"id":"20251023_am131g3237b007seoldftai9vs","status":"confirmed","summary":"Chulalongkorn Day","region":"Thailand","date":"2025-10-23"},{"id":"20251205_q8c6n2up70nf8p6vl16hg0j10s","status":"confirmed","summary":"King Bhumibol\'s Birthday/Father\'s Day","region":"Thailand","date":"2025-12-05"},{"id":"20251210_lus8o1toiq4aqnfh5ptrq2uh00","status":"confirmed","summary":"Constitution Day","region":"Thailand","date":"2025-12-10"},{"id":"20251224_u6lciqq3s80vg79h6d61l3lr9o","status":"confirmed","summary":"Christmas Eve","region":"Thailand","date":"2025-12-24"},{"id":"20251225_i47fhsu51p7h4h9bo309u4ufrk","status":"confirmed","summary":"Christmas Day","region":"Thailand","date":"2025-12-25"},{"id":"20251231_7t7dcvg8gb9r40p8u8m9up6bt8","status":"confirmed","summary":"New Year\'s Eve","region":"Thailand","date":"2025-12-31"}],"Tajikistan":[{"id":"20240101_997sr2jjh7nm8u6bu82parj30o","status":"confirmed","summary":"New Year\'s Day","region":"Tajikistan","date":"2024-01-01"},{"id":"20240308_6pmgr2p01tgjvjbv3sqcbsksqg","status":"confirmed","summary":"International Women\'s Day","region":"Tajikistan","date":"2024-03-08"},{"id":"20240311_gpavldfjljr5uhel9hpp4riq2c","status":"confirmed","summary":"Ramadan Start","region":"Tajikistan","date":"2024-03-11"},{"id":"20240321_duv6kd4lo7pd9q5e3lpo8d18r4","status":"confirmed","summary":"Navruz Celebration","region":"Tajikistan","date":"2024-03-21"},{"id":"20240322_hbklija85a2v20ejctrqo3n5u8","status":"confirmed","summary":"Navruz Celebration","region":"Tajikistan","date":"2024-03-22"},{"id":"20240323_dot7k4bsr191b2q790f3r0r9f0","status":"confirmed","summary":"Navruz Celebration","region":"Tajikistan","date":"2024-03-23"},{"id":"20240324_q5605qodjrfpppmridd7hqnark","status":"confirmed","summary":"Navruz Celebration","region":"Tajikistan","date":"2024-03-24"},{"id":"20240410_usko6ad77lsosgpe6m5roc0eb4","status":"confirmed","summary":"Eid ul Fitr","region":"Tajikistan","date":"2024-04-10"},{"id":"20240501_6j8pla67p455utnbm56csl6up4","status":"confirmed","summary":"Labor Day / May Day","region":"Tajikistan","date":"2024-05-01"},{"id":"20240509_prnmkr0krsll5oqkns24tgn9pg","status":"confirmed","summary":"Victory Day","region":"Tajikistan","date":"2024-05-09"},{"id":"20240617_ise9jitvn4chfljbc9q29qd08s","status":"confirmed","summary":"Eid al-Adha","region":"Tajikistan","date":"2024-06-17"},{"id":"20240627_v71grmiskgber8m0qjtmf64jds","status":"confirmed","summary":"Day of National Unity","region":"Tajikistan","date":"2024-06-27"},{"id":"20240909_2len5moafrqfuhaar8nhmg3df8","status":"confirmed","summary":"Independence Day","region":"Tajikistan","date":"2024-09-09"},{"id":"20241106_e2h7pdg0mtok2nabf66c7u1a2g","status":"confirmed","summary":"Constitution Day","region":"Tajikistan","date":"2024-11-06"},{"id":"20250101_a8hts7314ob1qcrorc78a7h8ak","status":"confirmed","summary":"New Year\'s Day","region":"Tajikistan","date":"2025-01-01"},{"id":"20250301_rlmt6p5ies6u9a2nkj3qr78b4c","status":"confirmed","summary":"Ramadan Start","region":"Tajikistan","date":"2025-03-01"},{"id":"20250308_kbvg60jbdlns8ifmivtajar3ps","status":"confirmed","summary":"International Women\'s Day","region":"Tajikistan","date":"2025-03-08"},{"id":"20250310_5057d1o7j3272pbcsoi5co8t34","status":"confirmed","summary":"Day off for International Women\'s Day","region":"Tajikistan","date":"2025-03-10"},{"id":"20250321_hcnr60ui3h9d3gh8blqd2btojs","status":"confirmed","summary":"Navruz Celebration","region":"Tajikistan","date":"2025-03-21"},{"id":"20250322_bei11fqdnmr01re790dtplesbs","status":"confirmed","summary":"Navruz Celebration","region":"Tajikistan","date":"2025-03-22"},{"id":"20250323_5knhmkpm6u62bhe2nd9g6rpkv8","status":"confirmed","summary":"Navruz Celebration","region":"Tajikistan","date":"2025-03-23"},{"id":"20250324_r34jrosir4bkr78ifrbvdudmd8","status":"confirmed","summary":"Navruz Celebration","region":"Tajikistan","date":"2025-03-24"},{"id":"20250331_rd7o41h9sg7i8qqcr5j9vl1u48","status":"confirmed","summary":"Eid ul Fitr","region":"Tajikistan","date":"2025-03-31"},{"id":"20250501_2v3q2119gju2l42t0429gvnur4","status":"confirmed","summary":"Labor Day / May Day","region":"Tajikistan","date":"2025-05-01"},{"id":"20250509_koft9lvvnkjhg8ricngqs44f6g","status":"confirmed","summary":"Victory Day","region":"Tajikistan","date":"2025-05-09"},{"id":"20250607_tip6s0v2r5jtsh0jn63qjpt6f0","status":"confirmed","summary":"Eid al-Adha","region":"Tajikistan","date":"2025-06-07"},{"id":"20250627_6hh8r6ggs0acos9p6nfo3es9v0","status":"confirmed","summary":"Day of National Unity","region":"Tajikistan","date":"2025-06-27"},{"id":"20250909_441tehtqu253t74vnal0qu77vs","status":"confirmed","summary":"Independence Day","region":"Tajikistan","date":"2025-09-09"},{"id":"20251106_maspi7db0k42l958p398nrtoqc","status":"confirmed","summary":"Constitution Day","region":"Tajikistan","date":"2025-11-06"}],"Timor-Leste":[{"id":"20240101_ke5jo3cgsfffljense55pg1nso","status":"confirmed","summary":"New Year\'s Day","region":"Timor-Leste","date":"2024-01-01"},{"id":"20240102_2882edj7peodn71fil9c0hgrdo","status":"confirmed","summary":"New Year Holiday","region":"Timor-Leste","date":"2024-01-02"},{"id":"20240210_jrjn06oiq6ro2pha6anmf5227g","status":"confirmed","summary":"Lunar New Year","region":"Timor-Leste","date":"2024-02-10"},{"id":"20240214_2ksnla35e6008r399mq26ntlp4","status":"confirmed","summary":"Carnival / Ash Wednesday","region":"Timor-Leste","date":"2024-02-14"},{"id":"20240303_sgd1l139hq90h48cpq6jkammrg","status":"confirmed","summary":"Veteran\'s Day","region":"Timor-Leste","date":"2024-03-03"},{"id":"20240329_p9pipe8knc2fdcsjihcd98uiis","status":"confirmed","summary":"Good Friday","region":"Timor-Leste","date":"2024-03-29"},{"id":"20240410_shu389scm9s740pq5jqajgibak","status":"confirmed","summary":"Eid ul Fitr","region":"Timor-Leste","date":"2024-04-10"},{"id":"20240425_tc2ha79po0fvm63rhf09tc1070","status":"confirmed","summary":"50th Anniversary of the Revolution of April 25","region":"Timor-Leste","date":"2024-04-25"},{"id":"20240501_j3oje85mgckqq87402juko2dic","status":"confirmed","summary":"Labor Day / May Day","region":"Timor-Leste","date":"2024-05-01"},{"id":"20240520_2keo2spdiq8eq68a0s8gh3vqtg","status":"confirmed","summary":"Restoration of Independence Day","region":"Timor-Leste","date":"2024-05-20"},{"id":"20240530_iie984jsjdcrcdookbplrsqf44","status":"confirmed","summary":"Corpus Christi","region":"Timor-Leste","date":"2024-05-30"},{"id":"20240617_0pks9qejsnr2auku201f61hk80","status":"confirmed","summary":"Eid al-Adha","region":"Timor-Leste","date":"2024-06-17"},{"id":"20240830_2519g1q7n3g17bnhfa0qbchoqk","status":"confirmed","summary":"Popular Consultation Day","region":"Timor-Leste","date":"2024-08-30"},{"id":"20241101_mdv65elj5hro78fvqecrngq704","status":"confirmed","summary":"All Saints\' Day","region":"Timor-Leste","date":"2024-11-01"},{"id":"20241102_f9l4nq8t1shen72khu6vqn26s4","status":"confirmed","summary":"All Souls\' Day","region":"Timor-Leste","date":"2024-11-02"},{"id":"20241112_r0efjfc6kju2bqpspu60s6i9dk","status":"confirmed","summary":"Youth National Day","region":"Timor-Leste","date":"2024-11-12"},{"id":"20241128_6nd5u27t5442s2m45tp2qdcd2g","status":"confirmed","summary":"Proclamation of Independence Day","region":"Timor-Leste","date":"2024-11-28"},{"id":"20241207_v737hl2f8plc697bt2kteuu6dg","status":"confirmed","summary":"Day of Remembrance","region":"Timor-Leste","date":"2024-12-07"},{"id":"20241208_g31fefuefgtu5cgdgkjka62g84","status":"confirmed","summary":"Day of Our Lady of Immaculate Conception","region":"Timor-Leste","date":"2024-12-08"},{"id":"20241225_ak0ess5hda5fg1ruhrogvk98cg","status":"confirmed","summary":"Christmas Day","region":"Timor-Leste","date":"2024-12-25"},{"id":"20241231_7s2mi4peg36qrma3k35avljqpg","status":"confirmed","summary":"National Heroes Day","region":"Timor-Leste","date":"2024-12-31"},{"id":"20250101_3731rjvhomjg66sv4ak9roc1so","status":"confirmed","summary":"New Year\'s Day","region":"Timor-Leste","date":"2025-01-01"},{"id":"20250129_77v9ntpu4cvvtikqfv5fh3l6t4","status":"confirmed","summary":"Lunar New Year","region":"Timor-Leste","date":"2025-01-29"},{"id":"20250303_mfop250ftmp9ep5rr9t9n2ia5o","status":"confirmed","summary":"Veteran\'s Day","region":"Timor-Leste","date":"2025-03-03"},{"id":"20250305_nip01r3ajns5c68h3q859htkn4","status":"confirmed","summary":"Carnival / Ash Wednesday","region":"Timor-Leste","date":"2025-03-05"},{"id":"20250331_vuomkki4j2d5s7o9qdutmf68ck","status":"confirmed","summary":"Eid ul Fitr","region":"Timor-Leste","date":"2025-03-31"},{"id":"20250418_llplo42325vboh041k71t67ro0","status":"confirmed","summary":"Good Friday","region":"Timor-Leste","date":"2025-04-18"},{"id":"20250501_nrlkf9i7t8k3g2gtbjdmdlajmo","status":"confirmed","summary":"Labor Day / May Day","region":"Timor-Leste","date":"2025-05-01"},{"id":"20250520_turuhvjv80de00ksevjju4nhkk","status":"confirmed","summary":"Restoration of Independence Day","region":"Timor-Leste","date":"2025-05-20"},{"id":"20250607_3lj6uaska16qnuhoeb970s0q0g","status":"confirmed","summary":"Eid al-Adha","region":"Timor-Leste","date":"2025-06-07"},{"id":"20250619_k1ns904soeo8ip8tovedi8mv9k","status":"confirmed","summary":"Corpus Christi","region":"Timor-Leste","date":"2025-06-19"},{"id":"20250830_spqo2fqc63n79fvuvmg8s7cbp8","status":"confirmed","summary":"Popular Consultation Day","region":"Timor-Leste","date":"2025-08-30"},{"id":"20251101_89ua5cnirku0puu1rt8hvm7fmo","status":"confirmed","summary":"All Saints\' Day","region":"Timor-Leste","date":"2025-11-01"},{"id":"20251102_p2d06ed2mnndon5klco9gn6agg","status":"confirmed","summary":"All Souls\' Day","region":"Timor-Leste","date":"2025-11-02"},{"id":"20251112_7ismlll2grr4k04tftd6pfbn5s","status":"confirmed","summary":"Youth National Day","region":"Timor-Leste","date":"2025-11-12"},{"id":"20251128_g9hpctr71kt352l3ma2h7stgig","status":"confirmed","summary":"Proclamation of Independence Day","region":"Timor-Leste","date":"2025-11-28"},{"id":"20251207_e68ievbb6501tq78imvdib3jg4","status":"confirmed","summary":"Day of Remembrance","region":"Timor-Leste","date":"2025-12-07"},{"id":"20251208_ddq3p4cjdkmgu2kd9dgj4q3klc","status":"confirmed","summary":"Day of Our Lady of Immaculate Conception","region":"Timor-Leste","date":"2025-12-08"},{"id":"20251225_jtl17tpupjrmv5b60lh5ua6cjc","status":"confirmed","summary":"Christmas Day","region":"Timor-Leste","date":"2025-12-25"},{"id":"20251231_aaisk2697jvcc2kp6cj0j0k0ig","status":"confirmed","summary":"National Heroes Day","region":"Timor-Leste","date":"2025-12-31"}],"Turkmenistan":[{"id":"20240101_4evpubduf9hjnpib0i01iv1f0s","status":"confirmed","summary":"New Year\'s Day","region":"Turkmenistan","date":"2024-01-01"},{"id":"20240127_op3og0djvst82gf4jr0nj885co","status":"confirmed","summary":"Day of Fatherland Defenders","region":"Turkmenistan","date":"2024-01-27"},{"id":"20240218_d2isq60kcd25llmbjbus8nm108","status":"confirmed","summary":"Day of Diplomatic Staff of Turkmenistan","region":"Turkmenistan","date":"2024-02-18"},{"id":"20240307_th4tcmcg2s20dr1q45jk1gfrt8","status":"confirmed","summary":"Day of Transport and Communication Workers","region":"Turkmenistan","date":"2024-03-07"},{"id":"20240308_g6ctrrr878ir8d2ndjb4hrpbik","status":"confirmed","summary":"International Women\'s Day","region":"Turkmenistan","date":"2024-03-08"},{"id":"20240311_b7v6rak3m5kru2n2fe5bsas80g","status":"confirmed","summary":"Ramadan Start","region":"Turkmenistan","date":"2024-03-11"},{"id":"20240321_cputl0lt3kr0e0e4s4vrln6uuk","status":"confirmed","summary":"Nowruz Bayram (Spring Festival)","region":"Turkmenistan","date":"2024-03-21"},{"id":"20240322_p8jpuo2b2i0mj21ibdet4op8uk","status":"confirmed","summary":"Nowruz Bayram (Spring Festival)","region":"Turkmenistan","date":"2024-03-22"},{"id":"20240331_i7vb7os4lv042eq6rsf9cbpvgk","status":"confirmed","summary":"Day of Chemical Industry Workers","region":"Turkmenistan","date":"2024-03-31"},{"id":"20240407_7u47pm9eb2au2usgll8pq2c0m4","status":"confirmed","summary":"World Health Day","region":"Turkmenistan","date":"2024-04-07"},{"id":"20240410_nat7l741taa4c7fu9129n6jfdg","status":"confirmed","summary":"Oraza Bayram","region":"Turkmenistan","date":"2024-04-10"},{"id":"20240417_5vvterqprmqkb8f746bn3it7q4","status":"confirmed","summary":"Migration Workers Day","region":"Turkmenistan","date":"2024-04-17"},{"id":"20240428_dbk50iu3e5csdnmjel9hcttj68","status":"confirmed","summary":"Turkmen Racing Horse Festival","region":"Turkmenistan","date":"2024-04-28"},{"id":"20240509_v25oqj7777ia15khmp2jbrsmrc","status":"confirmed","summary":"Victory Day","region":"Turkmenistan","date":"2024-05-09"},{"id":"20240518_bkmqojhq0ptpn4qrri6g9l9bpc","status":"confirmed","summary":"Constitution Day","region":"Turkmenistan","date":"2024-05-18"},{"id":"20240525_rt4gv6e8u5uk11nfkn9d1atjog","status":"confirmed","summary":"Ashgabat City Day","region":"Turkmenistan","date":"2024-05-25"},{"id":"20240526_ic0s7mdnctr3t5dp5c4e6i3qvk","status":"confirmed","summary":"Carpet Day","region":"Turkmenistan","date":"2024-05-26"},{"id":"20240529_2pqvrg9h2uupo424344vgg4eb0","status":"confirmed","summary":"Internal Affairs Officers Day","region":"Turkmenistan","date":"2024-05-29"},{"id":"20240601_3530t0qn1ue2qk8f3jtlbb37m0","status":"confirmed","summary":"International Children\'s Day","region":"Turkmenistan","date":"2024-06-01"},{"id":"20240602_eqhs9hncv8k1ltj15kgjo8nlu4","status":"confirmed","summary":"Textile Workers Day","region":"Turkmenistan","date":"2024-06-02"},{"id":"20240605_qvcdmabu5t8fi2qc5kv1jddnss","status":"confirmed","summary":"World Envrionment Day","region":"Turkmenistan","date":"2024-06-05"},{"id":"20240612_rb3g8l9eg50faacu10tqqvghkk","status":"confirmed","summary":"Science Day","region":"Turkmenistan","date":"2024-06-12"},{"id":"20240616_8mon6oeunr4bajog0u8rkstabc","status":"confirmed","summary":"Kurban Bayramy Holiday","region":"Turkmenistan","date":"2024-06-16"},{"id":"20240617_2d3qfqtj56pne9nqc1s9vjir7g","status":"confirmed","summary":"Kurban Bayramy","region":"Turkmenistan","date":"2024-06-17"},{"id":"20240618_ri4dg5ajuodg8eetltaltah2d4","status":"confirmed","summary":"Kurban Bayramy Holiday","region":"Turkmenistan","date":"2024-06-18"},{"id":"20240626_58a01mdsek92ie63ncqg4tkrp8","status":"confirmed","summary":"Day of Prosecutor\'s Office Employees","region":"Turkmenistan","date":"2024-06-26"},{"id":"20240627_r2ik2kb9q3s50hauv2jamloukk","status":"confirmed","summary":"Day of Turkmen Workers of Culture and Art","region":"Turkmenistan","date":"2024-06-27"},{"id":"20240705_7hkn3a1ggsu9nm004nechi80lc","status":"confirmed","summary":"Day of Judicial Employees","region":"Turkmenistan","date":"2024-07-05"},{"id":"20240721_qcf6f54gpt70f51d3879rqodmg","status":"confirmed","summary":"Health and Medical Industry Workers Day","region":"Turkmenistan","date":"2024-07-21"},{"id":"20240811_hgpa6m738q8q8n1blhddlv4k7g","status":"confirmed","summary":"Day of Frontiersmen","region":"Turkmenistan","date":"2024-08-11"},{"id":"20240901_t7ffnq97fte236a3l3kg361lms","status":"confirmed","summary":"Day of Students and Knowledge","region":"Turkmenistan","date":"2024-09-01"},{"id":"20240914_22fn6ri8c45hd4jqg7mt04t1p4","status":"confirmed","summary":"Day of the Workers in the Energy Sector","region":"Turkmenistan","date":"2024-09-14"},{"id":"20240927_dh8sdo4aeq1f6s6j8nn2nl8buk","status":"confirmed","summary":"Independence Day","region":"Turkmenistan","date":"2024-09-27"},{"id":"20241001_d374hsi6sftpdpbgtp2suajq28","status":"confirmed","summary":"International Day of Senior Citizens","region":"Turkmenistan","date":"2024-10-01"},{"id":"20241006_9s798gsa9prpk559cgs1n8noko","status":"confirmed","summary":"Day of Commemoration and National Mourning","region":"Turkmenistan","date":"2024-10-06"},{"id":"20241009_4uc8r6ecsmps1i8pr4jode6168","status":"confirmed","summary":"Day of Naval Forces of Turkmenistan","region":"Turkmenistan","date":"2024-10-09"},{"id":"20241110_fcrp6t22la1d7pmkm9t2emtn28","status":"confirmed","summary":"Harvest Festival","region":"Turkmenistan","date":"2024-11-10"},{"id":"20241212_8j8o4qtt1e4sevomf508in0o7s","status":"confirmed","summary":"Day of Neutrality","region":"Turkmenistan","date":"2024-12-12"},{"id":"20241214_59mvrl189v0cnpr8epnqup8efo","status":"confirmed","summary":"Day of the Workers of Oil, Gas, Power and Geological Industry","region":"Turkmenistan","date":"2024-12-14"},{"id":"20241221_0b7t9eibgo5hhlmd3ubi6vnk8o","status":"confirmed","summary":"Niyazov Day","region":"Turkmenistan","date":"2024-12-21"},{"id":"20250101_42vdt6m4vui5eubt6abe1diihg","status":"confirmed","summary":"New Year\'s Day","region":"Turkmenistan","date":"2025-01-01"},{"id":"20250127_s9lirt9uolso301q07q40us4qk","status":"confirmed","summary":"Day of Fatherland Defenders","region":"Turkmenistan","date":"2025-01-27"},{"id":"20250218_3go9jmojtmb3v4u9rmvp3m2l5g","status":"confirmed","summary":"Day of Diplomatic Staff of Turkmenistan","region":"Turkmenistan","date":"2025-02-18"},{"id":"20250301_nj45c0ns48qo2fjcqh885tsehg","status":"confirmed","summary":"Ramadan Start","region":"Turkmenistan","date":"2025-03-01"},{"id":"20250307_nah2s8mveg1lg2c9111e3d9nnc","status":"confirmed","summary":"Day of Transport and Communication Workers","region":"Turkmenistan","date":"2025-03-07"},{"id":"20250308_4c59n6mevme3fhommrl349nrm0","status":"confirmed","summary":"International Women\'s Day","region":"Turkmenistan","date":"2025-03-08"},{"id":"20250321_s0pdu7lma8jp554bvmbb9sreio","status":"confirmed","summary":"Nowruz Bayram (Spring Festival)","region":"Turkmenistan","date":"2025-03-21"},{"id":"20250322_secj6m5l5r42ncjluq15q9p1ho","status":"confirmed","summary":"Nowruz Bayram (Spring Festival)","region":"Turkmenistan","date":"2025-03-22"},{"id":"20250331_hgns26pii8ec1vmfbuna0mb7so","status":"confirmed","summary":"Oraza Bayram","region":"Turkmenistan","date":"2025-03-31"},{"id":"20250331_uh1vpabet5vabjsquh4e02577g","status":"confirmed","summary":"Day of Chemical Industry Workers","region":"Turkmenistan","date":"2025-03-31"},{"id":"20250407_i3naa57p84m3qnlljmjdhv74i0","status":"confirmed","summary":"World Health Day","region":"Turkmenistan","date":"2025-04-07"},{"id":"20250417_ai7p2b1oc0cbi5v76tpvh6pn2g","status":"confirmed","summary":"Migration Workers Day","region":"Turkmenistan","date":"2025-04-17"},{"id":"20250427_5dbbj7e832aev95ekrnn4dnp80","status":"confirmed","summary":"Turkmen Racing Horse Festival","region":"Turkmenistan","date":"2025-04-27"},{"id":"20250509_bmm99ls8vr5pkej3perlrranog","status":"confirmed","summary":"Victory Day","region":"Turkmenistan","date":"2025-05-09"},{"id":"20250518_t5vkms77h6qpchda2tc1p9if1c","status":"confirmed","summary":"Constitution Day","region":"Turkmenistan","date":"2025-05-18"},{"id":"20250525_4l8ddafqevvirbs385j22katdo","status":"confirmed","summary":"Ashgabat City Day","region":"Turkmenistan","date":"2025-05-25"},{"id":"20250525_fvbm03k9gc66o7lru84bt9th7g","status":"confirmed","summary":"Carpet Day","region":"Turkmenistan","date":"2025-05-25"},{"id":"20250529_vb0b6l008ehn701a2ofi89bbl4","status":"confirmed","summary":"Internal Affairs Officers Day","region":"Turkmenistan","date":"2025-05-29"},{"id":"20250601_flgi91qjjdagnadas79ut1b2e0","status":"confirmed","summary":"Textile Workers Day","region":"Turkmenistan","date":"2025-06-01"},{"id":"20250601_vjjmqocl86t21e9aa3kvicprqc","status":"confirmed","summary":"International Children\'s Day","region":"Turkmenistan","date":"2025-06-01"},{"id":"20250605_3mljiimliidro9rn1jj9u2tsig","status":"confirmed","summary":"World Envrionment Day","region":"Turkmenistan","date":"2025-06-05"},{"id":"20250606_ir82h0n4c2a951iccucveb46t4","status":"confirmed","summary":"Kurban Bayramy Holiday","region":"Turkmenistan","date":"2025-06-06"},{"id":"20250607_s3kjgr006ao6drigsg5okd0olg","status":"confirmed","summary":"Kurban Bayramy","region":"Turkmenistan","date":"2025-06-07"},{"id":"20250608_b1knd4qh3akec3hnqprguskqqg","status":"confirmed","summary":"Kurban Bayramy Holiday","region":"Turkmenistan","date":"2025-06-08"},{"id":"20250612_n5bdcn81ak5c7dd092h6ehovkc","status":"confirmed","summary":"Science Day","region":"Turkmenistan","date":"2025-06-12"},{"id":"20250626_42pqcpighlbnr8a1n2ujqevoic","status":"confirmed","summary":"Day of Prosecutor\'s Office Employees","region":"Turkmenistan","date":"2025-06-26"},{"id":"20250627_0f985nn2i5gkvjp8eard0ihgjg","status":"confirmed","summary":"Day of Turkmen Workers of Culture and Art","region":"Turkmenistan","date":"2025-06-27"},{"id":"20250705_2bkj9mpefv1jkdo8n4d55365fc","status":"confirmed","summary":"Day of Judicial Employees","region":"Turkmenistan","date":"2025-07-05"},{"id":"20250721_7njh6hd6j8tkhl5b58gtf206uc","status":"confirmed","summary":"Health and Medical Industry Workers Day","region":"Turkmenistan","date":"2025-07-21"},{"id":"20250811_gtusbls69m3dfs4vhpeuptgmek","status":"confirmed","summary":"Day of Frontiersmen","region":"Turkmenistan","date":"2025-08-11"},{"id":"20250901_hn6heciqpotdfn84rp359v11r0","status":"confirmed","summary":"Day of Students and Knowledge","region":"Turkmenistan","date":"2025-09-01"},{"id":"20250913_ral17atkqe96e3f2a5i0qa4rj0","status":"confirmed","summary":"Day of the Workers in the Energy Sector","region":"Turkmenistan","date":"2025-09-13"},{"id":"20250927_c7k7fkth6o2eoar56akaa50f1c","status":"confirmed","summary":"Independence Day","region":"Turkmenistan","date":"2025-09-27"},{"id":"20251001_sn37v0u3q6pkrprggm01or6sp0","status":"confirmed","summary":"International Day of Senior Citizens","region":"Turkmenistan","date":"2025-10-01"},{"id":"20251006_maim3ma2tajmtkmp9bbeail0cs","status":"confirmed","summary":"Day of Commemoration and National Mourning","region":"Turkmenistan","date":"2025-10-06"},{"id":"20251009_gtmifcb7fqja6e52b647h0pjic","status":"confirmed","summary":"Day of Naval Forces of Turkmenistan","region":"Turkmenistan","date":"2025-10-09"},{"id":"20251109_e37bcks6echirgvjh8tonlp8lk","status":"confirmed","summary":"Harvest Festival","region":"Turkmenistan","date":"2025-11-09"},{"id":"20251212_33q6qm2bknfm712vsdlaf1905k","status":"confirmed","summary":"Day of Neutrality","region":"Turkmenistan","date":"2025-12-12"},{"id":"20251214_q0qv32uokgfhu81tnm9tm4pdnk","status":"confirmed","summary":"Day of the Workers of Oil, Gas, Power and Geological Industry","region":"Turkmenistan","date":"2025-12-14"},{"id":"20251221_6c7crpoo2l10nsff9lq2aecaf4","status":"confirmed","summary":"Niyazov Day","region":"Turkmenistan","date":"2025-12-21"}],"Tunisia":[{"id":"20240101_10nd0thg9j47fjd21moqqhs424","status":"confirmed","summary":"New Year","region":"Tunisia","date":"2024-01-01"},{"id":"20240311_bbmg4471iimmspsiphi6thous8","status":"confirmed","summary":"Ramadan Start","region":"Tunisia","date":"2024-03-11"},{"id":"20240320_ckvhn4qitrpke4kuhimdv4otu0","status":"confirmed","summary":"Independence Day","region":"Tunisia","date":"2024-03-20"},{"id":"20240409_6f7mkv4mnume0r86lt6crm6auc","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Tunisia","date":"2024-04-09"},{"id":"20240409_fls3ruipcf14sno7gmf3s46u2o","status":"confirmed","summary":"Martyrs\' Day","region":"Tunisia","date":"2024-04-09"},{"id":"20240410_r4av0knd1ni089644ar4afh4t8","status":"confirmed","summary":"Eid al-Fitr","region":"Tunisia","date":"2024-04-10"},{"id":"20240411_l6avbs1d1p2jl955dbo8ik56oo","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Tunisia","date":"2024-04-11"},{"id":"20240501_55tsgernh81ehluv0c5cmh2aio","status":"confirmed","summary":"Labour Day","region":"Tunisia","date":"2024-05-01"},{"id":"20240616_9vs69ei5d49popab5k1rurbuc8","status":"confirmed","summary":"Eid al-Adha","region":"Tunisia","date":"2024-06-16"},{"id":"20240617_qgjsak5571a368doff7lqicij4","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Tunisia","date":"2024-06-17"},{"id":"20240707_491o74827e49vs3la8skmkclgo","status":"confirmed","summary":"Muharram","region":"Tunisia","date":"2024-07-07"},{"id":"20240725_h1vflq5d06hm2ibndrgl2dvhds","status":"confirmed","summary":"Republic Day","region":"Tunisia","date":"2024-07-25"},{"id":"20240813_updd043psjgnhsltsq0ekaj758","status":"confirmed","summary":"Women’s Day","region":"Tunisia","date":"2024-08-13"},{"id":"20240915_f42a4c8mkc931rl4qgths4u7vo","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Tunisia","date":"2024-09-15"},{"id":"20241015_hl6cmpftiq0e8b9dsema96hg9c","status":"confirmed","summary":"Evacuation Day","region":"Tunisia","date":"2024-10-15"},{"id":"20241217_jsur5h38klcbclkb8iokogvsvc","status":"confirmed","summary":"Revolution and Youth Day","region":"Tunisia","date":"2024-12-17"},{"id":"20250101_nnbk6hbq68eavp2m5hd1j3nt54","status":"confirmed","summary":"New Year","region":"Tunisia","date":"2025-01-01"},{"id":"20250301_mm7apl187m028r0nl8crrpjboo","status":"confirmed","summary":"Ramadan Start","region":"Tunisia","date":"2025-03-01"},{"id":"20250320_00umu0uaiiccn86b4gre60gmbo","status":"confirmed","summary":"Independence Day","region":"Tunisia","date":"2025-03-20"},{"id":"20250330_4ttmtnup9s2b8vbkp4sotuubu4","status":"confirmed","summary":"Eid al-Fitr","region":"Tunisia","date":"2025-03-30"},{"id":"20250331_m3v50gdohuof1t8gmca2c8vhlc","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Tunisia","date":"2025-03-31"},{"id":"20250401_bp36ccupfdkfppv5jbhnqfa85c","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Tunisia","date":"2025-04-01"},{"id":"20250409_e2p8jj36u9s17jj2uc8vpdo1k0","status":"confirmed","summary":"Martyrs\' Day","region":"Tunisia","date":"2025-04-09"},{"id":"20250501_os3thet7d8mlkmdjht4ttof1oc","status":"confirmed","summary":"Labour Day","region":"Tunisia","date":"2025-05-01"},{"id":"20250606_v15q2gr6tosnsd4rgfadumti6s","status":"confirmed","summary":"Eid al-Adha","region":"Tunisia","date":"2025-06-06"},{"id":"20250607_s39nbq39g8arv5cr524q18u32k","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Tunisia","date":"2025-06-07"},{"id":"20250626_em8o3j2emd0tb32j5k70oekrlo","status":"confirmed","summary":"Muharram","region":"Tunisia","date":"2025-06-26"},{"id":"20250725_oqug5r078qsgtu8s2cdnmh4d38","status":"confirmed","summary":"Republic Day","region":"Tunisia","date":"2025-07-25"},{"id":"20250813_blpgd2ouvfu7l7vqkc5oh95eds","status":"confirmed","summary":"Women’s Day","region":"Tunisia","date":"2025-08-13"},{"id":"20250904_2rp6h67kp5080b66efi70r51m0","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Tunisia","date":"2025-09-04"},{"id":"20251015_rnd0bs3vf63k9e7r02m7qporoc","status":"confirmed","summary":"Evacuation Day","region":"Tunisia","date":"2025-10-15"},{"id":"20251217_6mvjvf583cdv02qhef4gbbim04","status":"confirmed","summary":"Revolution and Youth Day","region":"Tunisia","date":"2025-12-17"}],"Tonga":[{"id":"20240101_dopvfut2k362rtr5arv3096fag","status":"confirmed","summary":"New Year\'s Day","region":"Tonga","date":"2024-01-01"},{"id":"20240329_nesf9048e0275qn3o3p45dia6k","status":"confirmed","summary":"Good Friday","region":"Tonga","date":"2024-03-29"},{"id":"20240401_lmtgg2s6ahgl6098crna6hflb4","status":"confirmed","summary":"Easter Monday","region":"Tonga","date":"2024-04-01"},{"id":"20240425_95rl22b1hm4dvmmub6qplk25ao","status":"confirmed","summary":"ANZAC Day","region":"Tonga","date":"2024-04-25"},{"id":"20240603_42j3p67ojv1b7j8cho275mqsc8","status":"confirmed","summary":"Day off for Emancipation Day","region":"Tonga","date":"2024-06-03"},{"id":"20240604_d1phrsf2p542akeuu5s0pr8rmc","status":"confirmed","summary":"Emancipation Day","region":"Tonga","date":"2024-06-04"},{"id":"20240704_mo418gnt03avtgpsh21pe4d8os","status":"confirmed","summary":"Birthday of His Majesty King Tupou VI","region":"Tonga","date":"2024-07-04"},{"id":"20240917_sp6mko3hia2pgvlijqnjh7gk0k","status":"confirmed","summary":"Birthday of Crown Prince Tupouto\'a-\'Ulukalala","region":"Tonga","date":"2024-09-17"},{"id":"20241104_h8piau21gsqd5s3nqgudl3ns60","status":"confirmed","summary":"Constitution Day","region":"Tonga","date":"2024-11-04"},{"id":"20241202_p932j7je8ge33lb4dunn1i4skc","status":"confirmed","summary":"Day off for Anniversary of the Coronation of King Tupou I","region":"Tonga","date":"2024-12-02"},{"id":"20241204_oblvjt6580imms5cqoa8ocnb78","status":"confirmed","summary":"Anniversary of the Coronation of King Tupou I","region":"Tonga","date":"2024-12-04"},{"id":"20241225_6hefuu7b1bccgtci0eh8fooib0","status":"confirmed","summary":"Christmas Day","region":"Tonga","date":"2024-12-25"},{"id":"20241226_jlcnkum86vk947d8c5f1crijvs","status":"confirmed","summary":"Boxing Day","region":"Tonga","date":"2024-12-26"},{"id":"20250101_o2v7erpul4i3ucap2da3e0rebg","status":"confirmed","summary":"New Year\'s Day","region":"Tonga","date":"2025-01-01"},{"id":"20250418_gk9arqqtllp7svkfpu9facvaao","status":"confirmed","summary":"Good Friday","region":"Tonga","date":"2025-04-18"},{"id":"20250421_uamnat0bktsflg6g1b64thkdbk","status":"confirmed","summary":"Easter Monday","region":"Tonga","date":"2025-04-21"},{"id":"20250425_k38gi8bagen8q8rte5v3ivhi2s","status":"confirmed","summary":"ANZAC Day","region":"Tonga","date":"2025-04-25"},{"id":"20250602_6en6esm1tah9s6jme2c7dpv0f0","status":"confirmed","summary":"Day off for Emancipation Day","region":"Tonga","date":"2025-06-02"},{"id":"20250604_il71gffe8ffr5f1khj8vas2e48","status":"confirmed","summary":"Emancipation Day","region":"Tonga","date":"2025-06-04"},{"id":"20250704_51gi138287g61la2g3qghmlsis","status":"confirmed","summary":"Birthday of His Majesty King Tupou VI","region":"Tonga","date":"2025-07-04"},{"id":"20250917_qv12obfji5c968989psc22t6hk","status":"confirmed","summary":"Birthday of Crown Prince Tupouto\'a-\'Ulukalala","region":"Tonga","date":"2025-09-17"},{"id":"20251103_4ci771bkn66hupoepgfobi4g30","status":"confirmed","summary":"Day off for Constitution Day","region":"Tonga","date":"2025-11-03"},{"id":"20251104_29qh5erlio77h3249d94fd1hb0","status":"confirmed","summary":"Constitution Day","region":"Tonga","date":"2025-11-04"},{"id":"20251204_fdd2t13ig4i5dleetbnmgciu6o","status":"confirmed","summary":"Anniversary of the Coronation of King Tupou I","region":"Tonga","date":"2025-12-04"},{"id":"20251208_jp6abv80nc6vq5loaf6ad5dteg","status":"confirmed","summary":"Day off for Anniversary of the Coronation of King Tupou I","region":"Tonga","date":"2025-12-08"},{"id":"20251225_h3i7d6oukb823c110hfofm9flo","status":"confirmed","summary":"Christmas Day","region":"Tonga","date":"2025-12-25"},{"id":"20251226_260tela0a13t3ppqa0oihnh6ec","status":"confirmed","summary":"Boxing Day","region":"Tonga","date":"2025-12-26"}],"Trinidad & Tobago":[{"id":"20240101_1hceje49tjb3tn4bibut978h0g","status":"confirmed","summary":"New Year\'s Day","region":"Trinidad & Tobago","date":"2024-01-01"},{"id":"20240212_24fbtndpsoordcqnrgtcg1e86o","status":"confirmed","summary":"Carnival","region":"Trinidad & Tobago","date":"2024-02-12"},{"id":"20240213_gsps96if8mggsl5ui5046i51ro","status":"confirmed","summary":"Carnival/Shrove Tuesday","region":"Trinidad & Tobago","date":"2024-02-13"},{"id":"20240214_l0st22mlhnmjspv3gnn5upj468","status":"confirmed","summary":"Valentine\'s Day","region":"Trinidad & Tobago","date":"2024-02-14"},{"id":"20240312_tapunug7b1p6lkjklqcsh75es8","status":"confirmed","summary":"Ramadan Start","region":"Trinidad & Tobago","date":"2024-03-12"},{"id":"20240329_jer1f48ki7svrqe21agrd43vdk","status":"confirmed","summary":"Good Friday","region":"Trinidad & Tobago","date":"2024-03-29"},{"id":"20240330_mjlbakj8atvi86trvs42qsc214","status":"confirmed","summary":"Spiritual Baptist Liberation Day","region":"Trinidad & Tobago","date":"2024-03-30"},{"id":"20240331_8fdpg8liimqqj8l6j1n78pdc0g","status":"confirmed","summary":"Easter Sunday","region":"Trinidad & Tobago","date":"2024-03-31"},{"id":"20240401_6pra4b1sd5ie321hicmair8rjs","status":"confirmed","summary":"Easter Monday","region":"Trinidad & Tobago","date":"2024-04-01"},{"id":"20240410_ht2i2ocuviqpm06bf9vo5ic2s8","status":"confirmed","summary":"Eid al-Fitr","region":"Trinidad & Tobago","date":"2024-04-10"},{"id":"20240512_gpml21825dr04npto2gobv83uo","status":"confirmed","summary":"Mother\'s Day","region":"Trinidad & Tobago","date":"2024-05-12"},{"id":"20240530_2g2gv2kjactm6jbpnams5e1oo4","status":"confirmed","summary":"Indian Arrival Day","region":"Trinidad & Tobago","date":"2024-05-30"},{"id":"20240530_et727drbim9op9oju8dd80sjj8","status":"confirmed","summary":"Corpus Christi","region":"Trinidad & Tobago","date":"2024-05-30"},{"id":"20240616_frrlqrokv3t0gnimf345i6t8v4","status":"confirmed","summary":"Father\'s Day","region":"Trinidad & Tobago","date":"2024-06-16"},{"id":"20240619_4iver0a81muthki26b5l87ruag","status":"confirmed","summary":"Labour Day","region":"Trinidad & Tobago","date":"2024-06-19"},{"id":"20240801_538to3kc53dlkh0dliiq9bodk8","status":"confirmed","summary":"African Emancipation Day","region":"Trinidad & Tobago","date":"2024-08-01"},{"id":"20240831_vf1ecjqn2m6gmirj1d2mo4sp5g","status":"confirmed","summary":"Independence Day","region":"Trinidad & Tobago","date":"2024-08-31"},{"id":"20240924_mja15fub29ich9qrl4pi3ierug","status":"confirmed","summary":"Republic Day","region":"Trinidad & Tobago","date":"2024-09-24"},{"id":"20241031_8ej06he9orvfllm31f63gv600s","status":"confirmed","summary":"Diwali/Deepavali","region":"Trinidad & Tobago","date":"2024-10-31"},{"id":"20241224_et1ph6m53v6ogd9nnq6itl3o7c","status":"confirmed","summary":"Christmas Eve","region":"Trinidad & Tobago","date":"2024-12-24"},{"id":"20241225_35na6evoushs2vl3r7m7ag7pm8","status":"confirmed","summary":"Christmas Day","region":"Trinidad & Tobago","date":"2024-12-25"},{"id":"20241226_7htbhrp7sojk3l532bhlk5i674","status":"confirmed","summary":"Boxing Day","region":"Trinidad & Tobago","date":"2024-12-26"},{"id":"20241231_lpigvmh53b1os4n975gm21ni04","status":"confirmed","summary":"New Year\'s Eve","region":"Trinidad & Tobago","date":"2024-12-31"},{"id":"20250101_29vr9ear40c9tgnkkm2pm2qd3g","status":"confirmed","summary":"New Year\'s Day","region":"Trinidad & Tobago","date":"2025-01-01"},{"id":"20250214_e8qfgpl990qe9uo5g9spl1kcus","status":"confirmed","summary":"Valentine\'s Day","region":"Trinidad & Tobago","date":"2025-02-14"},{"id":"20250301_5kji98r00nc2aq2s28hcorqgu0","status":"confirmed","summary":"Ramadan Start","region":"Trinidad & Tobago","date":"2025-03-01"},{"id":"20250303_6frkqo3h5oh6tbld1fa70ovkkg","status":"confirmed","summary":"Carnival","region":"Trinidad & Tobago","date":"2025-03-03"},{"id":"20250304_kluqknv9f9f9o98599444t6uus","status":"confirmed","summary":"Carnival/Shrove Tuesday","region":"Trinidad & Tobago","date":"2025-03-04"},{"id":"20250330_94hbttbkmec4cnmd83v34aon74","status":"confirmed","summary":"Spiritual Baptist Liberation Day","region":"Trinidad & Tobago","date":"2025-03-30"},{"id":"20250331_i8i3nfjm97ndk5al2ttef1d9ls","status":"confirmed","summary":"Spiritual Baptist Liberation Day observed","region":"Trinidad & Tobago","date":"2025-03-31"},{"id":"20250331_pmp1d9srb2cl5aevjtk9pqv54o","status":"confirmed","summary":"Eid al-Fitr","region":"Trinidad & Tobago","date":"2025-03-31"},{"id":"20250418_63jutl4grtnleh754446f27uec","status":"confirmed","summary":"Good Friday","region":"Trinidad & Tobago","date":"2025-04-18"},{"id":"20250420_pdqvtrja5k9tpm424qquefbqc8","status":"confirmed","summary":"Easter Sunday","region":"Trinidad & Tobago","date":"2025-04-20"},{"id":"20250421_s10oi78qcb2hb7hbapkd6ip120","status":"confirmed","summary":"Easter Monday","region":"Trinidad & Tobago","date":"2025-04-21"},{"id":"20250511_oaqume3vpadq5m1o0tad78kf8o","status":"confirmed","summary":"Mother\'s Day","region":"Trinidad & Tobago","date":"2025-05-11"},{"id":"20250530_pm70a5k7gr7r6tiirv5snrkcfs","status":"confirmed","summary":"Indian Arrival Day","region":"Trinidad & Tobago","date":"2025-05-30"},{"id":"20250615_ta8u0qpci1on33hlg655fvl4vs","status":"confirmed","summary":"Father\'s Day","region":"Trinidad & Tobago","date":"2025-06-15"},{"id":"20250619_7olkk0htn7c6rqjg0c324qs34c","status":"confirmed","summary":"Labour Day","region":"Trinidad & Tobago","date":"2025-06-19"},{"id":"20250619_h3divd5t437mb7fepcd1lho3e0","status":"confirmed","summary":"Corpus Christi","region":"Trinidad & Tobago","date":"2025-06-19"},{"id":"20250801_gkkqtb2uf4e2o0vgg1knrkoq04","status":"confirmed","summary":"African Emancipation Day","region":"Trinidad & Tobago","date":"2025-08-01"},{"id":"20250831_cvo1ajvgiln8n4durero3c575c","status":"confirmed","summary":"Independence Day","region":"Trinidad & Tobago","date":"2025-08-31"},{"id":"20250901_uis174bom8vot2f4sqlm5a50gk","status":"confirmed","summary":"Independence Day observed","region":"Trinidad & Tobago","date":"2025-09-01"},{"id":"20250924_lpukibap5g3ad1bo7clgp9iua0","status":"confirmed","summary":"Republic Day","region":"Trinidad & Tobago","date":"2025-09-24"},{"id":"20251020_dk7mdtlbjg9v85g4l7dvaf172g","status":"confirmed","summary":"Diwali/Deepavali","region":"Trinidad & Tobago","date":"2025-10-20"},{"id":"20251224_n3eedarug2mms0si9nuc7jgsa0","status":"confirmed","summary":"Christmas Eve","region":"Trinidad & Tobago","date":"2025-12-24"},{"id":"20251225_u2ppg8of8b1oe0fe2v5fn39kec","status":"confirmed","summary":"Christmas Day","region":"Trinidad & Tobago","date":"2025-12-25"},{"id":"20251226_mjq4fe1b08jlj908e0bu2omfmk","status":"confirmed","summary":"Boxing Day","region":"Trinidad & Tobago","date":"2025-12-26"},{"id":"20251231_shu9kcilq271pjpuqhs5nk9138","status":"confirmed","summary":"New Year\'s Eve","region":"Trinidad & Tobago","date":"2025-12-31"}],"Turkey":[{"id":"20240101_gc7ki1sc8diggiqcdh3o8r03ik","status":"confirmed","summary":"New Year\'s Day","region":"Turkey","date":"2024-01-01"},{"id":"20240311_4lb584j83i25e6s7ci56obidvs","status":"confirmed","summary":"Ramadan Start","region":"Turkey","date":"2024-03-11"},{"id":"20240408_qs64i6t0062r5lgu0fo02uu8ko","status":"confirmed","summary":"Ramadan Feast Holiday","region":"Turkey","date":"2024-04-08"},{"id":"20240409_j7aj5ljfvqcim0j92051o0r4ls","status":"confirmed","summary":"Ramadan Feast Eve (Private Sector)","region":"Turkey","date":"2024-04-09"},{"id":"20240409_nifjvj3dh4pv9hmog3mpute6ms","status":"confirmed","summary":"Ramadan Feast Eve (Public Sector)","region":"Turkey","date":"2024-04-09"},{"id":"20240410_cgg9pc1m86cn1huppr3iv4d97s","status":"confirmed","summary":"Ramadan Feast","region":"Turkey","date":"2024-04-10"},{"id":"20240411_oe9ovsosdff9dtmddqh75a31u8","status":"confirmed","summary":"Ramadan Feast Holiday","region":"Turkey","date":"2024-04-11"},{"id":"20240412_3u7jabadutok6974fgftuhto1k","status":"confirmed","summary":"Ramadan Feast Holiday","region":"Turkey","date":"2024-04-12"},{"id":"20240423_2fa8e2lf8bpl1kdf6u4tggfq1c","status":"confirmed","summary":"National Sovereignty and Children\'s Day","region":"Turkey","date":"2024-04-23"},{"id":"20240501_q0f0j8lb1i7qdpal9t84ng8lkg","status":"confirmed","summary":"Labor and Solidarity Day","region":"Turkey","date":"2024-05-01"},{"id":"20240519_dodfehtth45klgga0880ue9j2g","status":"confirmed","summary":"Commemoration of Atatürk, Youth and Sports Day","region":"Turkey","date":"2024-05-19"},{"id":"20240615_8dv3kk18thpb23ahu0atf9lo1g","status":"confirmed","summary":"Sacrifice Feast Eve","region":"Turkey","date":"2024-06-15"},{"id":"20240616_usj15u5e0fe5ihe84pdecas7sk","status":"confirmed","summary":"Sacrifice Feast","region":"Turkey","date":"2024-06-16"},{"id":"20240617_8garsn4addl4048bips3t6l344","status":"confirmed","summary":"Sacrifice Feast Holiday","region":"Turkey","date":"2024-06-17"},{"id":"20240618_4umnh7ba8gupt1cftoj5s0tvns","status":"confirmed","summary":"Sacrifice Feast Holiday","region":"Turkey","date":"2024-06-18"},{"id":"20240619_plu3uem9e2toshc2i33o4r65r4","status":"confirmed","summary":"Sacrifice Feast Holiday","region":"Turkey","date":"2024-06-19"},{"id":"20240715_24ollsnptj4h7svt82i3ksceu4","status":"confirmed","summary":"Democracy and National Unity Day","region":"Turkey","date":"2024-07-15"},{"id":"20240830_r66d8m7qpg4vln9nk07am2sens","status":"confirmed","summary":"Victory Day","region":"Turkey","date":"2024-08-30"},{"id":"20241028_5h0aoeq838ali9fdhq58ua72eo","status":"confirmed","summary":"Republic Day Eve","region":"Turkey","date":"2024-10-28"},{"id":"20241029_ceot4se215hsjhi0psljbisql4","status":"confirmed","summary":"Republic Day","region":"Turkey","date":"2024-10-29"},{"id":"20241110_ikd4hr174kti2kvfv7pu45fqq4","status":"confirmed","summary":"Ataturk Commemoration Day","region":"Turkey","date":"2024-11-10"},{"id":"20241231_uvq8smgj3tajhoh75j5pdkilto","status":"confirmed","summary":"New Year\'s Eve","region":"Turkey","date":"2024-12-31"},{"id":"20250101_shm3pmv072i1jrgpnfsq0ig23c","status":"confirmed","summary":"New Year\'s Day","region":"Turkey","date":"2025-01-01"},{"id":"20250301_0m6lsvk5c9sp3jmc0r6th9cmi4","status":"confirmed","summary":"Ramadan Start","region":"Turkey","date":"2025-03-01"},{"id":"20250329_bevcul5cvuotg6m6cpkud67in0","status":"confirmed","summary":"Ramadan Feast Eve","region":"Turkey","date":"2025-03-29"},{"id":"20250330_skjrn7sd3fvm0ap8kt1qa9c7s0","status":"confirmed","summary":"Ramadan Feast","region":"Turkey","date":"2025-03-30"},{"id":"20250331_et4su0takso426788rgjngsj1s","status":"confirmed","summary":"Ramadan Feast Holiday","region":"Turkey","date":"2025-03-31"},{"id":"20250401_d2vla1a6pc0iqivll2qjekjako","status":"confirmed","summary":"Ramadan Feast Holiday","region":"Turkey","date":"2025-04-01"},{"id":"20250423_fko38hq6gp0qnr6nqg9o8emkh0","status":"confirmed","summary":"National Sovereignty and Children\'s Day","region":"Turkey","date":"2025-04-23"},{"id":"20250501_nomgsl8g8c7s05af9tnrm1ihg8","status":"confirmed","summary":"Labor and Solidarity Day","region":"Turkey","date":"2025-05-01"},{"id":"20250519_tqg1sinv998a057hb3ov3kunt4","status":"confirmed","summary":"Commemoration of Atatürk, Youth and Sports Day","region":"Turkey","date":"2025-05-19"},{"id":"20250605_r55cutpcn3r069o16k61bj2dc8","status":"confirmed","summary":"Sacrifice Feast Eve","region":"Turkey","date":"2025-06-05"},{"id":"20250606_ktma6ccdd3kp0uq6gdoiln244k","status":"confirmed","summary":"Sacrifice Feast","region":"Turkey","date":"2025-06-06"},{"id":"20250607_72h5n08806dh3tvr9dous30sno","status":"confirmed","summary":"Sacrifice Feast Holiday","region":"Turkey","date":"2025-06-07"},{"id":"20250608_q8mrl59v5tgecj30umpeeotplc","status":"confirmed","summary":"Sacrifice Feast Holiday","region":"Turkey","date":"2025-06-08"},{"id":"20250609_aqqolkutk1nu7n83e659miltc0","status":"confirmed","summary":"Sacrifice Feast Holiday","region":"Turkey","date":"2025-06-09"},{"id":"20250715_8bcnuasv3mlgfga8upsle4i1i0","status":"confirmed","summary":"Democracy and National Unity Day","region":"Turkey","date":"2025-07-15"},{"id":"20250830_q2k7crvr464qtdc2rlfkfis4qo","status":"confirmed","summary":"Victory Day","region":"Turkey","date":"2025-08-30"},{"id":"20251028_0ojnu00ithm3i2ccapm7c9ppso","status":"confirmed","summary":"Republic Day Eve","region":"Turkey","date":"2025-10-28"},{"id":"20251029_v79v9dn1gqar3b11embrt7r394","status":"confirmed","summary":"Republic Day","region":"Turkey","date":"2025-10-29"},{"id":"20251110_63n750900vro5iq55jh410lqn4","status":"confirmed","summary":"Ataturk Commemoration Day","region":"Turkey","date":"2025-11-10"},{"id":"20251231_og58o2cvjjfsn3qm5vvcjeu1uc","status":"confirmed","summary":"New Year\'s Eve","region":"Turkey","date":"2025-12-31"}],"Tuvalu":[{"id":"20240101_o8l8b0efhnr4vu4vk9820cm5c0","status":"confirmed","summary":"New Year\'s Day","region":"Tuvalu","date":"2024-01-01"},{"id":"20240311_7oejh32i6a6j3dg6slp5ofkpj8","status":"confirmed","summary":"Commonwealth Day","region":"Tuvalu","date":"2024-03-11"},{"id":"20240329_1fnqrmrga8pplaa228idomrsfo","status":"confirmed","summary":"Good Friday","region":"Tuvalu","date":"2024-03-29"},{"id":"20240330_jd4ja22vh48kn66acohmracn6s","status":"confirmed","summary":"Holy Saturday","region":"Tuvalu","date":"2024-03-30"},{"id":"20240331_1tkhjl43bduu2596k9d03tmta8","status":"confirmed","summary":"Easter Sunday","region":"Tuvalu","date":"2024-03-31"},{"id":"20240401_vlvilrktlnam6s9v1rn7ue5hcg","status":"confirmed","summary":"Easter Monday","region":"Tuvalu","date":"2024-04-01"},{"id":"20240513_qmgv0md3getvlc05mkg1kmj998","status":"confirmed","summary":"Gospel Day","region":"Tuvalu","date":"2024-05-13"},{"id":"20240608_pa99fstsnk72t47el7fveqi0hk","status":"confirmed","summary":"Anniversary of the Birthday of the Sovereign","region":"Tuvalu","date":"2024-06-08"},{"id":"20240805_ak8fpd6t0390or7hcb7smkhhcs","status":"confirmed","summary":"National Children\'s Day","region":"Tuvalu","date":"2024-08-05"},{"id":"20241001_s7ca0351431rrr54kudcc9g494","status":"confirmed","summary":"Tuvalu Day","region":"Tuvalu","date":"2024-10-01"},{"id":"20241002_1e57fp5n68rh51d6ol086r61p0","status":"confirmed","summary":"Tuvalu Day Holiday","region":"Tuvalu","date":"2024-10-02"},{"id":"20241111_h3r3ndclti8u7lv8i580i3kpig","status":"confirmed","summary":"Heir to the Throne\'s Birthday","region":"Tuvalu","date":"2024-11-11"},{"id":"20241225_l595u9o279mh6obgoa9i13fil8","status":"confirmed","summary":"Christmas Day","region":"Tuvalu","date":"2024-12-25"},{"id":"20241226_7uf4ng3cv0t75k2khvn05bitag","status":"confirmed","summary":"Boxing Day","region":"Tuvalu","date":"2024-12-26"},{"id":"20250101_1nreea752dnum4e9evlqpj5l5c","status":"confirmed","summary":"New Year\'s Day","region":"Tuvalu","date":"2025-01-01"},{"id":"20250310_aj2asfoc6opg510t95ucbf8om8","status":"confirmed","summary":"Commonwealth Day","region":"Tuvalu","date":"2025-03-10"},{"id":"20250418_ntuijln7g5jeholcrpndithaj8","status":"confirmed","summary":"Good Friday","region":"Tuvalu","date":"2025-04-18"},{"id":"20250419_l8c367nkrr3vm7e784eiu1dej4","status":"confirmed","summary":"Holy Saturday","region":"Tuvalu","date":"2025-04-19"},{"id":"20250420_aor09j1nvrm7jtpfqiv3lp5r08","status":"confirmed","summary":"Easter Sunday","region":"Tuvalu","date":"2025-04-20"},{"id":"20250421_psphhps5qnv8bvfv4up017apb8","status":"confirmed","summary":"Easter Monday","region":"Tuvalu","date":"2025-04-21"},{"id":"20250512_s73ibu6elh4stpvk7cjof2mgd0","status":"confirmed","summary":"Gospel Day","region":"Tuvalu","date":"2025-05-12"},{"id":"20250614_m342u9fcusqda0bhhjol9ancjg","status":"confirmed","summary":"Anniversary of the Birthday of the Sovereign","region":"Tuvalu","date":"2025-06-14"},{"id":"20250804_dogssl2llg7mq2b3qrs2nqa3v4","status":"confirmed","summary":"National Children\'s Day","region":"Tuvalu","date":"2025-08-04"},{"id":"20251001_orbga4968g7sa478j7o06puq38","status":"confirmed","summary":"Tuvalu Day","region":"Tuvalu","date":"2025-10-01"},{"id":"20251002_tr2skbv15q7d7t0egud0ujid5o","status":"confirmed","summary":"Tuvalu Day Holiday","region":"Tuvalu","date":"2025-10-02"},{"id":"20251110_95mbnpr7edrerrrprp2jsdkd1s","status":"confirmed","summary":"Heir to the Throne\'s Birthday","region":"Tuvalu","date":"2025-11-10"},{"id":"20251225_4tkng9mplv4kppa2p64ihbs3ig","status":"confirmed","summary":"Christmas Day","region":"Tuvalu","date":"2025-12-25"},{"id":"20251226_rl2c8jmrqoqfnho92b2jhca820","status":"confirmed","summary":"Boxing Day","region":"Tuvalu","date":"2025-12-26"}],"Tanzania":[{"id":"20240101_qq2adolsl05aprsskihco02vmc","status":"confirmed","summary":"New Year\'s Day","region":"Tanzania","date":"2024-01-01"},{"id":"20240112_3q90jf6breeqigsdobdapcrks8","status":"confirmed","summary":"Zanzibar Revolution Day","region":"Tanzania","date":"2024-01-12"},{"id":"20240312_b5o9kre1buio7ppfbqvbqhjtg0","status":"confirmed","summary":"Ramadan Start","region":"Tanzania","date":"2024-03-12"},{"id":"20240329_9oeb4r1gp2gvcq399llfvtb6uk","status":"confirmed","summary":"Good Friday","region":"Tanzania","date":"2024-03-29"},{"id":"20240331_uf8oogl2dgjstl6ucqu9g78ju4","status":"confirmed","summary":"Easter Sunday","region":"Tanzania","date":"2024-03-31"},{"id":"20240401_0099d8eosbuu6bmqoftfunuljc","status":"confirmed","summary":"Easter Monday","region":"Tanzania","date":"2024-04-01"},{"id":"20240407_8aa65dlvajsdq2abh9c2ukt0tc","status":"confirmed","summary":"Karume Day","region":"Tanzania","date":"2024-04-07"},{"id":"20240410_ss32v31bo4mqmhaj566tiv55u0","status":"confirmed","summary":"Eid el Fitri","region":"Tanzania","date":"2024-04-10"},{"id":"20240411_bsp56vrrg1j8hq3sf90k7m905g","status":"confirmed","summary":"Eid el Fitri Holiday","region":"Tanzania","date":"2024-04-11"},{"id":"20240426_2cd8aua51bmp3qqdv4a1md45hs","status":"confirmed","summary":"Union Day","region":"Tanzania","date":"2024-04-26"},{"id":"20240501_cpckfmp5p4j5d8tqgsapp5s1p0","status":"confirmed","summary":"Worker\'s Day","region":"Tanzania","date":"2024-05-01"},{"id":"20240512_12arnbap57lpd8jcfd4kesjjr0","status":"confirmed","summary":"Mothers\' Day","region":"Tanzania","date":"2024-05-12"},{"id":"20240617_3l0ecdpfioes649tqk21htshtc","status":"confirmed","summary":"Eid al-Adha","region":"Tanzania","date":"2024-06-17"},{"id":"20240707_k2bahb97hneqoruvqpq29plhng","status":"confirmed","summary":"Saba Saba","region":"Tanzania","date":"2024-07-07"},{"id":"20240808_61kv1fkjo8rcnvpu8i4go3a3vo","status":"confirmed","summary":"Farmers\' Day","region":"Tanzania","date":"2024-08-08"},{"id":"20240916_bh1uhu6v38oogs24nq2iapk4hs","status":"confirmed","summary":"Maulid","region":"Tanzania","date":"2024-09-16"},{"id":"20241014_uoigh8df0nt1h50f87lk37c39o","status":"confirmed","summary":"Mwalimu Nyerere Day","region":"Tanzania","date":"2024-10-14"},{"id":"20241209_7p6bop47kt2gkel5ie4og6u02k","status":"confirmed","summary":"Independence Day","region":"Tanzania","date":"2024-12-09"},{"id":"20241224_7nmqt49gm4p2nbi4bh54mk018o","status":"confirmed","summary":"Christmas Eve","region":"Tanzania","date":"2024-12-24"},{"id":"20241225_6jk735000gp4coikgri043h0eg","status":"confirmed","summary":"Christmas Day","region":"Tanzania","date":"2024-12-25"},{"id":"20241226_6blvegjjckmt1pdnc6qn6ifq2s","status":"confirmed","summary":"Boxing Day","region":"Tanzania","date":"2024-12-26"},{"id":"20250101_6qdo4v1hq81e6n0je9bcjmonbo","status":"confirmed","summary":"New Year\'s Day","region":"Tanzania","date":"2025-01-01"},{"id":"20250112_g2v369d6o37246cuut1odoikmo","status":"confirmed","summary":"Zanzibar Revolution Day","region":"Tanzania","date":"2025-01-12"},{"id":"20250301_3vuvtn6mja8nqig971i84ibdt0","status":"confirmed","summary":"Ramadan Start","region":"Tanzania","date":"2025-03-01"},{"id":"20250331_a4s9c8j9806mo3t30f0oskgep0","status":"confirmed","summary":"Eid el Fitri","region":"Tanzania","date":"2025-03-31"},{"id":"20250401_t8gmbr32sbg1h4vgg469qjc93c","status":"confirmed","summary":"Eid el Fitri Holiday","region":"Tanzania","date":"2025-04-01"},{"id":"20250407_1pao83dpju9q2t9ghhvqm97flg","status":"confirmed","summary":"Karume Day","region":"Tanzania","date":"2025-04-07"},{"id":"20250418_ji0aqo7ravq9gdprc12qnqev78","status":"confirmed","summary":"Good Friday","region":"Tanzania","date":"2025-04-18"},{"id":"20250420_8apl1s0frao05nsh4217do5g88","status":"confirmed","summary":"Easter Sunday","region":"Tanzania","date":"2025-04-20"},{"id":"20250421_71d44330sjq1e09q4b1ivuse10","status":"confirmed","summary":"Easter Monday","region":"Tanzania","date":"2025-04-21"},{"id":"20250426_ec63nt39u9fgv7h6uc8e22d9hs","status":"confirmed","summary":"Union Day","region":"Tanzania","date":"2025-04-26"},{"id":"20250501_p0cshild29va4fd64lj73tnh18","status":"confirmed","summary":"Worker\'s Day","region":"Tanzania","date":"2025-05-01"},{"id":"20250511_s74l8ogiphstf0n7051magelt0","status":"confirmed","summary":"Mothers\' Day","region":"Tanzania","date":"2025-05-11"},{"id":"20250607_hb8op4sdb3jm3s09il3u8s8l4s","status":"confirmed","summary":"Eid al-Adha","region":"Tanzania","date":"2025-06-07"},{"id":"20250707_kgepbta237koh7t3li6v2ndp00","status":"confirmed","summary":"Saba Saba","region":"Tanzania","date":"2025-07-07"},{"id":"20250808_on89qaob7cj429k8kouccdfjqk","status":"confirmed","summary":"Farmers\' Day","region":"Tanzania","date":"2025-08-08"},{"id":"20250905_nn7160perju105ft7a068gu8mo","status":"confirmed","summary":"Maulid","region":"Tanzania","date":"2025-09-05"},{"id":"20251014_d32ee9h00gsum35fee85lqnau4","status":"confirmed","summary":"Mwalimu Nyerere Day","region":"Tanzania","date":"2025-10-14"},{"id":"20251209_ugutq2i4lnblhpjffvms80m3ak","status":"confirmed","summary":"Independence Day","region":"Tanzania","date":"2025-12-09"},{"id":"20251224_nbgo5l0l8nsqhfckj0ai9tkagc","status":"confirmed","summary":"Christmas Eve","region":"Tanzania","date":"2025-12-24"},{"id":"20251225_ua13jvrd4ja37ene8ahnht1s84","status":"confirmed","summary":"Christmas Day","region":"Tanzania","date":"2025-12-25"},{"id":"20251226_g3mors79f0gacmqs4g2iuvlius","status":"confirmed","summary":"Boxing Day","region":"Tanzania","date":"2025-12-26"}],"Uganda":[{"id":"20240101_fv8sc3ui9lhfi1vktcq0bkbmjk","status":"confirmed","summary":"New Year","region":"Uganda","date":"2024-01-01"},{"id":"20240126_8enov0iq98qc5o6734ujrh9cvo","status":"confirmed","summary":"Liberation Day","region":"Uganda","date":"2024-01-26"},{"id":"20240216_j5tdi9m7uhm1ort81m26ltul3o","status":"confirmed","summary":"Remembrance of Archbishop Janani Luwum","region":"Uganda","date":"2024-02-16"},{"id":"20240308_k0cb29cblbkg2nus1ui14tngu8","status":"confirmed","summary":"International Women\'s Day","region":"Uganda","date":"2024-03-08"},{"id":"20240311_u2s631lrteq0fc6n14khb2qocc","status":"confirmed","summary":"Ramadan Start","region":"Uganda","date":"2024-03-11"},{"id":"20240329_v1h0e4116ehbogts4lp1hui32g","status":"confirmed","summary":"Good Friday","region":"Uganda","date":"2024-03-29"},{"id":"20240331_njm27fktla9pht1qjc7ab98eos","status":"confirmed","summary":"Easter Sunday","region":"Uganda","date":"2024-03-31"},{"id":"20240401_35n3fcrgfa458p51r949dm0v7g","status":"confirmed","summary":"Easter Monday","region":"Uganda","date":"2024-04-01"},{"id":"20240410_dja955cpn4umhn95j0n8mc4oak","status":"confirmed","summary":"Eid al-Fitr","region":"Uganda","date":"2024-04-10"},{"id":"20240501_144anrcnreatp3bdkciqi0i0t8","status":"confirmed","summary":"Labour Day","region":"Uganda","date":"2024-05-01"},{"id":"20240510_7sjfg376qgpvr7oveuefct2u24","status":"confirmed","summary":"Census Day","region":"Uganda","date":"2024-05-10"},{"id":"20240512_sasbeh7isus1eg3vgpnl8gsg1o","status":"confirmed","summary":"Mother\'s Day","region":"Uganda","date":"2024-05-12"},{"id":"20240603_h6leslsshs9hottd2ktd3ekjdk","status":"confirmed","summary":"Martyr\'s Day","region":"Uganda","date":"2024-06-03"},{"id":"20240609_5cpr223ib0m3le5tlm512njkno","status":"confirmed","summary":"National Heroes Day","region":"Uganda","date":"2024-06-09"},{"id":"20240617_asobq2p9mrfj7pl2q4ita3jlmo","status":"confirmed","summary":"Eid al-Adha","region":"Uganda","date":"2024-06-17"},{"id":"20240621_g6oe2dann6i7hcl9q7iku1kdfk","status":"confirmed","summary":"Father\'s Day","region":"Uganda","date":"2024-06-21"},{"id":"20241009_dne6hc082if7e0dhm2oasvl18k","status":"confirmed","summary":"Independence Day","region":"Uganda","date":"2024-10-09"},{"id":"20241225_42du4qma3oo17br5o9h7ue7dks","status":"confirmed","summary":"Christmas Day","region":"Uganda","date":"2024-12-25"},{"id":"20241226_8retpcehcqtkh6v1a64mnusq8k","status":"confirmed","summary":"Boxing Day","region":"Uganda","date":"2024-12-26"},{"id":"20250101_c0uva11pkmhqj4m21b5lb2dc90","status":"confirmed","summary":"New Year","region":"Uganda","date":"2025-01-01"},{"id":"20250126_17280roen3a0san9h8lnchplnk","status":"confirmed","summary":"Liberation Day","region":"Uganda","date":"2025-01-26"},{"id":"20250216_afd9kase5pjg6mua0ai58d7o2g","status":"confirmed","summary":"Remembrance of Archbishop Janani Luwum","region":"Uganda","date":"2025-02-16"},{"id":"20250301_l8ieevdrh9c9n1g6boa1vj3ndk","status":"confirmed","summary":"Ramadan Start","region":"Uganda","date":"2025-03-01"},{"id":"20250308_lj4kk5bmlj3klaoi0jfrvmucr8","status":"confirmed","summary":"International Women\'s Day","region":"Uganda","date":"2025-03-08"},{"id":"20250331_a78roti1f7kt4vf4o50lpenrr4","status":"confirmed","summary":"Eid al-Fitr","region":"Uganda","date":"2025-03-31"},{"id":"20250418_s1i56ncb5qejr2gg8fl5g2368k","status":"confirmed","summary":"Good Friday","region":"Uganda","date":"2025-04-18"},{"id":"20250420_227bhfla2b5vokitcgt82fulls","status":"confirmed","summary":"Easter Sunday","region":"Uganda","date":"2025-04-20"},{"id":"20250421_gm1p57091ml1on73n8jsptqgmk","status":"confirmed","summary":"Easter Monday","region":"Uganda","date":"2025-04-21"},{"id":"20250501_k625if1oak1m93hcticcrlegng","status":"confirmed","summary":"Labour Day","region":"Uganda","date":"2025-05-01"},{"id":"20250511_e2k4gel8prd7l53nm3m3uhr104","status":"confirmed","summary":"Mother\'s Day","region":"Uganda","date":"2025-05-11"},{"id":"20250603_i2928l80i6gpvmtsd3nimdktos","status":"confirmed","summary":"Martyr\'s Day","region":"Uganda","date":"2025-06-03"},{"id":"20250607_jevkv3df86jpia00uhptmem8gc","status":"confirmed","summary":"Eid al-Adha","region":"Uganda","date":"2025-06-07"},{"id":"20250609_0una1me85kvpt8qorhdq0vba1o","status":"confirmed","summary":"National Heroes Day","region":"Uganda","date":"2025-06-09"},{"id":"20250621_86tcg78rflnk5k8l62303681so","status":"confirmed","summary":"Father\'s Day","region":"Uganda","date":"2025-06-21"},{"id":"20251009_keq2q4bgk7t595th3u6mcmbu94","status":"confirmed","summary":"Independence Day","region":"Uganda","date":"2025-10-09"},{"id":"20251225_t6p9ld59bnvrm5fmfhpl6g1tjg","status":"confirmed","summary":"Christmas Day","region":"Uganda","date":"2025-12-25"},{"id":"20251226_7euhl8tme4sbms3kgk16ribkbs","status":"confirmed","summary":"Boxing Day","region":"Uganda","date":"2025-12-26"}],"United Kingdom":[{"id":"20240101_5ojgm3s9gnr9bvcj26jn7mcoc4","status":"confirmed","summary":"New Year\'s Day","region":"United Kingdom","date":"2024-01-01"},{"id":"20240102_34nngp6fv9haoj2t0eke4jelb4","status":"confirmed","summary":"2nd January (Scotland)","region":"United Kingdom","date":"2024-01-02"},{"id":"20240105_fvjq0n8emb13nnvnrr6c1qnvlo","status":"confirmed","summary":"Twelfth Night","region":"United Kingdom","date":"2024-01-05"},{"id":"20240213_cupvpv3u6u5jrglc47hv76q0ig","status":"confirmed","summary":"Carnival / Shrove Tuesday / Pancake Day","region":"United Kingdom","date":"2024-02-13"},{"id":"20240214_3ai8775a4ce8frr2uf78qb25ko","status":"confirmed","summary":"Valentine\'s Day","region":"United Kingdom","date":"2024-02-14"},{"id":"20240301_2o6qsn5hts3lc6nj9026tgpd4g","status":"confirmed","summary":"St. David\'s Day (Wales)","region":"United Kingdom","date":"2024-03-01"},{"id":"20240310_7u7cnqp0c1l1ncjducct8rpd7g","status":"confirmed","summary":"Mother\'s Day","region":"United Kingdom","date":"2024-03-10"},{"id":"20240317_uumds728i2sqpki2bm7t7tpurk","status":"confirmed","summary":"St Patrick\'s Day (Northern Ireland)","region":"United Kingdom","date":"2024-03-17"},{"id":"20240318_mtfpktschn8dqnhqlr5dnhepm4","status":"confirmed","summary":"Day off for St Patrick\'s Day (Northern Ireland)","region":"United Kingdom","date":"2024-03-18"},{"id":"20240329_gevb8jhs5orcfd37kggs1t8m44","status":"confirmed","summary":"Good Friday","region":"United Kingdom","date":"2024-03-29"},{"id":"20240331_6td5n9qv1uopvfgpdn1qn3ik9o","status":"confirmed","summary":"Easter Sunday","region":"United Kingdom","date":"2024-03-31"},{"id":"20240331_jj0hlmcc50lt5esvt6ure693tk","status":"confirmed","summary":"Daylight Saving Time starts","region":"United Kingdom","date":"2024-03-31"},{"id":"20240401_dke3u6bjqnejrjpqd7nupqcstk","status":"confirmed","summary":"Easter Monday (regional holiday)","region":"United Kingdom","date":"2024-04-01"},{"id":"20240423_o1r0m56f43v5njn9k0qr4a8qfs","status":"confirmed","summary":"St. George\'s Day","region":"United Kingdom","date":"2024-04-23"},{"id":"20240506_q8s0k0qf2vdljaactb482noqc4","status":"confirmed","summary":"Early May Bank Holiday","region":"United Kingdom","date":"2024-05-06"},{"id":"20240527_o5ou0l88q015dvea6hn9pejkm8","status":"confirmed","summary":"Spring Bank Holiday","region":"United Kingdom","date":"2024-05-27"},{"id":"20240615_ocm0dqa60vurtkbn15c1ad5v4o","status":"confirmed","summary":"King\'s Birthday","region":"United Kingdom","date":"2024-06-15"},{"id":"20240616_ln7a9g4ma3hqslg7s4e2uo9cjc","status":"confirmed","summary":"Father\'s Day","region":"United Kingdom","date":"2024-06-16"},{"id":"20240712_bd006nb8oihofi8haqo3g669rs","status":"confirmed","summary":"Battle of the Boyne (Northern Ireland)","region":"United Kingdom","date":"2024-07-12"},{"id":"20240805_vnq6rpae4tigbnv5lv6sql0e74","status":"confirmed","summary":"Summer Bank Holiday (Scotland)","region":"United Kingdom","date":"2024-08-05"},{"id":"20240826_s4eo5brfinq1tm5hu7b5dc4jno","status":"confirmed","summary":"Summer Bank Holiday (regional holiday)","region":"United Kingdom","date":"2024-08-26"},{"id":"20241027_vhlvarhb4opvjuaumne6i10nqs","status":"confirmed","summary":"Daylight Saving Time ends","region":"United Kingdom","date":"2024-10-27"},{"id":"20241031_h7ilroqjfv8vdq7650n9dbcg0g","status":"confirmed","summary":"Halloween","region":"United Kingdom","date":"2024-10-31"},{"id":"20241105_a2334vlhfe0irt95salksvi7ac","status":"confirmed","summary":"Guy Fawkes Day","region":"United Kingdom","date":"2024-11-05"},{"id":"20241110_jv2c7le5na698ba0kdhb22p60c","status":"confirmed","summary":"Remembrance Sunday","region":"United Kingdom","date":"2024-11-10"},{"id":"20241130_q405luln7j5jitn1gvpnmrto4g","status":"confirmed","summary":"St Andrew\'s Day (Scotland)","region":"United Kingdom","date":"2024-11-30"},{"id":"20241202_nup3ibjv87h33221vvgrr3p634","status":"confirmed","summary":"St Andrew\'s Day observed (Scotland)","region":"United Kingdom","date":"2024-12-02"},{"id":"20241224_hh884sqcatnseq5re164353qeg","status":"confirmed","summary":"Christmas Eve","region":"United Kingdom","date":"2024-12-24"},{"id":"20241225_t3r57rttrh86c1mgsv8rs73btk","status":"confirmed","summary":"Christmas Day","region":"United Kingdom","date":"2024-12-25"},{"id":"20241226_vc4chodhgk61qorhbqktg8di34","status":"confirmed","summary":"Boxing Day","region":"United Kingdom","date":"2024-12-26"},{"id":"20241231_4frak39oa2375e34envdhflaqg","status":"confirmed","summary":"New Year\'s Eve","region":"United Kingdom","date":"2024-12-31"},{"id":"20250101_7nap1h3k0809efgrek66h9tbj0","status":"confirmed","summary":"New Year\'s Day","region":"United Kingdom","date":"2025-01-01"},{"id":"20250102_fj2b4n6umtdrekbhceq9spcmlc","status":"confirmed","summary":"2nd January (Scotland)","region":"United Kingdom","date":"2025-01-02"},{"id":"20250105_epmp8kud8n7mm4utum93urd08c","status":"confirmed","summary":"Twelfth Night","region":"United Kingdom","date":"2025-01-05"},{"id":"20250214_6tusvf0m7l1ku5m31l6kn9pkm4","status":"confirmed","summary":"Valentine\'s Day","region":"United Kingdom","date":"2025-02-14"},{"id":"20250301_ub3v940o1dfb2f4va945n3ggfs","status":"confirmed","summary":"St. David\'s Day (Wales)","region":"United Kingdom","date":"2025-03-01"},{"id":"20250304_4cu7g4qtc8ot992rb0bsfl1cl4","status":"confirmed","summary":"Carnival / Shrove Tuesday / Pancake Day","region":"United Kingdom","date":"2025-03-04"},{"id":"20250317_qla93vi3b30u8t094oee702c6c","status":"confirmed","summary":"St Patrick\'s Day (Northern Ireland)","region":"United Kingdom","date":"2025-03-17"},{"id":"20250330_5238o337ckkm2hp49ku7dj9rvk","status":"confirmed","summary":"Daylight Saving Time starts","region":"United Kingdom","date":"2025-03-30"},{"id":"20250330_gsmfo9fanqhbttma3qae2bubig","status":"confirmed","summary":"Mother\'s Day","region":"United Kingdom","date":"2025-03-30"},{"id":"20250418_m43ffoqtuab780n6u2au8nk5s0","status":"confirmed","summary":"Good Friday","region":"United Kingdom","date":"2025-04-18"},{"id":"20250420_2hdsh0dnge3ej2k8ver8uik978","status":"confirmed","summary":"Easter Sunday","region":"United Kingdom","date":"2025-04-20"},{"id":"20250421_v9tt0oq9q7oa7c8174hnnkl0do","status":"confirmed","summary":"Easter Monday (regional holiday)","region":"United Kingdom","date":"2025-04-21"},{"id":"20250423_09f8hbu6l73j9oi37ldh8ta4g4","status":"confirmed","summary":"St. George\'s Day","region":"United Kingdom","date":"2025-04-23"},{"id":"20250505_itvetdnt3iptmpngafqa3upaa0","status":"confirmed","summary":"Early May Bank Holiday","region":"United Kingdom","date":"2025-05-05"},{"id":"20250526_44836kaun1upck0fgouh5p4k64","status":"confirmed","summary":"Spring Bank Holiday","region":"United Kingdom","date":"2025-05-26"},{"id":"20250615_u42ohk6umsl3bn014g6vp4euvk","status":"confirmed","summary":"Father\'s Day","region":"United Kingdom","date":"2025-06-15"},{"id":"20250621_2pbjpk49o5urr8k7bcllah8rkc","status":"confirmed","summary":"King\'s Birthday","region":"United Kingdom","date":"2025-06-21"},{"id":"20250712_lhouvm3fh5gavtqhth9gvkvjgs","status":"confirmed","summary":"Battle of the Boyne (Northern Ireland)","region":"United Kingdom","date":"2025-07-12"},{"id":"20250714_ohijkpuogvgrfdnrtm6keoskgk","status":"confirmed","summary":"Battle of the Boyne observed (Northern Ireland)","region":"United Kingdom","date":"2025-07-14"},{"id":"20250804_887to9be1nn9ibditpdj2nh3o4","status":"confirmed","summary":"Summer Bank Holiday (Scotland)","region":"United Kingdom","date":"2025-08-04"},{"id":"20250825_31oejsp8cpedp49kfi3eaml818","status":"confirmed","summary":"Summer Bank Holiday (regional holiday)","region":"United Kingdom","date":"2025-08-25"},{"id":"20251026_2fhmqjjvldgt33dfe0g7reldr8","status":"confirmed","summary":"Daylight Saving Time ends","region":"United Kingdom","date":"2025-10-26"},{"id":"20251031_9tu290mribb4lf7sffii07ar80","status":"confirmed","summary":"Halloween","region":"United Kingdom","date":"2025-10-31"},{"id":"20251105_vjko8e9f92s9gmgtbgehdj6vh4","status":"confirmed","summary":"Guy Fawkes Day","region":"United Kingdom","date":"2025-11-05"},{"id":"20251109_1q5o8v3bjgmgpdvupr5um15o88","status":"confirmed","summary":"Remembrance Sunday","region":"United Kingdom","date":"2025-11-09"},{"id":"20251130_5acrcl7mtvnk6bgk1qhov66to0","status":"confirmed","summary":"St Andrew\'s Day (Scotland)","region":"United Kingdom","date":"2025-11-30"},{"id":"20251201_75657i9a95ajon7c8d3qdnplk0","status":"confirmed","summary":"St Andrew\'s Day observed (Scotland)","region":"United Kingdom","date":"2025-12-01"},{"id":"20251224_2smm2keqg9jmejrecomgemcmjs","status":"confirmed","summary":"Christmas Eve","region":"United Kingdom","date":"2025-12-24"},{"id":"20251225_9d61spklbj8gekan9umt82ni8o","status":"confirmed","summary":"Christmas Day","region":"United Kingdom","date":"2025-12-25"},{"id":"20251226_vpkdc2icsm36hbf3f1mq53aiu4","status":"confirmed","summary":"Boxing Day","region":"United Kingdom","date":"2025-12-26"},{"id":"20251231_vadr557v5ndchs2rmqqrq5duis","status":"confirmed","summary":"New Year\'s Eve","region":"United Kingdom","date":"2025-12-31"}],"Ukraine":[{"id":"20240101_nghg3fel7dqh7q0gp16o05cj90","status":"confirmed","summary":"New Year\'s Day (Suspended)","region":"Ukraine","date":"2024-01-01"},{"id":"20240106_i2c0fvf1im3ddosmpl6m0833pg","status":"confirmed","summary":"Epiphany","region":"Ukraine","date":"2024-01-06"},{"id":"20240114_34smf6asaflhqddcvjgo5uqp70","status":"confirmed","summary":"Orthodox New Year","region":"Ukraine","date":"2024-01-14"},{"id":"20240214_8s0tm35p7arvalm38ea0b0j9fk","status":"confirmed","summary":"Valentine\'s Day","region":"Ukraine","date":"2024-02-14"},{"id":"20240308_abb5f7s152qb3m217spaqvsp2c","status":"confirmed","summary":"International Women\'s Day (Suspended)","region":"Ukraine","date":"2024-03-08"},{"id":"20240331_q8jtkg3iu80l9clbbi17qo6to0","status":"confirmed","summary":"Daylight Saving Time starts","region":"Ukraine","date":"2024-03-31"},{"id":"20240401_39kbftap4fregcpa9flev5a840","status":"confirmed","summary":"April Fools","region":"Ukraine","date":"2024-04-01"},{"id":"20240501_e7qmk4b0800qvvg4ulbk7vvdqo","status":"confirmed","summary":"Labor Day (Suspended)","region":"Ukraine","date":"2024-05-01"},{"id":"20240505_d4b0imk83m0qdqklbqo1cfe05s","status":"confirmed","summary":"Orthodox Easter Day (Suspended)","region":"Ukraine","date":"2024-05-05"},{"id":"20240508_frl9lbsv7s5kquijujk2hti9r4","status":"confirmed","summary":"Victory Day (Suspended)","region":"Ukraine","date":"2024-05-08"},{"id":"20240509_2g3tmhaq6j3jkq3cshjifej8jk","status":"confirmed","summary":"Europe Day","region":"Ukraine","date":"2024-05-09"},{"id":"20240512_78b0bim5bm1bmcqmb99ptsti0k","status":"confirmed","summary":"Mother\'s Day","region":"Ukraine","date":"2024-05-12"},{"id":"20240515_eh7kt584p7lo6ae1d6rv6rnei0","status":"confirmed","summary":"Family Day","region":"Ukraine","date":"2024-05-15"},{"id":"20240526_08mnffonnporilnb3fhgevuh48","status":"confirmed","summary":"Kyiv Day","region":"Ukraine","date":"2024-05-26"},{"id":"20240601_4dkf23n0ds63ivbabkvmks9e88","status":"confirmed","summary":"Children\'s Day","region":"Ukraine","date":"2024-06-01"},{"id":"20240606_agq3m1i2l0b64jmod519lsp8b8","status":"confirmed","summary":"Journalists\' Day","region":"Ukraine","date":"2024-06-06"},{"id":"20240616_k4t8o404ibrubfik8qobape264","status":"confirmed","summary":"Fathers\' Day","region":"Ukraine","date":"2024-06-16"},{"id":"20240622_lp5frv2du6anne0kh0mlcuoumg","status":"confirmed","summary":"Day of Mourning and Commemoration of War Victims","region":"Ukraine","date":"2024-06-22"},{"id":"20240623_lrl3r057mi1j4khfe02vl110h0","status":"confirmed","summary":"Orthodox Pentecost (Suspended)","region":"Ukraine","date":"2024-06-23"},{"id":"20240628_4sdj64us0e7jsiahsa66uddj3g","status":"confirmed","summary":"Constitution Day (Suspended)","region":"Ukraine","date":"2024-06-28"},{"id":"20240706_s8l40940lfj0l4s1enal99l1ds","status":"confirmed","summary":"Kupala Night","region":"Ukraine","date":"2024-07-06"},{"id":"20240707_5ah71cd46nijnsvnkeu2jcem28","status":"confirmed","summary":"Navy Day","region":"Ukraine","date":"2024-07-07"},{"id":"20240715_6kjfctidgksaambf9pi9tka7gg","status":"confirmed","summary":"Ukrainian Statehood Day","region":"Ukraine","date":"2024-07-15"},{"id":"20240728_0uujfh5j4lafnotsl016qpl77k","status":"confirmed","summary":"Baptism of Kyivan Rus","region":"Ukraine","date":"2024-07-28"},{"id":"20240824_tpqdgv4qjg6sj6looehbtsqg8c","status":"confirmed","summary":"Independence Day (Suspended)","region":"Ukraine","date":"2024-08-24"},{"id":"20241001_11dsa8ovbugtkktdh50v18fjds","status":"confirmed","summary":"Day of Defenders and Defenders of Ukraine (Suspended)","region":"Ukraine","date":"2024-10-01"},{"id":"20241027_bbbre35uaj1smba5q0ksvt1h34","status":"confirmed","summary":"Daylight Saving Time ends","region":"Ukraine","date":"2024-10-27"},{"id":"20241028_7tjpsqusr8gls13ijgsgl6gc3s","status":"confirmed","summary":"Day of Liberation of Ukraine from Fascist Invaders","region":"Ukraine","date":"2024-10-28"},{"id":"20241109_jarvjs21v2rjtro26tsm917f7o","status":"confirmed","summary":"Cultural Workers and Folk Artists Day","region":"Ukraine","date":"2024-11-09"},{"id":"20241121_3d0mm56ofn15tpabaii3vl4qck","status":"confirmed","summary":"Dignity and Freedom Day","region":"Ukraine","date":"2024-11-21"},{"id":"20241206_1bc2leq57d0pd0cbaa9bm9gbn8","status":"confirmed","summary":"St. Nicholas Day","region":"Ukraine","date":"2024-12-06"},{"id":"20241206_ap74r9jm0m6aqaa982b7ppbiek","status":"confirmed","summary":"Army Day","region":"Ukraine","date":"2024-12-06"},{"id":"20241225_meoae3ppcgpfhshkh9en87sd7c","status":"confirmed","summary":"Christmas Day","region":"Ukraine","date":"2024-12-25"},{"id":"20250101_is573ve0r8vqn9915ib51neo2k","status":"confirmed","summary":"New Year\'s Day (Suspended)","region":"Ukraine","date":"2025-01-01"},{"id":"20250106_3m4crk924oaj7llefkut7t9md0","status":"confirmed","summary":"Epiphany","region":"Ukraine","date":"2025-01-06"},{"id":"20250114_o9lmg36fnhggu05lsh96m22mss","status":"confirmed","summary":"Orthodox New Year","region":"Ukraine","date":"2025-01-14"},{"id":"20250214_1g9p05iq5uv9nl0k856bl65d7o","status":"confirmed","summary":"Valentine\'s Day","region":"Ukraine","date":"2025-02-14"},{"id":"20250308_gejg2je68q6ptsbb4a7qtvqbps","status":"confirmed","summary":"International Women\'s Day (Suspended)","region":"Ukraine","date":"2025-03-08"},{"id":"20250310_a92elrqt8bove4tfde7db6brlc","status":"confirmed","summary":"International Women\'s Day (Suspended) observed","region":"Ukraine","date":"2025-03-10"},{"id":"20250330_qvg3bvq3uj7m3cdtu1gnjd7dk0","status":"confirmed","summary":"Daylight Saving Time starts","region":"Ukraine","date":"2025-03-30"},{"id":"20250401_gt8fu9f48jtvlegj74tilttjm4","status":"confirmed","summary":"April Fools","region":"Ukraine","date":"2025-04-01"},{"id":"20250420_bhvpapagcilg9fpc61qfb53jnk","status":"confirmed","summary":"Orthodox Easter Day (Suspended)","region":"Ukraine","date":"2025-04-20"},{"id":"20250501_ekac6l7g8srfdnc1q1pj9d5mpo","status":"confirmed","summary":"Labor Day (Suspended)","region":"Ukraine","date":"2025-05-01"},{"id":"20250508_gp1rq8sgnjdinrmepspd0j9gu0","status":"confirmed","summary":"Victory Day (Suspended)","region":"Ukraine","date":"2025-05-08"},{"id":"20250509_r3vpo0htrjcu6pvck8r864t5pc","status":"confirmed","summary":"Europe Day","region":"Ukraine","date":"2025-05-09"},{"id":"20250511_dnhccl4v1jd4fme25hf2s90aj8","status":"confirmed","summary":"Mother\'s Day","region":"Ukraine","date":"2025-05-11"},{"id":"20250515_v60ihhdje04f9ebjcloug5fpdc","status":"confirmed","summary":"Family Day","region":"Ukraine","date":"2025-05-15"},{"id":"20250525_fh422sqes12t17aqq2p2tomgm4","status":"confirmed","summary":"Kyiv Day","region":"Ukraine","date":"2025-05-25"},{"id":"20250601_74qjh3bmeu1svmbvh2s9gsuavc","status":"confirmed","summary":"Children\'s Day","region":"Ukraine","date":"2025-06-01"},{"id":"20250606_bfjdtbv0idjb75ekk7v8qlti4c","status":"confirmed","summary":"Journalists\' Day","region":"Ukraine","date":"2025-06-06"},{"id":"20250608_cu1v8d5llkdv186v8g0fgvouv8","status":"confirmed","summary":"Orthodox Pentecost (Suspended)","region":"Ukraine","date":"2025-06-08"},{"id":"20250615_rfvmdavvhsdocupm1qbsl0evpc","status":"confirmed","summary":"Fathers\' Day","region":"Ukraine","date":"2025-06-15"},{"id":"20250622_drfm8sfehoef3o77b75pmlcka4","status":"confirmed","summary":"Day of Mourning and Commemoration of War Victims","region":"Ukraine","date":"2025-06-22"},{"id":"20250628_oeot1e18mnlb3k5mo9fobbl6uk","status":"confirmed","summary":"Constitution Day (Suspended)","region":"Ukraine","date":"2025-06-28"},{"id":"20250630_fm6jrs5c2ptr794jvg24530404","status":"confirmed","summary":"Constitution Day (Suspended) observed","region":"Ukraine","date":"2025-06-30"},{"id":"20250706_ldb0g7qkik2sns6lchem9hnong","status":"confirmed","summary":"Navy Day","region":"Ukraine","date":"2025-07-06"},{"id":"20250706_qjqrrl0b0iogh4s227jqkl9pcs","status":"confirmed","summary":"Kupala Night","region":"Ukraine","date":"2025-07-06"},{"id":"20250715_f5vach4i6b59knreqrki3a2a5o","status":"confirmed","summary":"Ukrainian Statehood Day","region":"Ukraine","date":"2025-07-15"},{"id":"20250728_rpc0feunpdfts9fc9uu1piqc7g","status":"confirmed","summary":"Baptism of Kyivan Rus","region":"Ukraine","date":"2025-07-28"},{"id":"20250824_pqmn4jl9i5gjdegsvmm9l50n38","status":"confirmed","summary":"Independence Day (Suspended)","region":"Ukraine","date":"2025-08-24"},{"id":"20250825_m6k54mis7h8ck0eh3sv64403hg","status":"confirmed","summary":"Independence Day (Suspended) observed","region":"Ukraine","date":"2025-08-25"},{"id":"20251001_1q8bh336la78hidtg30i2ss7r4","status":"confirmed","summary":"Day of Defenders and Defenders of Ukraine (Suspended)","region":"Ukraine","date":"2025-10-01"},{"id":"20251026_qbphu4q846rqmt3eqlpcnoesc4","status":"confirmed","summary":"Daylight Saving Time ends","region":"Ukraine","date":"2025-10-26"},{"id":"20251028_hf1uijnbv3eftfjor50mjk0ojs","status":"confirmed","summary":"Day of Liberation of Ukraine from Fascist Invaders","region":"Ukraine","date":"2025-10-28"},{"id":"20251109_vp85r60lehnhgsakff8853q0ns","status":"confirmed","summary":"Cultural Workers and Folk Artists Day","region":"Ukraine","date":"2025-11-09"},{"id":"20251121_v2brdpqtqug8eqd7d8dlh0dav8","status":"confirmed","summary":"Dignity and Freedom Day","region":"Ukraine","date":"2025-11-21"},{"id":"20251206_gdkkkarjtrh9pbcnc7u32vaivo","status":"confirmed","summary":"Army Day","region":"Ukraine","date":"2025-12-06"},{"id":"20251206_qjb8ofdfj2e20i8beurn7ap6pg","status":"confirmed","summary":"St. Nicholas Day","region":"Ukraine","date":"2025-12-06"},{"id":"20251225_jtkmrjbf3s8j05tjhjitlm9j50","status":"confirmed","summary":"Christmas Day","region":"Ukraine","date":"2025-12-25"}],"United States":[{"id":"20240101_du130vrp9iqufsbsbg8q8gksj4","status":"confirmed","summary":"New Year\'s Day","region":"United States","date":"2024-01-01"},{"id":"20240115_21lb65quveasv9rdjuj8vm6t90","status":"confirmed","summary":"Martin Luther King Jr. Day","region":"United States","date":"2024-01-15"},{"id":"20240201_gac2gdq2u0leffh81o0dvic8q0","status":"confirmed","summary":"First Day of Black History Month","region":"United States","date":"2024-02-01"},{"id":"20240214_kr7ues1sec0hd6bje9f7p0sigs","status":"confirmed","summary":"Valentine\'s Day","region":"United States","date":"2024-02-14"},{"id":"20240219_fdsm9mun0m26b4mo9seeoj6a1s","status":"confirmed","summary":"Presidents\' Day","region":"United States","date":"2024-02-19"},{"id":"20240301_i6bpl6l0barhift66selk9q748","status":"confirmed","summary":"First Day of Women\'s History Month","region":"United States","date":"2024-03-01"},{"id":"20240310_a2coml76t7b3dgirf4a3mu4fj4","status":"confirmed","summary":"Daylight Saving Time starts","region":"United States","date":"2024-03-10"},{"id":"20240317_9aqs8hqqme85rpqle5pak2ccfo","status":"confirmed","summary":"St. Patrick\'s Day","region":"United States","date":"2024-03-17"},{"id":"20240331_degnvguoo2f14v2nkqo2dqeft4","status":"confirmed","summary":"Easter Sunday","region":"United States","date":"2024-03-31"},{"id":"20240401_qecgsj7jli03q12nhh5ugilt9s","status":"confirmed","summary":"Easter Monday","region":"United States","date":"2024-04-01"},{"id":"20240415_4jnf3pg8utn0trfn0gmcn372vs","status":"confirmed","summary":"Tax Day","region":"United States","date":"2024-04-15"},{"id":"20240501_0tajr6v4vn45a4n77akmg8ka88","status":"confirmed","summary":"First Day of Asian Pacific American Heritage Month","region":"United States","date":"2024-05-01"},{"id":"20240505_ialbsasrb3ub6fok8t0o3cgdsc","status":"confirmed","summary":"Cinco de Mayo","region":"United States","date":"2024-05-05"},{"id":"20240512_b6u83mj4k696s82dvo11im8cus","status":"confirmed","summary":"Mother\'s Day","region":"United States","date":"2024-05-12"},{"id":"20240527_q7amo1k78c2lb4pr0ojik11lbs","status":"confirmed","summary":"Memorial Day","region":"United States","date":"2024-05-27"},{"id":"20240601_fqptupoq3veldl0jd4mcoo66ks","status":"confirmed","summary":"First Day of LGBTQ+ Pride Month","region":"United States","date":"2024-06-01"},{"id":"20240614_mmk5q2bq0i0n4b47a5s6pes9tk","status":"confirmed","summary":"Flag Day","region":"United States","date":"2024-06-14"},{"id":"20240616_ut0m9dehf0k1bj01ogc1p60lj4","status":"confirmed","summary":"Father\'s Day","region":"United States","date":"2024-06-16"},{"id":"20240619_jttg0b24s02pc37i095rilaefo","status":"confirmed","summary":"Juneteenth","region":"United States","date":"2024-06-19"},{"id":"20240704_aabco6sf136p42v1mjvld3utfo","status":"confirmed","summary":"Independence Day","region":"United States","date":"2024-07-04"},{"id":"20240902_0kqhkubl4i4lcfek6uhd05i23o","status":"confirmed","summary":"Labor Day","region":"United States","date":"2024-09-02"},{"id":"20240915_2o4ggikrnf402jg8u00g28fih0","status":"confirmed","summary":"First Day of Hispanic Heritage Month","region":"United States","date":"2024-09-15"},{"id":"20241014_82crgrho0ln4amrlt6qko1sgs4","status":"confirmed","summary":"Indigenous Peoples\' Day","region":"United States","date":"2024-10-14"},{"id":"20241014_n751hunq0gtd29c5iagjdgds2k","status":"confirmed","summary":"Columbus Day","region":"United States","date":"2024-10-14"},{"id":"20241031_umsmgk1u9krlgnus3uue5d5oj8","status":"confirmed","summary":"Halloween","region":"United States","date":"2024-10-31"},{"id":"20241101_i0ah5hmrsdu0o3b15a3oe3h2l4","status":"confirmed","summary":"First Day of American Indian Heritage Month","region":"United States","date":"2024-11-01"},{"id":"20241103_22hngrlk5bv5773vqi4vhq7e88","status":"confirmed","summary":"Daylight Saving Time ends","region":"United States","date":"2024-11-03"},{"id":"20241105_6l53p8a0t7ll53d80fgtgqnl1o","status":"confirmed","summary":"Election Day (General Election)","region":"United States","date":"2024-11-05"},{"id":"20241111_8ab7b5tg01ghdu8ufobkduimfk","status":"confirmed","summary":"Veterans Day","region":"United States","date":"2024-11-11"},{"id":"20241128_neskrnakebc2ibde6vv48k6is0","status":"confirmed","summary":"Thanksgiving Day","region":"United States","date":"2024-11-28"},{"id":"20241129_v2bnihterht2aflp4u7vhv8igg","status":"confirmed","summary":"Native American Heritage Day","region":"United States","date":"2024-11-29"},{"id":"20241224_80knge169vnc9lnl876nujm0q4","status":"confirmed","summary":"Christmas Eve","region":"United States","date":"2024-12-24"},{"id":"20241225_l4sgjf35036fkj1hmu8akhmdpg","status":"confirmed","summary":"Christmas Day","region":"United States","date":"2024-12-25"},{"id":"20241231_f4ei4a07181bejhr0f1lk5o43c","status":"confirmed","summary":"New Year\'s Eve","region":"United States","date":"2024-12-31"},{"id":"20250101_nk1a3pedjs477mv6078bjaman0","status":"confirmed","summary":"New Year\'s Day","region":"United States","date":"2025-01-01"},{"id":"20250120_9k36h6m8rrcoeco82jhcl43sg8","status":"confirmed","summary":"Martin Luther King Jr. Day","region":"United States","date":"2025-01-20"},{"id":"20250120_eo69r8u008v2663tu6hb0bk3ik","status":"confirmed","summary":"Inauguration Day (regional holiday)","region":"United States","date":"2025-01-20"},{"id":"20250201_tq0un4nb578tlh639ohttgob7c","status":"confirmed","summary":"First Day of Black History Month","region":"United States","date":"2025-02-01"},{"id":"20250214_7lm2460jok8f5aj5i7ng2rbvt8","status":"confirmed","summary":"Valentine\'s Day","region":"United States","date":"2025-02-14"},{"id":"20250217_dh9170r602b6q5392sjgt4rgpo","status":"confirmed","summary":"Presidents\' Day","region":"United States","date":"2025-02-17"},{"id":"20250301_pu0srfdkprlkfqp37jl2eo2aak","status":"confirmed","summary":"First Day of Women\'s History Month","region":"United States","date":"2025-03-01"},{"id":"20250309_n1022oeiugmb7umq7jmn5tacq8","status":"confirmed","summary":"Daylight Saving Time starts","region":"United States","date":"2025-03-09"},{"id":"20250317_lf7s6vredqqb8fpc2sslsd1mi4","status":"confirmed","summary":"St. Patrick\'s Day","region":"United States","date":"2025-03-17"},{"id":"20250415_the2tch527n0il65fujh73ave8","status":"confirmed","summary":"Tax Day","region":"United States","date":"2025-04-15"},{"id":"20250420_f2lv1gb436o1f038c37ip1p5bs","status":"confirmed","summary":"Easter Sunday","region":"United States","date":"2025-04-20"},{"id":"20250421_qg7jhv2h07qcc0eqag51n7gtl0","status":"confirmed","summary":"Easter Monday","region":"United States","date":"2025-04-21"},{"id":"20250501_hr39eu9q2gidctcplk82b4t9ec","status":"confirmed","summary":"First Day of Asian Pacific American Heritage Month","region":"United States","date":"2025-05-01"},{"id":"20250505_pgnqf1o9n8a3ineh9drvcq0k6k","status":"confirmed","summary":"Cinco de Mayo","region":"United States","date":"2025-05-05"},{"id":"20250511_ankvnu0kb5k19ebpa95aehtfi4","status":"confirmed","summary":"Mother\'s Day","region":"United States","date":"2025-05-11"},{"id":"20250526_qlkgutkebbsf7o0dfqq0q7pthk","status":"confirmed","summary":"Memorial Day","region":"United States","date":"2025-05-26"},{"id":"20250601_6s5qk7f2g56entokgkh1u2ngv4","status":"confirmed","summary":"First Day of LGBTQ+ Pride Month","region":"United States","date":"2025-06-01"},{"id":"20250614_91omq3kuuhbodle3mqdj5ffdec","status":"confirmed","summary":"Flag Day","region":"United States","date":"2025-06-14"},{"id":"20250615_329ao24lpl9kb99n980ajfd404","status":"confirmed","summary":"Father\'s Day","region":"United States","date":"2025-06-15"},{"id":"20250619_mbgkqum7215ifhkbodc3hdk10c","status":"confirmed","summary":"Juneteenth","region":"United States","date":"2025-06-19"},{"id":"20250704_6qvd3ck8nbv36sk6kv00v7rta8","status":"confirmed","summary":"Independence Day","region":"United States","date":"2025-07-04"},{"id":"20250901_1b89t06jqp0mlpjvqarh1qt3u4","status":"confirmed","summary":"Labor Day","region":"United States","date":"2025-09-01"},{"id":"20250915_mtdr188iabvu0vatpvhtifd4t8","status":"confirmed","summary":"First Day of Hispanic Heritage Month","region":"United States","date":"2025-09-15"},{"id":"20251013_e2c04lqs33r6ir685elhp3t26g","status":"confirmed","summary":"Indigenous Peoples\' Day","region":"United States","date":"2025-10-13"},{"id":"20251013_vvo4gu80o5vms371qkeer29pss","status":"confirmed","summary":"Columbus Day","region":"United States","date":"2025-10-13"},{"id":"20251031_p5p1rs2gm89tljiknqp8a0iq8c","status":"confirmed","summary":"Halloween","region":"United States","date":"2025-10-31"},{"id":"20251101_7jl8t3oat9e89hur0s9pm7e8rc","status":"confirmed","summary":"First Day of American Indian Heritage Month","region":"United States","date":"2025-11-01"},{"id":"20251102_kephbhufhpmhj29mlubi3s7s8c","status":"confirmed","summary":"Daylight Saving Time ends","region":"United States","date":"2025-11-02"},{"id":"20251104_nhe2dd4u1t4al0t5so8ksuhd64","status":"confirmed","summary":"Election Day","region":"United States","date":"2025-11-04"},{"id":"20251111_0tm251hf1c7lieoqq2upltoni0","status":"confirmed","summary":"Veterans Day","region":"United States","date":"2025-11-11"},{"id":"20251127_matb0oh3lh4tedna0lc9bvt3ig","status":"confirmed","summary":"Thanksgiving Day","region":"United States","date":"2025-11-27"},{"id":"20251128_61qdu0uvbkjlept483olkahqck","status":"confirmed","summary":"Native American Heritage Day","region":"United States","date":"2025-11-28"},{"id":"20251224_a0o2f90rvvia16i3n49qbmuiq8","status":"confirmed","summary":"Christmas Eve","region":"United States","date":"2025-12-24"},{"id":"20251225_o7pfptda2p7u5bp4tsl43734vc","status":"confirmed","summary":"Christmas Day","region":"United States","date":"2025-12-25"},{"id":"20251231_h8s2poqecuqdabu43ccj1qt1qg","status":"confirmed","summary":"New Year\'s Eve","region":"United States","date":"2025-12-31"}],"Uruguay":[{"id":"20240101_nl85a4slj55ba11ambb332cdeg","status":"confirmed","summary":"New Year\'s Day","region":"Uruguay","date":"2024-01-01"},{"id":"20240331_9ggv9an1ull5nnvb96uiq8u63c","status":"confirmed","summary":"Easter Sunday","region":"Uruguay","date":"2024-03-31"},{"id":"20240501_r26o79nqb890bte4kv5qldbaik","status":"confirmed","summary":"Labor Day / May Day","region":"Uruguay","date":"2024-05-01"},{"id":"20240718_1bu51pk3ro1kbgh21n0moeq5qs","status":"confirmed","summary":"Constitution Day","region":"Uruguay","date":"2024-07-18"},{"id":"20240825_so2qr5ltd7h2a8jb719p34mp9k","status":"confirmed","summary":"Independence Day","region":"Uruguay","date":"2024-08-25"},{"id":"20241224_2csbunsi1omdgvhasa0sk6ab24","status":"confirmed","summary":"Christmas Eve","region":"Uruguay","date":"2024-12-24"},{"id":"20241225_u4r1r25iclfsillleledrl879s","status":"confirmed","summary":"Christmas Day","region":"Uruguay","date":"2024-12-25"},{"id":"20241231_a346uscp2n0qiptf5fhr5clak4","status":"confirmed","summary":"New Year\'s Eve","region":"Uruguay","date":"2024-12-31"},{"id":"20250101_hmnupk2gdcqnfcepfso20os324","status":"confirmed","summary":"New Year\'s Day","region":"Uruguay","date":"2025-01-01"},{"id":"20250420_2u41ad2nlos480naeciqgti7so","status":"confirmed","summary":"Easter Sunday","region":"Uruguay","date":"2025-04-20"},{"id":"20250501_qb2n284a2blde3vgc53thur738","status":"confirmed","summary":"Labor Day / May Day","region":"Uruguay","date":"2025-05-01"},{"id":"20250718_fprfjjkuhbrc1lep1o2ul6qbug","status":"confirmed","summary":"Constitution Day","region":"Uruguay","date":"2025-07-18"},{"id":"20250825_hmrckv1isnb0qt52ep7h7uf8nc","status":"confirmed","summary":"Independence Day","region":"Uruguay","date":"2025-08-25"},{"id":"20251224_3jgti7jhf75inhlp6eqhhgf5ks","status":"confirmed","summary":"Christmas Eve","region":"Uruguay","date":"2025-12-24"},{"id":"20251225_r5j1grmmpnlco8o2lb44qrovbg","status":"confirmed","summary":"Christmas Day","region":"Uruguay","date":"2025-12-25"},{"id":"20251231_4njmmcb82lvq32nm8lcgui48rg","status":"confirmed","summary":"New Year\'s Eve","region":"Uruguay","date":"2025-12-31"}],"Uzbekistan":[{"id":"20240101_i91gbfpr22l8d7tsci4aocu5v8","status":"confirmed","summary":"New Year","region":"Uzbekistan","date":"2024-01-01"},{"id":"20240102_mc0s0vi8ovbu8hnkdkfsdhcujk","status":"confirmed","summary":"New Year Holiday","region":"Uzbekistan","date":"2024-01-02"},{"id":"20240114_j1dv7c6ivtph176skcn9hc0g00","status":"confirmed","summary":"Defenders of the Motherland Day","region":"Uzbekistan","date":"2024-01-14"},{"id":"20240308_0p17u74admkbf2490vdiqikjf8","status":"confirmed","summary":"International Women\'s Day","region":"Uzbekistan","date":"2024-03-08"},{"id":"20240311_52isbbjsdb5e2vcdm5e34kr6d4","status":"confirmed","summary":"Ramadan Start","region":"Uzbekistan","date":"2024-03-11"},{"id":"20240321_unge0m0t0dqe61rrl8r3s4qnn8","status":"confirmed","summary":"Nowruz","region":"Uzbekistan","date":"2024-03-21"},{"id":"20240322_2u3mpm225vr6ke2vujce9fvt7g","status":"confirmed","summary":"Nowruz Holiday","region":"Uzbekistan","date":"2024-03-22"},{"id":"20240323_5daedfh775u70pdrpv6rli30os","status":"confirmed","summary":"Nowruz Holiday","region":"Uzbekistan","date":"2024-03-23"},{"id":"20240410_j86l1r0nmd4vpgncuvhvtk4u3k","status":"confirmed","summary":"Eid al-Fitr","region":"Uzbekistan","date":"2024-04-10"},{"id":"20240411_qlqn4q4tp749fhq34aekj41dj4","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Uzbekistan","date":"2024-04-11"},{"id":"20240412_7qc3bdkiu7a0dhh6s4varflnh8","status":"confirmed","summary":"Eid al-Fitr Holiday","region":"Uzbekistan","date":"2024-04-12"},{"id":"20240509_mg4vrq5k3hihu9dk2d2o784neg","status":"confirmed","summary":"Remembrance Day","region":"Uzbekistan","date":"2024-05-09"},{"id":"20240617_vcdaod7e618nnp28uve0lt26oo","status":"confirmed","summary":"Eid al-Adha","region":"Uzbekistan","date":"2024-06-17"},{"id":"20240618_sd12hn6pdmqpv7rbblb4bn9bb8","status":"confirmed","summary":"Eid al-Adha Holiday","region":"Uzbekistan","date":"2024-06-18"},{"id":"20240831_03pauj4r8csnf2r4cf301diho8","status":"confirmed","summary":"Independence Day Holiday","region":"Uzbekistan","date":"2024-08-31"},{"id":"20240901_3glcd21j8l7gf510qglljr27b4","status":"confirmed","summary":"Independence Day","region":"Uzbekistan","date":"2024-09-01"},{"id":"20240902_hcp1bb0fn0vf33bruiq26of0dg","status":"confirmed","summary":"Day off for Independence Day","region":"Uzbekistan","date":"2024-09-02"},{"id":"20240903_1u0sn5eckj6tr31sl7fm12q0qc","status":"confirmed","summary":"Independence Day Holiday","region":"Uzbekistan","date":"2024-09-03"},{"id":"20241001_3gun4lch3bmippboubt8phau20","status":"confirmed","summary":"Teachers Day","region":"Uzbekistan","date":"2024-10-01"},{"id":"20241208_c1b483sm2rn6tvqo1ct28j561o","status":"confirmed","summary":"Constitution Day","region":"Uzbekistan","date":"2024-12-08"},{"id":"20241209_i970u9lvmbdg1o70h2pj11csrc","status":"confirmed","summary":"Day off for Constitution Day","region":"Uzbekistan","date":"2024-12-09"},{"id":"20241230_nt7a94mppa2b10ihmrg95har20","status":"confirmed","summary":"New Year Holiday","region":"Uzbekistan","date":"2024-12-30"},{"id":"20241231_dafeb8vgbdncu36r5tf6oi4lj4","status":"confirmed","summary":"New Year Holiday","region":"Uzbekistan","date":"2024-12-31"},{"id":"20250101_gbqijjdkkslqbmnjarek0ic5o8","status":"confirmed","summary":"New Year","region":"Uzbekistan","date":"2025-01-01"},{"id":"20250114_nbmfoacbqmbttc4u4bnhb1oki0","status":"confirmed","summary":"Defenders of the Motherland Day","region":"Uzbekistan","date":"2025-01-14"},{"id":"20250301_mk2hc2efa598q77e5llhhdj6es","status":"confirmed","summary":"Ramadan Start","region":"Uzbekistan","date":"2025-03-01"},{"id":"20250308_qk0o5ebfqp48doqftemrui3f6o","status":"confirmed","summary":"International Women\'s Day","region":"Uzbekistan","date":"2025-03-08"},{"id":"20250321_het8ju01hdk21ea9c6sqahd6m0","status":"confirmed","summary":"Nowruz","region":"Uzbekistan","date":"2025-03-21"},{"id":"20250331_8ga5edd8avom7g46hl3bbirtco","status":"confirmed","summary":"Eid al-Fitr","region":"Uzbekistan","date":"2025-03-31"},{"id":"20250509_rppv68bas9gg0cmfos2ro8n2u0","status":"confirmed","summary":"Remembrance Day","region":"Uzbekistan","date":"2025-05-09"},{"id":"20250607_kp4n7otk9jftbtedr2jatv4us0","status":"confirmed","summary":"Eid al-Adha","region":"Uzbekistan","date":"2025-06-07"},{"id":"20250901_sgtq2f88a84110m616gm1c3a64","status":"confirmed","summary":"Independence Day","region":"Uzbekistan","date":"2025-09-01"},{"id":"20251001_g6u9qs8jqj2fi9p87uq7qgme8g","status":"confirmed","summary":"Teachers Day","region":"Uzbekistan","date":"2025-10-01"},{"id":"20251208_5ppap0qckh4vn9ue3hsvai8l54","status":"confirmed","summary":"Constitution Day","region":"Uzbekistan","date":"2025-12-08"}],"Vatican City":[{"id":"20240101_j8v45f3r6tr3jah3jtev9h5bhs","status":"confirmed","summary":"New Year\'s Day","region":"Vatican City","date":"2024-01-01"},{"id":"20240106_4gt2vf5lmg6054det174k9q9us","status":"confirmed","summary":"Epiphany","region":"Vatican City","date":"2024-01-06"},{"id":"20240211_4fgk84efj8cmi971gqplacbtfc","status":"confirmed","summary":"Anniversary of the foundation of Vatican City","region":"Vatican City","date":"2024-02-11"},{"id":"20240313_ec9bpekht90r23qum06i2uo8dc","status":"confirmed","summary":"Anniversary of the election of Pope Francis","region":"Vatican City","date":"2024-03-13"},{"id":"20240319_5mm1ndje63ecs4vturr767v644","status":"confirmed","summary":"St Joseph\'s Day","region":"Vatican City","date":"2024-03-19"},{"id":"20240319_tqvtchs3uk3hn5nd93022hu4ng","status":"confirmed","summary":"Fathers\' Day","region":"Vatican City","date":"2024-03-19"},{"id":"20240329_udh46fts8d70rr5prgb58pqqls","status":"confirmed","summary":"Good Friday","region":"Vatican City","date":"2024-03-29"},{"id":"20240330_07joe66gjkokj2ld81olab6dp4","status":"confirmed","summary":"Holy Saturday","region":"Vatican City","date":"2024-03-30"},{"id":"20240331_8pfq228l1s9bqicvvrp163g0o4","status":"confirmed","summary":"Daylight Saving Time starts","region":"Vatican City","date":"2024-03-31"},{"id":"20240331_c3qk8uop10s5j4s8b3cjsceit0","status":"confirmed","summary":"Easter Sunday","region":"Vatican City","date":"2024-03-31"},{"id":"20240401_9m72um80h2645gci50nqha21u8","status":"confirmed","summary":"Easter Monday","region":"Vatican City","date":"2024-04-01"},{"id":"20240423_8ajj08k5hegii28e3hbp0mli78","status":"confirmed","summary":"St George\'s Feast","region":"Vatican City","date":"2024-04-23"},{"id":"20240501_4cmnvqlni1khcjt4ll18ss5aq0","status":"confirmed","summary":"Feast of St Joseph the Worker","region":"Vatican City","date":"2024-05-01"},{"id":"20240505_fj3qkecvhqr0hd1c4umg8gtl50","status":"confirmed","summary":"Mothers\' Day","region":"Vatican City","date":"2024-05-05"},{"id":"20240509_dunn4ein0fhnvjqiveq1b5o9gs","status":"confirmed","summary":"Ascension Day","region":"Vatican City","date":"2024-05-09"},{"id":"20240530_r2gkif78vgj9bgs6js2fji761s","status":"confirmed","summary":"Corpus Domini","region":"Vatican City","date":"2024-05-30"},{"id":"20240629_ecu9aa0h71jijgcnqaej5u0cbk","status":"confirmed","summary":"The Feasts of Saints Peter and Paul","region":"Vatican City","date":"2024-06-29"},{"id":"20240815_qgh58apom9t70rva7c330rt47k","status":"confirmed","summary":"Day of the Assumption of Mary","region":"Vatican City","date":"2024-08-15"},{"id":"20240816_vuaca018otltpu6mqsbaj69jac","status":"confirmed","summary":"Assumption Day Holiday","region":"Vatican City","date":"2024-08-16"},{"id":"20241027_oumguh35lbb0neolufvqc10c50","status":"confirmed","summary":"Daylight Saving Time ends","region":"Vatican City","date":"2024-10-27"},{"id":"20241101_j8auat8kta03h7c5bt9k98hb48","status":"confirmed","summary":"All Saints\' Day","region":"Vatican City","date":"2024-11-01"},{"id":"20241102_2n7fjno6flen5lt5qcg2obttb0","status":"confirmed","summary":"All Souls\' Day","region":"Vatican City","date":"2024-11-02"},{"id":"20241208_vdu3sgl6sbp7nhe65gfj8a0vk0","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Vatican City","date":"2024-12-08"},{"id":"20241224_ocb65fbv0rb5vktuubcvuoh05o","status":"confirmed","summary":"Christmas Eve","region":"Vatican City","date":"2024-12-24"},{"id":"20241225_i4rafr552db6l0k8tba0mv6650","status":"confirmed","summary":"Christmas Day","region":"Vatican City","date":"2024-12-25"},{"id":"20241226_67qb3gkijpgn8sjag26lihtbm8","status":"confirmed","summary":"St Stephen\'s Day","region":"Vatican City","date":"2024-12-26"},{"id":"20241231_8sfl07794q7j3prkatvtc19eq4","status":"confirmed","summary":"New Year\'s Eve","region":"Vatican City","date":"2024-12-31"},{"id":"20250101_0o4ndafidkueuq42jqsqc48m04","status":"confirmed","summary":"New Year\'s Day","region":"Vatican City","date":"2025-01-01"},{"id":"20250106_qvu8isfglsr8lnomri78u64d5g","status":"confirmed","summary":"Epiphany","region":"Vatican City","date":"2025-01-06"},{"id":"20250211_37ue0cp42f3kc1kagi3mfqvkvs","status":"confirmed","summary":"Anniversary of the foundation of Vatican City","region":"Vatican City","date":"2025-02-11"},{"id":"20250313_jorkkcdjmfhah4ef3tseed5dt4","status":"confirmed","summary":"Anniversary of the election of Pope Francis","region":"Vatican City","date":"2025-03-13"},{"id":"20250319_jk5u7lk14rf55r0cehqi76duqg","status":"confirmed","summary":"St Joseph\'s Day","region":"Vatican City","date":"2025-03-19"},{"id":"20250319_noe113unum4oertme9qt91hmv4","status":"confirmed","summary":"Fathers\' Day","region":"Vatican City","date":"2025-03-19"},{"id":"20250330_j2mqtuec9cadut2jei1tr44hlk","status":"confirmed","summary":"Daylight Saving Time starts","region":"Vatican City","date":"2025-03-30"},{"id":"20250418_9dqenmssadfo7m7tljs0hu9ieg","status":"confirmed","summary":"Good Friday","region":"Vatican City","date":"2025-04-18"},{"id":"20250419_7nbp261fk1sbrc00o1r1n3mpmk","status":"confirmed","summary":"Holy Saturday","region":"Vatican City","date":"2025-04-19"},{"id":"20250420_fct4qii6f862omr10nltia6568","status":"confirmed","summary":"Easter Sunday","region":"Vatican City","date":"2025-04-20"},{"id":"20250421_b8689ogskesottfiacraldagpc","status":"confirmed","summary":"Easter Monday","region":"Vatican City","date":"2025-04-21"},{"id":"20250423_ld8ptb99plppu8ckkalh2dnr8g","status":"confirmed","summary":"St George\'s Feast","region":"Vatican City","date":"2025-04-23"},{"id":"20250501_paeh4nhje8uefhuk5af6dbqbf8","status":"confirmed","summary":"Feast of St Joseph the Worker","region":"Vatican City","date":"2025-05-01"},{"id":"20250504_7rqdqecn2uf34m0do73ohorgl4","status":"confirmed","summary":"Mothers\' Day","region":"Vatican City","date":"2025-05-04"},{"id":"20250529_l1vvspv5nglvbc157lbcftgueg","status":"confirmed","summary":"Ascension Day","region":"Vatican City","date":"2025-05-29"},{"id":"20250619_ciim07780una6irik1lkal4k2o","status":"confirmed","summary":"Corpus Domini","region":"Vatican City","date":"2025-06-19"},{"id":"20250629_oe244atim974t8le0r29om56cg","status":"confirmed","summary":"The Feasts of Saints Peter and Paul","region":"Vatican City","date":"2025-06-29"},{"id":"20250815_9kvmh0b74047unfjfn14pu4t1g","status":"confirmed","summary":"Day of the Assumption of Mary","region":"Vatican City","date":"2025-08-15"},{"id":"20250816_n4slgk1ige7j6s0u0nmlqm474o","status":"confirmed","summary":"Assumption Day Holiday","region":"Vatican City","date":"2025-08-16"},{"id":"20251026_3sva6v7pn5cthadt4bgphqg3gc","status":"confirmed","summary":"Daylight Saving Time ends","region":"Vatican City","date":"2025-10-26"},{"id":"20251101_gd12cfup1qa6rfms8bq8g0je2g","status":"confirmed","summary":"All Saints\' Day","region":"Vatican City","date":"2025-11-01"},{"id":"20251102_7dh87ul7a1gtarb5kt789rhm2g","status":"confirmed","summary":"All Souls\' Day","region":"Vatican City","date":"2025-11-02"},{"id":"20251208_ejql9385t383s9bo4g4q8s52vg","status":"confirmed","summary":"Feast of the Immaculate Conception","region":"Vatican City","date":"2025-12-08"},{"id":"20251224_jsvhd1tne432cg5rkdh848nfoc","status":"confirmed","summary":"Christmas Eve","region":"Vatican City","date":"2025-12-24"},{"id":"20251225_m6hse2a0s1jsk25t97hpuns0s8","status":"confirmed","summary":"Christmas Day","region":"Vatican City","date":"2025-12-25"},{"id":"20251226_h3mhiesqm82gtm1mak5h768tu4","status":"confirmed","summary":"St Stephen\'s Day","region":"Vatican City","date":"2025-12-26"},{"id":"20251231_8lmkogfblu5bnhmdjgmtg5bcq4","status":"confirmed","summary":"New Year\'s Eve","region":"Vatican City","date":"2025-12-31"}],"St. Vincent & Grenadines":[{"id":"20240101_i1jok8bc22qlkkte7l4480n1qg","status":"confirmed","summary":"New Year\'s Day","region":"St. Vincent & Grenadines","date":"2024-01-01"},{"id":"20240314_vkq6fqegt4bfmsgv996v6dd99o","status":"confirmed","summary":"National Heroes Day","region":"St. Vincent & Grenadines","date":"2024-03-14"},{"id":"20240329_uu67ersnoj5altdjg0epqi7ee8","status":"confirmed","summary":"Good Friday","region":"St. Vincent & Grenadines","date":"2024-03-29"},{"id":"20240401_j2bo632gcpgh3bsupk1mle16mg","status":"confirmed","summary":"Easter Monday","region":"St. Vincent & Grenadines","date":"2024-04-01"},{"id":"20240501_cj970u3lotcpmaoq0bg8lp9n30","status":"confirmed","summary":"National Workers Day","region":"St. Vincent & Grenadines","date":"2024-05-01"},{"id":"20240520_6tedi0l9uo3e2dvqgm0i3b3rhs","status":"confirmed","summary":"Whit Monday","region":"St. Vincent & Grenadines","date":"2024-05-20"},{"id":"20240701_qdg03r8gcbvta3k1jslk8mm3e8","status":"confirmed","summary":"Carnival Monday","region":"St. Vincent & Grenadines","date":"2024-07-01"},{"id":"20240702_k5dda9p3np1odjljh72n357u2k","status":"confirmed","summary":"Carnival Tuesday","region":"St. Vincent & Grenadines","date":"2024-07-02"},{"id":"20240801_788jn88j2p1185p9msvk4b489k","status":"confirmed","summary":"Emancipation Day","region":"St. Vincent & Grenadines","date":"2024-08-01"},{"id":"20241027_2ambdts2si6ldjj32uf7go87o8","status":"confirmed","summary":"Independence Day","region":"St. Vincent & Grenadines","date":"2024-10-27"},{"id":"20241225_dirh76oj4f9seshjsab0kbre44","status":"confirmed","summary":"Christmas Day","region":"St. Vincent & Grenadines","date":"2024-12-25"},{"id":"20241226_co11a46jvk778e8mfpm1o3pi9o","status":"confirmed","summary":"Boxing Day","region":"St. Vincent & Grenadines","date":"2024-12-26"},{"id":"20250101_dqjjh7n5vs0ldc8vobs71vkgs4","status":"confirmed","summary":"New Year\'s Day","region":"St. Vincent & Grenadines","date":"2025-01-01"},{"id":"20250314_0n0vcnc4ou6bj9492s5ojg9150","status":"confirmed","summary":"National Heroes Day","region":"St. Vincent & Grenadines","date":"2025-03-14"},{"id":"20250418_te36qr7lg2jl7c0pp3jim7601g","status":"confirmed","summary":"Good Friday","region":"St. Vincent & Grenadines","date":"2025-04-18"},{"id":"20250421_fftr5nuk1180rjefqt6j9su2pc","status":"confirmed","summary":"Easter Monday","region":"St. Vincent & Grenadines","date":"2025-04-21"},{"id":"20250501_l4nupkpganqi0rads03l4a86q4","status":"confirmed","summary":"National Workers Day","region":"St. Vincent & Grenadines","date":"2025-05-01"},{"id":"20250609_gi7ice4qgako53fgm7jg0qdpa4","status":"confirmed","summary":"Whit Monday","region":"St. Vincent & Grenadines","date":"2025-06-09"},{"id":"20250707_09rk19jcbditlssedodliio44k","status":"confirmed","summary":"Carnival Monday","region":"St. Vincent & Grenadines","date":"2025-07-07"},{"id":"20250708_bvvv3holhhvd2ug2lqo3506g1o","status":"confirmed","summary":"Carnival Tuesday","region":"St. Vincent & Grenadines","date":"2025-07-08"},{"id":"20250801_38l0pt7nqfemffjvb2f201kqj4","status":"confirmed","summary":"Emancipation Day","region":"St. Vincent & Grenadines","date":"2025-08-01"},{"id":"20251027_f85ommq61l6d0h697uaiml43n8","status":"confirmed","summary":"Independence Day","region":"St. Vincent & Grenadines","date":"2025-10-27"},{"id":"20251225_0u26bl8o8kanchntfpe5g8k7a0","status":"confirmed","summary":"Christmas Day","region":"St. Vincent & Grenadines","date":"2025-12-25"},{"id":"20251226_uktlqp6v7d6giblq4g5d6jhg98","status":"confirmed","summary":"Boxing Day","region":"St. Vincent & Grenadines","date":"2025-12-26"}],"Venezuela":[{"id":"20240101_ktbk60dqrfls3d7kj8at1050n0","status":"confirmed","summary":"New Year\'s Day","region":"Venezuela","date":"2024-01-01"},{"id":"20240212_2eruj43tmj2lrhg8ouhbr0ls34","status":"confirmed","summary":"Carnival / Shrove Monday","region":"Venezuela","date":"2024-02-12"},{"id":"20240213_lenkbof57ug1qu0glni3unkr9g","status":"confirmed","summary":"Carnival / Shrove Tuesday / Pancake Day","region":"Venezuela","date":"2024-02-13"},{"id":"20240324_9a4dbf17971irhsmhs9a4n1gf8","status":"confirmed","summary":"Palm Sunday","region":"Venezuela","date":"2024-03-24"},{"id":"20240328_814r1b8gddcc8g5pi3husj4l20","status":"confirmed","summary":"Maundy Thursday","region":"Venezuela","date":"2024-03-28"},{"id":"20240329_erifq9nlqh4bsmnganf2urvskg","status":"confirmed","summary":"Good Friday","region":"Venezuela","date":"2024-03-29"},{"id":"20240331_kc4t4chrsl77psvskdj67os7fc","status":"confirmed","summary":"Easter Sunday","region":"Venezuela","date":"2024-03-31"},{"id":"20240419_cdikbr87a8r1upffnf2cek474g","status":"confirmed","summary":"Declaration of Independence","region":"Venezuela","date":"2024-04-19"},{"id":"20240501_9rp4jmp19mag7hjbv7hg532ncg","status":"confirmed","summary":"Labor Day / May Day","region":"Venezuela","date":"2024-05-01"},{"id":"20240613_urtlormqn1ickfa4aim6qbrk24","status":"confirmed","summary":"St Anthony\'s Day","region":"Venezuela","date":"2024-06-13"},{"id":"20240624_1vvmrnk0lgm36a8ajftr28ls84","status":"confirmed","summary":"Carabobo Battle","region":"Venezuela","date":"2024-06-24"},{"id":"20240705_hul20bivt8isipfrgbod6pqse0","status":"confirmed","summary":"Independence Day","region":"Venezuela","date":"2024-07-05"},{"id":"20240724_bj8cbd8r0kcdksv0uuf7fbf3no","status":"confirmed","summary":"Simón Bolívar\'s Birthday","region":"Venezuela","date":"2024-07-24"},{"id":"20240803_ucveicpbbhqldfflj9u3of9bqo","status":"confirmed","summary":"Flag\'s Day","region":"Venezuela","date":"2024-08-03"},{"id":"20240804_3dur13pecrhccdtp6asivdfo04","status":"confirmed","summary":"National Guard\'s Day","region":"Venezuela","date":"2024-08-04"},{"id":"20240911_544mft41tvmhd895iavkjrfdlo","status":"confirmed","summary":"Our Lady of Coromoto","region":"Venezuela","date":"2024-09-11"},{"id":"20241012_3itgb86lrioud5vrgl83vunmag","status":"confirmed","summary":"Day of Indigenous Resistance","region":"Venezuela","date":"2024-10-12"},{"id":"20241026_ftb88nm7uln9ea5tlg6f5rraug","status":"confirmed","summary":"Dr. José Gregorio Hernández Day","region":"Venezuela","date":"2024-10-26"},{"id":"20241101_s8d8d33gu4rjfnjfnaaf76pj18","status":"confirmed","summary":"All Saints Day","region":"Venezuela","date":"2024-11-01"},{"id":"20241102_1pu216abbrckscksujrcn3nt1o","status":"confirmed","summary":"All Souls Day","region":"Venezuela","date":"2024-11-02"},{"id":"20241127_k1p2cf6ap41hmomufiqvifhncc","status":"confirmed","summary":"Aviation Day","region":"Venezuela","date":"2024-11-27"},{"id":"20241224_5828ffkfee5drutq262i49sdr4","status":"confirmed","summary":"Christmas Eve","region":"Venezuela","date":"2024-12-24"},{"id":"20241225_qtffjc8mn82s6afpu31teda4ro","status":"confirmed","summary":"Christmas Day","region":"Venezuela","date":"2024-12-25"},{"id":"20241231_21koe3q5gnsmhc0ddti0kb0d24","status":"confirmed","summary":"New Year\'s Eve","region":"Venezuela","date":"2024-12-31"},{"id":"20250101_dsifptr6up4nuu1otfplhofcf0","status":"confirmed","summary":"New Year\'s Day","region":"Venezuela","date":"2025-01-01"},{"id":"20250303_32h93u7tb394ieegl4e7m2b0m4","status":"confirmed","summary":"Carnival / Shrove Monday","region":"Venezuela","date":"2025-03-03"},{"id":"20250304_mjuu8kt52fv5c9vcf0ed3n9jdk","status":"confirmed","summary":"Carnival / Shrove Tuesday / Pancake Day","region":"Venezuela","date":"2025-03-04"},{"id":"20250413_44bneklobnied0b2359kocdnng","status":"confirmed","summary":"Palm Sunday","region":"Venezuela","date":"2025-04-13"},{"id":"20250417_b1oisj874usn6qopf7oi7c3rs4","status":"confirmed","summary":"Maundy Thursday","region":"Venezuela","date":"2025-04-17"},{"id":"20250418_d877eggi7ck1s54bj81jc3sjkk","status":"confirmed","summary":"Good Friday","region":"Venezuela","date":"2025-04-18"},{"id":"20250419_43ijq8e16l43qv8niofqjlg5dg","status":"confirmed","summary":"Declaration of Independence","region":"Venezuela","date":"2025-04-19"},{"id":"20250420_69k62bh18444vh0dvjibj62elg","status":"confirmed","summary":"Easter Sunday","region":"Venezuela","date":"2025-04-20"},{"id":"20250501_fkjv5h0m45uu4f798vk9hhqhls","status":"confirmed","summary":"Labor Day / May Day","region":"Venezuela","date":"2025-05-01"},{"id":"20250613_p9dvsdladpm4p6vuagd5hcehck","status":"confirmed","summary":"St Anthony\'s Day","region":"Venezuela","date":"2025-06-13"},{"id":"20250624_7d4n0inrlv9vi0bu4dqr2lvij4","status":"confirmed","summary":"Carabobo Battle","region":"Venezuela","date":"2025-06-24"},{"id":"20250705_3r953nrmdh43v8k0vcvlk9cv9g","status":"confirmed","summary":"Independence Day","region":"Venezuela","date":"2025-07-05"},{"id":"20250724_56a9fm8smqkm9rgkveqkqo6974","status":"confirmed","summary":"Simón Bolívar\'s Birthday","region":"Venezuela","date":"2025-07-24"},{"id":"20250803_dfmfdhuc0j9ld5bh7jmnsge2po","status":"confirmed","summary":"Flag\'s Day","region":"Venezuela","date":"2025-08-03"},{"id":"20250804_qa77bpb7gf81p9tu5pac5ms1oc","status":"confirmed","summary":"National Guard\'s Day","region":"Venezuela","date":"2025-08-04"},{"id":"20250911_am8979b6p8930uunm35vi5kq10","status":"confirmed","summary":"Our Lady of Coromoto","region":"Venezuela","date":"2025-09-11"},{"id":"20251012_oludb6k1e4l4odk8473ne3uqt0","status":"confirmed","summary":"Day of Indigenous Resistance","region":"Venezuela","date":"2025-10-12"},{"id":"20251026_cdkt1u3ccre1c2up6lipkuaggo","status":"confirmed","summary":"Dr. José Gregorio Hernández Day","region":"Venezuela","date":"2025-10-26"},{"id":"20251101_jq85u02satf8au0i7n59gega9k","status":"confirmed","summary":"All Saints Day","region":"Venezuela","date":"2025-11-01"},{"id":"20251102_d6sgjhkpo81g6cqlohbquvkpuc","status":"confirmed","summary":"All Souls Day","region":"Venezuela","date":"2025-11-02"},{"id":"20251127_7b09v8loj6f747dpo773nvae6k","status":"confirmed","summary":"Aviation Day","region":"Venezuela","date":"2025-11-27"},{"id":"20251224_b0brrso2eqo15o98n8p4r4siug","status":"confirmed","summary":"Christmas Eve","region":"Venezuela","date":"2025-12-24"},{"id":"20251225_vttmcfcectk3v6pfg1to3tsb2s","status":"confirmed","summary":"Christmas Day","region":"Venezuela","date":"2025-12-25"},{"id":"20251231_lnt0khbb0pbnfutjilgg6kq1ro","status":"confirmed","summary":"New Year\'s Eve","region":"Venezuela","date":"2025-12-31"}],"British Virgin Islands":[{"id":"20240101_irubk9tvbd56jh5970aogkv6ms","status":"confirmed","summary":"New Year\'s Day","region":"British Virgin Islands","date":"2024-01-01"},{"id":"20240304_gm8ck91ls15mg2d0pcus26mjts","status":"confirmed","summary":"Lavity Stoutt\'s Birthday","region":"British Virgin Islands","date":"2024-03-04"},{"id":"20240307_89rsg0kt3nkmipfi0i24c4gd18","status":"confirmed","summary":"Lavity Stoutt\'s Birthday","region":"British Virgin Islands","date":"2024-03-07"},{"id":"20240329_9irl0k9ros2tk5hce4dc9nmob4","status":"confirmed","summary":"Good Friday","region":"British Virgin Islands","date":"2024-03-29"},{"id":"20240401_jnu795sijse585ktis93k5i8ig","status":"confirmed","summary":"Easter Monday","region":"British Virgin Islands","date":"2024-04-01"},{"id":"20240520_2dohdruqml3ef83lm31lv2ihvo","status":"confirmed","summary":"Whit Monday","region":"British Virgin Islands","date":"2024-05-20"},{"id":"20240614_jmo9gu22u5a39cld8e59bam3bc","status":"confirmed","summary":"Sovereign\'s Birthday","region":"British Virgin Islands","date":"2024-06-14"},{"id":"20240701_9grf7p9va1p94tn86h55d633uo","status":"confirmed","summary":"Virgin Islands Day","region":"British Virgin Islands","date":"2024-07-01"},{"id":"20240805_is0h0lt89u1vjrev74r3q3jke0","status":"confirmed","summary":"Emancipation Monday","region":"British Virgin Islands","date":"2024-08-05"},{"id":"20240806_oi6ndgpdlm8hk55or1ctia5aek","status":"confirmed","summary":"Emancipation Tuesday","region":"British Virgin Islands","date":"2024-08-06"},{"id":"20240807_fosrnf8s693p7kln25dq7otafg","status":"confirmed","summary":"Emancipation Wednesday","region":"British Virgin Islands","date":"2024-08-07"},{"id":"20241021_6fab3d4r7hdn5huktjdsoqorrc","status":"confirmed","summary":"Saint Ursula\'s Day","region":"British Virgin Islands","date":"2024-10-21"},{"id":"20241021_j15avgoidi1emtnei8nmcnf6tg","status":"confirmed","summary":"Heroes and Forefathers Day","region":"British Virgin Islands","date":"2024-10-21"},{"id":"20241125_1494bm7lu6nnmdqu3j4041lvcc","status":"confirmed","summary":"The Great March of 1949 and Restoration Day","region":"British Virgin Islands","date":"2024-11-25"},{"id":"20241225_of03i0c5eaqg0a1trh2caajfrk","status":"confirmed","summary":"Christmas Day","region":"British Virgin Islands","date":"2024-12-25"},{"id":"20241226_rp6v2j0hldarkhuc46mqem62os","status":"confirmed","summary":"Boxing Day","region":"British Virgin Islands","date":"2024-12-26"},{"id":"20250101_slq16eo4rjvuncfqm2810ubv74","status":"confirmed","summary":"New Year\'s Day","region":"British Virgin Islands","date":"2025-01-01"},{"id":"20250307_3ud5glp4esr6vg7t6dv9ff8nk4","status":"confirmed","summary":"Lavity Stoutt\'s Birthday","region":"British Virgin Islands","date":"2025-03-07"},{"id":"20250418_as74ss3bvv1lu9kscots09bjls","status":"confirmed","summary":"Good Friday","region":"British Virgin Islands","date":"2025-04-18"},{"id":"20250421_d53aktlhqp9djh5dbbfvi58jpo","status":"confirmed","summary":"Easter Monday","region":"British Virgin Islands","date":"2025-04-21"},{"id":"20250609_sc24phqik1e631ptgou069de0k","status":"confirmed","summary":"Whit Monday","region":"British Virgin Islands","date":"2025-06-09"},{"id":"20250620_f7piec36nmjcs2blqfrscd5vag","status":"confirmed","summary":"Sovereign\'s Birthday","region":"British Virgin Islands","date":"2025-06-20"},{"id":"20250701_44te04okee55e7ie33t1cn3m7g","status":"confirmed","summary":"Virgin Islands Day","region":"British Virgin Islands","date":"2025-07-01"},{"id":"20250804_o2j7p9nd5q5vo352qkm9m5qjs4","status":"confirmed","summary":"Emancipation Monday","region":"British Virgin Islands","date":"2025-08-04"},{"id":"20250805_doadkgmmta3gpog2emjvsee4n4","status":"confirmed","summary":"Emancipation Tuesday","region":"British Virgin Islands","date":"2025-08-05"},{"id":"20250806_5jgkluamde6pg16c13rsajrfe4","status":"confirmed","summary":"Emancipation Wednesday","region":"British Virgin Islands","date":"2025-08-06"},{"id":"20251020_8m15bphmvu80k1me040prmto8k","status":"confirmed","summary":"Heroes and Forefathers Day","region":"British Virgin Islands","date":"2025-10-20"},{"id":"20251021_frl5h74o98lrk3bvf5jqeqane8","status":"confirmed","summary":"Saint Ursula\'s Day","region":"British Virgin Islands","date":"2025-10-21"},{"id":"20251110_i9vte3785a80ok4v5lp8b00bb8","status":"confirmed","summary":"The Great March of 1949 and Restoration Day","region":"British Virgin Islands","date":"2025-11-10"},{"id":"20251225_liph71degei8ptoq45mjr39tn0","status":"confirmed","summary":"Christmas Day","region":"British Virgin Islands","date":"2025-12-25"},{"id":"20251226_m3fpghnkr7iireik66scprjsnc","status":"confirmed","summary":"Boxing Day","region":"British Virgin Islands","date":"2025-12-26"}],"U.S. Virgin Islands":[{"id":"20240101_dni2jn6ji1s0id9ga4uoo5a2j4","status":"confirmed","summary":"New Year","region":"U.S. Virgin Islands","date":"2024-01-01"},{"id":"20240106_avn9gsavvj6k5ln8n6i86hf6bs","status":"confirmed","summary":"Three Kings Day","region":"U.S. Virgin Islands","date":"2024-01-06"},{"id":"20240115_abak3rq2o38isc7jgps2niim98","status":"confirmed","summary":"Martin Luther King Jr. Day","region":"U.S. Virgin Islands","date":"2024-01-15"},{"id":"20240219_712mh1vj4v484b3sra15m9mmv8","status":"confirmed","summary":"President\'s Day","region":"U.S. Virgin Islands","date":"2024-02-19"},{"id":"20240328_fbn1er4dt922qsbjahfddupjl8","status":"confirmed","summary":"Holy Thursday","region":"U.S. Virgin Islands","date":"2024-03-28"},{"id":"20240329_850q0dkt3rvmcbneokbqml42k4","status":"confirmed","summary":"Good Friday","region":"U.S. Virgin Islands","date":"2024-03-29"},{"id":"20240331_4v6ai8psplvgb6bsukbefusgpo","status":"confirmed","summary":"Transfer Day","region":"U.S. Virgin Islands","date":"2024-03-31"},{"id":"20240331_inj95gv7k95uh3v7n2vukc0puk","status":"confirmed","summary":"Easter Sunday","region":"U.S. Virgin Islands","date":"2024-03-31"},{"id":"20240401_6cgji4ie9sg99d2hk1apaeep4o","status":"confirmed","summary":"April Fool\'s Day","region":"U.S. Virgin Islands","date":"2024-04-01"},{"id":"20240401_tgmgjpkdo1k1vou7iprohfuh6o","status":"confirmed","summary":"Easter Monday","region":"U.S. Virgin Islands","date":"2024-04-01"},{"id":"20240512_btridlv0erpui17ne5tem3dhf0","status":"confirmed","summary":"Mother\'s Day","region":"U.S. Virgin Islands","date":"2024-05-12"},{"id":"20240527_ujg63e6q1bp911de4dj0oiitt0","status":"confirmed","summary":"Memorial Day","region":"U.S. Virgin Islands","date":"2024-05-27"},{"id":"20240616_jrfu02sgdmpb1dnev5p7vcqh3s","status":"confirmed","summary":"Father\'s Day","region":"U.S. Virgin Islands","date":"2024-06-16"},{"id":"20240619_gf52lglfq98gh2s9158mundm1s","status":"confirmed","summary":"Juneteenth","region":"U.S. Virgin Islands","date":"2024-06-19"},{"id":"20240703_deimsokkmm4nigunespvnocjto","status":"confirmed","summary":"Emancipation Day","region":"U.S. Virgin Islands","date":"2024-07-03"},{"id":"20240704_nmbmv2vrqrkldru144qa9c9h08","status":"confirmed","summary":"American Independence Day","region":"U.S. Virgin Islands","date":"2024-07-04"},{"id":"20240722_df7rsn14t010g0iggpbgt0660k","status":"confirmed","summary":"Hurricane Supplication Day","region":"U.S. Virgin Islands","date":"2024-07-22"},{"id":"20240902_m55ngifdmn3s2s6gmtfkgfmcsc","status":"confirmed","summary":"Labor Day","region":"U.S. Virgin Islands","date":"2024-09-02"},{"id":"20241014_3tde86tea3i1i1736oi6f5hjv4","status":"confirmed","summary":"Puerto Rico Friendship Day (Columbus Day)","region":"U.S. Virgin Islands","date":"2024-10-14"},{"id":"20241025_q05rpc4ub2b10ktu188aan7jjo","status":"confirmed","summary":"Hurricane Thanksgiving","region":"U.S. Virgin Islands","date":"2024-10-25"},{"id":"20241101_1bgn3ronmojil2nc8fnpd34nmk","status":"confirmed","summary":"Liberty Day","region":"U.S. Virgin Islands","date":"2024-11-01"},{"id":"20241111_kkuutomsnm83a4ijg6q46bbon0","status":"confirmed","summary":"Veterans Day","region":"U.S. Virgin Islands","date":"2024-11-11"},{"id":"20241128_ikai084g8j5unlqotpkjtik054","status":"confirmed","summary":"Thanksgiving Day","region":"U.S. Virgin Islands","date":"2024-11-28"},{"id":"20241225_4qpejgkije1vgoo77r5ak4nkak","status":"confirmed","summary":"Christmas Day","region":"U.S. Virgin Islands","date":"2024-12-25"},{"id":"20241226_ei7t9826idi930kh4mng0uavk0","status":"confirmed","summary":"Christmas Second Day","region":"U.S. Virgin Islands","date":"2024-12-26"},{"id":"20241231_qa9k1mnaimvto8bjb04r4k3e74","status":"confirmed","summary":"New Year\'s Eve","region":"U.S. Virgin Islands","date":"2024-12-31"},{"id":"20250101_rdpjln6p13c8u3eo6fuk9ulugo","status":"confirmed","summary":"New Year","region":"U.S. Virgin Islands","date":"2025-01-01"},{"id":"20250106_kau65h5atm9i4t675hvqobeqeg","status":"confirmed","summary":"Three Kings Day","region":"U.S. Virgin Islands","date":"2025-01-06"},{"id":"20250120_lg0g20p6448rpjn7vuiqsiicm0","status":"confirmed","summary":"Martin Luther King Jr. Day","region":"U.S. Virgin Islands","date":"2025-01-20"},{"id":"20250217_9n9h2ol3ed8hab6env031f8p4c","status":"confirmed","summary":"President\'s Day","region":"U.S. Virgin Islands","date":"2025-02-17"},{"id":"20250331_pngd62igpvb4t6nuq0qjp34jls","status":"confirmed","summary":"Transfer Day","region":"U.S. Virgin Islands","date":"2025-03-31"},{"id":"20250401_7seia9p2j2iacp376h83hoke5o","status":"confirmed","summary":"April Fool\'s Day","region":"U.S. Virgin Islands","date":"2025-04-01"},{"id":"20250417_mv5g3qha6gd8q92c20217nh0ck","status":"confirmed","summary":"Holy Thursday","region":"U.S. Virgin Islands","date":"2025-04-17"},{"id":"20250418_3ofnvcmvt6u9egiukk0tj6bflk","status":"confirmed","summary":"Good Friday","region":"U.S. Virgin Islands","date":"2025-04-18"},{"id":"20250420_nfbitpp8maqlnvntj28otr1okg","status":"confirmed","summary":"Easter Sunday","region":"U.S. Virgin Islands","date":"2025-04-20"},{"id":"20250421_s9n8crdtemh1nd65ff61hg605k","status":"confirmed","summary":"Easter Monday","region":"U.S. Virgin Islands","date":"2025-04-21"},{"id":"20250511_8ups0e3tl835o0i3qb1kc16a9k","status":"confirmed","summary":"Mother\'s Day","region":"U.S. Virgin Islands","date":"2025-05-11"},{"id":"20250526_5ed5d1ol86u1d5djhekr7gavb4","status":"confirmed","summary":"Memorial Day","region":"U.S. Virgin Islands","date":"2025-05-26"},{"id":"20250615_kje0ntnutmasodlqh5gv3gvg4g","status":"confirmed","summary":"Father\'s Day","region":"U.S. Virgin Islands","date":"2025-06-15"},{"id":"20250619_2s2kl76rn4sr09uh1f9ohcjkhk","status":"confirmed","summary":"Juneteenth","region":"U.S. Virgin Islands","date":"2025-06-19"},{"id":"20250703_e5lm0f864jgosi0cqsve5mi6mc","status":"confirmed","summary":"Emancipation Day","region":"U.S. Virgin Islands","date":"2025-07-03"},{"id":"20250704_pnt5vq0vmj4d4nihklk4neldo4","status":"confirmed","summary":"American Independence Day","region":"U.S. Virgin Islands","date":"2025-07-04"},{"id":"20250728_bleu40nthhtefm8ufv3823ieg8","status":"confirmed","summary":"Hurricane Supplication Day","region":"U.S. Virgin Islands","date":"2025-07-28"},{"id":"20250901_3so5vqku35alkhq3u66d7pubh4","status":"confirmed","summary":"Labor Day","region":"U.S. Virgin Islands","date":"2025-09-01"},{"id":"20251013_2t3ruaifgnafb60ja1dtj8eo40","status":"confirmed","summary":"Puerto Rico Friendship Day (Columbus Day)","region":"U.S. Virgin Islands","date":"2025-10-13"},{"id":"20251025_p1eacipr91cutfelbcmu1p5vsk","status":"confirmed","summary":"Hurricane Thanksgiving","region":"U.S. Virgin Islands","date":"2025-10-25"},{"id":"20251101_kd5t9hm65d8vshf42rprhjht0g","status":"confirmed","summary":"Liberty Day","region":"U.S. Virgin Islands","date":"2025-11-01"},{"id":"20251111_lud94ivsuhrsmqhnd1bcedu5nc","status":"confirmed","summary":"Veterans Day","region":"U.S. Virgin Islands","date":"2025-11-11"},{"id":"20251127_l86s6rh4ejsdkd95au3fg654m0","status":"confirmed","summary":"Thanksgiving Day","region":"U.S. Virgin Islands","date":"2025-11-27"},{"id":"20251225_c2odu66btreklllnnrtt75jkf0","status":"confirmed","summary":"Christmas Day","region":"U.S. Virgin Islands","date":"2025-12-25"},{"id":"20251226_oc9s9t4eq9kvprqp1pa58dc5c4","status":"confirmed","summary":"Christmas Second Day","region":"U.S. Virgin Islands","date":"2025-12-26"},{"id":"20251231_2d31olg55th4nb8hmogaikhapg","status":"confirmed","summary":"New Year\'s Eve","region":"U.S. Virgin Islands","date":"2025-12-31"}],"Vietnam":[{"id":"20240101_72rct24bnn2ru04qglfikq7go8","status":"confirmed","summary":"International New Year\'s Day","region":"Vietnam","date":"2024-01-01"},{"id":"20240208_hjs3ebi3nbiqqo0v4bdr8mfklo","status":"confirmed","summary":"Tet holiday","region":"Vietnam","date":"2024-02-08"},{"id":"20240209_bka0qlfqk02fncu6ins9h07148","status":"confirmed","summary":"Vietnamese New Year\'s Eve","region":"Vietnam","date":"2024-02-09"},{"id":"20240210_f0l104v3u7fn650d8b7ikoasqc","status":"confirmed","summary":"Vietnamese New Year","region":"Vietnam","date":"2024-02-10"},{"id":"20240211_4e68trd83cu9fm9l4fe51p0m9c","status":"confirmed","summary":"Tet holiday","region":"Vietnam","date":"2024-02-11"},{"id":"20240212_1ne5u5ni2b1mlqtpnk0aspgl0g","status":"confirmed","summary":"Tet holiday","region":"Vietnam","date":"2024-02-12"},{"id":"20240213_oebffdk4n6jish33880ghbuum4","status":"confirmed","summary":"Tet holiday","region":"Vietnam","date":"2024-02-13"},{"id":"20240214_faoln52f65oqe1m3pub361k7i8","status":"confirmed","summary":"Tet holiday","region":"Vietnam","date":"2024-02-14"},{"id":"20240331_vtc2cc8i4m3uqgftq4pabc6h64","status":"confirmed","summary":"Easter Sunday","region":"Vietnam","date":"2024-03-31"},{"id":"20240418_i4lv35aqb690skdo852su8vh80","status":"confirmed","summary":"Hung Kings Festival","region":"Vietnam","date":"2024-04-18"},{"id":"20240429_rpb4u4tme4g02mg82fjuqsfri4","status":"confirmed","summary":"Liberation Day/Reunification Day Holiday","region":"Vietnam","date":"2024-04-29"},{"id":"20240430_9dafgmv90brg8vkfsbdqhpfe0k","status":"confirmed","summary":"Liberation Day/Reunification Day","region":"Vietnam","date":"2024-04-30"},{"id":"20240501_ht0ppn9bnqqj51eoat0hd2mfkk","status":"confirmed","summary":"International Labor Day","region":"Vietnam","date":"2024-05-01"},{"id":"20240504_vgg2v3dfginfb3bj6j0ff6big4","status":"confirmed","summary":"Working day for Liberation Day Holiday","region":"Vietnam","date":"2024-05-04"},{"id":"20240523_8fvi6dih9qkhg3qc62ub72vfqs","status":"confirmed","summary":"Vesak","region":"Vietnam","date":"2024-05-23"},{"id":"20240902_k5ohkn7vdhhi7qt0rjks1vngkg","status":"confirmed","summary":"Independence Day","region":"Vietnam","date":"2024-09-02"},{"id":"20240903_9uh6hr5qdregrtqur54d1uvgt8","status":"confirmed","summary":"Independence Day Holiday","region":"Vietnam","date":"2024-09-03"},{"id":"20241224_ga0vh03v2kdn4r9lh19ae7ut38","status":"confirmed","summary":"Christmas Eve","region":"Vietnam","date":"2024-12-24"},{"id":"20241225_hoam4v807oi987h39q6jtoo0qs","status":"confirmed","summary":"Christmas Day","region":"Vietnam","date":"2024-12-25"},{"id":"20241231_c6mg4qf0vjmn4rau3iui5qd01s","status":"confirmed","summary":"International New Year\'s Eve","region":"Vietnam","date":"2024-12-31"},{"id":"20250101_jtv23v2j5usupvqbebmjv58sbg","status":"confirmed","summary":"International New Year\'s Day","region":"Vietnam","date":"2025-01-01"},{"id":"20250128_o0t4ncln5iang539cbm6nhlqlk","status":"confirmed","summary":"Vietnamese New Year\'s Eve","region":"Vietnam","date":"2025-01-28"},{"id":"20250129_21rarp0p5p2079u72eu3pe3o0c","status":"confirmed","summary":"Vietnamese New Year","region":"Vietnam","date":"2025-01-29"},{"id":"20250130_u9hfj7rk028hs2j0sop3mvdn20","status":"confirmed","summary":"Tet holiday","region":"Vietnam","date":"2025-01-30"},{"id":"20250131_hqvpmhcgiob91663qh9f9ab1r4","status":"confirmed","summary":"Tet holiday","region":"Vietnam","date":"2025-01-31"},{"id":"20250201_r89acjbnk47ul78i9of112lh24","status":"confirmed","summary":"Tet holiday","region":"Vietnam","date":"2025-02-01"},{"id":"20250202_ok2jm0jfrbt6jjlv6vsjmfb65c","status":"confirmed","summary":"Tet holiday","region":"Vietnam","date":"2025-02-02"},{"id":"20250407_jr6mo8g8g8ganko2036oq3b7b4","status":"confirmed","summary":"Hung Kings Festival","region":"Vietnam","date":"2025-04-07"},{"id":"20250420_2ffhdritiprfvcc8c78s6dlifs","status":"confirmed","summary":"Easter Sunday","region":"Vietnam","date":"2025-04-20"},{"id":"20250430_qskm1qd0msd7u35sueiptnl0hk","status":"confirmed","summary":"Liberation Day/Reunification Day","region":"Vietnam","date":"2025-04-30"},{"id":"20250501_nl92b6iffesa99hi3vb3d8vitc","status":"confirmed","summary":"International Labor Day","region":"Vietnam","date":"2025-05-01"},{"id":"20250512_1r66vk3bu4knpksmgvvh8iaueo","status":"confirmed","summary":"Vesak","region":"Vietnam","date":"2025-05-12"},{"id":"20250902_jhfi8c4l7kva93kgqd4unsmeo4","status":"confirmed","summary":"Independence Day","region":"Vietnam","date":"2025-09-02"},{"id":"20251224_ot5tdbksos17f1uce15hnrqbe0","status":"confirmed","summary":"Christmas Eve","region":"Vietnam","date":"2025-12-24"},{"id":"20251225_fn6vok9pdeksvs22b9nvdamdq4","status":"confirmed","summary":"Christmas Day","region":"Vietnam","date":"2025-12-25"},{"id":"20251231_ohtvlg2kn47lm9ih103amp4nns","status":"confirmed","summary":"International New Year\'s Eve","region":"Vietnam","date":"2025-12-31"}],"Vanuatu":[{"id":"20240101_nreofaflk3lklvgdjh0mvp736k","status":"confirmed","summary":"New Year\'s Day","region":"Vanuatu","date":"2024-01-01"},{"id":"20240221_0qtlk2l021me979rcpiqd767eo","status":"confirmed","summary":"Father Lini Day","region":"Vanuatu","date":"2024-02-21"},{"id":"20240305_a1djtnajltdkege4nbkh647a2k","status":"confirmed","summary":"Custom Chief\'s Day","region":"Vanuatu","date":"2024-03-05"},{"id":"20240329_3l65n904vl09jk57epamap94v4","status":"confirmed","summary":"Good Friday","region":"Vanuatu","date":"2024-03-29"},{"id":"20240401_7pgof05t8tj2858e1aq0mkqans","status":"confirmed","summary":"Easter Monday","region":"Vanuatu","date":"2024-04-01"},{"id":"20240501_ff7fhqqn6v37muk5qo4lnf3gtc","status":"confirmed","summary":"Labor Day / May Day","region":"Vanuatu","date":"2024-05-01"},{"id":"20240509_1f0qvda8j7ni4a1o0ik2kk2rgk","status":"confirmed","summary":"Ascension Day","region":"Vanuatu","date":"2024-05-09"},{"id":"20240724_2set4j9r98k3ejf7uvmj8ak8l0","status":"confirmed","summary":"Children\'s Day","region":"Vanuatu","date":"2024-07-24"},{"id":"20240730_lm0uh7ptr7b96ch7mjnhuv65j8","status":"confirmed","summary":"Independence Day","region":"Vanuatu","date":"2024-07-30"},{"id":"20240815_gjr7osspl8ac0tu5kntu08kkbs","status":"confirmed","summary":"Assumption of Mary","region":"Vanuatu","date":"2024-08-15"},{"id":"20241005_bbnkn13cn37q397jk69m6p6d8o","status":"confirmed","summary":"Constitution Day","region":"Vanuatu","date":"2024-10-05"},{"id":"20241129_3mh6g1bcumvdl82g5vtdaouiqk","status":"confirmed","summary":"Unity Day","region":"Vanuatu","date":"2024-11-29"},{"id":"20241225_q2ffvq7q9gb6f8484i288qs4ck","status":"confirmed","summary":"Christmas Day","region":"Vanuatu","date":"2024-12-25"},{"id":"20241226_ehr021lg30r7u2uvocii2gffuo","status":"confirmed","summary":"Family Day","region":"Vanuatu","date":"2024-12-26"},{"id":"20250101_t6bnolj5b91umkeaacr7g9rtj0","status":"confirmed","summary":"New Year\'s Day","region":"Vanuatu","date":"2025-01-01"},{"id":"20250221_daah885v0k2qo3cqcockqe1h1g","status":"confirmed","summary":"Father Lini Day","region":"Vanuatu","date":"2025-02-21"},{"id":"20250305_g96grendq6smnl7t7vsvi1tgd0","status":"confirmed","summary":"Custom Chief\'s Day","region":"Vanuatu","date":"2025-03-05"},{"id":"20250418_kt6vlp7gd7arhrdcqbarka8m7c","status":"confirmed","summary":"Good Friday","region":"Vanuatu","date":"2025-04-18"},{"id":"20250421_runf0ead0qfnaetpj90aa58o0c","status":"confirmed","summary":"Easter Monday","region":"Vanuatu","date":"2025-04-21"},{"id":"20250501_iuespn3ehjkb156e434vo3e93s","status":"confirmed","summary":"Labor Day / May Day","region":"Vanuatu","date":"2025-05-01"},{"id":"20250529_grctb25o0agcaa031j2cnvptt4","status":"confirmed","summary":"Ascension Day","region":"Vanuatu","date":"2025-05-29"},{"id":"20250724_rq00j46pm5m2cscfq6k9eev9vo","status":"confirmed","summary":"Children\'s Day","region":"Vanuatu","date":"2025-07-24"},{"id":"20250730_qcmfnhfnkq018c8bvhug6ch1j4","status":"confirmed","summary":"Independence Day","region":"Vanuatu","date":"2025-07-30"},{"id":"20250815_oc0d1i9v2mgqc2ooca0g1rbh90","status":"confirmed","summary":"Assumption of Mary","region":"Vanuatu","date":"2025-08-15"},{"id":"20251005_snvd5801gdsl52en7tu9hgmjp8","status":"confirmed","summary":"Constitution Day","region":"Vanuatu","date":"2025-10-05"},{"id":"20251006_q9pku90iina9lh31neu7t1uus8","status":"confirmed","summary":"Day off for Constitution Day","region":"Vanuatu","date":"2025-10-06"},{"id":"20251129_5a7sdpjp716pjijdap020hjoo8","status":"confirmed","summary":"Unity Day","region":"Vanuatu","date":"2025-11-29"},{"id":"20251225_gh9q2rcu0mrr0h6s2aam5eb8n8","status":"confirmed","summary":"Christmas Day","region":"Vanuatu","date":"2025-12-25"},{"id":"20251226_202jo7jl9gu84dh5i4lvbb81fs","status":"confirmed","summary":"Family Day","region":"Vanuatu","date":"2025-12-26"}],"Wallis & Futuna":[{"id":"20240101_notgh7rr0t4q1lhi8lpgthcjh0","status":"confirmed","summary":"New Year\'s Day","region":"Wallis & Futuna","date":"2024-01-01"},{"id":"20240401_9a1rff78v94fli8e90k9f95skk","status":"confirmed","summary":"Easter Monday","region":"Wallis & Futuna","date":"2024-04-01"},{"id":"20240501_d5kb7clqmsl09aiv3q1mku459g","status":"confirmed","summary":"Labor Day / May Day","region":"Wallis & Futuna","date":"2024-05-01"},{"id":"20240508_hio83lhacubqrf0ut0l7f5k9mk","status":"confirmed","summary":"Victory Day","region":"Wallis & Futuna","date":"2024-05-08"},{"id":"20240509_dch92mpuul4b6jre1k0clfbv1g","status":"confirmed","summary":"Ascension Day","region":"Wallis & Futuna","date":"2024-05-09"},{"id":"20240520_do0kuaggd530vs5d0m0chrp02o","status":"confirmed","summary":"Whit Monday","region":"Wallis & Futuna","date":"2024-05-20"},{"id":"20240714_o7leco67dfvl9al3dlevm8djfk","status":"confirmed","summary":"Bastille Day","region":"Wallis & Futuna","date":"2024-07-14"},{"id":"20240815_rna9gfq846pi77d5d1bu4m2p2o","status":"confirmed","summary":"Assumption of Mary","region":"Wallis & Futuna","date":"2024-08-15"},{"id":"20241101_84u1o6plfn6aeomr9dqors7kgs","status":"confirmed","summary":"All Saints\' Day","region":"Wallis & Futuna","date":"2024-11-01"},{"id":"20241111_9pfuts1hvpk4u9vdpn3bjn1jes","status":"confirmed","summary":"Armistice Day","region":"Wallis & Futuna","date":"2024-11-11"},{"id":"20241225_cbm1vjkici47j4nfjfoienirec","status":"confirmed","summary":"Christmas Day","region":"Wallis & Futuna","date":"2024-12-25"},{"id":"20250101_83270k8ne3sr38mb6u9ikntpr8","status":"confirmed","summary":"New Year\'s Day","region":"Wallis & Futuna","date":"2025-01-01"},{"id":"20250421_e2e78pfjqmbupuq58339f9241s","status":"confirmed","summary":"Easter Monday","region":"Wallis & Futuna","date":"2025-04-21"},{"id":"20250501_8qffeei006dvv6gdjrtutr5md0","status":"confirmed","summary":"Labor Day / May Day","region":"Wallis & Futuna","date":"2025-05-01"},{"id":"20250508_l7cd03eg5ddu7apeo76hal1m40","status":"confirmed","summary":"Victory Day","region":"Wallis & Futuna","date":"2025-05-08"},{"id":"20250529_eq5uleqpo3bmvmshjksjadd0eg","status":"confirmed","summary":"Ascension Day","region":"Wallis & Futuna","date":"2025-05-29"},{"id":"20250609_gfj39phlnlhb5ca8oc3afmq5lg","status":"confirmed","summary":"Whit Monday","region":"Wallis & Futuna","date":"2025-06-09"},{"id":"20250714_bd8eomr6qq93m52t42619jidao","status":"confirmed","summary":"Bastille Day","region":"Wallis & Futuna","date":"2025-07-14"},{"id":"20250815_6tcdc9u95fc1glu42092h81q1o","status":"confirmed","summary":"Assumption of Mary","region":"Wallis & Futuna","date":"2025-08-15"},{"id":"20251101_9hrhorgnr5i644lpnuoa3gkkvk","status":"confirmed","summary":"All Saints\' Day","region":"Wallis & Futuna","date":"2025-11-01"},{"id":"20251111_l01jh8d2em2vtfc9mfeoh8djug","status":"confirmed","summary":"Armistice Day","region":"Wallis & Futuna","date":"2025-11-11"},{"id":"20251225_s7tfgm1ps7ng9voop0c6o4t1rg","status":"confirmed","summary":"Christmas Day","region":"Wallis & Futuna","date":"2025-12-25"}],"Samoa":[{"id":"20240101_8kqfl5dd46c4f2r7emcummtgc8","status":"confirmed","summary":"New Year\'s Day","region":"Samoa","date":"2024-01-01"},{"id":"20240102_s11ve1m6ej2odcl75c24610dj8","status":"confirmed","summary":"Day After New Year\'s Day","region":"Samoa","date":"2024-01-02"},{"id":"20240329_oom1to4lbf57nno2vmkm24qfdo","status":"confirmed","summary":"Good Friday","region":"Samoa","date":"2024-03-29"},{"id":"20240330_etansf4mpoqmpudtjlu4a9k80s","status":"confirmed","summary":"Day After Good Friday","region":"Samoa","date":"2024-03-30"},{"id":"20240401_9b3clree13t15nqibh9e4uvdco","status":"confirmed","summary":"Easter Monday","region":"Samoa","date":"2024-04-01"},{"id":"20240513_8fod0iq1l0hqur9pl8tec9o9a8","status":"confirmed","summary":"Mother\'s Day","region":"Samoa","date":"2024-05-13"},{"id":"20240601_qkp2m0r4fvkg4a1b9sgrn8le40","status":"confirmed","summary":"Independence Day","region":"Samoa","date":"2024-06-01"},{"id":"20240812_nev5r4veb5lepaj8u9jrrukgtg","status":"confirmed","summary":"Father\'s Day","region":"Samoa","date":"2024-08-12"},{"id":"20241014_3ucmaa9g631vh2eme716qu7908","status":"confirmed","summary":"Lotu a Tamaiti","region":"Samoa","date":"2024-10-14"},{"id":"20241225_jbgoniu33tuf1rfo9pk342mn3s","status":"confirmed","summary":"Christmas Day","region":"Samoa","date":"2024-12-25"},{"id":"20241226_a7fv5qfraopq3hmdcs58hcn1q0","status":"confirmed","summary":"Boxing Day","region":"Samoa","date":"2024-12-26"},{"id":"20250101_s76u4hj8c2iun7g1cf52amrfe0","status":"confirmed","summary":"New Year\'s Day","region":"Samoa","date":"2025-01-01"},{"id":"20250102_lpd716t0ku254u21obj1a9j548","status":"confirmed","summary":"Day After New Year\'s Day","region":"Samoa","date":"2025-01-02"},{"id":"20250418_af8v7fsgngklk1cvi80igm4i0g","status":"confirmed","summary":"Good Friday","region":"Samoa","date":"2025-04-18"},{"id":"20250419_io31a51jeisiou00ijbpb8ng0k","status":"confirmed","summary":"Day After Good Friday","region":"Samoa","date":"2025-04-19"},{"id":"20250421_jf9t6aa2fn5o0stic39lkdnqdc","status":"confirmed","summary":"Easter Monday","region":"Samoa","date":"2025-04-21"},{"id":"20250512_6usm66ela8ir14hd38v1t7moa8","status":"confirmed","summary":"Mother\'s Day","region":"Samoa","date":"2025-05-12"},{"id":"20250601_8d6tc41h4pnncej96jcmnuueqs","status":"confirmed","summary":"Independence Day","region":"Samoa","date":"2025-06-01"},{"id":"20250811_etdhe4b3rchv8hlcmaorupqu1k","status":"confirmed","summary":"Father\'s Day","region":"Samoa","date":"2025-08-11"},{"id":"20251013_5rrk3qggfv8uvbqr5mjhh6n1v0","status":"confirmed","summary":"Lotu a Tamaiti","region":"Samoa","date":"2025-10-13"},{"id":"20251225_25gdm1uat530g07p36tlr3qik4","status":"confirmed","summary":"Christmas Day","region":"Samoa","date":"2025-12-25"},{"id":"20251226_tahcado62nvhhi693nbq3bl0so","status":"confirmed","summary":"Boxing Day","region":"Samoa","date":"2025-12-26"}],"Kosovo":[{"id":"20240101_9tv4i94qdrfku27v5mpk6rp8io","status":"confirmed","summary":"New Year\'s Day","region":"Kosovo","date":"2024-01-01"},{"id":"20240102_crprk6ct71falp5gv0e5ft22fc","status":"confirmed","summary":"Second Day of New Year","region":"Kosovo","date":"2024-01-02"},{"id":"20240107_b7csqo67itlpha130ia46b1018","status":"confirmed","summary":"Christmas Day","region":"Kosovo","date":"2024-01-07"},{"id":"20240108_44ub3cmtg338mul7arpkokq398","status":"confirmed","summary":"Day off for Christmas Day","region":"Kosovo","date":"2024-01-08"},{"id":"20240215_04ilv28tbtj8chhg2c3c1mbu3o","status":"confirmed","summary":"Day of Ashakalia","region":"Kosovo","date":"2024-02-15"},{"id":"20240217_f5o38hnsedsg66c33kdjmc1de0","status":"confirmed","summary":"Independence Day of the Republic of Kosovo","region":"Kosovo","date":"2024-02-17"},{"id":"20240219_j1ii461jb9kve883k67hfs6sdk","status":"confirmed","summary":"Day off for Independence Day of the Republic of Kosovo","region":"Kosovo","date":"2024-02-19"},{"id":"20240306_egl5pgipagfnhtfbltjsat2rc8","status":"confirmed","summary":"Day of Memorial and Respect for Veterans","region":"Kosovo","date":"2024-03-06"},{"id":"20240311_m42gshaf0ls28jbbf8oleuust4","status":"confirmed","summary":"Ramadan Start","region":"Kosovo","date":"2024-03-11"},{"id":"20240331_cs4t54pln586d9ateugjt9t7fg","status":"confirmed","summary":"Daylight Saving Time starts","region":"Kosovo","date":"2024-03-31"},{"id":"20240331_iqpjt8vgoorvc7hl8t5j7bthco","status":"confirmed","summary":"Easter","region":"Kosovo","date":"2024-03-31"},{"id":"20240401_j0ferv75u3uds7kv43ntifru6o","status":"confirmed","summary":"Easter Monday","region":"Kosovo","date":"2024-04-01"},{"id":"20240408_arvh2u91mo9ubft3nsn65dhtdk","status":"confirmed","summary":"Day of Romas","region":"Kosovo","date":"2024-04-08"},{"id":"20240409_9ifu656qcsltq7isvu9ml5qfsk","status":"confirmed","summary":"Constitution Day of the Republic of Kosovo","region":"Kosovo","date":"2024-04-09"},{"id":"20240410_jqu6po02j2dsgc2fbhdhtmlhq8","status":"confirmed","summary":"Eid al-Fitr","region":"Kosovo","date":"2024-04-10"},{"id":"20240423_8ggmdt84en7v0pe4bae10e6khk","status":"confirmed","summary":"Day of Turks","region":"Kosovo","date":"2024-04-23"},{"id":"20240501_eeasfc3rg7d8b7iueb9pmussjo","status":"confirmed","summary":"International Labour Day","region":"Kosovo","date":"2024-05-01"},{"id":"20240505_j9oaarohejvp1o97vuf2o6h2tk","status":"confirmed","summary":"Orthodox Easter Day","region":"Kosovo","date":"2024-05-05"},{"id":"20240506_8i3o4kia0d1k3tpui17r6r159k","status":"confirmed","summary":"Orthodox Easter Monday","region":"Kosovo","date":"2024-05-06"},{"id":"20240506_rt3qvrbs0fhhq99u0h456oc1uo","status":"confirmed","summary":"Day of Gorans","region":"Kosovo","date":"2024-05-06"},{"id":"20240509_rqtr1da16vsu7b2g5nkc2rojbc","status":"confirmed","summary":"Europe Day","region":"Kosovo","date":"2024-05-09"},{"id":"20240612_e4o5a4gcivhuivkk430n06l4so","status":"confirmed","summary":"Peace Day","region":"Kosovo","date":"2024-06-12"},{"id":"20240616_fh0s85ql46lbb0ued507e70tlg","status":"confirmed","summary":"Kurban Bayrami","region":"Kosovo","date":"2024-06-16"},{"id":"20240617_93ugtbesg8498i9j9f10lkukmc","status":"confirmed","summary":"Day off for Kurban Bayrami","region":"Kosovo","date":"2024-06-17"},{"id":"20240928_3m389teetsf9tj8t2i1n96j6ug","status":"confirmed","summary":"Day of Bosnians","region":"Kosovo","date":"2024-09-28"},{"id":"20241027_od0ffub12kpt7o2hvpjs85lcig","status":"confirmed","summary":"Daylight Saving Time ends","region":"Kosovo","date":"2024-10-27"},{"id":"20241128_nqvqlrdf649rfagp8m28smdrps","status":"confirmed","summary":"Day of Albanians","region":"Kosovo","date":"2024-11-28"},{"id":"20241225_osl6ohm9clm5fusfh8bdmpgmj0","status":"confirmed","summary":"Christmas Day","region":"Kosovo","date":"2024-12-25"},{"id":"20241231_02d4jdnkvnj6iq7ia0j5j15pok","status":"confirmed","summary":"New Year\'s Eve","region":"Kosovo","date":"2024-12-31"},{"id":"20250101_op784hrk58d34iek1rf4e1i5n4","status":"confirmed","summary":"New Year\'s Day","region":"Kosovo","date":"2025-01-01"},{"id":"20250102_trun7m686k8ajv5ihqmjtutaq8","status":"confirmed","summary":"Second Day of New Year","region":"Kosovo","date":"2025-01-02"},{"id":"20250107_rn47um2v0q6ut48r878m40093s","status":"confirmed","summary":"Christmas Day","region":"Kosovo","date":"2025-01-07"},{"id":"20250215_t97omqvbobnruib5nsalqh9qd8","status":"confirmed","summary":"Day of Ashakalia","region":"Kosovo","date":"2025-02-15"},{"id":"20250217_285477t7pk0qt94k7h4ui6gssk","status":"confirmed","summary":"Independence Day of the Republic of Kosovo","region":"Kosovo","date":"2025-02-17"},{"id":"20250301_nhkt8heqres1trmbqo4qbechp8","status":"confirmed","summary":"Ramadan Start","region":"Kosovo","date":"2025-03-01"},{"id":"20250306_oa6qggu0g7dlofas1apsvnbfs4","status":"confirmed","summary":"Day of Memorial and Respect for Veterans","region":"Kosovo","date":"2025-03-06"},{"id":"20250330_n5td3ooac4kim87i5ejeh64i3o","status":"confirmed","summary":"Daylight Saving Time starts","region":"Kosovo","date":"2025-03-30"},{"id":"20250331_d7fahf22d7s0lpq8n3vfilsmck","status":"confirmed","summary":"Eid al-Fitr","region":"Kosovo","date":"2025-03-31"},{"id":"20250408_pcrc7ah9a6rce62ssv8q5a7c88","status":"confirmed","summary":"Day of Romas","region":"Kosovo","date":"2025-04-08"},{"id":"20250409_8ssodruvvo39fe4ikp3ochs5hk","status":"confirmed","summary":"Constitution Day of the Republic of Kosovo","region":"Kosovo","date":"2025-04-09"},{"id":"20250420_i98v07u8big26gadh1mppldmv4","status":"confirmed","summary":"Orthodox Easter Day","region":"Kosovo","date":"2025-04-20"},{"id":"20250420_vpuo481apomuitim9cqvf82hn8","status":"confirmed","summary":"Easter","region":"Kosovo","date":"2025-04-20"},{"id":"20250421_5pvsi2e10pdau03q74k17h3tp4","status":"confirmed","summary":"Orthodox Easter Monday","region":"Kosovo","date":"2025-04-21"},{"id":"20250421_73dc19jslpektn97o9aee0s6jk","status":"confirmed","summary":"Easter Monday","region":"Kosovo","date":"2025-04-21"},{"id":"20250423_vcfu9smlkmdjf5aippj9bououc","status":"confirmed","summary":"Day of Turks","region":"Kosovo","date":"2025-04-23"},{"id":"20250501_0q33cv2n2tskq776jpupq1mkak","status":"confirmed","summary":"International Labour Day","region":"Kosovo","date":"2025-05-01"},{"id":"20250506_cc41bjfudsafotn054u9jk461c","status":"confirmed","summary":"Day of Gorans","region":"Kosovo","date":"2025-05-06"},{"id":"20250509_34dtnpql5odbmgqo3t888q7b30","status":"confirmed","summary":"Europe Day","region":"Kosovo","date":"2025-05-09"},{"id":"20250607_o8o1cd4ooc3vpa6m0hunn4ks68","status":"confirmed","summary":"Kurban Bayrami","region":"Kosovo","date":"2025-06-07"},{"id":"20250612_vacu3q8i8akop5r83ou86bjksk","status":"confirmed","summary":"Peace Day","region":"Kosovo","date":"2025-06-12"},{"id":"20250928_svi1u01i9vhlgj9nnut6rcmj5s","status":"confirmed","summary":"Day of Bosnians","region":"Kosovo","date":"2025-09-28"},{"id":"20251026_oo3vid1bdaoelic72evbqk6hds","status":"confirmed","summary":"Daylight Saving Time ends","region":"Kosovo","date":"2025-10-26"},{"id":"20251128_ivh8siqr3fcdsvmmqs4k063n6s","status":"confirmed","summary":"Day of Albanians","region":"Kosovo","date":"2025-11-28"},{"id":"20251225_kep8mi6kevkfei3l5fe2m0h3jo","status":"confirmed","summary":"Christmas Day","region":"Kosovo","date":"2025-12-25"},{"id":"20251231_3amfjh98t4qqere1i4i09oqje8","status":"confirmed","summary":"New Year\'s Eve","region":"Kosovo","date":"2025-12-31"}],"Yemen":[{"id":"20240208_em547hhcnmrshb9gj4gjdhghm4","status":"confirmed","summary":"Isra and Mi\'raj","region":"Yemen","date":"2024-02-08"},{"id":"20240311_tcfq5n7ibdupjuu41ps1mcr3f8","status":"confirmed","summary":"Ramadan Start","region":"Yemen","date":"2024-03-11"},{"id":"20240408_33rgtvqunpnbgie97r7p5fr7lg","status":"confirmed","summary":"Eid al-Fitr holiday","region":"Yemen","date":"2024-04-08"},{"id":"20240409_s8fdlikj79gstdhea80obn9110","status":"confirmed","summary":"Eid al-Fitr Eve","region":"Yemen","date":"2024-04-09"},{"id":"20240410_tohap7lb7kpkgsfqkesm4ch3jo","status":"confirmed","summary":"Eid al-Fitr","region":"Yemen","date":"2024-04-10"},{"id":"20240411_1sggvue0r165dpvjhara5l86bs","status":"confirmed","summary":"Eid al-Fitr holiday","region":"Yemen","date":"2024-04-11"},{"id":"20240501_c0lme0a9k6eam7uoe797t23uts","status":"confirmed","summary":"May Day","region":"Yemen","date":"2024-05-01"},{"id":"20240522_2k5tgsfs3b83tura84dm8lghl8","status":"confirmed","summary":"Unity Day","region":"Yemen","date":"2024-05-22"},{"id":"20240616_f9fptd18ka7hp4sp0smtmn9guo","status":"confirmed","summary":"Eid al-Adha Eve","region":"Yemen","date":"2024-06-16"},{"id":"20240617_oi7r6ltdlpirpmdbperla907nc","status":"confirmed","summary":"Eid al-Adha","region":"Yemen","date":"2024-06-17"},{"id":"20240618_fdjve8rf3qd5uk2nufl2jtqmoo","status":"confirmed","summary":"Eid al-Adha holiday","region":"Yemen","date":"2024-06-18"},{"id":"20240619_f4q7rn63mm0uh38rgijr2srf1c","status":"confirmed","summary":"Eid al-Adha holiday","region":"Yemen","date":"2024-06-19"},{"id":"20240620_4h01bnrnkuhmci2fna3ve4ksm4","status":"confirmed","summary":"Eid al-Adha holiday","region":"Yemen","date":"2024-06-20"},{"id":"20240707_nd31gvgmv09512voc5s2l369rk","status":"confirmed","summary":"July 7th Anniversary","region":"Yemen","date":"2024-07-07"},{"id":"20240708_53d3r8uekn5imdi5li1hqttocg","status":"confirmed","summary":"Muharram","region":"Yemen","date":"2024-07-08"},{"id":"20240916_542b8sq0od2063d7910vvcq2q0","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Yemen","date":"2024-09-16"},{"id":"20240926_4cvg44t6ptsdq00ag2vosghui8","status":"confirmed","summary":"Revolution Day","region":"Yemen","date":"2024-09-26"},{"id":"20241014_jbvcgm0s0b9oe34rlg1q1l6ou4","status":"confirmed","summary":"Liberation Day","region":"Yemen","date":"2024-10-14"},{"id":"20241130_us53nascrsechl9ea77tpimm1k","status":"confirmed","summary":"Independence Day","region":"Yemen","date":"2024-11-30"},{"id":"20250127_mhvvav8vkpu0pqae4hppqnbdjo","status":"confirmed","summary":"Isra and Mi\'raj","region":"Yemen","date":"2025-01-27"},{"id":"20250301_grlh640mo0gujakqqgt51gq4k4","status":"confirmed","summary":"Ramadan Start","region":"Yemen","date":"2025-03-01"},{"id":"20250329_mbd49222ob61u2bk8rcdmoqut4","status":"confirmed","summary":"Eid al-Fitr holiday","region":"Yemen","date":"2025-03-29"},{"id":"20250330_1i4oh7e5jk6636u8fnqbiblh68","status":"confirmed","summary":"Eid al-Fitr Eve","region":"Yemen","date":"2025-03-30"},{"id":"20250331_gq1ugvf3mcgl3m3f375h19l5p4","status":"confirmed","summary":"Eid al-Fitr","region":"Yemen","date":"2025-03-31"},{"id":"20250401_6qcvhh2g71nunooop7dtnom9ag","status":"confirmed","summary":"Eid al-Fitr holiday","region":"Yemen","date":"2025-04-01"},{"id":"20250501_h2d13bmvrl81sns8soerehvqig","status":"confirmed","summary":"May Day","region":"Yemen","date":"2025-05-01"},{"id":"20250522_hjioa5s4p1fo7o1sc6mjepqceg","status":"confirmed","summary":"Unity Day","region":"Yemen","date":"2025-05-22"},{"id":"20250606_ukb8smtt3td65qmf0593on3ld4","status":"confirmed","summary":"Eid al-Adha Eve","region":"Yemen","date":"2025-06-06"},{"id":"20250607_nakubb9ll1d3p5b5114cgpghkc","status":"confirmed","summary":"Eid al-Adha","region":"Yemen","date":"2025-06-07"},{"id":"20250608_nq63d3kvp6l1emjfms30hn3ovk","status":"confirmed","summary":"Eid al-Adha holiday","region":"Yemen","date":"2025-06-08"},{"id":"20250609_450fp4cdu0to77jumt7qh5hn8g","status":"confirmed","summary":"Eid al-Adha holiday","region":"Yemen","date":"2025-06-09"},{"id":"20250610_s4r2k0kh95178ov38k3b83raq4","status":"confirmed","summary":"Eid al-Adha holiday","region":"Yemen","date":"2025-06-10"},{"id":"20250627_g379ao61mkft22d7fjag2a3s80","status":"confirmed","summary":"Muharram","region":"Yemen","date":"2025-06-27"},{"id":"20250707_hirv6o7ndop049j3le9nrngp9o","status":"confirmed","summary":"July 7th Anniversary","region":"Yemen","date":"2025-07-07"},{"id":"20250905_rcigm2b18c06oeos4uatiu9c3o","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Yemen","date":"2025-09-05"},{"id":"20250926_fkc9rh1rrsghouhva574j8mkck","status":"confirmed","summary":"Revolution Day","region":"Yemen","date":"2025-09-26"},{"id":"20250928_t0ooobj5ej8gc39fd649t051qg","status":"confirmed","summary":"Day off for Revolution Day","region":"Yemen","date":"2025-09-28"},{"id":"20251014_l4esedhlvd52o8kbhspte23jq8","status":"confirmed","summary":"Liberation Day","region":"Yemen","date":"2025-10-14"},{"id":"20251130_fq2v4nfimidqv1pfhvhalca564","status":"confirmed","summary":"Independence Day","region":"Yemen","date":"2025-11-30"}],"Mayotte":[{"id":"20240101_4itucborj3v9ncpbtb4c4ckbc8","status":"confirmed","summary":"New Year\'s Day","region":"Mayotte","date":"2024-01-01"},{"id":"20240208_agvg32so05vi6ktugndef64q08","status":"confirmed","summary":"Mi\'raj","region":"Mayotte","date":"2024-02-08"},{"id":"20240311_1p1ha9gc6an8u8tc3t1ar6h684","status":"confirmed","summary":"Ramadan Start","region":"Mayotte","date":"2024-03-11"},{"id":"20240401_3661308hvaflesq9dlb6jum7k8","status":"confirmed","summary":"Easter Monday","region":"Mayotte","date":"2024-04-01"},{"id":"20240411_mp4o8jrnisnbbb57r2vsh81a60","status":"confirmed","summary":"Eid al-Fitr","region":"Mayotte","date":"2024-04-11"},{"id":"20240427_q6nfcamabdq04b7i4gi10jum64","status":"confirmed","summary":"Abolition Day","region":"Mayotte","date":"2024-04-27"},{"id":"20240501_pm5hqmq0qajudha7bvbkvv53ng","status":"confirmed","summary":"Labour Day","region":"Mayotte","date":"2024-05-01"},{"id":"20240508_prqgqccgn6fv7f46pncu3r0qic","status":"confirmed","summary":"Victory Day","region":"Mayotte","date":"2024-05-08"},{"id":"20240509_4cbm0uh9gnn6up0mhmgekl9uso","status":"confirmed","summary":"Ascension Day","region":"Mayotte","date":"2024-05-09"},{"id":"20240519_oo8rg79t22rf4s13tsi2h9hm80","status":"confirmed","summary":"Whit Sunday","region":"Mayotte","date":"2024-05-19"},{"id":"20240520_2gr9qn3vok8rjkfhkkh2h7cafo","status":"confirmed","summary":"Whit Monday","region":"Mayotte","date":"2024-05-20"},{"id":"20240617_6hj8trr4tqqqe61dflrl7c6e1s","status":"confirmed","summary":"Eid al-Adha","region":"Mayotte","date":"2024-06-17"},{"id":"20240714_neihnqm9987c9ml3aq6r6de5n4","status":"confirmed","summary":"French National Day","region":"Mayotte","date":"2024-07-14"},{"id":"20240815_66r00rev4eu832ldfif92k65lg","status":"confirmed","summary":"Assumption of Mary","region":"Mayotte","date":"2024-08-15"},{"id":"20240916_9mtfilgudqp69dh5emmulsjrvk","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Mayotte","date":"2024-09-16"},{"id":"20241101_vm01hp1triip2sl344864m1his","status":"confirmed","summary":"All Saints\' Day","region":"Mayotte","date":"2024-11-01"},{"id":"20241111_1qu1d8f6k53c165p6orphm87eo","status":"confirmed","summary":"Armistice Day","region":"Mayotte","date":"2024-11-11"},{"id":"20241225_5sa6cpckof9dnoh2tk8v317a0o","status":"confirmed","summary":"Christmas Day","region":"Mayotte","date":"2024-12-25"},{"id":"20250101_or6vj8am1rbmkucrjp7i3smtr4","status":"confirmed","summary":"New Year\'s Day","region":"Mayotte","date":"2025-01-01"},{"id":"20250127_3ecamo6k6ghhaolst495a45gdk","status":"confirmed","summary":"Mi\'raj","region":"Mayotte","date":"2025-01-27"},{"id":"20250301_6etbunug7jn26hlerq81agp8m0","status":"confirmed","summary":"Ramadan Start","region":"Mayotte","date":"2025-03-01"},{"id":"20250331_uq0qptkif6tkjjoe4ifjtpk3rs","status":"confirmed","summary":"Eid al-Fitr","region":"Mayotte","date":"2025-03-31"},{"id":"20250421_ndop92otra3hss665pp6kif0eo","status":"confirmed","summary":"Easter Monday","region":"Mayotte","date":"2025-04-21"},{"id":"20250427_pbucb6o64tapn40dfh78qthld4","status":"confirmed","summary":"Abolition Day","region":"Mayotte","date":"2025-04-27"},{"id":"20250501_0dc678gugk4l53osaoiu5v6o0c","status":"confirmed","summary":"Labour Day","region":"Mayotte","date":"2025-05-01"},{"id":"20250508_1ui8s9aa9ps0iceco5i31ld7a8","status":"confirmed","summary":"Victory Day","region":"Mayotte","date":"2025-05-08"},{"id":"20250529_fn5kd00907e6q8es519cl6cjk8","status":"confirmed","summary":"Ascension Day","region":"Mayotte","date":"2025-05-29"},{"id":"20250607_phrg5l7l80e0805uv65elvsej0","status":"confirmed","summary":"Eid al-Adha","region":"Mayotte","date":"2025-06-07"},{"id":"20250608_fqkuiapt0b7cgolp624f39an4o","status":"confirmed","summary":"Whit Sunday","region":"Mayotte","date":"2025-06-08"},{"id":"20250609_lpt1rmafham91dplqhb43i2ms0","status":"confirmed","summary":"Whit Monday","region":"Mayotte","date":"2025-06-09"},{"id":"20250714_emdn12mfjlrr3gt7eq4pkblgas","status":"confirmed","summary":"French National Day","region":"Mayotte","date":"2025-07-14"},{"id":"20250815_jp6u08vjkq7levgchpp5bhsio4","status":"confirmed","summary":"Assumption of Mary","region":"Mayotte","date":"2025-08-15"},{"id":"20250905_tirqigck29g03329stc1lmj3ss","status":"confirmed","summary":"The Prophet\'s Birthday","region":"Mayotte","date":"2025-09-05"},{"id":"20251101_2kehn1a2ice6k85e4in6oj428g","status":"confirmed","summary":"All Saints\' Day","region":"Mayotte","date":"2025-11-01"},{"id":"20251111_rqkobs878l77940jbnc2p01abk","status":"confirmed","summary":"Armistice Day","region":"Mayotte","date":"2025-11-11"},{"id":"20251225_g1parve383eancf464ivupq7ao","status":"confirmed","summary":"Christmas Day","region":"Mayotte","date":"2025-12-25"}],"Zambia":[{"id":"20240101_apfggd7kvh0en9sb65ugeqnn74","status":"confirmed","summary":"New Year","region":"Zambia","date":"2024-01-01"},{"id":"20240308_4pf4rbuujjntbllnfsmekbhcck","status":"confirmed","summary":"International Women\'s Day","region":"Zambia","date":"2024-03-08"},{"id":"20240312_atb75vcgedtel1nm05lhft70vc","status":"confirmed","summary":"Youth Day","region":"Zambia","date":"2024-03-12"},{"id":"20240329_gvvirnq4a2gbeb7ip8qmokv1i0","status":"confirmed","summary":"Good Friday","region":"Zambia","date":"2024-03-29"},{"id":"20240330_lgtv6ug58eoi76ita4ma7psjk8","status":"confirmed","summary":"Holy Saturday","region":"Zambia","date":"2024-03-30"},{"id":"20240331_ab5kkh5fokp8pdad8go08vdk20","status":"confirmed","summary":"Easter Sunday","region":"Zambia","date":"2024-03-31"},{"id":"20240401_ugvrftde8kp6jkla0iev2bo3vo","status":"confirmed","summary":"Easter Monday","region":"Zambia","date":"2024-04-01"},{"id":"20240428_kb7vdjqea2n36omu84lhq83jps","status":"confirmed","summary":"Kenneth Kaunda Day","region":"Zambia","date":"2024-04-28"},{"id":"20240429_iq9t9qc95fn3796gj28rltl640","status":"confirmed","summary":"Day off for Kenneth Kaunda Day","region":"Zambia","date":"2024-04-29"},{"id":"20240501_bl0n1tomd1fq9jopslpk014fdo","status":"confirmed","summary":"Labour Day","region":"Zambia","date":"2024-05-01"},{"id":"20240512_b0ie61n2a32je97h3saq77b9dk","status":"confirmed","summary":"Mother\'s Day","region":"Zambia","date":"2024-05-12"},{"id":"20240525_um0oidc55a38ahond9bt7svsbo","status":"confirmed","summary":"Africa Freedom Day","region":"Zambia","date":"2024-05-25"},{"id":"20240616_ihbthhasq9tpj8fu565paa4vjg","status":"confirmed","summary":"Father\'s Day","region":"Zambia","date":"2024-06-16"},{"id":"20240701_cbllm5aduuldsgg3pc61kf9c2k","status":"confirmed","summary":"Heroes\' Day","region":"Zambia","date":"2024-07-01"},{"id":"20240702_41n78qaa86pn7hgi5saa12j4sk","status":"confirmed","summary":"Unity Day","region":"Zambia","date":"2024-07-02"},{"id":"20240805_50kv3mmvnh5mkg76as1id5p77k","status":"confirmed","summary":"Farmers\' Day","region":"Zambia","date":"2024-08-05"},{"id":"20241018_bisif4peeb1umuclcc4c4c50kg","status":"confirmed","summary":"Prayer Day","region":"Zambia","date":"2024-10-18"},{"id":"20241024_ckq6jp4egr9emgq840c0p91em0","status":"confirmed","summary":"Independence Day","region":"Zambia","date":"2024-10-24"},{"id":"20241225_9ejh3tokbpok79bvanbvk2hnl0","status":"confirmed","summary":"Christmas Day","region":"Zambia","date":"2024-12-25"},{"id":"20250101_5h2hprm1hvg944qa8ciofmhq9c","status":"confirmed","summary":"New Year","region":"Zambia","date":"2025-01-01"},{"id":"20250308_8jbfn9iekfjuuttb4vj2ibsfkc","status":"confirmed","summary":"International Women\'s Day","region":"Zambia","date":"2025-03-08"},{"id":"20250312_6vae53kkpn2dsnileg63vbud1k","status":"confirmed","summary":"Youth Day","region":"Zambia","date":"2025-03-12"},{"id":"20250418_rf0rd54g5e0h2r99i780b6elkc","status":"confirmed","summary":"Good Friday","region":"Zambia","date":"2025-04-18"},{"id":"20250419_j7n5aj2hpq5o3lr6icdbjg0e1s","status":"confirmed","summary":"Holy Saturday","region":"Zambia","date":"2025-04-19"},{"id":"20250420_9rahip6dfehm549dcogp3f07oc","status":"confirmed","summary":"Easter Sunday","region":"Zambia","date":"2025-04-20"},{"id":"20250421_4gc0iep2okqe2tg9osm1gtemd8","status":"confirmed","summary":"Easter Monday","region":"Zambia","date":"2025-04-21"},{"id":"20250428_7s8i3bs4ee064sju9hebe83ta0","status":"confirmed","summary":"Kenneth Kaunda Day","region":"Zambia","date":"2025-04-28"},{"id":"20250501_9rchrn6k6e1hjjiqgli0oc3lto","status":"confirmed","summary":"Labour Day","region":"Zambia","date":"2025-05-01"},{"id":"20250511_4v1p475vm4nojin34rrkfpm4h0","status":"confirmed","summary":"Mother\'s Day","region":"Zambia","date":"2025-05-11"},{"id":"20250525_sn9ercjd6tbpje185r789gi1d0","status":"confirmed","summary":"Africa Freedom Day","region":"Zambia","date":"2025-05-25"},{"id":"20250526_0m9s4d9v3qegbs8dp10n79cc2o","status":"confirmed","summary":"Day off for Africa Freedom Day","region":"Zambia","date":"2025-05-26"},{"id":"20250615_dhfaj1iehm21trvtnhfhsk9hrc","status":"confirmed","summary":"Father\'s Day","region":"Zambia","date":"2025-06-15"},{"id":"20250707_18rlh2bcljjitr37vlm0664ruo","status":"confirmed","summary":"Heroes\' Day","region":"Zambia","date":"2025-07-07"},{"id":"20250708_kk23b68l4de7ont613kdfro6l0","status":"confirmed","summary":"Unity Day","region":"Zambia","date":"2025-07-08"},{"id":"20250804_jm77jus736d0ih4elhhul6mtrk","status":"confirmed","summary":"Farmers\' Day","region":"Zambia","date":"2025-08-04"},{"id":"20251018_grfat95ud1jaovl3n29jhdobt8","status":"confirmed","summary":"Prayer Day","region":"Zambia","date":"2025-10-18"},{"id":"20251024_kcj5rggt316pejc75ebfqc66us","status":"confirmed","summary":"Independence Day","region":"Zambia","date":"2025-10-24"},{"id":"20251225_g6lc1v4uadtt6j2thbmal5hvmg","status":"confirmed","summary":"Christmas Day","region":"Zambia","date":"2025-12-25"}],"Zimbabwe":[{"id":"20240101_7shdb579mhgt5tpqdibeu8us68","status":"confirmed","summary":"New Year","region":"Zimbabwe","date":"2024-01-01"},{"id":"20240221_4ahm4d8a6qj638uak480ld3c7o","status":"confirmed","summary":"Robert Gabriel Mugabe National Youth Day","region":"Zimbabwe","date":"2024-02-21"},{"id":"20240329_8v038gh1fc32oaju0tivg9r0a8","status":"confirmed","summary":"Good Friday","region":"Zimbabwe","date":"2024-03-29"},{"id":"20240330_10t3tmve2pk4afsb26m95a71ck","status":"confirmed","summary":"Holy Saturday","region":"Zimbabwe","date":"2024-03-30"},{"id":"20240401_5t3h3al93rcsm52uc3nb51iv2k","status":"confirmed","summary":"Easter Monday","region":"Zimbabwe","date":"2024-04-01"},{"id":"20240418_07gsfl0fl9pbco11mgoln51sto","status":"confirmed","summary":"Independence Day","region":"Zimbabwe","date":"2024-04-18"},{"id":"20240501_7k579esdg0h4va8a39rvl9kt74","status":"confirmed","summary":"Workers\' Day","region":"Zimbabwe","date":"2024-05-01"},{"id":"20240512_2r1su81b87m4t1tmpvuqjel9dk","status":"confirmed","summary":"Mother\'s Day","region":"Zimbabwe","date":"2024-05-12"},{"id":"20240525_gl1451vl818ipehga4qunprsps","status":"confirmed","summary":"Africa Day","region":"Zimbabwe","date":"2024-05-25"},{"id":"20240616_m8ko5h3l8906j8c4to0j71797g","status":"confirmed","summary":"Father\'s Day","region":"Zimbabwe","date":"2024-06-16"},{"id":"20240812_6rot76enosbu43kua7usmvaivk","status":"confirmed","summary":"Heroes\' Day","region":"Zimbabwe","date":"2024-08-12"},{"id":"20240813_5751pkuplkcto37m3m1qjma4a0","status":"confirmed","summary":"Defence Forces Day","region":"Zimbabwe","date":"2024-08-13"},{"id":"20241222_nj85jldcipadgaqaocc9nr731s","status":"confirmed","summary":"Unity Day","region":"Zimbabwe","date":"2024-12-22"},{"id":"20241223_p34sv8fkv1b9npi47gsnaaqbdo","status":"confirmed","summary":"Day off for Unity Day","region":"Zimbabwe","date":"2024-12-23"},{"id":"20241225_t7hcdfe7h6nev62cjah5pbraqc","status":"confirmed","summary":"Christmas Day","region":"Zimbabwe","date":"2024-12-25"},{"id":"20241226_d48582hm791t42u17rhbng1hp4","status":"confirmed","summary":"Boxing Day","region":"Zimbabwe","date":"2024-12-26"},{"id":"20250101_fred1lesup2qm0qn1t0dk5r0eo","status":"confirmed","summary":"New Year","region":"Zimbabwe","date":"2025-01-01"},{"id":"20250221_8qvpk1dkf4je7ddl6372lk2dl0","status":"confirmed","summary":"Robert Gabriel Mugabe National Youth Day","region":"Zimbabwe","date":"2025-02-21"},{"id":"20250418_ldqjh0blsv6mt8bqskpeofff7o","status":"confirmed","summary":"Good Friday","region":"Zimbabwe","date":"2025-04-18"},{"id":"20250418_mkac52u5kig393r9l6gm12sd98","status":"confirmed","summary":"Independence Day","region":"Zimbabwe","date":"2025-04-18"},{"id":"20250419_rmh7kqe9i6j0hirvh3ph8sdneo","status":"confirmed","summary":"Holy Saturday","region":"Zimbabwe","date":"2025-04-19"},{"id":"20250421_lki5o1ulrnkb36rqjgehp9b0q4","status":"confirmed","summary":"Easter Monday","region":"Zimbabwe","date":"2025-04-21"},{"id":"20250501_kcsvd1u0aeos2qletpgtbhqov0","status":"confirmed","summary":"Workers\' Day","region":"Zimbabwe","date":"2025-05-01"},{"id":"20250511_f8rk77cnv7ttd4p1fgfvbugndk","status":"confirmed","summary":"Mother\'s Day","region":"Zimbabwe","date":"2025-05-11"},{"id":"20250525_a4a0lgo0mu5h6u34nrpuk09c28","status":"confirmed","summary":"Africa Day","region":"Zimbabwe","date":"2025-05-25"},{"id":"20250526_k2vk1bp03hjsdrg63mkmlh7s60","status":"confirmed","summary":"Africa Day observed","region":"Zimbabwe","date":"2025-05-26"},{"id":"20250615_31jpjdo84vli0qrtal4gg31ooo","status":"confirmed","summary":"Father\'s Day","region":"Zimbabwe","date":"2025-06-15"},{"id":"20250811_5mhlab91139uq50ir5jttians8","status":"confirmed","summary":"Heroes\' Day","region":"Zimbabwe","date":"2025-08-11"},{"id":"20250812_uar7m8vvabk05r4h3io902nua0","status":"confirmed","summary":"Defence Forces Day","region":"Zimbabwe","date":"2025-08-12"},{"id":"20251222_rsmvl7kn9jh36a26vbvkaaje4s","status":"confirmed","summary":"Unity Day","region":"Zimbabwe","date":"2025-12-22"},{"id":"20251225_klhcr8okv4ptn98io31iac4050","status":"confirmed","summary":"Christmas Day","region":"Zimbabwe","date":"2025-12-25"},{"id":"20251226_15kfo2g509rdmjkvj9d9j00ku4","status":"confirmed","summary":"Boxing Day","region":"Zimbabwe","date":"2025-12-26"}]}');
;// CONCATENATED MODULE: ./src/inputs.ts



class Inputs {
    constructor() {
        this.token = (0,core.getInput)("token", { required: true });
        this.timezone = timeZone();
        this.after = hours("after", this.timezone);
        this.before = hours("before", this.timezone);
        const [days, dates] = prohibitedDaysDates(this.timezone);
        this.prohibitedDays = days;
        this.prohibitedDates = dates;
        this.noBlockLabel = stringOr((0,core.getInput)("no-block-label"), "no-block");
        this.commitStatusContext = stringOr((0,core.getInput)("commit-status-context"), "block-merge-based-on-time");
        this.commitStatusDescriptionWithSuccess = stringOr((0,core.getInput)("commit-status-description-with-success"), "The PR could be merged");
        this.commitStatusDescriptionWhileBlocking = stringOr((0,core.getInput)("commit-status-description-while-blocking"), "The PR can't be merged based on time, which is due to your organization's policy");
        // NOTE: If the string is empty, we're not sure where we should refer to. So, `||` is appropriate here instead of `??`.
        this.commitStatusURL = (0,core.getInput)("commit-status-url") || null;
        this.rawBaseBranches = (0,core.getInput)("base-branches")
            .split(/,\s*/)
            .filter((v) => v !== "");
    }
    baseBranches(defaultBranch) {
        return this.rawBaseBranches.map((v) => {
            if (v === "(default)") {
                return new RegExp(`^${escapeRegExpCharacters(defaultBranch)}$`);
            }
            else if (v.startsWith("/") && v.endsWith("/")) {
                return new RegExp(v.replace(/^\/(.*)\/$/, "$1"));
            }
            return new RegExp(`^${escapeRegExpCharacters(v)}$`);
        });
    }
}
function timeZone() {
    const d = DateTime.now().setZone((0,core.getInput)("timezone"));
    if (d.invalidExplanation != null) {
        throw new Error(d.invalidExplanation);
    }
    return d.zone;
}
function dateTime(format, s, zone) {
    const d = DateTime.fromFormat(s, format, { zone, setZone: true });
    if (d.invalidExplanation != null) {
        throw new Error(d.invalidExplanation);
    }
    return d;
}
function interval(s, zone) {
    let ret;
    if (s.split("/", 2).length === 2) {
        ret = Interval.fromISO(s, { zone });
        if (ret.end != null) {
            ret = ret.set({ end: ret.end.endOf("day") });
        }
    }
    else {
        const start = dateTime("yyyy-MM-dd", s, zone);
        ret = Interval.fromDateTimes(start, start.endOf("day"));
    }
    if (ret.invalidExplanation != null) {
        throw new Error(ret.invalidExplanation);
    }
    return ret;
}
function hours(key, zone) {
    const input = (0,core.getInput)(key);
    const baseRegExp = /^\d\d:\d\d$/;
    const daysRegExp = /^(?<hour>\d\d:\d\d) on (?<day>Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday)$/;
    const result = input.split(/,\s*/).reduce((result, str) => {
        if (baseRegExp.test(str)) {
            return Object.assign(Object.assign({}, result), { base: dateTime("hh:mm", str, zone) });
        }
        else {
            const match = str.match(daysRegExp);
            if (match != null && match.groups != null && match.groups["day"] != null && match.groups["hour"] != null) {
                const day = match.groups["day"];
                const hour = match.groups["hour"];
                return Object.assign(Object.assign({}, result), { [day]: dateTime("hh:mm", hour, zone) });
            }
            else {
                throw new Error(`Invalid "${key}" was given. The example format is "16:30 on Monday"`);
            }
        }
    }, { base: dateTime("hh:mm", "00:00", zone) });
    return result;
}
function holidayEntries(region) {
    const validRegion = (r) => r in holidays_namespaceObject;
    if (validRegion(region)) {
        return holidays_namespaceObject[region];
    }
    throw new Error(`Unsupported region is given: "${region}"`);
}
function prohibitedDaysDates(zone) {
    const days = [];
    const dates = [];
    (0,core.getInput)("prohibited-days-dates")
        .split(/,\s*/)
        .forEach((s) => {
        switch (s) {
            case "Sunday":
            case "Monday":
            case "Tuesday":
            case "Wednesday":
            case "Thursday":
            case "Friday":
            case "Saturday": {
                days.push(s);
                break;
            }
            case "":
                break; // If the input is empty string, split array will have one empty string in it.
            default: {
                if (s.startsWith("H:")) {
                    const [_prefix, region] = s.split("H:", 2);
                    if (region != null) {
                        holidayEntries(region).forEach((entry) => {
                            dates.push(interval(entry.date, zone));
                        });
                    }
                }
                else if (s.startsWith("BH:")) {
                    const [_prefix, region] = s.split("BH:", 2);
                    if (region != null) {
                        holidayEntries(region).forEach((entry) => {
                            let d = DateTime.fromISO(entry.date);
                            d = d.set({ day: d.day - 1 });
                            // NOTE: `toISODate()` should return string, but the following PR introduced `| IfInvalid<null>`
                            //       for the function, and we cannot succeed type-checking without `!`.
                            //
                            //       https://github.com/DefinitelyTyped/DefinitelyTyped/pull/64995
                            //
                            dates.push(interval(d.toISODate(), zone));
                        });
                    }
                }
                else {
                    dates.push(interval(s, zone));
                }
                break;
            }
        }
    });
    return [days, dates];
}
/**
 *
 * return the passed string as is but an alternative when the passed string is empty.
 *
 * @param {string} str
 * @param {string} alt
 */
function stringOr(str, alt) {
    return str || alt;
}
// NOTE: I followed this guide.
//       https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping
function escapeRegExpCharacters(s) {
    return s.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}

;// CONCATENATED MODULE: ./src/should-block.ts


function shouldBlock(inputs) {
    core.debug(`Start shouldBlock()`);
    const now = DateTime.now().setZone(inputs.timezone);
    if (isProhibitedDay(now, inputs.prohibitedDays, inputs.prohibitedDates)) {
        core.debug(`shouldBlock() decided to return "true" because ${now} is within prohibited days`);
        return true;
    }
    else if (isDuringTime(now, inputs.after, inputs.before)) {
        core.debug(`shouldBlock() decided to return "true" because ${now} is during prohibited hours`);
        return true;
    }
    core.debug(`shouldBlock() decided to return "false"`);
    return false;
}
function isProhibitedDay(now, days, dates) {
    if (now.weekdayLong && days.includes(now.weekdayLong)) {
        return true;
    }
    else if (dates.some((d) => d.contains(now))) {
        return true;
    }
    return false;
}
function isDuringTime(now, after, before) {
    const a = hour(now, after);
    const b = hour(now, before);
    if (a.diff(b).toMillis() === 0) {
        // NOTE: The same time between `before` and `after` means the user who configured like this
        //       does not have an interest in blocking based on time. They might just want to prohibit based on holidays.
        return false;
    }
    else if (a.diff(b).toMillis() > 0) {
        return now.diff(a).toMillis() >= 0 || now.diff(b).toMillis() <= 0;
    }
    else {
        return now.diff(a).toMillis() >= 0 && now.diff(b).toMillis() <= 0;
    }
}
function hour(now, hours) {
    var _a, _b, _c, _d, _e, _f, _g;
    switch (now.weekdayLong) {
        case "Sunday":
            return (_a = hours.Sunday) !== null && _a !== void 0 ? _a : hours.base;
        case "Monday":
            return (_b = hours.Monday) !== null && _b !== void 0 ? _b : hours.base;
        case "Tuesday":
            return (_c = hours.Tuesday) !== null && _c !== void 0 ? _c : hours.base;
        case "Wednesday":
            return (_d = hours.Wednesday) !== null && _d !== void 0 ? _d : hours.base;
        case "Thursday":
            return (_e = hours.Thursday) !== null && _e !== void 0 ? _e : hours.base;
        case "Friday":
            return (_f = hours.Friday) !== null && _f !== void 0 ? _f : hours.base;
        case "Saturday":
            return (_g = hours.Saturday) !== null && _g !== void 0 ? _g : hours.base;
        default:
            throw new Error(`Unsupported weekday: "${now.weekdayLong}"`);
    }
}

;// CONCATENATED MODULE: ./src/github.ts
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

function createCommitStatus(octokit, pullRequestStatus, inputs, state) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b;
        const currentState = (_a = pullRequestStatus.state) === null || _a === void 0 ? void 0 : _a.toLowerCase();
        core.debug(`Start createCommitStatus(), updating the state of "${pullRequestStatus.sha}" from "${currentState}" to "${state}"`);
        if (currentState === state) {
            return;
        }
        const { owner, repo, sha } = pullRequestStatus;
        const targetUrl = (_b = inputs.commitStatusURL) !== null && _b !== void 0 ? _b : undefined;
        const context = inputs.commitStatusContext;
        let description;
        switch (state) {
            case "success": {
                description = inputs.commitStatusDescriptionWithSuccess;
                break;
            }
            case "pending": {
                description = inputs.commitStatusDescriptionWhileBlocking;
                break;
            }
        }
        yield octokit.rest.repos.createCommitStatus({
            owner,
            repo,
            sha,
            state,
            context,
            description,
            target_url: targetUrl,
        });
    });
}
function defaultBranch(octokit, owner, repo) {
    return __awaiter(this, void 0, void 0, function* () {
        core.debug(`Start defaultBranch() to get the default branch of ${owner}/${repo}`);
        const result = yield octokit.graphql(`
query($owner: String!, $repo: String!) {
  repository(owner: $owner, name: $repo) {
    defaultBranchRef {
      name
    }
  }
}`, { owner, repo });
        return result.repository.defaultBranchRef.name;
    });
}
function pull(octokit, owner, repo, contextName, pullNumber) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b;
        core.debug(`Start pull() to get the pull request of ${owner}/${repo}#${pullNumber}`);
        const result = yield octokit.graphql(`
query($owner: String!, $repo: String!, $contextName: String!, $pullNumber: Int!) {
  repository(owner: $owner, name: $repo) {
    defaultBranchRef {
      name
    }
    pullRequest(number: $pullNumber) {
      number
      title
      baseRefName
      labels(first: 100) {
        edges {
          node {
            name
          }
        }
      }
      commits(last: 1) {
        edges {
          node {
            commit {
              oid
              message
              status {
                context(name: $contextName) {
                  state
                }
              }
            }
          }
        }
      }
    }
  }
}`, { owner, repo, contextName, pullNumber });
        core.debug(`pull() got the pull request: #${result.repository.pullRequest.number} ${result.repository.pullRequest.title}`);
        const commit = result.repository.pullRequest.commits.edges[0];
        if (commit == null) {
            throw new Error("commit should be present");
        }
        const pull = {
            owner,
            repo,
            number: pullNumber,
            baseBranch: result.repository.pullRequest.baseRefName,
            sha: commit.node.commit.oid,
            labels: result.repository.pullRequest.labels.edges.map(({ node: { name } }) => name),
            state: (_b = (_a = commit.node.commit.status) === null || _a === void 0 ? void 0 : _a.context) === null || _b === void 0 ? void 0 : _b.state,
        };
        return {
            defaultBranch: result.repository.defaultBranchRef.name,
            pull,
        };
    });
}
function pulls(octokit, owner, repo, contextName) {
    return __awaiter(this, void 0, void 0, function* () {
        core.debug(`Start pulls() to get the pull requests of ${owner}/${repo}`);
        let after = null;
        let hasNextPage = true;
        let statuses = [];
        while (hasNextPage) {
            const result = yield octokit.graphql(`
query($owner: String!, $repo: String!, $contextName: String!, $after: String) {
  repository(owner: $owner, name: $repo) {
    defaultBranchRef {
      name
    }
    pullRequests(after: $after, first: 100, states: OPEN, orderBy: { field: CREATED_AT, direction: DESC}) {
      pageInfo {
        hasNextPage
        endCursor
      }
      edges {
        node {
          number
          title
          baseRefName
          labels(first: 100) {
            edges {
              node {
                name
              }
            }
          }
          commits(last: 1) {
            edges {
              node {
                commit {
                  oid
                  message
                  status {
                    context(name: $contextName) {
                      state
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}`, { owner, repo, contextName, after });
            hasNextPage = result.repository.pullRequests.pageInfo.hasNextPage;
            after = result.repository.pullRequests.pageInfo.endCursor;
            const data = result.repository.pullRequests.edges.flatMap(({ node: pr }) => {
                core.debug(`pulls() got the pull request: #${pr.number} ${pr.title}`);
                return pr.commits.edges.map(({ node: commit }) => {
                    var _a, _b;
                    return ({
                        owner,
                        repo,
                        number: pr.number,
                        baseBranch: pr.baseRefName,
                        sha: commit.commit.oid,
                        labels: pr.labels.edges.map((l) => l.node.name),
                        state: (_b = (_a = commit.commit.status) === null || _a === void 0 ? void 0 : _a.context) === null || _b === void 0 ? void 0 : _b.state,
                    });
                });
            });
            statuses = [...statuses, ...data];
        }
        return statuses;
    });
}

;// CONCATENATED MODULE: ./src/run.ts
var run_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





function run() {
    return run_awaiter(this, void 0, void 0, function* () {
        const inputs = new Inputs();
        core.debug(`We got the event ${github.context.eventName}.`);
        switch (github.context.eventName) {
            case "schedule":
            case "workflow_dispatch":
                return handleAllPulls(inputs);
            case "pull_request":
                return handlePull(inputs);
            default:
                core.warning(`This action does not support the event "${github.context.eventName}"`);
        }
    });
}
function handleAllPulls(inputs) {
    return run_awaiter(this, void 0, void 0, function* () {
        const octokit = (0,github.getOctokit)(inputs.token);
        const { owner, repo } = github.context.repo;
        const branch = yield defaultBranch(octokit, owner, repo);
        const results = yield pulls(octokit, owner, repo, inputs.commitStatusContext);
        const isShouldBlock = shouldBlock(inputs);
        const errorPulls = [];
        for (const pull of results) {
            // TODO: shouldBlock() should decide which labels and base branches should be treated as "no block."
            const state = inputs.baseBranches(branch).some((b) => b.test(pull.baseBranch)) &&
                isShouldBlock &&
                !pull.labels.includes(inputs.noBlockLabel)
                ? "pending"
                : "success";
            core.debug(`We decided to make the state "${state}" for "#${pull.number}"`);
            try {
                yield createCommitStatus(octokit, pull, inputs, state);
            }
            catch (error) {
                core.error(`#${pull.number}'s head commit is too old to get updated with the commit status context "${inputs.commitStatusContext}". See the details: ${error}`);
                errorPulls.push(pull);
            }
        }
        if (errorPulls.length > 0) {
            throw new Error(`Some pull requests failed to get updated with the commit status context "${inputs.commitStatusContext}".
The failed pull requests are:

${errorPulls.map((pull) => `- #${pull.number}`).join("\n")}

You can resolve the problems with these actions: updating the pull requests with new commits, or closing them.`);
        }
    });
}
function handlePull(inputs) {
    return run_awaiter(this, void 0, void 0, function* () {
        var _a;
        const octokit = (0,github.getOctokit)(inputs.token);
        const { owner, repo } = github.context.repo;
        const number = (_a = github.context.payload.pull_request) === null || _a === void 0 ? void 0 : _a.number;
        if (number == null) {
            throw new Error(`handlePull can only be used for a pull request event`);
        }
        const result = yield pull(octokit, owner, repo, inputs.commitStatusContext, number);
        // TODO: shouldBlock() should decide which labels and base branches should be treated as "no block."
        const state = inputs.baseBranches(result.defaultBranch).some((b) => b.test(result.pull.baseBranch)) &&
            shouldBlock(inputs) &&
            !result.pull.labels.includes(inputs.noBlockLabel)
            ? "pending"
            : "success";
        core.debug(`We decided to make the state "${state}"`);
        core.setOutput("pr-blocked", state === "success" ? "false" : "true");
        return createCommitStatus(octokit, result.pull, inputs, state);
    });
}

;// CONCATENATED MODULE: ./src/main.ts


process.on("unhandledRejection", handleError);
run().catch(handleError);
function handleError(err) {
    (0,core.setFailed)(`Unhandled error: ${err}`);
}

})();

module.exports = __webpack_exports__;
/******/ })()
;